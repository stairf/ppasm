/*
 * PPASM -- The Preprocessor-Based Assembler
 * Copyright (C) 2022 Stefan Reif
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#if (I_PLEDGE_THAT_THE_LIFE_OR_WELLBEING_OF_NO_HUMAN_AND_NO_ANIMAL_DEPENDS_ON_THE_CORRECTNESS_OF_THIS_PROGRAM)
#	ifndef ppasm$included
#		define ah reg08(AH)
#		define al reg08(AL)
#		define asm(...) ppasm(__VA_ARGS__)
#		define asmfunc(name, ...) __attribute__((section(".text.ppasm"))) const unsigned char name[] = { ppasm(__VA_ARGS__) };
#		define assert(...) assert$1(__VA_ARGS__, #__VA_ARGS__, )
#		define assert$1(...) assert$2(__VA_ARGS__)
#		define assert$2(c, m, ...) assert$3(pragma$ifnot$cond##c, m)
#		define assert$3(...) assert$4(__VA_ARGS__)
#		define assert$4(p, m) p(GCC error m)
#		define assert$is$al(reg) error$if(byte$isnonzero(byte$fromhex(regencode(reg))), "8-bit register must be al")
#		define assert$is$ax(reg) error$if(byte$isnonzero(byte$fromhex(regencode(reg))), "16-bit register must be ax")
#		define assert$is$cl(reg) error$if(byte$neq(0,0,0,0,0,0,0,1,byte$fromhex(regencode(reg))), "8-bit register must be cl")
#		define assert$is$dx(reg) error$if(byte$neq(0,0,0,0,0,0,1,0,byte$fromhex(regencode(reg))), "16-bit register must be dx")
#		define assert$is$eax(reg) error$if(byte$isnonzero(byte$fromhex(regencode(reg))), "32-bit register must be eax")
#		define assert$is$edx(reg) error$if(byte$neq(0,0,0,0,0,0,1,0,byte$fromhex(regencode(reg))), "32-bit register must be edx")
#		define assert$is$rax(reg) error$if(byte$isnonzero(byte$fromhex(regencode(reg))), "64-bit register must be rax")
#		define assert$is$st0(reg) error$if(byte$isnonzero(byte$fromhex(regencode(reg))), "floating-point register must be st0")
#		define assert$is$xmm0(reg) error$if(byte$isnonzero(byte$fromhex(regencode(reg))), "128-bit vector register must be xmm0")
#		define assert$one$is$st0(r0,r1) error$if(bit$and(byte$neq(0,0,0,0,0,0,0,0,byte$fromhex(regencode(r0))),byte$neq(0,0,0,0,0,0,0,0,byte$fromhex(regencode(r1)))), "one floating-point register must be st0")
#		define at(...) at$1(count(__VA_ARGS__), __VA_ARGS__, )
#		define at$1(...) at$2(__VA_ARGS__)
#		define at$2(n, ...) meminfo$length##n(meminfo$init, __VA_ARGS__)
#		define at08(...) at(bits(08), __VA_ARGS__)
#		define at128(...) at(bits(128), __VA_ARGS__)
#		define at16(...) at(bits(16), __VA_ARGS__)
#		define at256(...) at(bits(256), __VA_ARGS__)
#		define at32(...) at(bits(32), __VA_ARGS__)
#		define at64(...) at(bits(64), __VA_ARGS__)
#		define ax reg16(AX)
#		define bh reg08(BH)
#		define bit$adc(...) bit$adc$1(__VA_ARGS__)
#		define bit$adc$1(...) bit$adc$2(__VA_ARGS__)
#		define bit$adc$2(b0, b1, b2) bit$adc$with$##b0##b1##b2
#		define bit$adc$with$000 0
#		define bit$adc$with$001 0
#		define bit$adc$with$010 0
#		define bit$adc$with$011 1
#		define bit$adc$with$100 0
#		define bit$adc$with$101 1
#		define bit$adc$with$110 1
#		define bit$adc$with$111 1
#		define bit$add(...) bit$add$1(__VA_ARGS__)
#		define bit$add$1(...) bit$add$2(__VA_ARGS__)
#		define bit$add$2(b0, b1, b2) bit$add$with$##b0##b1##b2
#		define bit$add$with$000 0
#		define bit$add$with$001 1
#		define bit$add$with$010 1
#		define bit$add$with$011 0
#		define bit$add$with$100 1
#		define bit$add$with$101 0
#		define bit$add$with$110 0
#		define bit$add$with$111 1
#		define bit$all1(...) bit$all1$1(__VA_ARGS__)
#		define bit$all1$1(...) bit$all1$2(__VA_ARGS__)
#		define bit$all1$2(b0) b0
#		define bit$all2(...) bit$all2$1(__VA_ARGS__)
#		define bit$all2$00 0
#		define bit$all2$01 0
#		define bit$all2$1(...) bit$all2$2(__VA_ARGS__)
#		define bit$all2$10 0
#		define bit$all2$11 1
#		define bit$all2$2(...) bit$all2$3(__VA_ARGS__)
#		define bit$all2$3(b1,b0) bit$all2$##b1##b0
#		define bit$all3(...) bit$all3$1(__VA_ARGS__)
#		define bit$all3$1(...) bit$all3$2(__VA_ARGS__)
#		define bit$all3$2(b,...) bit$all3$with##b(__VA_ARGS__)
#		define bit$all3$with0(...) 0
#		define bit$all3$with1(...) bit$all2$2(__VA_ARGS__)
#		define bit$all4(...) bit$all4$1(__VA_ARGS__)
#		define bit$all4$1(...) bit$all4$2(__VA_ARGS__)
#		define bit$all4$2(b,...) bit$all4$with##b(__VA_ARGS__)
#		define bit$all4$with0(...) 0
#		define bit$all4$with1(...) bit$all3$2(__VA_ARGS__)
#		define bit$all5(...) bit$all5$1(__VA_ARGS__)
#		define bit$all5$1(...) bit$all5$2(__VA_ARGS__)
#		define bit$all5$2(b,...) bit$all5$with##b(__VA_ARGS__)
#		define bit$all5$with0(...) 0
#		define bit$all5$with1(...) bit$all4$2(__VA_ARGS__)
#		define bit$all6(...) bit$all6$1(__VA_ARGS__)
#		define bit$all6$1(...) bit$all6$2(__VA_ARGS__)
#		define bit$all6$2(b,...) bit$all6$with##b(__VA_ARGS__)
#		define bit$all6$with0(...) 0
#		define bit$all6$with1(...) bit$all5$2(__VA_ARGS__)
#		define bit$all7(...) bit$all7$1(__VA_ARGS__)
#		define bit$all7$1(...) bit$all7$2(__VA_ARGS__)
#		define bit$all7$2(b,...) bit$all7$with##b(__VA_ARGS__)
#		define bit$all7$with0(...) 0
#		define bit$all7$with1(...) bit$all6$2(__VA_ARGS__)
#		define bit$all8(...) bit$all8$1(__VA_ARGS__)
#		define bit$all8$1(...) bit$all8$2(__VA_ARGS__)
#		define bit$all8$2(b,...) bit$all8$with##b(__VA_ARGS__)
#		define bit$all8$with0(...) 0
#		define bit$all8$with1(...) bit$all7$2(__VA_ARGS__)
#		define bit$and(...) bit$and$1(__VA_ARGS__)
#		define bit$and$1(...) bit$and$2(__VA_ARGS__)
#		define bit$and$2(b1, b2) bit$and$with$##b1##b2
#		define bit$and$with$00 0
#		define bit$and$with$01 0
#		define bit$and$with$10 0
#		define bit$and$with$11 1
#		define bit$any1(...) bit$any1$1(__VA_ARGS__)
#		define bit$any1$1(...) bit$any1$2(__VA_ARGS__)
#		define bit$any1$2(b0) b0
#		define bit$any2(...) bit$any2$1(__VA_ARGS__)
#		define bit$any2$00 0
#		define bit$any2$01 1
#		define bit$any2$1(...) bit$any2$2(__VA_ARGS__)
#		define bit$any2$10 1
#		define bit$any2$11 1
#		define bit$any2$2(b1,b0) bit$any2$##b1##b0
#		define bit$any3(...) bit$any3$1(__VA_ARGS__)
#		define bit$any3$1(...) bit$any3$2(__VA_ARGS__)
#		define bit$any3$2(b,...) bit$any3$with##b(__VA_ARGS__)
#		define bit$any3$with0(...) bit$any2$2(__VA_ARGS__)
#		define bit$any3$with1(...) 1
#		define bit$any4(...) bit$any4$1(__VA_ARGS__)
#		define bit$any4$1(...) bit$any4$2(__VA_ARGS__)
#		define bit$any4$2(b,...) bit$any4$with##b(__VA_ARGS__)
#		define bit$any4$with0(...) bit$any3$2(__VA_ARGS__)
#		define bit$any4$with1(...) 1
#		define bit$any5(...) bit$any5$1(__VA_ARGS__)
#		define bit$any5$1(...) bit$any5$2(__VA_ARGS__)
#		define bit$any5$2(b,...) bit$any5$with##b(__VA_ARGS__)
#		define bit$any5$with0(...) bit$any4$2(__VA_ARGS__)
#		define bit$any5$with1(...) 1
#		define bit$any6(...) bit$any6$1(__VA_ARGS__)
#		define bit$any6$1(...) bit$any6$2(__VA_ARGS__)
#		define bit$any6$2(b,...) bit$any6$with##b(__VA_ARGS__)
#		define bit$any6$with0(...) bit$any5$2(__VA_ARGS__)
#		define bit$any6$with1(...) 1
#		define bit$any7(...) bit$any7$1(__VA_ARGS__)
#		define bit$any7$1(...) bit$any7$2(__VA_ARGS__)
#		define bit$any7$2(b,...) bit$any7$with##b(__VA_ARGS__)
#		define bit$any7$with0(...) bit$any6$2(__VA_ARGS__)
#		define bit$any7$with1(...) 1
#		define bit$any8(...) bit$any8$1(__VA_ARGS__)
#		define bit$any8$1(...) bit$any8$2(__VA_ARGS__)
#		define bit$any8$2(b,...) bit$any8$with##b(__VA_ARGS__)
#		define bit$any8$with0(...) bit$any7$2(__VA_ARGS__)
#		define bit$any8$with1(...) 1
#		define bit$eq(...) bit$eq$1(__VA_ARGS__)
#		define bit$eq$1(...) bit$eq$2(__VA_ARGS__)
#		define bit$eq$2(b1, b2) bit$eq$with$##b1##b2
#		define bit$eq$with$00 1
#		define bit$eq$with$01 0
#		define bit$eq$with$10 0
#		define bit$eq$with$11 1
#		define bit$not(...) bit$not$1(__VA_ARGS__)
#		define bit$not$1(...) bit$not$2(__VA_ARGS__)
#		define bit$not$2(b1) bit$not$with$##b1
#		define bit$not$with$0 1
#		define bit$not$with$1 0
#		define bit$or(...) bit$or$1(__VA_ARGS__)
#		define bit$or$1(...) bit$or$2(__VA_ARGS__)
#		define bit$or$2(b1, b2) bit$or$with$##b1##b2
#		define bit$or$with$00 0
#		define bit$or$with$01 1
#		define bit$or$with$10 1
#		define bit$or$with$11 1
#		define bit$xor(...) bit$xor$1(__VA_ARGS__)
#		define bit$xor$1(...) bit$xor$2(__VA_ARGS__)
#		define bit$xor$2(b1, b2) bit$xor$with$##b1##b2
#		define bit$xor$with$00 0
#		define bit$xor$with$01 1
#		define bit$xor$with$10 1
#		define bit$xor$with$11 0
#		define bits(...) bits$1(__VA_ARGS__)
#		define bits$1(...) bits$2(__VA_ARGS__)
#		define bits$2(n) bits$width$##n
#		define bits$width$08 operandbytes(01)
#		define bits$width$128 operandbytes(10)
#		define bits$width$16 operandbytes(02)
#		define bits$width$256 operandbytes(20)
#		define bits$width$32 operandbytes(04)
#		define bits$width$512 operandbytes(40)
#		define bits$width$64 operandbytes(08)
#		define bits$width$8 operandbytes(01)
#		define bits$width$80 operandbytes(0a)
#		define bl reg08(BL)
#		define bp reg16(BP)
#		define bpl reg08(BPL)
#		define bx reg16(BX)
#		define byte(...) rawbyte(imm08(__VA_ARGS__))
#		define byte$add(...) byte$add$1(__VA_ARGS__)
#		define byte$add$1(...) byte$add$2(__VA_ARGS__)
#		define byte$add$2(ci, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0) byte$add$off0$0(ci, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0)
#		define byte$add$getcarry(...) byte$add$getcarry$1(__VA_ARGS__)
#		define byte$add$getcarry$1(...) byte$add$getcarry$2(__VA_ARGS__)
#		define byte$add$getcarry$2(c,o, ...) c
#		define byte$add$getoverflow(...) byte$add$getoverflow$1(__VA_ARGS__)
#		define byte$add$getoverflow$1(...) byte$add$getoverflow$2(__VA_ARGS__)
#		define byte$add$getoverflow$2(c,o, ...) o
#		define byte$add$off0$0(...) byte$add$off0$1(__VA_ARGS__)
#		define byte$add$off0$1(...) byte$add$off0$2(__VA_ARGS__)
#		define byte$add$off0$2(c,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0) byte$add$off1$0(bit$adc(B0b0, B1b0, c),B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1), bit$add(B0b0, B1b0, c)
#		define byte$add$off1$0(...) byte$add$off1$1(__VA_ARGS__)
#		define byte$add$off1$1(...) byte$add$off1$2(__VA_ARGS__)
#		define byte$add$off1$2(c,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1) byte$add$off2$0(bit$adc(B0b1, B1b1, c),B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2), bit$add(B0b1, B1b1, c)
#		define byte$add$off2$0(...) byte$add$off2$1(__VA_ARGS__)
#		define byte$add$off2$1(...) byte$add$off2$2(__VA_ARGS__)
#		define byte$add$off2$2(c,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2) byte$add$off3$0(bit$adc(B0b2, B1b2, c),B0b7, B0b6, B0b5, B0b4, B0b3, B1b7, B1b6, B1b5, B1b4, B1b3), bit$add(B0b2, B1b2, c)
#		define byte$add$off3$0(...) byte$add$off3$1(__VA_ARGS__)
#		define byte$add$off3$1(...) byte$add$off3$2(__VA_ARGS__)
#		define byte$add$off3$2(c,B0b7, B0b6, B0b5, B0b4, B0b3, B1b7, B1b6, B1b5, B1b4, B1b3) byte$add$off4$0(bit$adc(B0b3, B1b3, c),B0b7, B0b6, B0b5, B0b4, B1b7, B1b6, B1b5, B1b4), bit$add(B0b3, B1b3, c)
#		define byte$add$off4$0(...) byte$add$off4$1(__VA_ARGS__)
#		define byte$add$off4$1(...) byte$add$off4$2(__VA_ARGS__)
#		define byte$add$off4$2(c,B0b7, B0b6, B0b5, B0b4, B1b7, B1b6, B1b5, B1b4) byte$add$off5$0(bit$adc(B0b4, B1b4, c),B0b7, B0b6, B0b5, B1b7, B1b6, B1b5), bit$add(B0b4, B1b4, c)
#		define byte$add$off5$0(...) byte$add$off5$1(__VA_ARGS__)
#		define byte$add$off5$1(...) byte$add$off5$2(__VA_ARGS__)
#		define byte$add$off5$2(c,B0b7, B0b6, B0b5, B1b7, B1b6, B1b5) byte$add$off6$0(bit$adc(B0b5, B1b5, c),B0b7, B0b6, B1b7, B1b6), bit$add(B0b5, B1b5, c)
#		define byte$add$off6$0(...) byte$add$off6$1(__VA_ARGS__)
#		define byte$add$off6$1(...) byte$add$off6$2(__VA_ARGS__)
#		define byte$add$off6$2(c,B0b7, B0b6, B1b7, B1b6) byte$add$off7$0(bit$adc(B0b6, B1b6, c),B0b7, B1b7), bit$add(B0b6, B1b6, c)
#		define byte$add$off7$0(...) byte$add$off7$1(__VA_ARGS__)
#		define byte$add$off7$1(...) byte$add$off7$2(__VA_ARGS__)
#		define byte$add$off7$2(c,B0b7, B1b7) byte$add$off8$0(bit$adc(B0b7, B1b7, c),), bit$add(B0b7, B1b7, c)
#		define byte$add$off8$0(c,...) c
#		define byte$add$removeflags(...) byte$add$removeflags$1(__VA_ARGS__)
#		define byte$add$removeflags$1(...) byte$add$removeflags$2(__VA_ARGS__)
#		define byte$add$removeflags$2(c,o, ...) __VA_ARGS__
#		define byte$addo(...) byte$addo$1(__VA_ARGS__)
#		define byte$addo$1(...) byte$addo$2(__VA_ARGS__)
#		define byte$addo$2(ci, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0) byte$addo$off0$0(ci, 0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0)
#		define byte$addo$off0$0(...) byte$addo$off0$1(__VA_ARGS__)
#		define byte$addo$off0$1(...) byte$addo$off0$2(__VA_ARGS__)
#		define byte$addo$off0$2(c, o,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0) byte$addo$off1$0(bit$adc(B0b0, B1b0, c),c,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1), bit$add(B0b0, B1b0, c)
#		define byte$addo$off1$0(...) byte$addo$off1$1(__VA_ARGS__)
#		define byte$addo$off1$1(...) byte$addo$off1$2(__VA_ARGS__)
#		define byte$addo$off1$2(c, o,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1) byte$addo$off2$0(bit$adc(B0b1, B1b1, c),c,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2), bit$add(B0b1, B1b1, c)
#		define byte$addo$off2$0(...) byte$addo$off2$1(__VA_ARGS__)
#		define byte$addo$off2$1(...) byte$addo$off2$2(__VA_ARGS__)
#		define byte$addo$off2$2(c, o,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2) byte$addo$off3$0(bit$adc(B0b2, B1b2, c),c,B0b7, B0b6, B0b5, B0b4, B0b3, B1b7, B1b6, B1b5, B1b4, B1b3), bit$add(B0b2, B1b2, c)
#		define byte$addo$off3$0(...) byte$addo$off3$1(__VA_ARGS__)
#		define byte$addo$off3$1(...) byte$addo$off3$2(__VA_ARGS__)
#		define byte$addo$off3$2(c, o,B0b7, B0b6, B0b5, B0b4, B0b3, B1b7, B1b6, B1b5, B1b4, B1b3) byte$addo$off4$0(bit$adc(B0b3, B1b3, c),c,B0b7, B0b6, B0b5, B0b4, B1b7, B1b6, B1b5, B1b4), bit$add(B0b3, B1b3, c)
#		define byte$addo$off4$0(...) byte$addo$off4$1(__VA_ARGS__)
#		define byte$addo$off4$1(...) byte$addo$off4$2(__VA_ARGS__)
#		define byte$addo$off4$2(c, o,B0b7, B0b6, B0b5, B0b4, B1b7, B1b6, B1b5, B1b4) byte$addo$off5$0(bit$adc(B0b4, B1b4, c),c,B0b7, B0b6, B0b5, B1b7, B1b6, B1b5), bit$add(B0b4, B1b4, c)
#		define byte$addo$off5$0(...) byte$addo$off5$1(__VA_ARGS__)
#		define byte$addo$off5$1(...) byte$addo$off5$2(__VA_ARGS__)
#		define byte$addo$off5$2(c, o,B0b7, B0b6, B0b5, B1b7, B1b6, B1b5) byte$addo$off6$0(bit$adc(B0b5, B1b5, c),c,B0b7, B0b6, B1b7, B1b6), bit$add(B0b5, B1b5, c)
#		define byte$addo$off6$0(...) byte$addo$off6$1(__VA_ARGS__)
#		define byte$addo$off6$1(...) byte$addo$off6$2(__VA_ARGS__)
#		define byte$addo$off6$2(c, o,B0b7, B0b6, B1b7, B1b6) byte$addo$off7$0(bit$adc(B0b6, B1b6, c),c,B0b7, B1b7), bit$add(B0b6, B1b6, c)
#		define byte$addo$off7$0(...) byte$addo$off7$1(__VA_ARGS__)
#		define byte$addo$off7$1(...) byte$addo$off7$2(__VA_ARGS__)
#		define byte$addo$off7$2(c, o,B0b7, B1b7) byte$addo$off8$0(bit$adc(B0b7, B1b7, c),c,), bit$add(B0b7, B1b7, c)
#		define byte$addo$off8$0(c,c2,...) c, bit$xor(c,c2)
#		define byte$addwithflags(...) byte$add$1(__VA_ARGS__)
#		define byte$addwithoutflags(...) byte$add$removeflags(byte$add$1(__VA_ARGS__))
#		define byte$all(...) byte$all$1(__VA_ARGS__)
#		define byte$all$1(...) byte$all$2(__VA_ARGS__)
#		define byte$all$2(...) bit$all8(__VA_ARGS__)
#		define byte$and(...) byte$and$1(__VA_ARGS__)
#		define byte$and$1(...) byte$and$2(__VA_ARGS__)
#		define byte$and$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0) bit$and(B0b7, B1b7), bit$and(B0b6, B1b6), bit$and(B0b5, B1b5), bit$and(B0b4, B1b4), bit$and(B0b3, B1b3), bit$and(B0b2, B1b2), bit$and(B0b1, B1b1), bit$and(B0b0, B1b0)
#		define byte$any(...) byte$any$1(__VA_ARGS__)
#		define byte$any$1(...) byte$any$2(__VA_ARGS__)
#		define byte$any$2(...) bit$any8(__VA_ARGS__)
#		define byte$as$0xff(b) 0x##b
#		define byte$as$0xffu(b) 0x##b##u
#		define byte$as$ff(b) b
#		define byte$eq(...) byte$iszero(byte$xor(__VA_ARGS__))
#		define byte$fromhex(...) byte$fromhex$1(__VA_ARGS__)
#		define byte$fromhex$1(...) byte$fromhex$2(__VA_ARGS__)
#		define byte$fromhex$2(...) byte$fromhex$3(__VA_ARGS__)
#		define byte$fromhex$3(hex) byte$fromhex$value$##hex
#		define byte$fromhex$value$0 0,0,0,0,0,0,0,0
#		define byte$fromhex$value$00 0,0,0,0,0,0,0,0
#		define byte$fromhex$value$01 0,0,0,0,0,0,0,1
#		define byte$fromhex$value$02 0,0,0,0,0,0,1,0
#		define byte$fromhex$value$03 0,0,0,0,0,0,1,1
#		define byte$fromhex$value$04 0,0,0,0,0,1,0,0
#		define byte$fromhex$value$05 0,0,0,0,0,1,0,1
#		define byte$fromhex$value$06 0,0,0,0,0,1,1,0
#		define byte$fromhex$value$07 0,0,0,0,0,1,1,1
#		define byte$fromhex$value$08 0,0,0,0,1,0,0,0
#		define byte$fromhex$value$09 0,0,0,0,1,0,0,1
#		define byte$fromhex$value$0a 0,0,0,0,1,0,1,0
#		define byte$fromhex$value$0b 0,0,0,0,1,0,1,1
#		define byte$fromhex$value$0c 0,0,0,0,1,1,0,0
#		define byte$fromhex$value$0d 0,0,0,0,1,1,0,1
#		define byte$fromhex$value$0e 0,0,0,0,1,1,1,0
#		define byte$fromhex$value$0f 0,0,0,0,1,1,1,1
#		define byte$fromhex$value$1 0,0,0,0,0,0,0,1
#		define byte$fromhex$value$10 0,0,0,1,0,0,0,0
#		define byte$fromhex$value$11 0,0,0,1,0,0,0,1
#		define byte$fromhex$value$12 0,0,0,1,0,0,1,0
#		define byte$fromhex$value$13 0,0,0,1,0,0,1,1
#		define byte$fromhex$value$14 0,0,0,1,0,1,0,0
#		define byte$fromhex$value$15 0,0,0,1,0,1,0,1
#		define byte$fromhex$value$16 0,0,0,1,0,1,1,0
#		define byte$fromhex$value$17 0,0,0,1,0,1,1,1
#		define byte$fromhex$value$18 0,0,0,1,1,0,0,0
#		define byte$fromhex$value$19 0,0,0,1,1,0,0,1
#		define byte$fromhex$value$1a 0,0,0,1,1,0,1,0
#		define byte$fromhex$value$1b 0,0,0,1,1,0,1,1
#		define byte$fromhex$value$1c 0,0,0,1,1,1,0,0
#		define byte$fromhex$value$1d 0,0,0,1,1,1,0,1
#		define byte$fromhex$value$1e 0,0,0,1,1,1,1,0
#		define byte$fromhex$value$1f 0,0,0,1,1,1,1,1
#		define byte$fromhex$value$2 0,0,0,0,0,0,1,0
#		define byte$fromhex$value$20 0,0,1,0,0,0,0,0
#		define byte$fromhex$value$21 0,0,1,0,0,0,0,1
#		define byte$fromhex$value$22 0,0,1,0,0,0,1,0
#		define byte$fromhex$value$23 0,0,1,0,0,0,1,1
#		define byte$fromhex$value$24 0,0,1,0,0,1,0,0
#		define byte$fromhex$value$25 0,0,1,0,0,1,0,1
#		define byte$fromhex$value$26 0,0,1,0,0,1,1,0
#		define byte$fromhex$value$27 0,0,1,0,0,1,1,1
#		define byte$fromhex$value$28 0,0,1,0,1,0,0,0
#		define byte$fromhex$value$29 0,0,1,0,1,0,0,1
#		define byte$fromhex$value$2a 0,0,1,0,1,0,1,0
#		define byte$fromhex$value$2b 0,0,1,0,1,0,1,1
#		define byte$fromhex$value$2c 0,0,1,0,1,1,0,0
#		define byte$fromhex$value$2d 0,0,1,0,1,1,0,1
#		define byte$fromhex$value$2e 0,0,1,0,1,1,1,0
#		define byte$fromhex$value$2f 0,0,1,0,1,1,1,1
#		define byte$fromhex$value$3 0,0,0,0,0,0,1,1
#		define byte$fromhex$value$30 0,0,1,1,0,0,0,0
#		define byte$fromhex$value$31 0,0,1,1,0,0,0,1
#		define byte$fromhex$value$32 0,0,1,1,0,0,1,0
#		define byte$fromhex$value$33 0,0,1,1,0,0,1,1
#		define byte$fromhex$value$34 0,0,1,1,0,1,0,0
#		define byte$fromhex$value$35 0,0,1,1,0,1,0,1
#		define byte$fromhex$value$36 0,0,1,1,0,1,1,0
#		define byte$fromhex$value$37 0,0,1,1,0,1,1,1
#		define byte$fromhex$value$38 0,0,1,1,1,0,0,0
#		define byte$fromhex$value$39 0,0,1,1,1,0,0,1
#		define byte$fromhex$value$3a 0,0,1,1,1,0,1,0
#		define byte$fromhex$value$3b 0,0,1,1,1,0,1,1
#		define byte$fromhex$value$3c 0,0,1,1,1,1,0,0
#		define byte$fromhex$value$3d 0,0,1,1,1,1,0,1
#		define byte$fromhex$value$3e 0,0,1,1,1,1,1,0
#		define byte$fromhex$value$3f 0,0,1,1,1,1,1,1
#		define byte$fromhex$value$4 0,0,0,0,0,1,0,0
#		define byte$fromhex$value$40 0,1,0,0,0,0,0,0
#		define byte$fromhex$value$41 0,1,0,0,0,0,0,1
#		define byte$fromhex$value$42 0,1,0,0,0,0,1,0
#		define byte$fromhex$value$43 0,1,0,0,0,0,1,1
#		define byte$fromhex$value$44 0,1,0,0,0,1,0,0
#		define byte$fromhex$value$45 0,1,0,0,0,1,0,1
#		define byte$fromhex$value$46 0,1,0,0,0,1,1,0
#		define byte$fromhex$value$47 0,1,0,0,0,1,1,1
#		define byte$fromhex$value$48 0,1,0,0,1,0,0,0
#		define byte$fromhex$value$49 0,1,0,0,1,0,0,1
#		define byte$fromhex$value$4a 0,1,0,0,1,0,1,0
#		define byte$fromhex$value$4b 0,1,0,0,1,0,1,1
#		define byte$fromhex$value$4c 0,1,0,0,1,1,0,0
#		define byte$fromhex$value$4d 0,1,0,0,1,1,0,1
#		define byte$fromhex$value$4e 0,1,0,0,1,1,1,0
#		define byte$fromhex$value$4f 0,1,0,0,1,1,1,1
#		define byte$fromhex$value$5 0,0,0,0,0,1,0,1
#		define byte$fromhex$value$50 0,1,0,1,0,0,0,0
#		define byte$fromhex$value$51 0,1,0,1,0,0,0,1
#		define byte$fromhex$value$52 0,1,0,1,0,0,1,0
#		define byte$fromhex$value$53 0,1,0,1,0,0,1,1
#		define byte$fromhex$value$54 0,1,0,1,0,1,0,0
#		define byte$fromhex$value$55 0,1,0,1,0,1,0,1
#		define byte$fromhex$value$56 0,1,0,1,0,1,1,0
#		define byte$fromhex$value$57 0,1,0,1,0,1,1,1
#		define byte$fromhex$value$58 0,1,0,1,1,0,0,0
#		define byte$fromhex$value$59 0,1,0,1,1,0,0,1
#		define byte$fromhex$value$5a 0,1,0,1,1,0,1,0
#		define byte$fromhex$value$5b 0,1,0,1,1,0,1,1
#		define byte$fromhex$value$5c 0,1,0,1,1,1,0,0
#		define byte$fromhex$value$5d 0,1,0,1,1,1,0,1
#		define byte$fromhex$value$5e 0,1,0,1,1,1,1,0
#		define byte$fromhex$value$5f 0,1,0,1,1,1,1,1
#		define byte$fromhex$value$6 0,0,0,0,0,1,1,0
#		define byte$fromhex$value$60 0,1,1,0,0,0,0,0
#		define byte$fromhex$value$61 0,1,1,0,0,0,0,1
#		define byte$fromhex$value$62 0,1,1,0,0,0,1,0
#		define byte$fromhex$value$63 0,1,1,0,0,0,1,1
#		define byte$fromhex$value$64 0,1,1,0,0,1,0,0
#		define byte$fromhex$value$65 0,1,1,0,0,1,0,1
#		define byte$fromhex$value$66 0,1,1,0,0,1,1,0
#		define byte$fromhex$value$67 0,1,1,0,0,1,1,1
#		define byte$fromhex$value$68 0,1,1,0,1,0,0,0
#		define byte$fromhex$value$69 0,1,1,0,1,0,0,1
#		define byte$fromhex$value$6a 0,1,1,0,1,0,1,0
#		define byte$fromhex$value$6b 0,1,1,0,1,0,1,1
#		define byte$fromhex$value$6c 0,1,1,0,1,1,0,0
#		define byte$fromhex$value$6d 0,1,1,0,1,1,0,1
#		define byte$fromhex$value$6e 0,1,1,0,1,1,1,0
#		define byte$fromhex$value$6f 0,1,1,0,1,1,1,1
#		define byte$fromhex$value$7 0,0,0,0,0,1,1,1
#		define byte$fromhex$value$70 0,1,1,1,0,0,0,0
#		define byte$fromhex$value$71 0,1,1,1,0,0,0,1
#		define byte$fromhex$value$72 0,1,1,1,0,0,1,0
#		define byte$fromhex$value$73 0,1,1,1,0,0,1,1
#		define byte$fromhex$value$74 0,1,1,1,0,1,0,0
#		define byte$fromhex$value$75 0,1,1,1,0,1,0,1
#		define byte$fromhex$value$76 0,1,1,1,0,1,1,0
#		define byte$fromhex$value$77 0,1,1,1,0,1,1,1
#		define byte$fromhex$value$78 0,1,1,1,1,0,0,0
#		define byte$fromhex$value$79 0,1,1,1,1,0,0,1
#		define byte$fromhex$value$7a 0,1,1,1,1,0,1,0
#		define byte$fromhex$value$7b 0,1,1,1,1,0,1,1
#		define byte$fromhex$value$7c 0,1,1,1,1,1,0,0
#		define byte$fromhex$value$7d 0,1,1,1,1,1,0,1
#		define byte$fromhex$value$7e 0,1,1,1,1,1,1,0
#		define byte$fromhex$value$7f 0,1,1,1,1,1,1,1
#		define byte$fromhex$value$8 0,0,0,0,1,0,0,0
#		define byte$fromhex$value$80 1,0,0,0,0,0,0,0
#		define byte$fromhex$value$81 1,0,0,0,0,0,0,1
#		define byte$fromhex$value$82 1,0,0,0,0,0,1,0
#		define byte$fromhex$value$83 1,0,0,0,0,0,1,1
#		define byte$fromhex$value$84 1,0,0,0,0,1,0,0
#		define byte$fromhex$value$85 1,0,0,0,0,1,0,1
#		define byte$fromhex$value$86 1,0,0,0,0,1,1,0
#		define byte$fromhex$value$87 1,0,0,0,0,1,1,1
#		define byte$fromhex$value$88 1,0,0,0,1,0,0,0
#		define byte$fromhex$value$89 1,0,0,0,1,0,0,1
#		define byte$fromhex$value$8a 1,0,0,0,1,0,1,0
#		define byte$fromhex$value$8b 1,0,0,0,1,0,1,1
#		define byte$fromhex$value$8c 1,0,0,0,1,1,0,0
#		define byte$fromhex$value$8d 1,0,0,0,1,1,0,1
#		define byte$fromhex$value$8e 1,0,0,0,1,1,1,0
#		define byte$fromhex$value$8f 1,0,0,0,1,1,1,1
#		define byte$fromhex$value$9 0,0,0,0,1,0,0,1
#		define byte$fromhex$value$90 1,0,0,1,0,0,0,0
#		define byte$fromhex$value$91 1,0,0,1,0,0,0,1
#		define byte$fromhex$value$92 1,0,0,1,0,0,1,0
#		define byte$fromhex$value$93 1,0,0,1,0,0,1,1
#		define byte$fromhex$value$94 1,0,0,1,0,1,0,0
#		define byte$fromhex$value$95 1,0,0,1,0,1,0,1
#		define byte$fromhex$value$96 1,0,0,1,0,1,1,0
#		define byte$fromhex$value$97 1,0,0,1,0,1,1,1
#		define byte$fromhex$value$98 1,0,0,1,1,0,0,0
#		define byte$fromhex$value$99 1,0,0,1,1,0,0,1
#		define byte$fromhex$value$9a 1,0,0,1,1,0,1,0
#		define byte$fromhex$value$9b 1,0,0,1,1,0,1,1
#		define byte$fromhex$value$9c 1,0,0,1,1,1,0,0
#		define byte$fromhex$value$9d 1,0,0,1,1,1,0,1
#		define byte$fromhex$value$9e 1,0,0,1,1,1,1,0
#		define byte$fromhex$value$9f 1,0,0,1,1,1,1,1
#		define byte$fromhex$value$a 0,0,0,0,1,0,1,0
#		define byte$fromhex$value$a0 1,0,1,0,0,0,0,0
#		define byte$fromhex$value$a1 1,0,1,0,0,0,0,1
#		define byte$fromhex$value$a2 1,0,1,0,0,0,1,0
#		define byte$fromhex$value$a3 1,0,1,0,0,0,1,1
#		define byte$fromhex$value$a4 1,0,1,0,0,1,0,0
#		define byte$fromhex$value$a5 1,0,1,0,0,1,0,1
#		define byte$fromhex$value$a6 1,0,1,0,0,1,1,0
#		define byte$fromhex$value$a7 1,0,1,0,0,1,1,1
#		define byte$fromhex$value$a8 1,0,1,0,1,0,0,0
#		define byte$fromhex$value$a9 1,0,1,0,1,0,0,1
#		define byte$fromhex$value$aa 1,0,1,0,1,0,1,0
#		define byte$fromhex$value$ab 1,0,1,0,1,0,1,1
#		define byte$fromhex$value$ac 1,0,1,0,1,1,0,0
#		define byte$fromhex$value$ad 1,0,1,0,1,1,0,1
#		define byte$fromhex$value$ae 1,0,1,0,1,1,1,0
#		define byte$fromhex$value$af 1,0,1,0,1,1,1,1
#		define byte$fromhex$value$b 0,0,0,0,1,0,1,1
#		define byte$fromhex$value$b0 1,0,1,1,0,0,0,0
#		define byte$fromhex$value$b1 1,0,1,1,0,0,0,1
#		define byte$fromhex$value$b2 1,0,1,1,0,0,1,0
#		define byte$fromhex$value$b3 1,0,1,1,0,0,1,1
#		define byte$fromhex$value$b4 1,0,1,1,0,1,0,0
#		define byte$fromhex$value$b5 1,0,1,1,0,1,0,1
#		define byte$fromhex$value$b6 1,0,1,1,0,1,1,0
#		define byte$fromhex$value$b7 1,0,1,1,0,1,1,1
#		define byte$fromhex$value$b8 1,0,1,1,1,0,0,0
#		define byte$fromhex$value$b9 1,0,1,1,1,0,0,1
#		define byte$fromhex$value$ba 1,0,1,1,1,0,1,0
#		define byte$fromhex$value$bb 1,0,1,1,1,0,1,1
#		define byte$fromhex$value$bc 1,0,1,1,1,1,0,0
#		define byte$fromhex$value$bd 1,0,1,1,1,1,0,1
#		define byte$fromhex$value$be 1,0,1,1,1,1,1,0
#		define byte$fromhex$value$bf 1,0,1,1,1,1,1,1
#		define byte$fromhex$value$c 0,0,0,0,1,1,0,0
#		define byte$fromhex$value$c0 1,1,0,0,0,0,0,0
#		define byte$fromhex$value$c1 1,1,0,0,0,0,0,1
#		define byte$fromhex$value$c2 1,1,0,0,0,0,1,0
#		define byte$fromhex$value$c3 1,1,0,0,0,0,1,1
#		define byte$fromhex$value$c4 1,1,0,0,0,1,0,0
#		define byte$fromhex$value$c5 1,1,0,0,0,1,0,1
#		define byte$fromhex$value$c6 1,1,0,0,0,1,1,0
#		define byte$fromhex$value$c7 1,1,0,0,0,1,1,1
#		define byte$fromhex$value$c8 1,1,0,0,1,0,0,0
#		define byte$fromhex$value$c9 1,1,0,0,1,0,0,1
#		define byte$fromhex$value$ca 1,1,0,0,1,0,1,0
#		define byte$fromhex$value$cb 1,1,0,0,1,0,1,1
#		define byte$fromhex$value$cc 1,1,0,0,1,1,0,0
#		define byte$fromhex$value$cd 1,1,0,0,1,1,0,1
#		define byte$fromhex$value$ce 1,1,0,0,1,1,1,0
#		define byte$fromhex$value$cf 1,1,0,0,1,1,1,1
#		define byte$fromhex$value$d 0,0,0,0,1,1,0,1
#		define byte$fromhex$value$d0 1,1,0,1,0,0,0,0
#		define byte$fromhex$value$d1 1,1,0,1,0,0,0,1
#		define byte$fromhex$value$d2 1,1,0,1,0,0,1,0
#		define byte$fromhex$value$d3 1,1,0,1,0,0,1,1
#		define byte$fromhex$value$d4 1,1,0,1,0,1,0,0
#		define byte$fromhex$value$d5 1,1,0,1,0,1,0,1
#		define byte$fromhex$value$d6 1,1,0,1,0,1,1,0
#		define byte$fromhex$value$d7 1,1,0,1,0,1,1,1
#		define byte$fromhex$value$d8 1,1,0,1,1,0,0,0
#		define byte$fromhex$value$d9 1,1,0,1,1,0,0,1
#		define byte$fromhex$value$da 1,1,0,1,1,0,1,0
#		define byte$fromhex$value$db 1,1,0,1,1,0,1,1
#		define byte$fromhex$value$dc 1,1,0,1,1,1,0,0
#		define byte$fromhex$value$dd 1,1,0,1,1,1,0,1
#		define byte$fromhex$value$de 1,1,0,1,1,1,1,0
#		define byte$fromhex$value$df 1,1,0,1,1,1,1,1
#		define byte$fromhex$value$e 0,0,0,0,1,1,1,0
#		define byte$fromhex$value$e0 1,1,1,0,0,0,0,0
#		define byte$fromhex$value$e1 1,1,1,0,0,0,0,1
#		define byte$fromhex$value$e2 1,1,1,0,0,0,1,0
#		define byte$fromhex$value$e3 1,1,1,0,0,0,1,1
#		define byte$fromhex$value$e4 1,1,1,0,0,1,0,0
#		define byte$fromhex$value$e5 1,1,1,0,0,1,0,1
#		define byte$fromhex$value$e6 1,1,1,0,0,1,1,0
#		define byte$fromhex$value$e7 1,1,1,0,0,1,1,1
#		define byte$fromhex$value$e8 1,1,1,0,1,0,0,0
#		define byte$fromhex$value$e9 1,1,1,0,1,0,0,1
#		define byte$fromhex$value$ea 1,1,1,0,1,0,1,0
#		define byte$fromhex$value$eb 1,1,1,0,1,0,1,1
#		define byte$fromhex$value$ec 1,1,1,0,1,1,0,0
#		define byte$fromhex$value$ed 1,1,1,0,1,1,0,1
#		define byte$fromhex$value$ee 1,1,1,0,1,1,1,0
#		define byte$fromhex$value$ef 1,1,1,0,1,1,1,1
#		define byte$fromhex$value$f 0,0,0,0,1,1,1,1
#		define byte$fromhex$value$f0 1,1,1,1,0,0,0,0
#		define byte$fromhex$value$f1 1,1,1,1,0,0,0,1
#		define byte$fromhex$value$f2 1,1,1,1,0,0,1,0
#		define byte$fromhex$value$f3 1,1,1,1,0,0,1,1
#		define byte$fromhex$value$f4 1,1,1,1,0,1,0,0
#		define byte$fromhex$value$f5 1,1,1,1,0,1,0,1
#		define byte$fromhex$value$f6 1,1,1,1,0,1,1,0
#		define byte$fromhex$value$f7 1,1,1,1,0,1,1,1
#		define byte$fromhex$value$f8 1,1,1,1,1,0,0,0
#		define byte$fromhex$value$f9 1,1,1,1,1,0,0,1
#		define byte$fromhex$value$fa 1,1,1,1,1,0,1,0
#		define byte$fromhex$value$fb 1,1,1,1,1,0,1,1
#		define byte$fromhex$value$fc 1,1,1,1,1,1,0,0
#		define byte$fromhex$value$fd 1,1,1,1,1,1,0,1
#		define byte$fromhex$value$fe 1,1,1,1,1,1,1,0
#		define byte$fromhex$value$ff 1,1,1,1,1,1,1,1
#		define byte$inv(...) byte$inv$1(__VA_ARGS__)
#		define byte$inv$1(...) byte$inv$2(__VA_ARGS__)
#		define byte$inv$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$not(B0b7), bit$not(B0b6), bit$not(B0b5), bit$not(B0b4), bit$not(B0b3), bit$not(B0b2), bit$not(B0b1), bit$not(B0b0)
#		define byte$isnonzero(...) byte$isnonzero$1(__VA_ARGS__)
#		define byte$isnonzero$1(...) byte$isnonzero$2(__VA_ARGS__)
#		define byte$isnonzero$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$or(B0b0, bit$or(B0b1, bit$or(B0b2, bit$or(B0b3, bit$or(B0b4, bit$or(B0b5, bit$or(B0b6, B0b7)))))))
#		define byte$iszero(...) byte$iszero$1(__VA_ARGS__)
#		define byte$iszero$1(...) byte$iszero$2(__VA_ARGS__)
#		define byte$iszero$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$not(bit$or(B0b0, bit$or(B0b1, bit$or(B0b2, bit$or(B0b3, bit$or(B0b4, bit$or(B0b5, bit$or(B0b6, B0b7))))))))
#		define byte$join$comma(a,b) a,b
#		define byte$join$glue(...) byte$join$glue$1(__VA_ARGS__)
#		define byte$join$glue$1(...) byte$join$glue$2(__VA_ARGS__)
#		define byte$join$glue$2(a,b) a##b
#		define byte$neq(...) byte$isnonzero(byte$xor(__VA_ARGS__))
#		define byte$not(...) byte$inv$1(__VA_ARGS__)
#		define byte$or(...) byte$or$1(__VA_ARGS__)
#		define byte$or$1(...) byte$or$2(__VA_ARGS__)
#		define byte$or$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0) bit$or(B0b7, B1b7), bit$or(B0b6, B1b6), bit$or(B0b5, B1b5), bit$or(B0b4, B1b4), bit$or(B0b3, B1b3), bit$or(B0b2, B1b2), bit$or(B0b1, B1b1), bit$or(B0b0, B1b0)
#		define byte$tohex(p, ...) byte$tohex$1(p, __VA_ARGS__)
#		define byte$tohex$00000000(p) p(00)
#		define byte$tohex$00000001(p) p(01)
#		define byte$tohex$00000010(p) p(02)
#		define byte$tohex$00000011(p) p(03)
#		define byte$tohex$00000100(p) p(04)
#		define byte$tohex$00000101(p) p(05)
#		define byte$tohex$00000110(p) p(06)
#		define byte$tohex$00000111(p) p(07)
#		define byte$tohex$00001000(p) p(08)
#		define byte$tohex$00001001(p) p(09)
#		define byte$tohex$00001010(p) p(0a)
#		define byte$tohex$00001011(p) p(0b)
#		define byte$tohex$00001100(p) p(0c)
#		define byte$tohex$00001101(p) p(0d)
#		define byte$tohex$00001110(p) p(0e)
#		define byte$tohex$00001111(p) p(0f)
#		define byte$tohex$00010000(p) p(10)
#		define byte$tohex$00010001(p) p(11)
#		define byte$tohex$00010010(p) p(12)
#		define byte$tohex$00010011(p) p(13)
#		define byte$tohex$00010100(p) p(14)
#		define byte$tohex$00010101(p) p(15)
#		define byte$tohex$00010110(p) p(16)
#		define byte$tohex$00010111(p) p(17)
#		define byte$tohex$00011000(p) p(18)
#		define byte$tohex$00011001(p) p(19)
#		define byte$tohex$00011010(p) p(1a)
#		define byte$tohex$00011011(p) p(1b)
#		define byte$tohex$00011100(p) p(1c)
#		define byte$tohex$00011101(p) p(1d)
#		define byte$tohex$00011110(p) p(1e)
#		define byte$tohex$00011111(p) p(1f)
#		define byte$tohex$00100000(p) p(20)
#		define byte$tohex$00100001(p) p(21)
#		define byte$tohex$00100010(p) p(22)
#		define byte$tohex$00100011(p) p(23)
#		define byte$tohex$00100100(p) p(24)
#		define byte$tohex$00100101(p) p(25)
#		define byte$tohex$00100110(p) p(26)
#		define byte$tohex$00100111(p) p(27)
#		define byte$tohex$00101000(p) p(28)
#		define byte$tohex$00101001(p) p(29)
#		define byte$tohex$00101010(p) p(2a)
#		define byte$tohex$00101011(p) p(2b)
#		define byte$tohex$00101100(p) p(2c)
#		define byte$tohex$00101101(p) p(2d)
#		define byte$tohex$00101110(p) p(2e)
#		define byte$tohex$00101111(p) p(2f)
#		define byte$tohex$00110000(p) p(30)
#		define byte$tohex$00110001(p) p(31)
#		define byte$tohex$00110010(p) p(32)
#		define byte$tohex$00110011(p) p(33)
#		define byte$tohex$00110100(p) p(34)
#		define byte$tohex$00110101(p) p(35)
#		define byte$tohex$00110110(p) p(36)
#		define byte$tohex$00110111(p) p(37)
#		define byte$tohex$00111000(p) p(38)
#		define byte$tohex$00111001(p) p(39)
#		define byte$tohex$00111010(p) p(3a)
#		define byte$tohex$00111011(p) p(3b)
#		define byte$tohex$00111100(p) p(3c)
#		define byte$tohex$00111101(p) p(3d)
#		define byte$tohex$00111110(p) p(3e)
#		define byte$tohex$00111111(p) p(3f)
#		define byte$tohex$01000000(p) p(40)
#		define byte$tohex$01000001(p) p(41)
#		define byte$tohex$01000010(p) p(42)
#		define byte$tohex$01000011(p) p(43)
#		define byte$tohex$01000100(p) p(44)
#		define byte$tohex$01000101(p) p(45)
#		define byte$tohex$01000110(p) p(46)
#		define byte$tohex$01000111(p) p(47)
#		define byte$tohex$01001000(p) p(48)
#		define byte$tohex$01001001(p) p(49)
#		define byte$tohex$01001010(p) p(4a)
#		define byte$tohex$01001011(p) p(4b)
#		define byte$tohex$01001100(p) p(4c)
#		define byte$tohex$01001101(p) p(4d)
#		define byte$tohex$01001110(p) p(4e)
#		define byte$tohex$01001111(p) p(4f)
#		define byte$tohex$01010000(p) p(50)
#		define byte$tohex$01010001(p) p(51)
#		define byte$tohex$01010010(p) p(52)
#		define byte$tohex$01010011(p) p(53)
#		define byte$tohex$01010100(p) p(54)
#		define byte$tohex$01010101(p) p(55)
#		define byte$tohex$01010110(p) p(56)
#		define byte$tohex$01010111(p) p(57)
#		define byte$tohex$01011000(p) p(58)
#		define byte$tohex$01011001(p) p(59)
#		define byte$tohex$01011010(p) p(5a)
#		define byte$tohex$01011011(p) p(5b)
#		define byte$tohex$01011100(p) p(5c)
#		define byte$tohex$01011101(p) p(5d)
#		define byte$tohex$01011110(p) p(5e)
#		define byte$tohex$01011111(p) p(5f)
#		define byte$tohex$01100000(p) p(60)
#		define byte$tohex$01100001(p) p(61)
#		define byte$tohex$01100010(p) p(62)
#		define byte$tohex$01100011(p) p(63)
#		define byte$tohex$01100100(p) p(64)
#		define byte$tohex$01100101(p) p(65)
#		define byte$tohex$01100110(p) p(66)
#		define byte$tohex$01100111(p) p(67)
#		define byte$tohex$01101000(p) p(68)
#		define byte$tohex$01101001(p) p(69)
#		define byte$tohex$01101010(p) p(6a)
#		define byte$tohex$01101011(p) p(6b)
#		define byte$tohex$01101100(p) p(6c)
#		define byte$tohex$01101101(p) p(6d)
#		define byte$tohex$01101110(p) p(6e)
#		define byte$tohex$01101111(p) p(6f)
#		define byte$tohex$01110000(p) p(70)
#		define byte$tohex$01110001(p) p(71)
#		define byte$tohex$01110010(p) p(72)
#		define byte$tohex$01110011(p) p(73)
#		define byte$tohex$01110100(p) p(74)
#		define byte$tohex$01110101(p) p(75)
#		define byte$tohex$01110110(p) p(76)
#		define byte$tohex$01110111(p) p(77)
#		define byte$tohex$01111000(p) p(78)
#		define byte$tohex$01111001(p) p(79)
#		define byte$tohex$01111010(p) p(7a)
#		define byte$tohex$01111011(p) p(7b)
#		define byte$tohex$01111100(p) p(7c)
#		define byte$tohex$01111101(p) p(7d)
#		define byte$tohex$01111110(p) p(7e)
#		define byte$tohex$01111111(p) p(7f)
#		define byte$tohex$1(p, ...) byte$tohex$2(p, __VA_ARGS__)
#		define byte$tohex$10000000(p) p(80)
#		define byte$tohex$10000001(p) p(81)
#		define byte$tohex$10000010(p) p(82)
#		define byte$tohex$10000011(p) p(83)
#		define byte$tohex$10000100(p) p(84)
#		define byte$tohex$10000101(p) p(85)
#		define byte$tohex$10000110(p) p(86)
#		define byte$tohex$10000111(p) p(87)
#		define byte$tohex$10001000(p) p(88)
#		define byte$tohex$10001001(p) p(89)
#		define byte$tohex$10001010(p) p(8a)
#		define byte$tohex$10001011(p) p(8b)
#		define byte$tohex$10001100(p) p(8c)
#		define byte$tohex$10001101(p) p(8d)
#		define byte$tohex$10001110(p) p(8e)
#		define byte$tohex$10001111(p) p(8f)
#		define byte$tohex$10010000(p) p(90)
#		define byte$tohex$10010001(p) p(91)
#		define byte$tohex$10010010(p) p(92)
#		define byte$tohex$10010011(p) p(93)
#		define byte$tohex$10010100(p) p(94)
#		define byte$tohex$10010101(p) p(95)
#		define byte$tohex$10010110(p) p(96)
#		define byte$tohex$10010111(p) p(97)
#		define byte$tohex$10011000(p) p(98)
#		define byte$tohex$10011001(p) p(99)
#		define byte$tohex$10011010(p) p(9a)
#		define byte$tohex$10011011(p) p(9b)
#		define byte$tohex$10011100(p) p(9c)
#		define byte$tohex$10011101(p) p(9d)
#		define byte$tohex$10011110(p) p(9e)
#		define byte$tohex$10011111(p) p(9f)
#		define byte$tohex$10100000(p) p(a0)
#		define byte$tohex$10100001(p) p(a1)
#		define byte$tohex$10100010(p) p(a2)
#		define byte$tohex$10100011(p) p(a3)
#		define byte$tohex$10100100(p) p(a4)
#		define byte$tohex$10100101(p) p(a5)
#		define byte$tohex$10100110(p) p(a6)
#		define byte$tohex$10100111(p) p(a7)
#		define byte$tohex$10101000(p) p(a8)
#		define byte$tohex$10101001(p) p(a9)
#		define byte$tohex$10101010(p) p(aa)
#		define byte$tohex$10101011(p) p(ab)
#		define byte$tohex$10101100(p) p(ac)
#		define byte$tohex$10101101(p) p(ad)
#		define byte$tohex$10101110(p) p(ae)
#		define byte$tohex$10101111(p) p(af)
#		define byte$tohex$10110000(p) p(b0)
#		define byte$tohex$10110001(p) p(b1)
#		define byte$tohex$10110010(p) p(b2)
#		define byte$tohex$10110011(p) p(b3)
#		define byte$tohex$10110100(p) p(b4)
#		define byte$tohex$10110101(p) p(b5)
#		define byte$tohex$10110110(p) p(b6)
#		define byte$tohex$10110111(p) p(b7)
#		define byte$tohex$10111000(p) p(b8)
#		define byte$tohex$10111001(p) p(b9)
#		define byte$tohex$10111010(p) p(ba)
#		define byte$tohex$10111011(p) p(bb)
#		define byte$tohex$10111100(p) p(bc)
#		define byte$tohex$10111101(p) p(bd)
#		define byte$tohex$10111110(p) p(be)
#		define byte$tohex$10111111(p) p(bf)
#		define byte$tohex$11000000(p) p(c0)
#		define byte$tohex$11000001(p) p(c1)
#		define byte$tohex$11000010(p) p(c2)
#		define byte$tohex$11000011(p) p(c3)
#		define byte$tohex$11000100(p) p(c4)
#		define byte$tohex$11000101(p) p(c5)
#		define byte$tohex$11000110(p) p(c6)
#		define byte$tohex$11000111(p) p(c7)
#		define byte$tohex$11001000(p) p(c8)
#		define byte$tohex$11001001(p) p(c9)
#		define byte$tohex$11001010(p) p(ca)
#		define byte$tohex$11001011(p) p(cb)
#		define byte$tohex$11001100(p) p(cc)
#		define byte$tohex$11001101(p) p(cd)
#		define byte$tohex$11001110(p) p(ce)
#		define byte$tohex$11001111(p) p(cf)
#		define byte$tohex$11010000(p) p(d0)
#		define byte$tohex$11010001(p) p(d1)
#		define byte$tohex$11010010(p) p(d2)
#		define byte$tohex$11010011(p) p(d3)
#		define byte$tohex$11010100(p) p(d4)
#		define byte$tohex$11010101(p) p(d5)
#		define byte$tohex$11010110(p) p(d6)
#		define byte$tohex$11010111(p) p(d7)
#		define byte$tohex$11011000(p) p(d8)
#		define byte$tohex$11011001(p) p(d9)
#		define byte$tohex$11011010(p) p(da)
#		define byte$tohex$11011011(p) p(db)
#		define byte$tohex$11011100(p) p(dc)
#		define byte$tohex$11011101(p) p(dd)
#		define byte$tohex$11011110(p) p(de)
#		define byte$tohex$11011111(p) p(df)
#		define byte$tohex$11100000(p) p(e0)
#		define byte$tohex$11100001(p) p(e1)
#		define byte$tohex$11100010(p) p(e2)
#		define byte$tohex$11100011(p) p(e3)
#		define byte$tohex$11100100(p) p(e4)
#		define byte$tohex$11100101(p) p(e5)
#		define byte$tohex$11100110(p) p(e6)
#		define byte$tohex$11100111(p) p(e7)
#		define byte$tohex$11101000(p) p(e8)
#		define byte$tohex$11101001(p) p(e9)
#		define byte$tohex$11101010(p) p(ea)
#		define byte$tohex$11101011(p) p(eb)
#		define byte$tohex$11101100(p) p(ec)
#		define byte$tohex$11101101(p) p(ed)
#		define byte$tohex$11101110(p) p(ee)
#		define byte$tohex$11101111(p) p(ef)
#		define byte$tohex$11110000(p) p(f0)
#		define byte$tohex$11110001(p) p(f1)
#		define byte$tohex$11110010(p) p(f2)
#		define byte$tohex$11110011(p) p(f3)
#		define byte$tohex$11110100(p) p(f4)
#		define byte$tohex$11110101(p) p(f5)
#		define byte$tohex$11110110(p) p(f6)
#		define byte$tohex$11110111(p) p(f7)
#		define byte$tohex$11111000(p) p(f8)
#		define byte$tohex$11111001(p) p(f9)
#		define byte$tohex$11111010(p) p(fa)
#		define byte$tohex$11111011(p) p(fb)
#		define byte$tohex$11111100(p) p(fc)
#		define byte$tohex$11111101(p) p(fd)
#		define byte$tohex$11111110(p) p(fe)
#		define byte$tohex$11111111(p) p(ff)
#		define byte$tohex$2(p, ...) byte$tohex$3(p, __VA_ARGS__)
#		define byte$tohex$3(p, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$tohex$##B0b7##B0b6##B0b5##B0b4##B0b3##B0b2##B0b1##B0b0(p)
#		define byte$xor(...) byte$xor$1(__VA_ARGS__)
#		define byte$xor$1(...) byte$xor$2(__VA_ARGS__)
#		define byte$xor$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0) bit$xor(B0b7, B1b7), bit$xor(B0b6, B1b6), bit$xor(B0b5, B1b5), bit$xor(B0b4, B1b4), bit$xor(B0b3, B1b3), bit$xor(B0b2, B1b2), bit$xor(B0b1, B1b1), bit$xor(B0b0, B1b0)
#		define bytes$all$as(...) bytes$all$as$1(count(__VA_ARGS__), __VA_ARGS__)
#		define bytes$all$as$1(...) bytes$all$as$2(__VA_ARGS__)
#		define bytes$all$as$2(n,...) bytes$all$as$withlen##n(__VA_ARGS__)
#		define bytes$all$as$withlen01(...) /* only fmt */
#		define bytes$all$as$withlen02(fmt,b) fmt(b)
#		define bytes$all$as$withlen03(fmt, b, ...) fmt(b), bytes$all$as$withlen02(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen04(fmt, b, ...) fmt(b), bytes$all$as$withlen03(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen05(fmt, b, ...) fmt(b), bytes$all$as$withlen04(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen06(fmt, b, ...) fmt(b), bytes$all$as$withlen05(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen07(fmt, b, ...) fmt(b), bytes$all$as$withlen06(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen08(fmt, b, ...) fmt(b), bytes$all$as$withlen07(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen09(fmt, b, ...) fmt(b), bytes$all$as$withlen08(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen0a(fmt, b, ...) fmt(b), bytes$all$as$withlen09(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen0b(fmt, b, ...) fmt(b), bytes$all$as$withlen0a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen0c(fmt, b, ...) fmt(b), bytes$all$as$withlen0b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen0d(fmt, b, ...) fmt(b), bytes$all$as$withlen0c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen0e(fmt, b, ...) fmt(b), bytes$all$as$withlen0d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen0f(fmt, b, ...) fmt(b), bytes$all$as$withlen0e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen10(fmt, b, ...) fmt(b), bytes$all$as$withlen0f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen11(fmt, b, ...) fmt(b), bytes$all$as$withlen10(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen12(fmt, b, ...) fmt(b), bytes$all$as$withlen11(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen13(fmt, b, ...) fmt(b), bytes$all$as$withlen12(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen14(fmt, b, ...) fmt(b), bytes$all$as$withlen13(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen15(fmt, b, ...) fmt(b), bytes$all$as$withlen14(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen16(fmt, b, ...) fmt(b), bytes$all$as$withlen15(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen17(fmt, b, ...) fmt(b), bytes$all$as$withlen16(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen18(fmt, b, ...) fmt(b), bytes$all$as$withlen17(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen19(fmt, b, ...) fmt(b), bytes$all$as$withlen18(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen1a(fmt, b, ...) fmt(b), bytes$all$as$withlen19(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen1b(fmt, b, ...) fmt(b), bytes$all$as$withlen1a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen1c(fmt, b, ...) fmt(b), bytes$all$as$withlen1b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen1d(fmt, b, ...) fmt(b), bytes$all$as$withlen1c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen1e(fmt, b, ...) fmt(b), bytes$all$as$withlen1d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen1f(fmt, b, ...) fmt(b), bytes$all$as$withlen1e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen20(fmt, b, ...) fmt(b), bytes$all$as$withlen1f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen21(fmt, b, ...) fmt(b), bytes$all$as$withlen20(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen22(fmt, b, ...) fmt(b), bytes$all$as$withlen21(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen23(fmt, b, ...) fmt(b), bytes$all$as$withlen22(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen24(fmt, b, ...) fmt(b), bytes$all$as$withlen23(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen25(fmt, b, ...) fmt(b), bytes$all$as$withlen24(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen26(fmt, b, ...) fmt(b), bytes$all$as$withlen25(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen27(fmt, b, ...) fmt(b), bytes$all$as$withlen26(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen28(fmt, b, ...) fmt(b), bytes$all$as$withlen27(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen29(fmt, b, ...) fmt(b), bytes$all$as$withlen28(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen2a(fmt, b, ...) fmt(b), bytes$all$as$withlen29(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen2b(fmt, b, ...) fmt(b), bytes$all$as$withlen2a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen2c(fmt, b, ...) fmt(b), bytes$all$as$withlen2b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen2d(fmt, b, ...) fmt(b), bytes$all$as$withlen2c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen2e(fmt, b, ...) fmt(b), bytes$all$as$withlen2d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen2f(fmt, b, ...) fmt(b), bytes$all$as$withlen2e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen30(fmt, b, ...) fmt(b), bytes$all$as$withlen2f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen31(fmt, b, ...) fmt(b), bytes$all$as$withlen30(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen32(fmt, b, ...) fmt(b), bytes$all$as$withlen31(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen33(fmt, b, ...) fmt(b), bytes$all$as$withlen32(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen34(fmt, b, ...) fmt(b), bytes$all$as$withlen33(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen35(fmt, b, ...) fmt(b), bytes$all$as$withlen34(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen36(fmt, b, ...) fmt(b), bytes$all$as$withlen35(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen37(fmt, b, ...) fmt(b), bytes$all$as$withlen36(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen38(fmt, b, ...) fmt(b), bytes$all$as$withlen37(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen39(fmt, b, ...) fmt(b), bytes$all$as$withlen38(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen3a(fmt, b, ...) fmt(b), bytes$all$as$withlen39(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen3b(fmt, b, ...) fmt(b), bytes$all$as$withlen3a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen3c(fmt, b, ...) fmt(b), bytes$all$as$withlen3b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen3d(fmt, b, ...) fmt(b), bytes$all$as$withlen3c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen3e(fmt, b, ...) fmt(b), bytes$all$as$withlen3d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen3f(fmt, b, ...) fmt(b), bytes$all$as$withlen3e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen40(fmt, b, ...) fmt(b), bytes$all$as$withlen3f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen41(fmt, b, ...) fmt(b), bytes$all$as$withlen40(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen42(fmt, b, ...) fmt(b), bytes$all$as$withlen41(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen43(fmt, b, ...) fmt(b), bytes$all$as$withlen42(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen44(fmt, b, ...) fmt(b), bytes$all$as$withlen43(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen45(fmt, b, ...) fmt(b), bytes$all$as$withlen44(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen46(fmt, b, ...) fmt(b), bytes$all$as$withlen45(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen47(fmt, b, ...) fmt(b), bytes$all$as$withlen46(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen48(fmt, b, ...) fmt(b), bytes$all$as$withlen47(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen49(fmt, b, ...) fmt(b), bytes$all$as$withlen48(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen4a(fmt, b, ...) fmt(b), bytes$all$as$withlen49(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen4b(fmt, b, ...) fmt(b), bytes$all$as$withlen4a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen4c(fmt, b, ...) fmt(b), bytes$all$as$withlen4b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen4d(fmt, b, ...) fmt(b), bytes$all$as$withlen4c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen4e(fmt, b, ...) fmt(b), bytes$all$as$withlen4d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen4f(fmt, b, ...) fmt(b), bytes$all$as$withlen4e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen50(fmt, b, ...) fmt(b), bytes$all$as$withlen4f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen51(fmt, b, ...) fmt(b), bytes$all$as$withlen50(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen52(fmt, b, ...) fmt(b), bytes$all$as$withlen51(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen53(fmt, b, ...) fmt(b), bytes$all$as$withlen52(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen54(fmt, b, ...) fmt(b), bytes$all$as$withlen53(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen55(fmt, b, ...) fmt(b), bytes$all$as$withlen54(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen56(fmt, b, ...) fmt(b), bytes$all$as$withlen55(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen57(fmt, b, ...) fmt(b), bytes$all$as$withlen56(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen58(fmt, b, ...) fmt(b), bytes$all$as$withlen57(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen59(fmt, b, ...) fmt(b), bytes$all$as$withlen58(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen5a(fmt, b, ...) fmt(b), bytes$all$as$withlen59(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen5b(fmt, b, ...) fmt(b), bytes$all$as$withlen5a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen5c(fmt, b, ...) fmt(b), bytes$all$as$withlen5b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen5d(fmt, b, ...) fmt(b), bytes$all$as$withlen5c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen5e(fmt, b, ...) fmt(b), bytes$all$as$withlen5d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen5f(fmt, b, ...) fmt(b), bytes$all$as$withlen5e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen60(fmt, b, ...) fmt(b), bytes$all$as$withlen5f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen61(fmt, b, ...) fmt(b), bytes$all$as$withlen60(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen62(fmt, b, ...) fmt(b), bytes$all$as$withlen61(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen63(fmt, b, ...) fmt(b), bytes$all$as$withlen62(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen64(fmt, b, ...) fmt(b), bytes$all$as$withlen63(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen65(fmt, b, ...) fmt(b), bytes$all$as$withlen64(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen66(fmt, b, ...) fmt(b), bytes$all$as$withlen65(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen67(fmt, b, ...) fmt(b), bytes$all$as$withlen66(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen68(fmt, b, ...) fmt(b), bytes$all$as$withlen67(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen69(fmt, b, ...) fmt(b), bytes$all$as$withlen68(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen6a(fmt, b, ...) fmt(b), bytes$all$as$withlen69(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen6b(fmt, b, ...) fmt(b), bytes$all$as$withlen6a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen6c(fmt, b, ...) fmt(b), bytes$all$as$withlen6b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen6d(fmt, b, ...) fmt(b), bytes$all$as$withlen6c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen6e(fmt, b, ...) fmt(b), bytes$all$as$withlen6d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen6f(fmt, b, ...) fmt(b), bytes$all$as$withlen6e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen70(fmt, b, ...) fmt(b), bytes$all$as$withlen6f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen71(fmt, b, ...) fmt(b), bytes$all$as$withlen70(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen72(fmt, b, ...) fmt(b), bytes$all$as$withlen71(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen73(fmt, b, ...) fmt(b), bytes$all$as$withlen72(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen74(fmt, b, ...) fmt(b), bytes$all$as$withlen73(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen75(fmt, b, ...) fmt(b), bytes$all$as$withlen74(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen76(fmt, b, ...) fmt(b), bytes$all$as$withlen75(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen77(fmt, b, ...) fmt(b), bytes$all$as$withlen76(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen78(fmt, b, ...) fmt(b), bytes$all$as$withlen77(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen79(fmt, b, ...) fmt(b), bytes$all$as$withlen78(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen7a(fmt, b, ...) fmt(b), bytes$all$as$withlen79(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen7b(fmt, b, ...) fmt(b), bytes$all$as$withlen7a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen7c(fmt, b, ...) fmt(b), bytes$all$as$withlen7b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen7d(fmt, b, ...) fmt(b), bytes$all$as$withlen7c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen7e(fmt, b, ...) fmt(b), bytes$all$as$withlen7d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen7f(fmt, b, ...) fmt(b), bytes$all$as$withlen7e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen80(fmt, b, ...) fmt(b), bytes$all$as$withlen7f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen81(fmt, b, ...) fmt(b), bytes$all$as$withlen80(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen82(fmt, b, ...) fmt(b), bytes$all$as$withlen81(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen83(fmt, b, ...) fmt(b), bytes$all$as$withlen82(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen84(fmt, b, ...) fmt(b), bytes$all$as$withlen83(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen85(fmt, b, ...) fmt(b), bytes$all$as$withlen84(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen86(fmt, b, ...) fmt(b), bytes$all$as$withlen85(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen87(fmt, b, ...) fmt(b), bytes$all$as$withlen86(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen88(fmt, b, ...) fmt(b), bytes$all$as$withlen87(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen89(fmt, b, ...) fmt(b), bytes$all$as$withlen88(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen8a(fmt, b, ...) fmt(b), bytes$all$as$withlen89(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen8b(fmt, b, ...) fmt(b), bytes$all$as$withlen8a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen8c(fmt, b, ...) fmt(b), bytes$all$as$withlen8b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen8d(fmt, b, ...) fmt(b), bytes$all$as$withlen8c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen8e(fmt, b, ...) fmt(b), bytes$all$as$withlen8d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen8f(fmt, b, ...) fmt(b), bytes$all$as$withlen8e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen90(fmt, b, ...) fmt(b), bytes$all$as$withlen8f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen91(fmt, b, ...) fmt(b), bytes$all$as$withlen90(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen92(fmt, b, ...) fmt(b), bytes$all$as$withlen91(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen93(fmt, b, ...) fmt(b), bytes$all$as$withlen92(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen94(fmt, b, ...) fmt(b), bytes$all$as$withlen93(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen95(fmt, b, ...) fmt(b), bytes$all$as$withlen94(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen96(fmt, b, ...) fmt(b), bytes$all$as$withlen95(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen97(fmt, b, ...) fmt(b), bytes$all$as$withlen96(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen98(fmt, b, ...) fmt(b), bytes$all$as$withlen97(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen99(fmt, b, ...) fmt(b), bytes$all$as$withlen98(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen9a(fmt, b, ...) fmt(b), bytes$all$as$withlen99(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen9b(fmt, b, ...) fmt(b), bytes$all$as$withlen9a(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen9c(fmt, b, ...) fmt(b), bytes$all$as$withlen9b(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen9d(fmt, b, ...) fmt(b), bytes$all$as$withlen9c(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen9e(fmt, b, ...) fmt(b), bytes$all$as$withlen9d(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlen9f(fmt, b, ...) fmt(b), bytes$all$as$withlen9e(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena0(fmt, b, ...) fmt(b), bytes$all$as$withlen9f(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena1(fmt, b, ...) fmt(b), bytes$all$as$withlena0(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena2(fmt, b, ...) fmt(b), bytes$all$as$withlena1(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena3(fmt, b, ...) fmt(b), bytes$all$as$withlena2(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena4(fmt, b, ...) fmt(b), bytes$all$as$withlena3(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena5(fmt, b, ...) fmt(b), bytes$all$as$withlena4(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena6(fmt, b, ...) fmt(b), bytes$all$as$withlena5(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena7(fmt, b, ...) fmt(b), bytes$all$as$withlena6(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena8(fmt, b, ...) fmt(b), bytes$all$as$withlena7(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlena9(fmt, b, ...) fmt(b), bytes$all$as$withlena8(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenaa(fmt, b, ...) fmt(b), bytes$all$as$withlena9(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenab(fmt, b, ...) fmt(b), bytes$all$as$withlenaa(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenac(fmt, b, ...) fmt(b), bytes$all$as$withlenab(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenad(fmt, b, ...) fmt(b), bytes$all$as$withlenac(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenae(fmt, b, ...) fmt(b), bytes$all$as$withlenad(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenaf(fmt, b, ...) fmt(b), bytes$all$as$withlenae(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb0(fmt, b, ...) fmt(b), bytes$all$as$withlenaf(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb1(fmt, b, ...) fmt(b), bytes$all$as$withlenb0(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb2(fmt, b, ...) fmt(b), bytes$all$as$withlenb1(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb3(fmt, b, ...) fmt(b), bytes$all$as$withlenb2(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb4(fmt, b, ...) fmt(b), bytes$all$as$withlenb3(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb5(fmt, b, ...) fmt(b), bytes$all$as$withlenb4(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb6(fmt, b, ...) fmt(b), bytes$all$as$withlenb5(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb7(fmt, b, ...) fmt(b), bytes$all$as$withlenb6(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb8(fmt, b, ...) fmt(b), bytes$all$as$withlenb7(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenb9(fmt, b, ...) fmt(b), bytes$all$as$withlenb8(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenba(fmt, b, ...) fmt(b), bytes$all$as$withlenb9(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenbb(fmt, b, ...) fmt(b), bytes$all$as$withlenba(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenbc(fmt, b, ...) fmt(b), bytes$all$as$withlenbb(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenbd(fmt, b, ...) fmt(b), bytes$all$as$withlenbc(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenbe(fmt, b, ...) fmt(b), bytes$all$as$withlenbd(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenbf(fmt, b, ...) fmt(b), bytes$all$as$withlenbe(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc0(fmt, b, ...) fmt(b), bytes$all$as$withlenbf(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc1(fmt, b, ...) fmt(b), bytes$all$as$withlenc0(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc2(fmt, b, ...) fmt(b), bytes$all$as$withlenc1(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc3(fmt, b, ...) fmt(b), bytes$all$as$withlenc2(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc4(fmt, b, ...) fmt(b), bytes$all$as$withlenc3(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc5(fmt, b, ...) fmt(b), bytes$all$as$withlenc4(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc6(fmt, b, ...) fmt(b), bytes$all$as$withlenc5(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc7(fmt, b, ...) fmt(b), bytes$all$as$withlenc6(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc8(fmt, b, ...) fmt(b), bytes$all$as$withlenc7(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenc9(fmt, b, ...) fmt(b), bytes$all$as$withlenc8(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenca(fmt, b, ...) fmt(b), bytes$all$as$withlenc9(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlencb(fmt, b, ...) fmt(b), bytes$all$as$withlenca(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlencc(fmt, b, ...) fmt(b), bytes$all$as$withlencb(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlencd(fmt, b, ...) fmt(b), bytes$all$as$withlencc(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlence(fmt, b, ...) fmt(b), bytes$all$as$withlencd(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlencf(fmt, b, ...) fmt(b), bytes$all$as$withlence(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend0(fmt, b, ...) fmt(b), bytes$all$as$withlencf(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend1(fmt, b, ...) fmt(b), bytes$all$as$withlend0(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend2(fmt, b, ...) fmt(b), bytes$all$as$withlend1(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend3(fmt, b, ...) fmt(b), bytes$all$as$withlend2(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend4(fmt, b, ...) fmt(b), bytes$all$as$withlend3(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend5(fmt, b, ...) fmt(b), bytes$all$as$withlend4(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend6(fmt, b, ...) fmt(b), bytes$all$as$withlend5(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend7(fmt, b, ...) fmt(b), bytes$all$as$withlend6(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend8(fmt, b, ...) fmt(b), bytes$all$as$withlend7(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlend9(fmt, b, ...) fmt(b), bytes$all$as$withlend8(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenda(fmt, b, ...) fmt(b), bytes$all$as$withlend9(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlendb(fmt, b, ...) fmt(b), bytes$all$as$withlenda(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlendc(fmt, b, ...) fmt(b), bytes$all$as$withlendb(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlendd(fmt, b, ...) fmt(b), bytes$all$as$withlendc(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlende(fmt, b, ...) fmt(b), bytes$all$as$withlendd(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlendf(fmt, b, ...) fmt(b), bytes$all$as$withlende(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene0(fmt, b, ...) fmt(b), bytes$all$as$withlendf(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene1(fmt, b, ...) fmt(b), bytes$all$as$withlene0(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene2(fmt, b, ...) fmt(b), bytes$all$as$withlene1(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene3(fmt, b, ...) fmt(b), bytes$all$as$withlene2(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene4(fmt, b, ...) fmt(b), bytes$all$as$withlene3(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene5(fmt, b, ...) fmt(b), bytes$all$as$withlene4(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene6(fmt, b, ...) fmt(b), bytes$all$as$withlene5(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene7(fmt, b, ...) fmt(b), bytes$all$as$withlene6(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene8(fmt, b, ...) fmt(b), bytes$all$as$withlene7(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlene9(fmt, b, ...) fmt(b), bytes$all$as$withlene8(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenea(fmt, b, ...) fmt(b), bytes$all$as$withlene9(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withleneb(fmt, b, ...) fmt(b), bytes$all$as$withlenea(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenec(fmt, b, ...) fmt(b), bytes$all$as$withleneb(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlened(fmt, b, ...) fmt(b), bytes$all$as$withlenec(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenee(fmt, b, ...) fmt(b), bytes$all$as$withlened(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenef(fmt, b, ...) fmt(b), bytes$all$as$withlenee(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf0(fmt, b, ...) fmt(b), bytes$all$as$withlenef(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf1(fmt, b, ...) fmt(b), bytes$all$as$withlenf0(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf2(fmt, b, ...) fmt(b), bytes$all$as$withlenf1(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf3(fmt, b, ...) fmt(b), bytes$all$as$withlenf2(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf4(fmt, b, ...) fmt(b), bytes$all$as$withlenf3(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf5(fmt, b, ...) fmt(b), bytes$all$as$withlenf4(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf6(fmt, b, ...) fmt(b), bytes$all$as$withlenf5(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf7(fmt, b, ...) fmt(b), bytes$all$as$withlenf6(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf8(fmt, b, ...) fmt(b), bytes$all$as$withlenf7(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenf9(fmt, b, ...) fmt(b), bytes$all$as$withlenf8(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenfa(fmt, b, ...) fmt(b), bytes$all$as$withlenf9(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenfb(fmt, b, ...) fmt(b), bytes$all$as$withlenfa(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenfc(fmt, b, ...) fmt(b), bytes$all$as$withlenfb(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenfd(fmt, b, ...) fmt(b), bytes$all$as$withlenfc(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenfe(fmt, b, ...) fmt(b), bytes$all$as$withlenfd(fmt, ##__VA_ARGS__)
#		define bytes$all$as$withlenff(fmt, b, ...) fmt(b), bytes$all$as$withlenfe(fmt, ##__VA_ARGS__)
#		define call$delayed$02(...) call$delayed$02$1(__VA_ARGS__)
#		define call$delayed$02$1(...) call$delayed$02$2(__VA_ARGS__)
#		define call$delayed$02$2(f,...) f(__VA_ARGS__)
#		define call$delayed$03(...) call$delayed$03$1(__VA_ARGS__)
#		define call$delayed$03$1(...) call$delayed$03$2(__VA_ARGS__)
#		define call$delayed$03$2(f,...) f(__VA_ARGS__)
#		define call$delayed$04(...) call$delayed$04$1(__VA_ARGS__)
#		define call$delayed$04$1(...) call$delayed$04$2(__VA_ARGS__)
#		define call$delayed$04$2(f,...) f(__VA_ARGS__)
#		define call$delayed$05(...) call$delayed$05$1(__VA_ARGS__)
#		define call$delayed$05$1(...) call$delayed$05$2(__VA_ARGS__)
#		define call$delayed$05$2(f,...) f(__VA_ARGS__)
#		define call$delayed$06(...) call$delayed$06$1(__VA_ARGS__)
#		define call$delayed$06$1(...) call$delayed$06$2(__VA_ARGS__)
#		define call$delayed$06$2(f,...) f(__VA_ARGS__)
#		define call$delayed$07(...) call$delayed$07$1(__VA_ARGS__)
#		define call$delayed$07$1(...) call$delayed$07$2(__VA_ARGS__)
#		define call$delayed$07$2(f,...) f(__VA_ARGS__)
#		define call$delayed$08(...) call$delayed$08$1(__VA_ARGS__)
#		define call$delayed$08$1(...) call$delayed$08$2(__VA_ARGS__)
#		define call$delayed$08$2(f,...) f(__VA_ARGS__)
#		define call$delayed$09(...) call$delayed$09$1(__VA_ARGS__)
#		define call$delayed$09$1(...) call$delayed$09$2(__VA_ARGS__)
#		define call$delayed$09$2(f,...) f(__VA_ARGS__)
#		define call$delayed$0a(...) call$delayed$0a$1(__VA_ARGS__)
#		define call$delayed$0a$1(...) call$delayed$0a$2(__VA_ARGS__)
#		define call$delayed$0a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$0b(...) call$delayed$0b$1(__VA_ARGS__)
#		define call$delayed$0b$1(...) call$delayed$0b$2(__VA_ARGS__)
#		define call$delayed$0b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$0c(...) call$delayed$0c$1(__VA_ARGS__)
#		define call$delayed$0c$1(...) call$delayed$0c$2(__VA_ARGS__)
#		define call$delayed$0c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$0d(...) call$delayed$0d$1(__VA_ARGS__)
#		define call$delayed$0d$1(...) call$delayed$0d$2(__VA_ARGS__)
#		define call$delayed$0d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$0e(...) call$delayed$0e$1(__VA_ARGS__)
#		define call$delayed$0e$1(...) call$delayed$0e$2(__VA_ARGS__)
#		define call$delayed$0e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$0f(...) call$delayed$0f$1(__VA_ARGS__)
#		define call$delayed$0f$1(...) call$delayed$0f$2(__VA_ARGS__)
#		define call$delayed$0f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$10(...) call$delayed$10$1(__VA_ARGS__)
#		define call$delayed$10$1(...) call$delayed$10$2(__VA_ARGS__)
#		define call$delayed$10$2(f,...) f(__VA_ARGS__)
#		define call$delayed$11(...) call$delayed$11$1(__VA_ARGS__)
#		define call$delayed$11$1(...) call$delayed$11$2(__VA_ARGS__)
#		define call$delayed$11$2(f,...) f(__VA_ARGS__)
#		define call$delayed$12(...) call$delayed$12$1(__VA_ARGS__)
#		define call$delayed$12$1(...) call$delayed$12$2(__VA_ARGS__)
#		define call$delayed$12$2(f,...) f(__VA_ARGS__)
#		define call$delayed$13(...) call$delayed$13$1(__VA_ARGS__)
#		define call$delayed$13$1(...) call$delayed$13$2(__VA_ARGS__)
#		define call$delayed$13$2(f,...) f(__VA_ARGS__)
#		define call$delayed$14(...) call$delayed$14$1(__VA_ARGS__)
#		define call$delayed$14$1(...) call$delayed$14$2(__VA_ARGS__)
#		define call$delayed$14$2(f,...) f(__VA_ARGS__)
#		define call$delayed$15(...) call$delayed$15$1(__VA_ARGS__)
#		define call$delayed$15$1(...) call$delayed$15$2(__VA_ARGS__)
#		define call$delayed$15$2(f,...) f(__VA_ARGS__)
#		define call$delayed$16(...) call$delayed$16$1(__VA_ARGS__)
#		define call$delayed$16$1(...) call$delayed$16$2(__VA_ARGS__)
#		define call$delayed$16$2(f,...) f(__VA_ARGS__)
#		define call$delayed$17(...) call$delayed$17$1(__VA_ARGS__)
#		define call$delayed$17$1(...) call$delayed$17$2(__VA_ARGS__)
#		define call$delayed$17$2(f,...) f(__VA_ARGS__)
#		define call$delayed$18(...) call$delayed$18$1(__VA_ARGS__)
#		define call$delayed$18$1(...) call$delayed$18$2(__VA_ARGS__)
#		define call$delayed$18$2(f,...) f(__VA_ARGS__)
#		define call$delayed$19(...) call$delayed$19$1(__VA_ARGS__)
#		define call$delayed$19$1(...) call$delayed$19$2(__VA_ARGS__)
#		define call$delayed$19$2(f,...) f(__VA_ARGS__)
#		define call$delayed$1a(...) call$delayed$1a$1(__VA_ARGS__)
#		define call$delayed$1a$1(...) call$delayed$1a$2(__VA_ARGS__)
#		define call$delayed$1a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$1b(...) call$delayed$1b$1(__VA_ARGS__)
#		define call$delayed$1b$1(...) call$delayed$1b$2(__VA_ARGS__)
#		define call$delayed$1b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$1c(...) call$delayed$1c$1(__VA_ARGS__)
#		define call$delayed$1c$1(...) call$delayed$1c$2(__VA_ARGS__)
#		define call$delayed$1c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$1d(...) call$delayed$1d$1(__VA_ARGS__)
#		define call$delayed$1d$1(...) call$delayed$1d$2(__VA_ARGS__)
#		define call$delayed$1d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$1e(...) call$delayed$1e$1(__VA_ARGS__)
#		define call$delayed$1e$1(...) call$delayed$1e$2(__VA_ARGS__)
#		define call$delayed$1e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$1f(...) call$delayed$1f$1(__VA_ARGS__)
#		define call$delayed$1f$1(...) call$delayed$1f$2(__VA_ARGS__)
#		define call$delayed$1f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$20(...) call$delayed$20$1(__VA_ARGS__)
#		define call$delayed$20$1(...) call$delayed$20$2(__VA_ARGS__)
#		define call$delayed$20$2(f,...) f(__VA_ARGS__)
#		define call$delayed$21(...) call$delayed$21$1(__VA_ARGS__)
#		define call$delayed$21$1(...) call$delayed$21$2(__VA_ARGS__)
#		define call$delayed$21$2(f,...) f(__VA_ARGS__)
#		define call$delayed$22(...) call$delayed$22$1(__VA_ARGS__)
#		define call$delayed$22$1(...) call$delayed$22$2(__VA_ARGS__)
#		define call$delayed$22$2(f,...) f(__VA_ARGS__)
#		define call$delayed$23(...) call$delayed$23$1(__VA_ARGS__)
#		define call$delayed$23$1(...) call$delayed$23$2(__VA_ARGS__)
#		define call$delayed$23$2(f,...) f(__VA_ARGS__)
#		define call$delayed$24(...) call$delayed$24$1(__VA_ARGS__)
#		define call$delayed$24$1(...) call$delayed$24$2(__VA_ARGS__)
#		define call$delayed$24$2(f,...) f(__VA_ARGS__)
#		define call$delayed$25(...) call$delayed$25$1(__VA_ARGS__)
#		define call$delayed$25$1(...) call$delayed$25$2(__VA_ARGS__)
#		define call$delayed$25$2(f,...) f(__VA_ARGS__)
#		define call$delayed$26(...) call$delayed$26$1(__VA_ARGS__)
#		define call$delayed$26$1(...) call$delayed$26$2(__VA_ARGS__)
#		define call$delayed$26$2(f,...) f(__VA_ARGS__)
#		define call$delayed$27(...) call$delayed$27$1(__VA_ARGS__)
#		define call$delayed$27$1(...) call$delayed$27$2(__VA_ARGS__)
#		define call$delayed$27$2(f,...) f(__VA_ARGS__)
#		define call$delayed$28(...) call$delayed$28$1(__VA_ARGS__)
#		define call$delayed$28$1(...) call$delayed$28$2(__VA_ARGS__)
#		define call$delayed$28$2(f,...) f(__VA_ARGS__)
#		define call$delayed$29(...) call$delayed$29$1(__VA_ARGS__)
#		define call$delayed$29$1(...) call$delayed$29$2(__VA_ARGS__)
#		define call$delayed$29$2(f,...) f(__VA_ARGS__)
#		define call$delayed$2a(...) call$delayed$2a$1(__VA_ARGS__)
#		define call$delayed$2a$1(...) call$delayed$2a$2(__VA_ARGS__)
#		define call$delayed$2a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$2b(...) call$delayed$2b$1(__VA_ARGS__)
#		define call$delayed$2b$1(...) call$delayed$2b$2(__VA_ARGS__)
#		define call$delayed$2b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$2c(...) call$delayed$2c$1(__VA_ARGS__)
#		define call$delayed$2c$1(...) call$delayed$2c$2(__VA_ARGS__)
#		define call$delayed$2c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$2d(...) call$delayed$2d$1(__VA_ARGS__)
#		define call$delayed$2d$1(...) call$delayed$2d$2(__VA_ARGS__)
#		define call$delayed$2d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$2e(...) call$delayed$2e$1(__VA_ARGS__)
#		define call$delayed$2e$1(...) call$delayed$2e$2(__VA_ARGS__)
#		define call$delayed$2e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$2f(...) call$delayed$2f$1(__VA_ARGS__)
#		define call$delayed$2f$1(...) call$delayed$2f$2(__VA_ARGS__)
#		define call$delayed$2f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$30(...) call$delayed$30$1(__VA_ARGS__)
#		define call$delayed$30$1(...) call$delayed$30$2(__VA_ARGS__)
#		define call$delayed$30$2(f,...) f(__VA_ARGS__)
#		define call$delayed$31(...) call$delayed$31$1(__VA_ARGS__)
#		define call$delayed$31$1(...) call$delayed$31$2(__VA_ARGS__)
#		define call$delayed$31$2(f,...) f(__VA_ARGS__)
#		define call$delayed$32(...) call$delayed$32$1(__VA_ARGS__)
#		define call$delayed$32$1(...) call$delayed$32$2(__VA_ARGS__)
#		define call$delayed$32$2(f,...) f(__VA_ARGS__)
#		define call$delayed$33(...) call$delayed$33$1(__VA_ARGS__)
#		define call$delayed$33$1(...) call$delayed$33$2(__VA_ARGS__)
#		define call$delayed$33$2(f,...) f(__VA_ARGS__)
#		define call$delayed$34(...) call$delayed$34$1(__VA_ARGS__)
#		define call$delayed$34$1(...) call$delayed$34$2(__VA_ARGS__)
#		define call$delayed$34$2(f,...) f(__VA_ARGS__)
#		define call$delayed$35(...) call$delayed$35$1(__VA_ARGS__)
#		define call$delayed$35$1(...) call$delayed$35$2(__VA_ARGS__)
#		define call$delayed$35$2(f,...) f(__VA_ARGS__)
#		define call$delayed$36(...) call$delayed$36$1(__VA_ARGS__)
#		define call$delayed$36$1(...) call$delayed$36$2(__VA_ARGS__)
#		define call$delayed$36$2(f,...) f(__VA_ARGS__)
#		define call$delayed$37(...) call$delayed$37$1(__VA_ARGS__)
#		define call$delayed$37$1(...) call$delayed$37$2(__VA_ARGS__)
#		define call$delayed$37$2(f,...) f(__VA_ARGS__)
#		define call$delayed$38(...) call$delayed$38$1(__VA_ARGS__)
#		define call$delayed$38$1(...) call$delayed$38$2(__VA_ARGS__)
#		define call$delayed$38$2(f,...) f(__VA_ARGS__)
#		define call$delayed$39(...) call$delayed$39$1(__VA_ARGS__)
#		define call$delayed$39$1(...) call$delayed$39$2(__VA_ARGS__)
#		define call$delayed$39$2(f,...) f(__VA_ARGS__)
#		define call$delayed$3a(...) call$delayed$3a$1(__VA_ARGS__)
#		define call$delayed$3a$1(...) call$delayed$3a$2(__VA_ARGS__)
#		define call$delayed$3a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$3b(...) call$delayed$3b$1(__VA_ARGS__)
#		define call$delayed$3b$1(...) call$delayed$3b$2(__VA_ARGS__)
#		define call$delayed$3b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$3c(...) call$delayed$3c$1(__VA_ARGS__)
#		define call$delayed$3c$1(...) call$delayed$3c$2(__VA_ARGS__)
#		define call$delayed$3c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$3d(...) call$delayed$3d$1(__VA_ARGS__)
#		define call$delayed$3d$1(...) call$delayed$3d$2(__VA_ARGS__)
#		define call$delayed$3d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$3e(...) call$delayed$3e$1(__VA_ARGS__)
#		define call$delayed$3e$1(...) call$delayed$3e$2(__VA_ARGS__)
#		define call$delayed$3e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$3f(...) call$delayed$3f$1(__VA_ARGS__)
#		define call$delayed$3f$1(...) call$delayed$3f$2(__VA_ARGS__)
#		define call$delayed$3f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$40(...) call$delayed$40$1(__VA_ARGS__)
#		define call$delayed$40$1(...) call$delayed$40$2(__VA_ARGS__)
#		define call$delayed$40$2(f,...) f(__VA_ARGS__)
#		define call$delayed$41(...) call$delayed$41$1(__VA_ARGS__)
#		define call$delayed$41$1(...) call$delayed$41$2(__VA_ARGS__)
#		define call$delayed$41$2(f,...) f(__VA_ARGS__)
#		define call$delayed$42(...) call$delayed$42$1(__VA_ARGS__)
#		define call$delayed$42$1(...) call$delayed$42$2(__VA_ARGS__)
#		define call$delayed$42$2(f,...) f(__VA_ARGS__)
#		define call$delayed$43(...) call$delayed$43$1(__VA_ARGS__)
#		define call$delayed$43$1(...) call$delayed$43$2(__VA_ARGS__)
#		define call$delayed$43$2(f,...) f(__VA_ARGS__)
#		define call$delayed$44(...) call$delayed$44$1(__VA_ARGS__)
#		define call$delayed$44$1(...) call$delayed$44$2(__VA_ARGS__)
#		define call$delayed$44$2(f,...) f(__VA_ARGS__)
#		define call$delayed$45(...) call$delayed$45$1(__VA_ARGS__)
#		define call$delayed$45$1(...) call$delayed$45$2(__VA_ARGS__)
#		define call$delayed$45$2(f,...) f(__VA_ARGS__)
#		define call$delayed$46(...) call$delayed$46$1(__VA_ARGS__)
#		define call$delayed$46$1(...) call$delayed$46$2(__VA_ARGS__)
#		define call$delayed$46$2(f,...) f(__VA_ARGS__)
#		define call$delayed$47(...) call$delayed$47$1(__VA_ARGS__)
#		define call$delayed$47$1(...) call$delayed$47$2(__VA_ARGS__)
#		define call$delayed$47$2(f,...) f(__VA_ARGS__)
#		define call$delayed$48(...) call$delayed$48$1(__VA_ARGS__)
#		define call$delayed$48$1(...) call$delayed$48$2(__VA_ARGS__)
#		define call$delayed$48$2(f,...) f(__VA_ARGS__)
#		define call$delayed$49(...) call$delayed$49$1(__VA_ARGS__)
#		define call$delayed$49$1(...) call$delayed$49$2(__VA_ARGS__)
#		define call$delayed$49$2(f,...) f(__VA_ARGS__)
#		define call$delayed$4a(...) call$delayed$4a$1(__VA_ARGS__)
#		define call$delayed$4a$1(...) call$delayed$4a$2(__VA_ARGS__)
#		define call$delayed$4a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$4b(...) call$delayed$4b$1(__VA_ARGS__)
#		define call$delayed$4b$1(...) call$delayed$4b$2(__VA_ARGS__)
#		define call$delayed$4b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$4c(...) call$delayed$4c$1(__VA_ARGS__)
#		define call$delayed$4c$1(...) call$delayed$4c$2(__VA_ARGS__)
#		define call$delayed$4c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$4d(...) call$delayed$4d$1(__VA_ARGS__)
#		define call$delayed$4d$1(...) call$delayed$4d$2(__VA_ARGS__)
#		define call$delayed$4d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$4e(...) call$delayed$4e$1(__VA_ARGS__)
#		define call$delayed$4e$1(...) call$delayed$4e$2(__VA_ARGS__)
#		define call$delayed$4e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$4f(...) call$delayed$4f$1(__VA_ARGS__)
#		define call$delayed$4f$1(...) call$delayed$4f$2(__VA_ARGS__)
#		define call$delayed$4f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$50(...) call$delayed$50$1(__VA_ARGS__)
#		define call$delayed$50$1(...) call$delayed$50$2(__VA_ARGS__)
#		define call$delayed$50$2(f,...) f(__VA_ARGS__)
#		define call$delayed$51(...) call$delayed$51$1(__VA_ARGS__)
#		define call$delayed$51$1(...) call$delayed$51$2(__VA_ARGS__)
#		define call$delayed$51$2(f,...) f(__VA_ARGS__)
#		define call$delayed$52(...) call$delayed$52$1(__VA_ARGS__)
#		define call$delayed$52$1(...) call$delayed$52$2(__VA_ARGS__)
#		define call$delayed$52$2(f,...) f(__VA_ARGS__)
#		define call$delayed$53(...) call$delayed$53$1(__VA_ARGS__)
#		define call$delayed$53$1(...) call$delayed$53$2(__VA_ARGS__)
#		define call$delayed$53$2(f,...) f(__VA_ARGS__)
#		define call$delayed$54(...) call$delayed$54$1(__VA_ARGS__)
#		define call$delayed$54$1(...) call$delayed$54$2(__VA_ARGS__)
#		define call$delayed$54$2(f,...) f(__VA_ARGS__)
#		define call$delayed$55(...) call$delayed$55$1(__VA_ARGS__)
#		define call$delayed$55$1(...) call$delayed$55$2(__VA_ARGS__)
#		define call$delayed$55$2(f,...) f(__VA_ARGS__)
#		define call$delayed$56(...) call$delayed$56$1(__VA_ARGS__)
#		define call$delayed$56$1(...) call$delayed$56$2(__VA_ARGS__)
#		define call$delayed$56$2(f,...) f(__VA_ARGS__)
#		define call$delayed$57(...) call$delayed$57$1(__VA_ARGS__)
#		define call$delayed$57$1(...) call$delayed$57$2(__VA_ARGS__)
#		define call$delayed$57$2(f,...) f(__VA_ARGS__)
#		define call$delayed$58(...) call$delayed$58$1(__VA_ARGS__)
#		define call$delayed$58$1(...) call$delayed$58$2(__VA_ARGS__)
#		define call$delayed$58$2(f,...) f(__VA_ARGS__)
#		define call$delayed$59(...) call$delayed$59$1(__VA_ARGS__)
#		define call$delayed$59$1(...) call$delayed$59$2(__VA_ARGS__)
#		define call$delayed$59$2(f,...) f(__VA_ARGS__)
#		define call$delayed$5a(...) call$delayed$5a$1(__VA_ARGS__)
#		define call$delayed$5a$1(...) call$delayed$5a$2(__VA_ARGS__)
#		define call$delayed$5a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$5b(...) call$delayed$5b$1(__VA_ARGS__)
#		define call$delayed$5b$1(...) call$delayed$5b$2(__VA_ARGS__)
#		define call$delayed$5b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$5c(...) call$delayed$5c$1(__VA_ARGS__)
#		define call$delayed$5c$1(...) call$delayed$5c$2(__VA_ARGS__)
#		define call$delayed$5c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$5d(...) call$delayed$5d$1(__VA_ARGS__)
#		define call$delayed$5d$1(...) call$delayed$5d$2(__VA_ARGS__)
#		define call$delayed$5d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$5e(...) call$delayed$5e$1(__VA_ARGS__)
#		define call$delayed$5e$1(...) call$delayed$5e$2(__VA_ARGS__)
#		define call$delayed$5e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$5f(...) call$delayed$5f$1(__VA_ARGS__)
#		define call$delayed$5f$1(...) call$delayed$5f$2(__VA_ARGS__)
#		define call$delayed$5f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$60(...) call$delayed$60$1(__VA_ARGS__)
#		define call$delayed$60$1(...) call$delayed$60$2(__VA_ARGS__)
#		define call$delayed$60$2(f,...) f(__VA_ARGS__)
#		define call$delayed$61(...) call$delayed$61$1(__VA_ARGS__)
#		define call$delayed$61$1(...) call$delayed$61$2(__VA_ARGS__)
#		define call$delayed$61$2(f,...) f(__VA_ARGS__)
#		define call$delayed$62(...) call$delayed$62$1(__VA_ARGS__)
#		define call$delayed$62$1(...) call$delayed$62$2(__VA_ARGS__)
#		define call$delayed$62$2(f,...) f(__VA_ARGS__)
#		define call$delayed$63(...) call$delayed$63$1(__VA_ARGS__)
#		define call$delayed$63$1(...) call$delayed$63$2(__VA_ARGS__)
#		define call$delayed$63$2(f,...) f(__VA_ARGS__)
#		define call$delayed$64(...) call$delayed$64$1(__VA_ARGS__)
#		define call$delayed$64$1(...) call$delayed$64$2(__VA_ARGS__)
#		define call$delayed$64$2(f,...) f(__VA_ARGS__)
#		define call$delayed$65(...) call$delayed$65$1(__VA_ARGS__)
#		define call$delayed$65$1(...) call$delayed$65$2(__VA_ARGS__)
#		define call$delayed$65$2(f,...) f(__VA_ARGS__)
#		define call$delayed$66(...) call$delayed$66$1(__VA_ARGS__)
#		define call$delayed$66$1(...) call$delayed$66$2(__VA_ARGS__)
#		define call$delayed$66$2(f,...) f(__VA_ARGS__)
#		define call$delayed$67(...) call$delayed$67$1(__VA_ARGS__)
#		define call$delayed$67$1(...) call$delayed$67$2(__VA_ARGS__)
#		define call$delayed$67$2(f,...) f(__VA_ARGS__)
#		define call$delayed$68(...) call$delayed$68$1(__VA_ARGS__)
#		define call$delayed$68$1(...) call$delayed$68$2(__VA_ARGS__)
#		define call$delayed$68$2(f,...) f(__VA_ARGS__)
#		define call$delayed$69(...) call$delayed$69$1(__VA_ARGS__)
#		define call$delayed$69$1(...) call$delayed$69$2(__VA_ARGS__)
#		define call$delayed$69$2(f,...) f(__VA_ARGS__)
#		define call$delayed$6a(...) call$delayed$6a$1(__VA_ARGS__)
#		define call$delayed$6a$1(...) call$delayed$6a$2(__VA_ARGS__)
#		define call$delayed$6a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$6b(...) call$delayed$6b$1(__VA_ARGS__)
#		define call$delayed$6b$1(...) call$delayed$6b$2(__VA_ARGS__)
#		define call$delayed$6b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$6c(...) call$delayed$6c$1(__VA_ARGS__)
#		define call$delayed$6c$1(...) call$delayed$6c$2(__VA_ARGS__)
#		define call$delayed$6c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$6d(...) call$delayed$6d$1(__VA_ARGS__)
#		define call$delayed$6d$1(...) call$delayed$6d$2(__VA_ARGS__)
#		define call$delayed$6d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$6e(...) call$delayed$6e$1(__VA_ARGS__)
#		define call$delayed$6e$1(...) call$delayed$6e$2(__VA_ARGS__)
#		define call$delayed$6e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$6f(...) call$delayed$6f$1(__VA_ARGS__)
#		define call$delayed$6f$1(...) call$delayed$6f$2(__VA_ARGS__)
#		define call$delayed$6f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$70(...) call$delayed$70$1(__VA_ARGS__)
#		define call$delayed$70$1(...) call$delayed$70$2(__VA_ARGS__)
#		define call$delayed$70$2(f,...) f(__VA_ARGS__)
#		define call$delayed$71(...) call$delayed$71$1(__VA_ARGS__)
#		define call$delayed$71$1(...) call$delayed$71$2(__VA_ARGS__)
#		define call$delayed$71$2(f,...) f(__VA_ARGS__)
#		define call$delayed$72(...) call$delayed$72$1(__VA_ARGS__)
#		define call$delayed$72$1(...) call$delayed$72$2(__VA_ARGS__)
#		define call$delayed$72$2(f,...) f(__VA_ARGS__)
#		define call$delayed$73(...) call$delayed$73$1(__VA_ARGS__)
#		define call$delayed$73$1(...) call$delayed$73$2(__VA_ARGS__)
#		define call$delayed$73$2(f,...) f(__VA_ARGS__)
#		define call$delayed$74(...) call$delayed$74$1(__VA_ARGS__)
#		define call$delayed$74$1(...) call$delayed$74$2(__VA_ARGS__)
#		define call$delayed$74$2(f,...) f(__VA_ARGS__)
#		define call$delayed$75(...) call$delayed$75$1(__VA_ARGS__)
#		define call$delayed$75$1(...) call$delayed$75$2(__VA_ARGS__)
#		define call$delayed$75$2(f,...) f(__VA_ARGS__)
#		define call$delayed$76(...) call$delayed$76$1(__VA_ARGS__)
#		define call$delayed$76$1(...) call$delayed$76$2(__VA_ARGS__)
#		define call$delayed$76$2(f,...) f(__VA_ARGS__)
#		define call$delayed$77(...) call$delayed$77$1(__VA_ARGS__)
#		define call$delayed$77$1(...) call$delayed$77$2(__VA_ARGS__)
#		define call$delayed$77$2(f,...) f(__VA_ARGS__)
#		define call$delayed$78(...) call$delayed$78$1(__VA_ARGS__)
#		define call$delayed$78$1(...) call$delayed$78$2(__VA_ARGS__)
#		define call$delayed$78$2(f,...) f(__VA_ARGS__)
#		define call$delayed$79(...) call$delayed$79$1(__VA_ARGS__)
#		define call$delayed$79$1(...) call$delayed$79$2(__VA_ARGS__)
#		define call$delayed$79$2(f,...) f(__VA_ARGS__)
#		define call$delayed$7a(...) call$delayed$7a$1(__VA_ARGS__)
#		define call$delayed$7a$1(...) call$delayed$7a$2(__VA_ARGS__)
#		define call$delayed$7a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$7b(...) call$delayed$7b$1(__VA_ARGS__)
#		define call$delayed$7b$1(...) call$delayed$7b$2(__VA_ARGS__)
#		define call$delayed$7b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$7c(...) call$delayed$7c$1(__VA_ARGS__)
#		define call$delayed$7c$1(...) call$delayed$7c$2(__VA_ARGS__)
#		define call$delayed$7c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$7d(...) call$delayed$7d$1(__VA_ARGS__)
#		define call$delayed$7d$1(...) call$delayed$7d$2(__VA_ARGS__)
#		define call$delayed$7d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$7e(...) call$delayed$7e$1(__VA_ARGS__)
#		define call$delayed$7e$1(...) call$delayed$7e$2(__VA_ARGS__)
#		define call$delayed$7e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$7f(...) call$delayed$7f$1(__VA_ARGS__)
#		define call$delayed$7f$1(...) call$delayed$7f$2(__VA_ARGS__)
#		define call$delayed$7f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$80(...) call$delayed$80$1(__VA_ARGS__)
#		define call$delayed$80$1(...) call$delayed$80$2(__VA_ARGS__)
#		define call$delayed$80$2(f,...) f(__VA_ARGS__)
#		define call$delayed$81(...) call$delayed$81$1(__VA_ARGS__)
#		define call$delayed$81$1(...) call$delayed$81$2(__VA_ARGS__)
#		define call$delayed$81$2(f,...) f(__VA_ARGS__)
#		define call$delayed$82(...) call$delayed$82$1(__VA_ARGS__)
#		define call$delayed$82$1(...) call$delayed$82$2(__VA_ARGS__)
#		define call$delayed$82$2(f,...) f(__VA_ARGS__)
#		define call$delayed$83(...) call$delayed$83$1(__VA_ARGS__)
#		define call$delayed$83$1(...) call$delayed$83$2(__VA_ARGS__)
#		define call$delayed$83$2(f,...) f(__VA_ARGS__)
#		define call$delayed$84(...) call$delayed$84$1(__VA_ARGS__)
#		define call$delayed$84$1(...) call$delayed$84$2(__VA_ARGS__)
#		define call$delayed$84$2(f,...) f(__VA_ARGS__)
#		define call$delayed$85(...) call$delayed$85$1(__VA_ARGS__)
#		define call$delayed$85$1(...) call$delayed$85$2(__VA_ARGS__)
#		define call$delayed$85$2(f,...) f(__VA_ARGS__)
#		define call$delayed$86(...) call$delayed$86$1(__VA_ARGS__)
#		define call$delayed$86$1(...) call$delayed$86$2(__VA_ARGS__)
#		define call$delayed$86$2(f,...) f(__VA_ARGS__)
#		define call$delayed$87(...) call$delayed$87$1(__VA_ARGS__)
#		define call$delayed$87$1(...) call$delayed$87$2(__VA_ARGS__)
#		define call$delayed$87$2(f,...) f(__VA_ARGS__)
#		define call$delayed$88(...) call$delayed$88$1(__VA_ARGS__)
#		define call$delayed$88$1(...) call$delayed$88$2(__VA_ARGS__)
#		define call$delayed$88$2(f,...) f(__VA_ARGS__)
#		define call$delayed$89(...) call$delayed$89$1(__VA_ARGS__)
#		define call$delayed$89$1(...) call$delayed$89$2(__VA_ARGS__)
#		define call$delayed$89$2(f,...) f(__VA_ARGS__)
#		define call$delayed$8a(...) call$delayed$8a$1(__VA_ARGS__)
#		define call$delayed$8a$1(...) call$delayed$8a$2(__VA_ARGS__)
#		define call$delayed$8a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$8b(...) call$delayed$8b$1(__VA_ARGS__)
#		define call$delayed$8b$1(...) call$delayed$8b$2(__VA_ARGS__)
#		define call$delayed$8b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$8c(...) call$delayed$8c$1(__VA_ARGS__)
#		define call$delayed$8c$1(...) call$delayed$8c$2(__VA_ARGS__)
#		define call$delayed$8c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$8d(...) call$delayed$8d$1(__VA_ARGS__)
#		define call$delayed$8d$1(...) call$delayed$8d$2(__VA_ARGS__)
#		define call$delayed$8d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$8e(...) call$delayed$8e$1(__VA_ARGS__)
#		define call$delayed$8e$1(...) call$delayed$8e$2(__VA_ARGS__)
#		define call$delayed$8e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$8f(...) call$delayed$8f$1(__VA_ARGS__)
#		define call$delayed$8f$1(...) call$delayed$8f$2(__VA_ARGS__)
#		define call$delayed$8f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$90(...) call$delayed$90$1(__VA_ARGS__)
#		define call$delayed$90$1(...) call$delayed$90$2(__VA_ARGS__)
#		define call$delayed$90$2(f,...) f(__VA_ARGS__)
#		define call$delayed$91(...) call$delayed$91$1(__VA_ARGS__)
#		define call$delayed$91$1(...) call$delayed$91$2(__VA_ARGS__)
#		define call$delayed$91$2(f,...) f(__VA_ARGS__)
#		define call$delayed$92(...) call$delayed$92$1(__VA_ARGS__)
#		define call$delayed$92$1(...) call$delayed$92$2(__VA_ARGS__)
#		define call$delayed$92$2(f,...) f(__VA_ARGS__)
#		define call$delayed$93(...) call$delayed$93$1(__VA_ARGS__)
#		define call$delayed$93$1(...) call$delayed$93$2(__VA_ARGS__)
#		define call$delayed$93$2(f,...) f(__VA_ARGS__)
#		define call$delayed$94(...) call$delayed$94$1(__VA_ARGS__)
#		define call$delayed$94$1(...) call$delayed$94$2(__VA_ARGS__)
#		define call$delayed$94$2(f,...) f(__VA_ARGS__)
#		define call$delayed$95(...) call$delayed$95$1(__VA_ARGS__)
#		define call$delayed$95$1(...) call$delayed$95$2(__VA_ARGS__)
#		define call$delayed$95$2(f,...) f(__VA_ARGS__)
#		define call$delayed$96(...) call$delayed$96$1(__VA_ARGS__)
#		define call$delayed$96$1(...) call$delayed$96$2(__VA_ARGS__)
#		define call$delayed$96$2(f,...) f(__VA_ARGS__)
#		define call$delayed$97(...) call$delayed$97$1(__VA_ARGS__)
#		define call$delayed$97$1(...) call$delayed$97$2(__VA_ARGS__)
#		define call$delayed$97$2(f,...) f(__VA_ARGS__)
#		define call$delayed$98(...) call$delayed$98$1(__VA_ARGS__)
#		define call$delayed$98$1(...) call$delayed$98$2(__VA_ARGS__)
#		define call$delayed$98$2(f,...) f(__VA_ARGS__)
#		define call$delayed$99(...) call$delayed$99$1(__VA_ARGS__)
#		define call$delayed$99$1(...) call$delayed$99$2(__VA_ARGS__)
#		define call$delayed$99$2(f,...) f(__VA_ARGS__)
#		define call$delayed$9a(...) call$delayed$9a$1(__VA_ARGS__)
#		define call$delayed$9a$1(...) call$delayed$9a$2(__VA_ARGS__)
#		define call$delayed$9a$2(f,...) f(__VA_ARGS__)
#		define call$delayed$9b(...) call$delayed$9b$1(__VA_ARGS__)
#		define call$delayed$9b$1(...) call$delayed$9b$2(__VA_ARGS__)
#		define call$delayed$9b$2(f,...) f(__VA_ARGS__)
#		define call$delayed$9c(...) call$delayed$9c$1(__VA_ARGS__)
#		define call$delayed$9c$1(...) call$delayed$9c$2(__VA_ARGS__)
#		define call$delayed$9c$2(f,...) f(__VA_ARGS__)
#		define call$delayed$9d(...) call$delayed$9d$1(__VA_ARGS__)
#		define call$delayed$9d$1(...) call$delayed$9d$2(__VA_ARGS__)
#		define call$delayed$9d$2(f,...) f(__VA_ARGS__)
#		define call$delayed$9e(...) call$delayed$9e$1(__VA_ARGS__)
#		define call$delayed$9e$1(...) call$delayed$9e$2(__VA_ARGS__)
#		define call$delayed$9e$2(f,...) f(__VA_ARGS__)
#		define call$delayed$9f(...) call$delayed$9f$1(__VA_ARGS__)
#		define call$delayed$9f$1(...) call$delayed$9f$2(__VA_ARGS__)
#		define call$delayed$9f$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a0(...) call$delayed$a0$1(__VA_ARGS__)
#		define call$delayed$a0$1(...) call$delayed$a0$2(__VA_ARGS__)
#		define call$delayed$a0$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a1(...) call$delayed$a1$1(__VA_ARGS__)
#		define call$delayed$a1$1(...) call$delayed$a1$2(__VA_ARGS__)
#		define call$delayed$a1$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a2(...) call$delayed$a2$1(__VA_ARGS__)
#		define call$delayed$a2$1(...) call$delayed$a2$2(__VA_ARGS__)
#		define call$delayed$a2$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a3(...) call$delayed$a3$1(__VA_ARGS__)
#		define call$delayed$a3$1(...) call$delayed$a3$2(__VA_ARGS__)
#		define call$delayed$a3$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a4(...) call$delayed$a4$1(__VA_ARGS__)
#		define call$delayed$a4$1(...) call$delayed$a4$2(__VA_ARGS__)
#		define call$delayed$a4$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a5(...) call$delayed$a5$1(__VA_ARGS__)
#		define call$delayed$a5$1(...) call$delayed$a5$2(__VA_ARGS__)
#		define call$delayed$a5$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a6(...) call$delayed$a6$1(__VA_ARGS__)
#		define call$delayed$a6$1(...) call$delayed$a6$2(__VA_ARGS__)
#		define call$delayed$a6$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a7(...) call$delayed$a7$1(__VA_ARGS__)
#		define call$delayed$a7$1(...) call$delayed$a7$2(__VA_ARGS__)
#		define call$delayed$a7$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a8(...) call$delayed$a8$1(__VA_ARGS__)
#		define call$delayed$a8$1(...) call$delayed$a8$2(__VA_ARGS__)
#		define call$delayed$a8$2(f,...) f(__VA_ARGS__)
#		define call$delayed$a9(...) call$delayed$a9$1(__VA_ARGS__)
#		define call$delayed$a9$1(...) call$delayed$a9$2(__VA_ARGS__)
#		define call$delayed$a9$2(f,...) f(__VA_ARGS__)
#		define call$delayed$aa(...) call$delayed$aa$1(__VA_ARGS__)
#		define call$delayed$aa$1(...) call$delayed$aa$2(__VA_ARGS__)
#		define call$delayed$aa$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ab(...) call$delayed$ab$1(__VA_ARGS__)
#		define call$delayed$ab$1(...) call$delayed$ab$2(__VA_ARGS__)
#		define call$delayed$ab$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ac(...) call$delayed$ac$1(__VA_ARGS__)
#		define call$delayed$ac$1(...) call$delayed$ac$2(__VA_ARGS__)
#		define call$delayed$ac$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ad(...) call$delayed$ad$1(__VA_ARGS__)
#		define call$delayed$ad$1(...) call$delayed$ad$2(__VA_ARGS__)
#		define call$delayed$ad$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ae(...) call$delayed$ae$1(__VA_ARGS__)
#		define call$delayed$ae$1(...) call$delayed$ae$2(__VA_ARGS__)
#		define call$delayed$ae$2(f,...) f(__VA_ARGS__)
#		define call$delayed$af(...) call$delayed$af$1(__VA_ARGS__)
#		define call$delayed$af$1(...) call$delayed$af$2(__VA_ARGS__)
#		define call$delayed$af$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b0(...) call$delayed$b0$1(__VA_ARGS__)
#		define call$delayed$b0$1(...) call$delayed$b0$2(__VA_ARGS__)
#		define call$delayed$b0$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b1(...) call$delayed$b1$1(__VA_ARGS__)
#		define call$delayed$b1$1(...) call$delayed$b1$2(__VA_ARGS__)
#		define call$delayed$b1$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b2(...) call$delayed$b2$1(__VA_ARGS__)
#		define call$delayed$b2$1(...) call$delayed$b2$2(__VA_ARGS__)
#		define call$delayed$b2$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b3(...) call$delayed$b3$1(__VA_ARGS__)
#		define call$delayed$b3$1(...) call$delayed$b3$2(__VA_ARGS__)
#		define call$delayed$b3$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b4(...) call$delayed$b4$1(__VA_ARGS__)
#		define call$delayed$b4$1(...) call$delayed$b4$2(__VA_ARGS__)
#		define call$delayed$b4$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b5(...) call$delayed$b5$1(__VA_ARGS__)
#		define call$delayed$b5$1(...) call$delayed$b5$2(__VA_ARGS__)
#		define call$delayed$b5$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b6(...) call$delayed$b6$1(__VA_ARGS__)
#		define call$delayed$b6$1(...) call$delayed$b6$2(__VA_ARGS__)
#		define call$delayed$b6$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b7(...) call$delayed$b7$1(__VA_ARGS__)
#		define call$delayed$b7$1(...) call$delayed$b7$2(__VA_ARGS__)
#		define call$delayed$b7$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b8(...) call$delayed$b8$1(__VA_ARGS__)
#		define call$delayed$b8$1(...) call$delayed$b8$2(__VA_ARGS__)
#		define call$delayed$b8$2(f,...) f(__VA_ARGS__)
#		define call$delayed$b9(...) call$delayed$b9$1(__VA_ARGS__)
#		define call$delayed$b9$1(...) call$delayed$b9$2(__VA_ARGS__)
#		define call$delayed$b9$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ba(...) call$delayed$ba$1(__VA_ARGS__)
#		define call$delayed$ba$1(...) call$delayed$ba$2(__VA_ARGS__)
#		define call$delayed$ba$2(f,...) f(__VA_ARGS__)
#		define call$delayed$bb(...) call$delayed$bb$1(__VA_ARGS__)
#		define call$delayed$bb$1(...) call$delayed$bb$2(__VA_ARGS__)
#		define call$delayed$bb$2(f,...) f(__VA_ARGS__)
#		define call$delayed$bc(...) call$delayed$bc$1(__VA_ARGS__)
#		define call$delayed$bc$1(...) call$delayed$bc$2(__VA_ARGS__)
#		define call$delayed$bc$2(f,...) f(__VA_ARGS__)
#		define call$delayed$bd(...) call$delayed$bd$1(__VA_ARGS__)
#		define call$delayed$bd$1(...) call$delayed$bd$2(__VA_ARGS__)
#		define call$delayed$bd$2(f,...) f(__VA_ARGS__)
#		define call$delayed$be(...) call$delayed$be$1(__VA_ARGS__)
#		define call$delayed$be$1(...) call$delayed$be$2(__VA_ARGS__)
#		define call$delayed$be$2(f,...) f(__VA_ARGS__)
#		define call$delayed$bf(...) call$delayed$bf$1(__VA_ARGS__)
#		define call$delayed$bf$1(...) call$delayed$bf$2(__VA_ARGS__)
#		define call$delayed$bf$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c0(...) call$delayed$c0$1(__VA_ARGS__)
#		define call$delayed$c0$1(...) call$delayed$c0$2(__VA_ARGS__)
#		define call$delayed$c0$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c1(...) call$delayed$c1$1(__VA_ARGS__)
#		define call$delayed$c1$1(...) call$delayed$c1$2(__VA_ARGS__)
#		define call$delayed$c1$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c2(...) call$delayed$c2$1(__VA_ARGS__)
#		define call$delayed$c2$1(...) call$delayed$c2$2(__VA_ARGS__)
#		define call$delayed$c2$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c3(...) call$delayed$c3$1(__VA_ARGS__)
#		define call$delayed$c3$1(...) call$delayed$c3$2(__VA_ARGS__)
#		define call$delayed$c3$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c4(...) call$delayed$c4$1(__VA_ARGS__)
#		define call$delayed$c4$1(...) call$delayed$c4$2(__VA_ARGS__)
#		define call$delayed$c4$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c5(...) call$delayed$c5$1(__VA_ARGS__)
#		define call$delayed$c5$1(...) call$delayed$c5$2(__VA_ARGS__)
#		define call$delayed$c5$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c6(...) call$delayed$c6$1(__VA_ARGS__)
#		define call$delayed$c6$1(...) call$delayed$c6$2(__VA_ARGS__)
#		define call$delayed$c6$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c7(...) call$delayed$c7$1(__VA_ARGS__)
#		define call$delayed$c7$1(...) call$delayed$c7$2(__VA_ARGS__)
#		define call$delayed$c7$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c8(...) call$delayed$c8$1(__VA_ARGS__)
#		define call$delayed$c8$1(...) call$delayed$c8$2(__VA_ARGS__)
#		define call$delayed$c8$2(f,...) f(__VA_ARGS__)
#		define call$delayed$c9(...) call$delayed$c9$1(__VA_ARGS__)
#		define call$delayed$c9$1(...) call$delayed$c9$2(__VA_ARGS__)
#		define call$delayed$c9$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ca(...) call$delayed$ca$1(__VA_ARGS__)
#		define call$delayed$ca$1(...) call$delayed$ca$2(__VA_ARGS__)
#		define call$delayed$ca$2(f,...) f(__VA_ARGS__)
#		define call$delayed$cb(...) call$delayed$cb$1(__VA_ARGS__)
#		define call$delayed$cb$1(...) call$delayed$cb$2(__VA_ARGS__)
#		define call$delayed$cb$2(f,...) f(__VA_ARGS__)
#		define call$delayed$cc(...) call$delayed$cc$1(__VA_ARGS__)
#		define call$delayed$cc$1(...) call$delayed$cc$2(__VA_ARGS__)
#		define call$delayed$cc$2(f,...) f(__VA_ARGS__)
#		define call$delayed$cd(...) call$delayed$cd$1(__VA_ARGS__)
#		define call$delayed$cd$1(...) call$delayed$cd$2(__VA_ARGS__)
#		define call$delayed$cd$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ce(...) call$delayed$ce$1(__VA_ARGS__)
#		define call$delayed$ce$1(...) call$delayed$ce$2(__VA_ARGS__)
#		define call$delayed$ce$2(f,...) f(__VA_ARGS__)
#		define call$delayed$cf(...) call$delayed$cf$1(__VA_ARGS__)
#		define call$delayed$cf$1(...) call$delayed$cf$2(__VA_ARGS__)
#		define call$delayed$cf$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d0(...) call$delayed$d0$1(__VA_ARGS__)
#		define call$delayed$d0$1(...) call$delayed$d0$2(__VA_ARGS__)
#		define call$delayed$d0$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d1(...) call$delayed$d1$1(__VA_ARGS__)
#		define call$delayed$d1$1(...) call$delayed$d1$2(__VA_ARGS__)
#		define call$delayed$d1$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d2(...) call$delayed$d2$1(__VA_ARGS__)
#		define call$delayed$d2$1(...) call$delayed$d2$2(__VA_ARGS__)
#		define call$delayed$d2$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d3(...) call$delayed$d3$1(__VA_ARGS__)
#		define call$delayed$d3$1(...) call$delayed$d3$2(__VA_ARGS__)
#		define call$delayed$d3$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d4(...) call$delayed$d4$1(__VA_ARGS__)
#		define call$delayed$d4$1(...) call$delayed$d4$2(__VA_ARGS__)
#		define call$delayed$d4$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d5(...) call$delayed$d5$1(__VA_ARGS__)
#		define call$delayed$d5$1(...) call$delayed$d5$2(__VA_ARGS__)
#		define call$delayed$d5$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d6(...) call$delayed$d6$1(__VA_ARGS__)
#		define call$delayed$d6$1(...) call$delayed$d6$2(__VA_ARGS__)
#		define call$delayed$d6$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d7(...) call$delayed$d7$1(__VA_ARGS__)
#		define call$delayed$d7$1(...) call$delayed$d7$2(__VA_ARGS__)
#		define call$delayed$d7$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d8(...) call$delayed$d8$1(__VA_ARGS__)
#		define call$delayed$d8$1(...) call$delayed$d8$2(__VA_ARGS__)
#		define call$delayed$d8$2(f,...) f(__VA_ARGS__)
#		define call$delayed$d9(...) call$delayed$d9$1(__VA_ARGS__)
#		define call$delayed$d9$1(...) call$delayed$d9$2(__VA_ARGS__)
#		define call$delayed$d9$2(f,...) f(__VA_ARGS__)
#		define call$delayed$da(...) call$delayed$da$1(__VA_ARGS__)
#		define call$delayed$da$1(...) call$delayed$da$2(__VA_ARGS__)
#		define call$delayed$da$2(f,...) f(__VA_ARGS__)
#		define call$delayed$db(...) call$delayed$db$1(__VA_ARGS__)
#		define call$delayed$db$1(...) call$delayed$db$2(__VA_ARGS__)
#		define call$delayed$db$2(f,...) f(__VA_ARGS__)
#		define call$delayed$dc(...) call$delayed$dc$1(__VA_ARGS__)
#		define call$delayed$dc$1(...) call$delayed$dc$2(__VA_ARGS__)
#		define call$delayed$dc$2(f,...) f(__VA_ARGS__)
#		define call$delayed$dd(...) call$delayed$dd$1(__VA_ARGS__)
#		define call$delayed$dd$1(...) call$delayed$dd$2(__VA_ARGS__)
#		define call$delayed$dd$2(f,...) f(__VA_ARGS__)
#		define call$delayed$de(...) call$delayed$de$1(__VA_ARGS__)
#		define call$delayed$de$1(...) call$delayed$de$2(__VA_ARGS__)
#		define call$delayed$de$2(f,...) f(__VA_ARGS__)
#		define call$delayed$df(...) call$delayed$df$1(__VA_ARGS__)
#		define call$delayed$df$1(...) call$delayed$df$2(__VA_ARGS__)
#		define call$delayed$df$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e0(...) call$delayed$e0$1(__VA_ARGS__)
#		define call$delayed$e0$1(...) call$delayed$e0$2(__VA_ARGS__)
#		define call$delayed$e0$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e1(...) call$delayed$e1$1(__VA_ARGS__)
#		define call$delayed$e1$1(...) call$delayed$e1$2(__VA_ARGS__)
#		define call$delayed$e1$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e2(...) call$delayed$e2$1(__VA_ARGS__)
#		define call$delayed$e2$1(...) call$delayed$e2$2(__VA_ARGS__)
#		define call$delayed$e2$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e3(...) call$delayed$e3$1(__VA_ARGS__)
#		define call$delayed$e3$1(...) call$delayed$e3$2(__VA_ARGS__)
#		define call$delayed$e3$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e4(...) call$delayed$e4$1(__VA_ARGS__)
#		define call$delayed$e4$1(...) call$delayed$e4$2(__VA_ARGS__)
#		define call$delayed$e4$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e5(...) call$delayed$e5$1(__VA_ARGS__)
#		define call$delayed$e5$1(...) call$delayed$e5$2(__VA_ARGS__)
#		define call$delayed$e5$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e6(...) call$delayed$e6$1(__VA_ARGS__)
#		define call$delayed$e6$1(...) call$delayed$e6$2(__VA_ARGS__)
#		define call$delayed$e6$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e7(...) call$delayed$e7$1(__VA_ARGS__)
#		define call$delayed$e7$1(...) call$delayed$e7$2(__VA_ARGS__)
#		define call$delayed$e7$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e8(...) call$delayed$e8$1(__VA_ARGS__)
#		define call$delayed$e8$1(...) call$delayed$e8$2(__VA_ARGS__)
#		define call$delayed$e8$2(f,...) f(__VA_ARGS__)
#		define call$delayed$e9(...) call$delayed$e9$1(__VA_ARGS__)
#		define call$delayed$e9$1(...) call$delayed$e9$2(__VA_ARGS__)
#		define call$delayed$e9$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ea(...) call$delayed$ea$1(__VA_ARGS__)
#		define call$delayed$ea$1(...) call$delayed$ea$2(__VA_ARGS__)
#		define call$delayed$ea$2(f,...) f(__VA_ARGS__)
#		define call$delayed$eb(...) call$delayed$eb$1(__VA_ARGS__)
#		define call$delayed$eb$1(...) call$delayed$eb$2(__VA_ARGS__)
#		define call$delayed$eb$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ec(...) call$delayed$ec$1(__VA_ARGS__)
#		define call$delayed$ec$1(...) call$delayed$ec$2(__VA_ARGS__)
#		define call$delayed$ec$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ed(...) call$delayed$ed$1(__VA_ARGS__)
#		define call$delayed$ed$1(...) call$delayed$ed$2(__VA_ARGS__)
#		define call$delayed$ed$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ee(...) call$delayed$ee$1(__VA_ARGS__)
#		define call$delayed$ee$1(...) call$delayed$ee$2(__VA_ARGS__)
#		define call$delayed$ee$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ef(...) call$delayed$ef$1(__VA_ARGS__)
#		define call$delayed$ef$1(...) call$delayed$ef$2(__VA_ARGS__)
#		define call$delayed$ef$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f0(...) call$delayed$f0$1(__VA_ARGS__)
#		define call$delayed$f0$1(...) call$delayed$f0$2(__VA_ARGS__)
#		define call$delayed$f0$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f1(...) call$delayed$f1$1(__VA_ARGS__)
#		define call$delayed$f1$1(...) call$delayed$f1$2(__VA_ARGS__)
#		define call$delayed$f1$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f2(...) call$delayed$f2$1(__VA_ARGS__)
#		define call$delayed$f2$1(...) call$delayed$f2$2(__VA_ARGS__)
#		define call$delayed$f2$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f3(...) call$delayed$f3$1(__VA_ARGS__)
#		define call$delayed$f3$1(...) call$delayed$f3$2(__VA_ARGS__)
#		define call$delayed$f3$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f4(...) call$delayed$f4$1(__VA_ARGS__)
#		define call$delayed$f4$1(...) call$delayed$f4$2(__VA_ARGS__)
#		define call$delayed$f4$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f5(...) call$delayed$f5$1(__VA_ARGS__)
#		define call$delayed$f5$1(...) call$delayed$f5$2(__VA_ARGS__)
#		define call$delayed$f5$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f6(...) call$delayed$f6$1(__VA_ARGS__)
#		define call$delayed$f6$1(...) call$delayed$f6$2(__VA_ARGS__)
#		define call$delayed$f6$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f7(...) call$delayed$f7$1(__VA_ARGS__)
#		define call$delayed$f7$1(...) call$delayed$f7$2(__VA_ARGS__)
#		define call$delayed$f7$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f8(...) call$delayed$f8$1(__VA_ARGS__)
#		define call$delayed$f8$1(...) call$delayed$f8$2(__VA_ARGS__)
#		define call$delayed$f8$2(f,...) f(__VA_ARGS__)
#		define call$delayed$f9(...) call$delayed$f9$1(__VA_ARGS__)
#		define call$delayed$f9$1(...) call$delayed$f9$2(__VA_ARGS__)
#		define call$delayed$f9$2(f,...) f(__VA_ARGS__)
#		define call$delayed$fa(...) call$delayed$fa$1(__VA_ARGS__)
#		define call$delayed$fa$1(...) call$delayed$fa$2(__VA_ARGS__)
#		define call$delayed$fa$2(f,...) f(__VA_ARGS__)
#		define call$delayed$fb(...) call$delayed$fb$1(__VA_ARGS__)
#		define call$delayed$fb$1(...) call$delayed$fb$2(__VA_ARGS__)
#		define call$delayed$fb$2(f,...) f(__VA_ARGS__)
#		define call$delayed$fc(...) call$delayed$fc$1(__VA_ARGS__)
#		define call$delayed$fc$1(...) call$delayed$fc$2(__VA_ARGS__)
#		define call$delayed$fc$2(f,...) f(__VA_ARGS__)
#		define call$delayed$fd(...) call$delayed$fd$1(__VA_ARGS__)
#		define call$delayed$fd$1(...) call$delayed$fd$2(__VA_ARGS__)
#		define call$delayed$fd$2(f,...) f(__VA_ARGS__)
#		define call$delayed$fe(...) call$delayed$fe$1(__VA_ARGS__)
#		define call$delayed$fe$1(...) call$delayed$fe$2(__VA_ARGS__)
#		define call$delayed$fe$2(f,...) f(__VA_ARGS__)
#		define call$delayed$ff(...) call$delayed$ff$1(__VA_ARGS__)
#		define call$delayed$ff$1(...) call$delayed$ff$2(__VA_ARGS__)
#		define call$delayed$ff$2(f,...) f(__VA_ARGS__)
#		define ch reg08(CH)
#		define cl reg08(CL)
#		define cmp$call(...) cmp$call$1(__VA_ARGS__)
#		define cmp$call$1(...) cmp$call$2(__VA_ARGS__)
#		define cmp$call$2(f,...) f(__VA_ARGS__)
#		define cmp$isa(c,o,s,z) bit$and(c, bit$not(z))
#		define cmp$isae(c,o,s,z) c
#		define cmp$isb(c,o,s,z) bit$and(bit$not(c), bit$not(z))
#		define cmp$isbe(c,o,s,z) bit$or(z, bit$not(c))
#		define cmp$iseq(c,o,s,z) z
#		define cmp$isg(c,o,s,z) bit$and(bit$eq(s, o), bit$not(z))
#		define cmp$isge(c,o,s,z) bit$eq(s, o)
#		define cmp$isl(c,o,s,z) bit$xor(s, o)
#		define cmp$isle(c,o,s,z) bit$or(bit$xor(s, o), z)
#		define cmp$isneq(c,o,s,z) bit$not(z)
#		define code(...) code$1(__VA_ARGS__)
#		define code$1(...) code$2(__VA_ARGS__)
#		define code$2(state, instr) code$3(state, instr$get$operator(instr), instr$get$operands(instr))
#		define code$3(...) code$4(__VA_ARGS__)
#		define code$4(state, operator, ...) code$5(state, operator, count(__VA_ARGS__), __VA_ARGS__)
#		define code$5(...) code$6(__VA_ARGS__)
#		define code$6(state, operator, narg, ...) code$##operator(state, narg, ##__VA_ARGS__)
#		define code$adc(state,n,...) code$adc$argc##n(state, ##__VA_ARGS__)
#		define code$adc$argc02(state,a1,a2) code$adc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$adc$argc02$1(...) code$adc$argc02$2(__VA_ARGS__)
#		define code$adc$argc02$2(state,t1,t2,a1,a2) code$adc$argt$##t1##$##t2(state, a1,a2)
#		define code$adc$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for adc(mem, imm08)"))
#		define code$adc$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$2m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$adc$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for adc(mem, imm32)"))
#		define code$adc$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 10, modrm$rm(_1, _0))
#		define code$adc$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 11, modrm$rm(_1, _0))
#		define code$adc$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 11, modrm$rm(_1, _0))
#		define code$adc$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 11, modrm$rm(_1, _0))
#		define code$adc$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 10, modrm$rm(_1, _0))
#		define code$adc$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$2m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$adc$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 11, modrm$rm(_1, _0))
#		define code$adc$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$2m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$adc$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 11, modrm$rm(_1, _0))
#		define code$adc$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$2m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$adc$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 11, modrm$rm(_1, _0))
#		define code$adc$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (14), (rex08r(_0) 80, modrm$2r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 12, modrm$rm(_0, _1))
#		define code$adc$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 12, modrm$rm(_0, _1))
#		define code$adc$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 10, modrm$rr(_1, _0))
#		define code$adc$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 15), (rex16r(_0) 81, modrm$2r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$adc$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 13, modrm$rm(_0, _1))
#		define code$adc$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 13, modrm$rm(_0, _1))
#		define code$adc$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 11, modrm$rr(_1, _0))
#		define code$adc$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (15), (rex32r(_0) 81, modrm$2r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$adc$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 13, modrm$rm(_0, _1))
#		define code$adc$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 13, modrm$rm(_0, _1))
#		define code$adc$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 11, modrm$rr(_1, _0))
#		define code$adc$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$adc$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 15), (rex64r(_0) 81, modrm$2r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$adc$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 13, modrm$rm(_0, _1))
#		define code$adc$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 13, modrm$rm(_0, _1))
#		define code$adc$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 11, modrm$rr(_1, _0))
#		define code$adcx(state,n,...) code$adcx$argc##n(state, ##__VA_ARGS__)
#		define code$adcx$argc02(state,a1,a2) code$adcx$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$adcx$argc02$1(...) code$adcx$argc02$2(__VA_ARGS__)
#		define code$adcx$argc02$2(state,t1,t2,a1,a2) code$adcx$argt$##t1##$##t2(state, a1,a2)
#		define code$adcx$argt$reg32$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adcx$argt$reg32$mem32(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adcx$argt$reg32$reg32(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 38, f6, modrm$rr(_1, _0))
#		define code$adcx$argt$reg64$mem(state,_0,_1) bytes(66, rex64rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adcx$argt$reg64$mem64(state,_0,_1) bytes(66, rex64rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adcx$argt$reg64$reg64(state,_0,_1) bytes(66, rex64rr(_0, _1) 0f, 38, f6, modrm$rr(_1, _0))
#		define code$add(state,n,...) code$add$argc##n(state, ##__VA_ARGS__)
#		define code$add$argc02(state,a1,a2) code$add$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$add$argc02$1(...) code$add$argc02$2(__VA_ARGS__)
#		define code$add$argc02$2(state,t1,t2,a1,a2) code$add$argt$##t1##$##t2(state, a1,a2)
#		define code$add$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for add(mem, imm08)"))
#		define code$add$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$0m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$add$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for add(mem, imm32)"))
#		define code$add$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 00, modrm$rm(_1, _0))
#		define code$add$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 01, modrm$rm(_1, _0))
#		define code$add$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 01, modrm$rm(_1, _0))
#		define code$add$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 01, modrm$rm(_1, _0))
#		define code$add$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 00, modrm$rm(_1, _0))
#		define code$add$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$0m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$add$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 01, modrm$rm(_1, _0))
#		define code$add$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$0m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$add$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 01, modrm$rm(_1, _0))
#		define code$add$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$0m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$add$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 01, modrm$rm(_1, _0))
#		define code$add$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (04), (rex08r(_0) 80, modrm$0r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 02, modrm$rm(_0, _1))
#		define code$add$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 02, modrm$rm(_0, _1))
#		define code$add$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 00, modrm$rr(_1, _0))
#		define code$add$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$0r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 05), (rex16r(_0) 81, modrm$0r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$add$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 03, modrm$rm(_0, _1))
#		define code$add$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 03, modrm$rm(_0, _1))
#		define code$add$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 01, modrm$rr(_1, _0))
#		define code$add$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$0r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (05), (rex32r(_0) 81, modrm$0r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$add$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 03, modrm$rm(_0, _1))
#		define code$add$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 03, modrm$rm(_0, _1))
#		define code$add$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 01, modrm$rr(_1, _0))
#		define code$add$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$0r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$add$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 05), (rex64r(_0) 81, modrm$0r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$add$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 03, modrm$rm(_0, _1))
#		define code$add$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 03, modrm$rm(_0, _1))
#		define code$add$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 01, modrm$rr(_1, _0))
#		define code$addpd(state,n,...) code$addpd$argc##n(state, ##__VA_ARGS__)
#		define code$addpd$argc02(state,a1,a2) code$addpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$addpd$argc02$1(...) code$addpd$argc02$2(__VA_ARGS__)
#		define code$addpd$argc02$2(state,t1,t2,a1,a2) code$addpd$argt$##t1##$##t2(state, a1,a2)
#		define code$addpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 58, modrm$rr(_0, _1))
#		define code$addps(state,n,...) code$addps$argc##n(state, ##__VA_ARGS__)
#		define code$addps$argc02(state,a1,a2) code$addps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$addps$argc02$1(...) code$addps$argc02$2(__VA_ARGS__)
#		define code$addps$argc02$2(state,t1,t2,a1,a2) code$addps$argt$##t1##$##t2(state, a1,a2)
#		define code$addps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 58, modrm$rr(_0, _1))
#		define code$addsd(state,n,...) code$addsd$argc##n(state, ##__VA_ARGS__)
#		define code$addsd$argc02(state,a1,a2) code$addsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$addsd$argc02$1(...) code$addsd$argc02$2(__VA_ARGS__)
#		define code$addsd$argc02$2(state,t1,t2,a1,a2) code$addsd$argt$##t1##$##t2(state, a1,a2)
#		define code$addsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 58, modrm$rr(_0, _1))
#		define code$addss(state,n,...) code$addss$argc##n(state, ##__VA_ARGS__)
#		define code$addss$argc02(state,a1,a2) code$addss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$addss$argc02$1(...) code$addss$argc02$2(__VA_ARGS__)
#		define code$addss$argc02$2(state,t1,t2,a1,a2) code$addss$argt$##t1##$##t2(state, a1,a2)
#		define code$addss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 58, modrm$rm(_0, _1))
#		define code$addss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 58, modrm$rr(_0, _1))
#		define code$addsubpd(state,n,...) code$addsubpd$argc##n(state, ##__VA_ARGS__)
#		define code$addsubpd$argc02(state,a1,a2) code$addsubpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$addsubpd$argc02$1(...) code$addsubpd$argc02$2(__VA_ARGS__)
#		define code$addsubpd$argc02$2(state,t1,t2,a1,a2) code$addsubpd$argt$##t1##$##t2(state, a1,a2)
#		define code$addsubpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d0, modrm$rm(_0, _1))
#		define code$addsubpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d0, modrm$rm(_0, _1))
#		define code$addsubpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d0, modrm$rr(_0, _1))
#		define code$addsubps(state,n,...) code$addsubps$argc##n(state, ##__VA_ARGS__)
#		define code$addsubps$argc02(state,a1,a2) code$addsubps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$addsubps$argc02$1(...) code$addsubps$argc02$2(__VA_ARGS__)
#		define code$addsubps$argc02$2(state,t1,t2,a1,a2) code$addsubps$argt$##t1##$##t2(state, a1,a2)
#		define code$addsubps$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, d0, modrm$rm(_0, _1))
#		define code$addsubps$argt$mmreg128$mem128(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, d0, modrm$rm(_0, _1))
#		define code$addsubps$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, d0, modrm$rr(_0, _1))
#		define code$adox(state,n,...) code$adox$argc##n(state, ##__VA_ARGS__)
#		define code$adox$argc02(state,a1,a2) code$adox$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$adox$argc02$1(...) code$adox$argc02$2(__VA_ARGS__)
#		define code$adox$argc02$2(state,t1,t2,a1,a2) code$adox$argt$##t1##$##t2(state, a1,a2)
#		define code$adox$argt$reg32$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adox$argt$reg32$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adox$argt$reg32$reg32(state,_0,_1) bytes(f3, rex32rr(_0, _1) 0f, 38, f6, modrm$rr(_1, _0))
#		define code$adox$argt$reg64$mem(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adox$argt$reg64$mem64(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, 38, f6, modrm$rm(_0, _1))
#		define code$adox$argt$reg64$reg64(state,_0,_1) bytes(f3, rex64rr(_0, _1) 0f, 38, f6, modrm$rr(_1, _0))
#		define code$aesdec(state,n,...) code$aesdec$argc##n(state, ##__VA_ARGS__)
#		define code$aesdec$argc02(state,a1,a2) code$aesdec$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$aesdec$argc02$1(...) code$aesdec$argc02$2(__VA_ARGS__)
#		define code$aesdec$argc02$2(state,t1,t2,a1,a2) code$aesdec$argt$##t1##$##t2(state, a1,a2)
#		define code$aesdec$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, de, modrm$rm(_0, _1))
#		define code$aesdec$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, de, modrm$rm(_0, _1))
#		define code$aesdec$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 38, de, modrm$rr(_0, _1))
#		define code$aesdeclast(state,n,...) code$aesdeclast$argc##n(state, ##__VA_ARGS__)
#		define code$aesdeclast$argc02(state,a1,a2) code$aesdeclast$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$aesdeclast$argc02$1(...) code$aesdeclast$argc02$2(__VA_ARGS__)
#		define code$aesdeclast$argc02$2(state,t1,t2,a1,a2) code$aesdeclast$argt$##t1##$##t2(state, a1,a2)
#		define code$aesdeclast$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, df, modrm$rm(_0, _1))
#		define code$aesdeclast$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, df, modrm$rm(_0, _1))
#		define code$aesdeclast$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 38, df, modrm$rr(_0, _1))
#		define code$aesenc(state,n,...) code$aesenc$argc##n(state, ##__VA_ARGS__)
#		define code$aesenc$argc02(state,a1,a2) code$aesenc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$aesenc$argc02$1(...) code$aesenc$argc02$2(__VA_ARGS__)
#		define code$aesenc$argc02$2(state,t1,t2,a1,a2) code$aesenc$argt$##t1##$##t2(state, a1,a2)
#		define code$aesenc$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, dc, modrm$rm(_0, _1))
#		define code$aesenc$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, dc, modrm$rm(_0, _1))
#		define code$aesenc$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 38, dc, modrm$rr(_0, _1))
#		define code$aesenclast(state,n,...) code$aesenclast$argc##n(state, ##__VA_ARGS__)
#		define code$aesenclast$argc02(state,a1,a2) code$aesenclast$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$aesenclast$argc02$1(...) code$aesenclast$argc02$2(__VA_ARGS__)
#		define code$aesenclast$argc02$2(state,t1,t2,a1,a2) code$aesenclast$argt$##t1##$##t2(state, a1,a2)
#		define code$aesenclast$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, dd, modrm$rm(_0, _1))
#		define code$aesenclast$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, dd, modrm$rm(_0, _1))
#		define code$aesenclast$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 38, dd, modrm$rr(_0, _1))
#		define code$aesimc(state,n,...) code$aesimc$argc##n(state, ##__VA_ARGS__)
#		define code$aesimc$argc02(state,a1,a2) code$aesimc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$aesimc$argc02$1(...) code$aesimc$argc02$2(__VA_ARGS__)
#		define code$aesimc$argc02$2(state,t1,t2,a1,a2) code$aesimc$argt$##t1##$##t2(state, a1,a2)
#		define code$aesimc$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, db, modrm$rm(_0, _1))
#		define code$aesimc$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, db, modrm$rm(_0, _1))
#		define code$aesimc$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 38, db, modrm$rr(_0, _1))
#		define code$aeskeygenassist(state,n,...) code$aeskeygenassist$argc##n(state, ##__VA_ARGS__)
#		define code$aeskeygenassist$argc03(state,a1,a2,a3) code$aeskeygenassist$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$aeskeygenassist$argc03$1(...) code$aeskeygenassist$argc03$2(__VA_ARGS__)
#		define code$aeskeygenassist$argc03$2(state,t1,t2,t3,a1,a2,a3) code$aeskeygenassist$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$aeskeygenassist$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, df, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$aeskeygenassist$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, df, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$aeskeygenassist$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_0, _1) 0f, 3a, df, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$and(state,n,...) code$and$argc##n(state, ##__VA_ARGS__)
#		define code$and$argc02(state,a1,a2) code$and$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$and$argc02$1(...) code$and$argc02$2(__VA_ARGS__)
#		define code$and$argc02$2(state,t1,t2,a1,a2) code$and$argt$##t1##$##t2(state, a1,a2)
#		define code$and$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for and(mem, imm08)"))
#		define code$and$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$4m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$and$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for and(mem, imm32)"))
#		define code$and$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 20, modrm$rm(_1, _0))
#		define code$and$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 21, modrm$rm(_1, _0))
#		define code$and$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 21, modrm$rm(_1, _0))
#		define code$and$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 21, modrm$rm(_1, _0))
#		define code$and$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 20, modrm$rm(_1, _0))
#		define code$and$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$4m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$and$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 21, modrm$rm(_1, _0))
#		define code$and$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$4m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$and$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 21, modrm$rm(_1, _0))
#		define code$and$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$4m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$and$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 21, modrm$rm(_1, _0))
#		define code$and$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (24), (rex08r(_0) 80, modrm$4r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 22, modrm$rm(_0, _1))
#		define code$and$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 22, modrm$rm(_0, _1))
#		define code$and$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 20, modrm$rr(_1, _0))
#		define code$and$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 25), (rex16r(_0) 81, modrm$4r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$and$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 23, modrm$rm(_0, _1))
#		define code$and$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 23, modrm$rm(_0, _1))
#		define code$and$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 21, modrm$rr(_1, _0))
#		define code$and$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (25), (rex32r(_0) 81, modrm$4r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$and$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 23, modrm$rm(_0, _1))
#		define code$and$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 23, modrm$rm(_0, _1))
#		define code$and$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 21, modrm$rr(_1, _0))
#		define code$and$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$and$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 25), (rex64r(_0) 81, modrm$4r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$and$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 23, modrm$rm(_0, _1))
#		define code$and$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 23, modrm$rm(_0, _1))
#		define code$and$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 21, modrm$rr(_1, _0))
#		define code$andn(state,n,...) code$andn$argc##n(state, ##__VA_ARGS__)
#		define code$andn$argc03(state,a1,a2,a3) code$andn$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$andn$argc03$1(...) code$andn$argc03$2(__VA_ARGS__)
#		define code$andn$argc03$2(state,t1,t2,t3,a1,a2,a3) code$andn$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$andn$argt$reg32$reg32$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$andn$argt$reg32$reg32$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$andn$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f2, modrm$rr(_0, _2))
#		define code$andn$argt$reg64$reg64$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$andn$argt$reg64$reg64$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$andn$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f2, modrm$rr(_0, _2))
#		define code$andnpd(state,n,...) code$andnpd$argc##n(state, ##__VA_ARGS__)
#		define code$andnpd$argc02(state,a1,a2) code$andnpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$andnpd$argc02$1(...) code$andnpd$argc02$2(__VA_ARGS__)
#		define code$andnpd$argc02$2(state,t1,t2,a1,a2) code$andnpd$argt$##t1##$##t2(state, a1,a2)
#		define code$andnpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 55, modrm$rm(_0, _1))
#		define code$andnpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 55, modrm$rm(_0, _1))
#		define code$andnpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 55, modrm$rr(_0, _1))
#		define code$andnps(state,n,...) code$andnps$argc##n(state, ##__VA_ARGS__)
#		define code$andnps$argc02(state,a1,a2) code$andnps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$andnps$argc02$1(...) code$andnps$argc02$2(__VA_ARGS__)
#		define code$andnps$argc02$2(state,t1,t2,a1,a2) code$andnps$argt$##t1##$##t2(state, a1,a2)
#		define code$andnps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 55, modrm$rm(_0, _1))
#		define code$andnps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 55, modrm$rm(_0, _1))
#		define code$andnps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 55, modrm$rr(_0, _1))
#		define code$andpd(state,n,...) code$andpd$argc##n(state, ##__VA_ARGS__)
#		define code$andpd$argc02(state,a1,a2) code$andpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$andpd$argc02$1(...) code$andpd$argc02$2(__VA_ARGS__)
#		define code$andpd$argc02$2(state,t1,t2,a1,a2) code$andpd$argt$##t1##$##t2(state, a1,a2)
#		define code$andpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 54, modrm$rm(_0, _1))
#		define code$andpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 54, modrm$rm(_0, _1))
#		define code$andpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 54, modrm$rr(_0, _1))
#		define code$andps(state,n,...) code$andps$argc##n(state, ##__VA_ARGS__)
#		define code$andps$argc02(state,a1,a2) code$andps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$andps$argc02$1(...) code$andps$argc02$2(__VA_ARGS__)
#		define code$andps$argc02$2(state,t1,t2,a1,a2) code$andps$argt$##t1##$##t2(state, a1,a2)
#		define code$andps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 54, modrm$rm(_0, _1))
#		define code$andps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 54, modrm$rm(_0, _1))
#		define code$andps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 54, modrm$rr(_0, _1))
#		define code$bextr(state,n,...) code$bextr$argc##n(state, ##__VA_ARGS__)
#		define code$bextr$argc03(state,a1,a2,a3) code$bextr$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$bextr$argc03$1(...) code$bextr$argc03$2(__VA_ARGS__)
#		define code$bextr$argc03$2(state,t1,t2,t3,a1,a2,a3) code$bextr$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$bextr$argt$reg32$mem$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$bextr$argt$reg32$mem32$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$bextr$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$bextr$argt$reg64$mem$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$bextr$argt$reg64$mem64$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$bextr$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$blendpd(state,n,...) code$blendpd$argc##n(state, ##__VA_ARGS__)
#		define code$blendpd$argc03(state,a1,a2,a3) code$blendpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$blendpd$argc03$1(...) code$blendpd$argc03$2(__VA_ARGS__)
#		define code$blendpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$blendpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$blendpd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0d, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$blendpd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0d, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$blendpd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 0d, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$blendps(state,n,...) code$blendps$argc##n(state, ##__VA_ARGS__)
#		define code$blendps$argc03(state,a1,a2,a3) code$blendps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$blendps$argc03$1(...) code$blendps$argc03$2(__VA_ARGS__)
#		define code$blendps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$blendps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$blendps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0c, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$blendps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0c, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$blendps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 0c, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$blendvpd(state,n,...) code$blendvpd$argc##n(state, ##__VA_ARGS__)
#		define code$blendvpd$argc02(state,a1,a2) code$blendvpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$blendvpd$argc02$1(...) code$blendvpd$argc02$2(__VA_ARGS__)
#		define code$blendvpd$argc02$2(state,t1,t2,a1,a2) code$blendvpd$argt$##t1##$##t2(state, a1,a2)
#		define code$blendvpd$argc03(state,a1,a2,a3) code$blendvpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$blendvpd$argc03$1(...) code$blendvpd$argc03$2(__VA_ARGS__)
#		define code$blendvpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$blendvpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$blendvpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 15, modrm$rm(_0, _1))
#		define code$blendvpd$argt$mmreg128$mem$mmreg128(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 38, 15, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$blendvpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 15, modrm$rm(_0, _1))
#		define code$blendvpd$argt$mmreg128$mem128$mmreg128(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 38, 15, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$blendvpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 15, modrm$rr(_0, _1))
#		define code$blendvpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 38, 15, modrm$rr(_0, _1) assert$is$xmm0(_2))
#		define code$blendvps(state,n,...) code$blendvps$argc##n(state, ##__VA_ARGS__)
#		define code$blendvps$argc02(state,a1,a2) code$blendvps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$blendvps$argc02$1(...) code$blendvps$argc02$2(__VA_ARGS__)
#		define code$blendvps$argc02$2(state,t1,t2,a1,a2) code$blendvps$argt$##t1##$##t2(state, a1,a2)
#		define code$blendvps$argc03(state,a1,a2,a3) code$blendvps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$blendvps$argc03$1(...) code$blendvps$argc03$2(__VA_ARGS__)
#		define code$blendvps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$blendvps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$blendvps$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 14, modrm$rm(_0, _1))
#		define code$blendvps$argt$mmreg128$mem$mmreg128(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 38, 14, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$blendvps$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 14, modrm$rm(_0, _1))
#		define code$blendvps$argt$mmreg128$mem128$mmreg128(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 38, 14, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$blendvps$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 14, modrm$rr(_0, _1))
#		define code$blendvps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 38, 14, modrm$rr(_0, _1) assert$is$xmm0(_2))
#		define code$blsi(state,n,...) code$blsi$argc##n(state, ##__VA_ARGS__)
#		define code$blsi$argc02(state,a1,a2) code$blsi$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$blsi$argc02$1(...) code$blsi$argc02$2(__VA_ARGS__)
#		define code$blsi$argc02$2(state,t1,t2,a1,a2) code$blsi$argt$##t1##$##t2(state, a1,a2)
#		define code$blsi$argt$reg32$mem(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$3m(_1))
#		define code$blsi$argt$reg32$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$3m(_1))
#		define code$blsi$argt$reg32$reg32(state,_0,_1) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$3r(_1))
#		define code$blsi$argt$reg64$mem(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$3m(_1))
#		define code$blsi$argt$reg64$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$3m(_1))
#		define code$blsi$argt$reg64$reg64(state,_0,_1) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$3r(_1))
#		define code$blsmsk(state,n,...) code$blsmsk$argc##n(state, ##__VA_ARGS__)
#		define code$blsmsk$argc02(state,a1,a2) code$blsmsk$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$blsmsk$argc02$1(...) code$blsmsk$argc02$2(__VA_ARGS__)
#		define code$blsmsk$argc02$2(state,t1,t2,a1,a2) code$blsmsk$argt$##t1##$##t2(state, a1,a2)
#		define code$blsmsk$argt$reg32$mem(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$2m(_1))
#		define code$blsmsk$argt$reg32$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$2m(_1))
#		define code$blsmsk$argt$reg32$reg32(state,_0,_1) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$2r(_1))
#		define code$blsmsk$argt$reg64$mem(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$2m(_1))
#		define code$blsmsk$argt$reg64$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$2m(_1))
#		define code$blsmsk$argt$reg64$reg64(state,_0,_1) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$2r(_1))
#		define code$blsr(state,n,...) code$blsr$argc##n(state, ##__VA_ARGS__)
#		define code$blsr$argc02(state,a1,a2) code$blsr$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$blsr$argc02$1(...) code$blsr$argc02$2(__VA_ARGS__)
#		define code$blsr$argc02$2(state,t1,t2,a1,a2) code$blsr$argt$##t1##$##t2(state, a1,a2)
#		define code$blsr$argt$reg32$mem(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$1m(_1))
#		define code$blsr$argt$reg32$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$1m(_1))
#		define code$blsr$argt$reg32$reg32(state,_0,_1) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, eax, _0, _1), f3, modrm$1r(_1))
#		define code$blsr$argt$reg64$mem(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$1m(_1))
#		define code$blsr$argt$reg64$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$1m(_1))
#		define code$blsr$argt$reg64$reg64(state,_0,_1) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, rax, _0, _1), f3, modrm$1r(_1))
#		define code$bsf(state,n,...) code$bsf$argc##n(state, ##__VA_ARGS__)
#		define code$bsf$argc02(state,a1,a2) code$bsf$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$bsf$argc02$1(...) code$bsf$argc02$2(__VA_ARGS__)
#		define code$bsf$argc02$2(state,t1,t2,a1,a2) code$bsf$argt$##t1##$##t2(state, a1,a2)
#		define code$bsf$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$bsf$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$bsf$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, bc, modrm$rr(_1, _0))
#		define code$bsf$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$bsf$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$bsf$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, bc, modrm$rr(_1, _0))
#		define code$bsf$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$bsf$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$bsf$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, bc, modrm$rr(_1, _0))
#		define code$bsr(state,n,...) code$bsr$argc##n(state, ##__VA_ARGS__)
#		define code$bsr$argc02(state,a1,a2) code$bsr$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$bsr$argc02$1(...) code$bsr$argc02$2(__VA_ARGS__)
#		define code$bsr$argc02$2(state,t1,t2,a1,a2) code$bsr$argt$##t1##$##t2(state, a1,a2)
#		define code$bsr$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$bsr$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$bsr$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, bd, modrm$rr(_1, _0))
#		define code$bsr$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$bsr$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$bsr$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, bd, modrm$rr(_1, _0))
#		define code$bsr$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$bsr$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$bsr$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, bd, modrm$rr(_1, _0))
#		define code$bswap(state,n,...) code$bswap$argc##n(state, ##__VA_ARGS__)
#		define code$bswap$argc01(state,a1) code$bswap$argc01$1(state, operand$gettype(a1), a1)
#		define code$bswap$argc01$1(...) code$bswap$argc01$2(__VA_ARGS__)
#		define code$bswap$argc01$2(state,t1,a1) code$bswap$argt$##t1(state, a1)
#		define code$bswap$argt$reg32(state,_0) bytes(rex32r(_0) 0f, opcode$addregid7(c8, _0))
#		define code$bswap$argt$reg64(state,_0) bytes(rex64r(_0) 0f, opcode$addregid7(c8, _0))
#		define code$bt(state,n,...) code$bt$argc##n(state, ##__VA_ARGS__)
#		define code$bt$argc02(state,a1,a2) code$bt$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$bt$argc02$1(...) code$bt$argc02$2(__VA_ARGS__)
#		define code$bt$argc02$2(state,t1,t2,a1,a2) code$bt$argt$##t1##$##t2(state, a1,a2)
#		define code$bt$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for bt(mem, imm08)"))
#		define code$bt$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, a3, modrm$rm(_1, _0))
#		define code$bt$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, a3, modrm$rm(_1, _0))
#		define code$bt$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, a3, modrm$rm(_1, _0))
#		define code$bt$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 0f, ba, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bt$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, a3, modrm$rm(_1, _0))
#		define code$bt$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 0f, ba, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bt$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, a3, modrm$rm(_1, _0))
#		define code$bt$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 0f, ba, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bt$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, a3, modrm$rm(_1, _0))
#		define code$bt$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 0f, ba, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bt$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, a3, modrm$rr(_1, _0))
#		define code$bt$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 0f, ba, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bt$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, a3, modrm$rr(_1, _0))
#		define code$bt$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 0f, ba, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bt$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, a3, modrm$rr(_1, _0))
#		define code$btc(state,n,...) code$btc$argc##n(state, ##__VA_ARGS__)
#		define code$btc$argc02(state,a1,a2) code$btc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$btc$argc02$1(...) code$btc$argc02$2(__VA_ARGS__)
#		define code$btc$argc02$2(state,t1,t2,a1,a2) code$btc$argt$##t1##$##t2(state, a1,a2)
#		define code$btc$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for btc(mem, imm08)"))
#		define code$btc$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, bb, modrm$rm(_1, _0))
#		define code$btc$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, bb, modrm$rm(_1, _0))
#		define code$btc$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, bb, modrm$rm(_1, _0))
#		define code$btc$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 0f, ba, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btc$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, bb, modrm$rm(_1, _0))
#		define code$btc$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 0f, ba, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btc$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, bb, modrm$rm(_1, _0))
#		define code$btc$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 0f, ba, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btc$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, bb, modrm$rm(_1, _0))
#		define code$btc$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 0f, ba, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btc$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, bb, modrm$rr(_1, _0))
#		define code$btc$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 0f, ba, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btc$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, bb, modrm$rr(_1, _0))
#		define code$btc$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 0f, ba, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btc$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, bb, modrm$rr(_1, _0))
#		define code$btr(state,n,...) code$btr$argc##n(state, ##__VA_ARGS__)
#		define code$btr$argc02(state,a1,a2) code$btr$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$btr$argc02$1(...) code$btr$argc02$2(__VA_ARGS__)
#		define code$btr$argc02$2(state,t1,t2,a1,a2) code$btr$argt$##t1##$##t2(state, a1,a2)
#		define code$btr$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for btr(mem, imm08)"))
#		define code$btr$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, b3, modrm$rm(_1, _0))
#		define code$btr$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, b3, modrm$rm(_1, _0))
#		define code$btr$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, b3, modrm$rm(_1, _0))
#		define code$btr$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 0f, ba, modrm$6m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btr$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, b3, modrm$rm(_1, _0))
#		define code$btr$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 0f, ba, modrm$6m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btr$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, b3, modrm$rm(_1, _0))
#		define code$btr$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 0f, ba, modrm$6m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btr$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, b3, modrm$rm(_1, _0))
#		define code$btr$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 0f, ba, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btr$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, b3, modrm$rr(_1, _0))
#		define code$btr$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 0f, ba, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btr$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, b3, modrm$rr(_1, _0))
#		define code$btr$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 0f, ba, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$btr$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, b3, modrm$rr(_1, _0))
#		define code$bts(state,n,...) code$bts$argc##n(state, ##__VA_ARGS__)
#		define code$bts$argc02(state,a1,a2) code$bts$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$bts$argc02$1(...) code$bts$argc02$2(__VA_ARGS__)
#		define code$bts$argc02$2(state,t1,t2,a1,a2) code$bts$argt$##t1##$##t2(state, a1,a2)
#		define code$bts$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for bts(mem, imm08)"))
#		define code$bts$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, ab, modrm$rm(_1, _0))
#		define code$bts$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, ab, modrm$rm(_1, _0))
#		define code$bts$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, ab, modrm$rm(_1, _0))
#		define code$bts$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 0f, ba, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bts$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, ab, modrm$rm(_1, _0))
#		define code$bts$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 0f, ba, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bts$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, ab, modrm$rm(_1, _0))
#		define code$bts$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 0f, ba, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bts$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, ab, modrm$rm(_1, _0))
#		define code$bts$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 0f, ba, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bts$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, ab, modrm$rr(_1, _0))
#		define code$bts$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 0f, ba, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bts$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, ab, modrm$rr(_1, _0))
#		define code$bts$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 0f, ba, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$bts$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, ab, modrm$rr(_1, _0))
#		define code$bzhi(state,n,...) code$bzhi$argc##n(state, ##__VA_ARGS__)
#		define code$bzhi$argc03(state,a1,a2,a3) code$bzhi$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$bzhi$argc03$1(...) code$bzhi$argc03$2(__VA_ARGS__)
#		define code$bzhi$argc03$2(state,t1,t2,t3,a1,a2,a3) code$bzhi$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$bzhi$argt$reg32$mem$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f5, modrm$rm(_0, _1))
#		define code$bzhi$argt$reg32$mem32$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f5, modrm$rm(_0, _1))
#		define code$bzhi$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f5, modrm$rr(_0, _1))
#		define code$bzhi$argt$reg64$mem$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f5, modrm$rm(_0, _1))
#		define code$bzhi$argt$reg64$mem64$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f5, modrm$rm(_0, _1))
#		define code$bzhi$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f5, modrm$rr(_0, _1))
#		define code$call(state,n,...) code$call$argc##n(state, ##__VA_ARGS__)
#		define code$call$argc01(state,a1) code$call$argc01$1(state, operand$gettype(a1), a1)
#		define code$call$argc01$1(...) code$call$argc01$2(__VA_ARGS__)
#		define code$call$argc01$2(state,t1,a1) code$call$argt$##t1(state, a1)
#		define code$call$argt$mem(state,_0) bytes(rex32m(_0) ff, modrm$2m(_0))
#		define code$call$argt$reg64(state,_0) bytes(/* no REX.W */rex32r(_0) ff, modrm$2r(_0))
#		define code$call$argt$rel32(state,_0) bytes(e8, i32$bytes$le(which$rel32(state, _0)))
#		define code$cdq(state,n,...) code$cdq$argc##n(state, ##__VA_ARGS__)
#		define code$cdq$argc00(state,_) code$cdq$argt$(state)
#		define code$cdq$argt$(state) bytes(99)
#		define code$clac(state,n,...) code$clac$argc##n(state, ##__VA_ARGS__)
#		define code$clac$argc00(state,_) code$clac$argt$(state)
#		define code$clac$argt$(state) bytes(0f, 01, ca)
#		define code$clc(state,n,...) code$clc$argc##n(state, ##__VA_ARGS__)
#		define code$clc$argc00(state,_) code$clc$argt$(state)
#		define code$clc$argt$(state) bytes(f8)
#		define code$cld(state,n,...) code$cld$argc##n(state, ##__VA_ARGS__)
#		define code$cld$argc00(state,_) code$cld$argt$(state)
#		define code$cld$argt$(state) bytes(fc)
#		define code$cldemote(state,n,...) code$cldemote$argc##n(state, ##__VA_ARGS__)
#		define code$cldemote$argc01(state,a1) code$cldemote$argc01$1(state, operand$gettype(a1), a1)
#		define code$cldemote$argc01$1(...) code$cldemote$argc01$2(__VA_ARGS__)
#		define code$cldemote$argc01$2(state,t1,a1) code$cldemote$argt$##t1(state, a1)
#		define code$cldemote$argt$mem(state,_0) bytes(rex08m(_0) 0f, 1c, modrm$0m(_0))
#		define code$cldemote$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 1c, modrm$0m(_0))
#		define code$clflush(state,n,...) code$clflush$argc##n(state, ##__VA_ARGS__)
#		define code$clflush$argc01(state,a1) code$clflush$argc01$1(state, operand$gettype(a1), a1)
#		define code$clflush$argc01$1(...) code$clflush$argc01$2(__VA_ARGS__)
#		define code$clflush$argc01$2(state,t1,a1) code$clflush$argt$##t1(state, a1)
#		define code$clflush$argt$mem(state,_0) bytes(rex08m(_0) 0f, ae, modrm$7m(_0))
#		define code$clflush$argt$mem08(state,_0) bytes(rex08m(_0) 0f, ae, modrm$7m(_0))
#		define code$clflushopt(state,n,...) code$clflushopt$argc##n(state, ##__VA_ARGS__)
#		define code$clflushopt$argc01(state,a1) code$clflushopt$argc01$1(state, operand$gettype(a1), a1)
#		define code$clflushopt$argc01$1(...) code$clflushopt$argc01$2(__VA_ARGS__)
#		define code$clflushopt$argc01$2(state,t1,a1) code$clflushopt$argt$##t1(state, a1)
#		define code$clflushopt$argt$mem(state,_0) bytes(66, rex08m(_0) 0f, ae, modrm$7m(_0))
#		define code$clflushopt$argt$mem08(state,_0) bytes(66, rex08m(_0) 0f, ae, modrm$7m(_0))
#		define code$cli(state,n,...) code$cli$argc##n(state, ##__VA_ARGS__)
#		define code$cli$argc00(state,_) code$cli$argt$(state)
#		define code$cli$argt$(state) bytes(fa)
#		define code$clrssbsy(state,n,...) code$clrssbsy$argc##n(state, ##__VA_ARGS__)
#		define code$clrssbsy$argc01(state,a1) code$clrssbsy$argc01$1(state, operand$gettype(a1), a1)
#		define code$clrssbsy$argc01$1(...) code$clrssbsy$argc01$2(__VA_ARGS__)
#		define code$clrssbsy$argc01$2(state,t1,a1) code$clrssbsy$argt$##t1(state, a1)
#		define code$clrssbsy$argt$mem(state,_0) bytes(f3, rex32m(_0) 0f, ae, modrm$6m(_0))
#		define code$clrssbsy$argt$mem64(state,_0) bytes(f3, rex32m(_0) 0f, ae, modrm$6m(_0))
#		define code$clts(state,n,...) code$clts$argc##n(state, ##__VA_ARGS__)
#		define code$clts$argc00(state,_) code$clts$argt$(state)
#		define code$clts$argt$(state) bytes(0f, 06)
#		define code$clwb(state,n,...) code$clwb$argc##n(state, ##__VA_ARGS__)
#		define code$clwb$argc01(state,a1) code$clwb$argc01$1(state, operand$gettype(a1), a1)
#		define code$clwb$argc01$1(...) code$clwb$argc01$2(__VA_ARGS__)
#		define code$clwb$argc01$2(state,t1,a1) code$clwb$argt$##t1(state, a1)
#		define code$clwb$argt$mem(state,_0) bytes(66, rex08m(_0) 0f, ae, modrm$6m(_0))
#		define code$clwb$argt$mem08(state,_0) bytes(66, rex08m(_0) 0f, ae, modrm$6m(_0))
#		define code$cmc(state,n,...) code$cmc$argc##n(state, ##__VA_ARGS__)
#		define code$cmc$argc00(state,_) code$cmc$argt$(state)
#		define code$cmc$argt$(state) bytes(f5)
#		define code$cmova(state,n,...) code$cmova$argc##n(state, ##__VA_ARGS__)
#		define code$cmova$argc02(state,a1,a2) code$cmova$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmova$argc02$1(...) code$cmova$argc02$2(__VA_ARGS__)
#		define code$cmova$argc02$2(state,t1,t2,a1,a2) code$cmova$argt$##t1##$##t2(state, a1,a2)
#		define code$cmova$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmova$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmova$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 47, modrm$rr(_0, _1))
#		define code$cmova$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmova$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmova$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 47, modrm$rr(_0, _1))
#		define code$cmova$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmova$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmova$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 47, modrm$rr(_0, _1))
#		define code$cmovae(state,n,...) code$cmovae$argc##n(state, ##__VA_ARGS__)
#		define code$cmovae$argc02(state,a1,a2) code$cmovae$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovae$argc02$1(...) code$cmovae$argc02$2(__VA_ARGS__)
#		define code$cmovae$argc02$2(state,t1,t2,a1,a2) code$cmovae$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovae$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovae$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovae$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovae$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovae$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovae$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovae$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovae$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovae$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovb(state,n,...) code$cmovb$argc##n(state, ##__VA_ARGS__)
#		define code$cmovb$argc02(state,a1,a2) code$cmovb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovb$argc02$1(...) code$cmovb$argc02$2(__VA_ARGS__)
#		define code$cmovb$argc02$2(state,t1,t2,a1,a2) code$cmovb$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovb$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovb$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovb$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovb$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovb$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovb$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovb$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovb$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovb$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovbe(state,n,...) code$cmovbe$argc##n(state, ##__VA_ARGS__)
#		define code$cmovbe$argc02(state,a1,a2) code$cmovbe$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovbe$argc02$1(...) code$cmovbe$argc02$2(__VA_ARGS__)
#		define code$cmovbe$argc02$2(state,t1,t2,a1,a2) code$cmovbe$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovbe$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovbe$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovbe$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 46, modrm$rr(_0, _1))
#		define code$cmovbe$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovbe$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovbe$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 46, modrm$rr(_0, _1))
#		define code$cmovbe$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovbe$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovbe$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 46, modrm$rr(_0, _1))
#		define code$cmovc(state,n,...) code$cmovc$argc##n(state, ##__VA_ARGS__)
#		define code$cmovc$argc02(state,a1,a2) code$cmovc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovc$argc02$1(...) code$cmovc$argc02$2(__VA_ARGS__)
#		define code$cmovc$argc02$2(state,t1,t2,a1,a2) code$cmovc$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovc$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovc$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovc$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovc$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovc$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovc$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovc$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovc$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovc$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmove(state,n,...) code$cmove$argc##n(state, ##__VA_ARGS__)
#		define code$cmove$argc02(state,a1,a2) code$cmove$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmove$argc02$1(...) code$cmove$argc02$2(__VA_ARGS__)
#		define code$cmove$argc02$2(state,t1,t2,a1,a2) code$cmove$argt$##t1##$##t2(state, a1,a2)
#		define code$cmove$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmove$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmove$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 44, modrm$rr(_0, _1))
#		define code$cmove$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmove$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmove$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 44, modrm$rr(_0, _1))
#		define code$cmove$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmove$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmove$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 44, modrm$rr(_0, _1))
#		define code$cmovg(state,n,...) code$cmovg$argc##n(state, ##__VA_ARGS__)
#		define code$cmovg$argc02(state,a1,a2) code$cmovg$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovg$argc02$1(...) code$cmovg$argc02$2(__VA_ARGS__)
#		define code$cmovg$argc02$2(state,t1,t2,a1,a2) code$cmovg$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovg$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovg$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovg$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4f, modrm$rr(_0, _1))
#		define code$cmovg$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovg$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovg$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4f, modrm$rr(_0, _1))
#		define code$cmovg$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovg$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovg$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4f, modrm$rr(_0, _1))
#		define code$cmovge(state,n,...) code$cmovge$argc##n(state, ##__VA_ARGS__)
#		define code$cmovge$argc02(state,a1,a2) code$cmovge$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovge$argc02$1(...) code$cmovge$argc02$2(__VA_ARGS__)
#		define code$cmovge$argc02$2(state,t1,t2,a1,a2) code$cmovge$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovge$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovge$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovge$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4d, modrm$rr(_0, _1))
#		define code$cmovge$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovge$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovge$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4d, modrm$rr(_0, _1))
#		define code$cmovge$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovge$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovge$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4d, modrm$rr(_0, _1))
#		define code$cmovl(state,n,...) code$cmovl$argc##n(state, ##__VA_ARGS__)
#		define code$cmovl$argc02(state,a1,a2) code$cmovl$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovl$argc02$1(...) code$cmovl$argc02$2(__VA_ARGS__)
#		define code$cmovl$argc02$2(state,t1,t2,a1,a2) code$cmovl$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovl$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovl$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovl$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4c, modrm$rr(_0, _1))
#		define code$cmovl$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovl$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovl$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4c, modrm$rr(_0, _1))
#		define code$cmovl$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovl$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovl$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4c, modrm$rr(_0, _1))
#		define code$cmovle(state,n,...) code$cmovle$argc##n(state, ##__VA_ARGS__)
#		define code$cmovle$argc02(state,a1,a2) code$cmovle$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovle$argc02$1(...) code$cmovle$argc02$2(__VA_ARGS__)
#		define code$cmovle$argc02$2(state,t1,t2,a1,a2) code$cmovle$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovle$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovle$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovle$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4e, modrm$rr(_0, _1))
#		define code$cmovle$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovle$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovle$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4e, modrm$rr(_0, _1))
#		define code$cmovle$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovle$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovle$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4e, modrm$rr(_0, _1))
#		define code$cmovna(state,n,...) code$cmovna$argc##n(state, ##__VA_ARGS__)
#		define code$cmovna$argc02(state,a1,a2) code$cmovna$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovna$argc02$1(...) code$cmovna$argc02$2(__VA_ARGS__)
#		define code$cmovna$argc02$2(state,t1,t2,a1,a2) code$cmovna$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovna$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovna$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovna$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 46, modrm$rr(_0, _1))
#		define code$cmovna$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovna$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovna$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 46, modrm$rr(_0, _1))
#		define code$cmovna$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovna$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 46, modrm$rm(_0, _1))
#		define code$cmovna$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 46, modrm$rr(_0, _1))
#		define code$cmovnae(state,n,...) code$cmovnae$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnae$argc02(state,a1,a2) code$cmovnae$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnae$argc02$1(...) code$cmovnae$argc02$2(__VA_ARGS__)
#		define code$cmovnae$argc02$2(state,t1,t2,a1,a2) code$cmovnae$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnae$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovnae$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovnae$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovnae$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovnae$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovnae$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovnae$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovnae$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 42, modrm$rm(_0, _1))
#		define code$cmovnae$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 42, modrm$rr(_0, _1))
#		define code$cmovnb(state,n,...) code$cmovnb$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnb$argc02(state,a1,a2) code$cmovnb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnb$argc02$1(...) code$cmovnb$argc02$2(__VA_ARGS__)
#		define code$cmovnb$argc02$2(state,t1,t2,a1,a2) code$cmovnb$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnb$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnb$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnb$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovnb$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnb$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnb$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovnb$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnb$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnb$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovnbe(state,n,...) code$cmovnbe$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnbe$argc02(state,a1,a2) code$cmovnbe$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnbe$argc02$1(...) code$cmovnbe$argc02$2(__VA_ARGS__)
#		define code$cmovnbe$argc02$2(state,t1,t2,a1,a2) code$cmovnbe$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnbe$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmovnbe$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmovnbe$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 47, modrm$rr(_0, _1))
#		define code$cmovnbe$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmovnbe$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmovnbe$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 47, modrm$rr(_0, _1))
#		define code$cmovnbe$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmovnbe$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 47, modrm$rm(_0, _1))
#		define code$cmovnbe$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 47, modrm$rr(_0, _1))
#		define code$cmovnc(state,n,...) code$cmovnc$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnc$argc02(state,a1,a2) code$cmovnc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnc$argc02$1(...) code$cmovnc$argc02$2(__VA_ARGS__)
#		define code$cmovnc$argc02$2(state,t1,t2,a1,a2) code$cmovnc$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnc$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnc$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnc$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovnc$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnc$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnc$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovnc$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnc$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 43, modrm$rm(_0, _1))
#		define code$cmovnc$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 43, modrm$rr(_0, _1))
#		define code$cmovne(state,n,...) code$cmovne$argc##n(state, ##__VA_ARGS__)
#		define code$cmovne$argc02(state,a1,a2) code$cmovne$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovne$argc02$1(...) code$cmovne$argc02$2(__VA_ARGS__)
#		define code$cmovne$argc02$2(state,t1,t2,a1,a2) code$cmovne$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovne$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovne$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovne$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 45, modrm$rr(_0, _1))
#		define code$cmovne$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovne$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovne$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 45, modrm$rr(_0, _1))
#		define code$cmovne$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovne$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovne$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 45, modrm$rr(_0, _1))
#		define code$cmovng(state,n,...) code$cmovng$argc##n(state, ##__VA_ARGS__)
#		define code$cmovng$argc02(state,a1,a2) code$cmovng$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovng$argc02$1(...) code$cmovng$argc02$2(__VA_ARGS__)
#		define code$cmovng$argc02$2(state,t1,t2,a1,a2) code$cmovng$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovng$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovng$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovng$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4e, modrm$rr(_0, _1))
#		define code$cmovng$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovng$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovng$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4e, modrm$rr(_0, _1))
#		define code$cmovng$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovng$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4e, modrm$rm(_0, _1))
#		define code$cmovng$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4e, modrm$rr(_0, _1))
#		define code$cmovnge(state,n,...) code$cmovnge$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnge$argc02(state,a1,a2) code$cmovnge$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnge$argc02$1(...) code$cmovnge$argc02$2(__VA_ARGS__)
#		define code$cmovnge$argc02$2(state,t1,t2,a1,a2) code$cmovnge$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnge$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovnge$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovnge$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4c, modrm$rr(_0, _1))
#		define code$cmovnge$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovnge$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovnge$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4c, modrm$rr(_0, _1))
#		define code$cmovnge$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovnge$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4c, modrm$rm(_0, _1))
#		define code$cmovnge$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4c, modrm$rr(_0, _1))
#		define code$cmovnl(state,n,...) code$cmovnl$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnl$argc02(state,a1,a2) code$cmovnl$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnl$argc02$1(...) code$cmovnl$argc02$2(__VA_ARGS__)
#		define code$cmovnl$argc02$2(state,t1,t2,a1,a2) code$cmovnl$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnl$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovnl$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovnl$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4d, modrm$rr(_0, _1))
#		define code$cmovnl$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovnl$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovnl$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4d, modrm$rr(_0, _1))
#		define code$cmovnl$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovnl$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4d, modrm$rm(_0, _1))
#		define code$cmovnl$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4d, modrm$rr(_0, _1))
#		define code$cmovnle(state,n,...) code$cmovnle$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnle$argc02(state,a1,a2) code$cmovnle$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnle$argc02$1(...) code$cmovnle$argc02$2(__VA_ARGS__)
#		define code$cmovnle$argc02$2(state,t1,t2,a1,a2) code$cmovnle$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnle$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovnle$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovnle$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4f, modrm$rr(_0, _1))
#		define code$cmovnle$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovnle$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovnle$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4f, modrm$rr(_0, _1))
#		define code$cmovnle$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovnle$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4f, modrm$rm(_0, _1))
#		define code$cmovnle$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4f, modrm$rr(_0, _1))
#		define code$cmovno(state,n,...) code$cmovno$argc##n(state, ##__VA_ARGS__)
#		define code$cmovno$argc02(state,a1,a2) code$cmovno$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovno$argc02$1(...) code$cmovno$argc02$2(__VA_ARGS__)
#		define code$cmovno$argc02$2(state,t1,t2,a1,a2) code$cmovno$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovno$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 41, modrm$rm(_0, _1))
#		define code$cmovno$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 41, modrm$rm(_0, _1))
#		define code$cmovno$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 41, modrm$rr(_0, _1))
#		define code$cmovno$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 41, modrm$rm(_0, _1))
#		define code$cmovno$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 41, modrm$rm(_0, _1))
#		define code$cmovno$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 41, modrm$rr(_0, _1))
#		define code$cmovno$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 41, modrm$rm(_0, _1))
#		define code$cmovno$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 41, modrm$rm(_0, _1))
#		define code$cmovno$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 41, modrm$rr(_0, _1))
#		define code$cmovnp(state,n,...) code$cmovnp$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnp$argc02(state,a1,a2) code$cmovnp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnp$argc02$1(...) code$cmovnp$argc02$2(__VA_ARGS__)
#		define code$cmovnp$argc02$2(state,t1,t2,a1,a2) code$cmovnp$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnp$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovnp$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovnp$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4b, modrm$rr(_0, _1))
#		define code$cmovnp$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovnp$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovnp$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4b, modrm$rr(_0, _1))
#		define code$cmovnp$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovnp$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovnp$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4b, modrm$rr(_0, _1))
#		define code$cmovns(state,n,...) code$cmovns$argc##n(state, ##__VA_ARGS__)
#		define code$cmovns$argc02(state,a1,a2) code$cmovns$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovns$argc02$1(...) code$cmovns$argc02$2(__VA_ARGS__)
#		define code$cmovns$argc02$2(state,t1,t2,a1,a2) code$cmovns$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovns$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 49, modrm$rm(_0, _1))
#		define code$cmovns$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 49, modrm$rm(_0, _1))
#		define code$cmovns$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 49, modrm$rr(_0, _1))
#		define code$cmovns$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 49, modrm$rm(_0, _1))
#		define code$cmovns$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 49, modrm$rm(_0, _1))
#		define code$cmovns$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 49, modrm$rr(_0, _1))
#		define code$cmovns$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 49, modrm$rm(_0, _1))
#		define code$cmovns$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 49, modrm$rm(_0, _1))
#		define code$cmovns$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 49, modrm$rr(_0, _1))
#		define code$cmovnz(state,n,...) code$cmovnz$argc##n(state, ##__VA_ARGS__)
#		define code$cmovnz$argc02(state,a1,a2) code$cmovnz$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovnz$argc02$1(...) code$cmovnz$argc02$2(__VA_ARGS__)
#		define code$cmovnz$argc02$2(state,t1,t2,a1,a2) code$cmovnz$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovnz$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovnz$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovnz$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 45, modrm$rr(_0, _1))
#		define code$cmovnz$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovnz$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovnz$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 45, modrm$rr(_0, _1))
#		define code$cmovnz$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovnz$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 45, modrm$rm(_0, _1))
#		define code$cmovnz$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 45, modrm$rr(_0, _1))
#		define code$cmovo(state,n,...) code$cmovo$argc##n(state, ##__VA_ARGS__)
#		define code$cmovo$argc02(state,a1,a2) code$cmovo$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovo$argc02$1(...) code$cmovo$argc02$2(__VA_ARGS__)
#		define code$cmovo$argc02$2(state,t1,t2,a1,a2) code$cmovo$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovo$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 40, modrm$rm(_0, _1))
#		define code$cmovo$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 40, modrm$rm(_0, _1))
#		define code$cmovo$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 40, modrm$rr(_0, _1))
#		define code$cmovo$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 40, modrm$rm(_0, _1))
#		define code$cmovo$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 40, modrm$rm(_0, _1))
#		define code$cmovo$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 40, modrm$rr(_0, _1))
#		define code$cmovo$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 40, modrm$rm(_0, _1))
#		define code$cmovo$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 40, modrm$rm(_0, _1))
#		define code$cmovo$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 40, modrm$rr(_0, _1))
#		define code$cmovp(state,n,...) code$cmovp$argc##n(state, ##__VA_ARGS__)
#		define code$cmovp$argc02(state,a1,a2) code$cmovp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovp$argc02$1(...) code$cmovp$argc02$2(__VA_ARGS__)
#		define code$cmovp$argc02$2(state,t1,t2,a1,a2) code$cmovp$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovp$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovp$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovp$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4a, modrm$rr(_0, _1))
#		define code$cmovp$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovp$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovp$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4a, modrm$rr(_0, _1))
#		define code$cmovp$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovp$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovp$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4a, modrm$rr(_0, _1))
#		define code$cmovpe(state,n,...) code$cmovpe$argc##n(state, ##__VA_ARGS__)
#		define code$cmovpe$argc02(state,a1,a2) code$cmovpe$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovpe$argc02$1(...) code$cmovpe$argc02$2(__VA_ARGS__)
#		define code$cmovpe$argc02$2(state,t1,t2,a1,a2) code$cmovpe$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovpe$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovpe$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovpe$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4a, modrm$rr(_0, _1))
#		define code$cmovpe$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovpe$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovpe$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4a, modrm$rr(_0, _1))
#		define code$cmovpe$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovpe$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4a, modrm$rm(_0, _1))
#		define code$cmovpe$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4a, modrm$rr(_0, _1))
#		define code$cmovpo(state,n,...) code$cmovpo$argc##n(state, ##__VA_ARGS__)
#		define code$cmovpo$argc02(state,a1,a2) code$cmovpo$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovpo$argc02$1(...) code$cmovpo$argc02$2(__VA_ARGS__)
#		define code$cmovpo$argc02$2(state,t1,t2,a1,a2) code$cmovpo$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovpo$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovpo$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovpo$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 4b, modrm$rr(_0, _1))
#		define code$cmovpo$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovpo$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovpo$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 4b, modrm$rr(_0, _1))
#		define code$cmovpo$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovpo$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 4b, modrm$rm(_0, _1))
#		define code$cmovpo$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 4b, modrm$rr(_0, _1))
#		define code$cmovs(state,n,...) code$cmovs$argc##n(state, ##__VA_ARGS__)
#		define code$cmovs$argc02(state,a1,a2) code$cmovs$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovs$argc02$1(...) code$cmovs$argc02$2(__VA_ARGS__)
#		define code$cmovs$argc02$2(state,t1,t2,a1,a2) code$cmovs$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovs$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 48, modrm$rm(_0, _1))
#		define code$cmovs$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 48, modrm$rm(_0, _1))
#		define code$cmovs$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 48, modrm$rr(_0, _1))
#		define code$cmovs$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 48, modrm$rm(_0, _1))
#		define code$cmovs$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 48, modrm$rm(_0, _1))
#		define code$cmovs$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 48, modrm$rr(_0, _1))
#		define code$cmovs$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 48, modrm$rm(_0, _1))
#		define code$cmovs$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 48, modrm$rm(_0, _1))
#		define code$cmovs$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 48, modrm$rr(_0, _1))
#		define code$cmovz(state,n,...) code$cmovz$argc##n(state, ##__VA_ARGS__)
#		define code$cmovz$argc02(state,a1,a2) code$cmovz$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmovz$argc02$1(...) code$cmovz$argc02$2(__VA_ARGS__)
#		define code$cmovz$argc02$2(state,t1,t2,a1,a2) code$cmovz$argt$##t1##$##t2(state, a1,a2)
#		define code$cmovz$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmovz$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmovz$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 44, modrm$rr(_0, _1))
#		define code$cmovz$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmovz$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmovz$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 44, modrm$rr(_0, _1))
#		define code$cmovz$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmovz$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 44, modrm$rm(_0, _1))
#		define code$cmovz$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 44, modrm$rr(_0, _1))
#		define code$cmp(state,n,...) code$cmp$argc##n(state, ##__VA_ARGS__)
#		define code$cmp$argc02(state,a1,a2) code$cmp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmp$argc02$1(...) code$cmp$argc02$2(__VA_ARGS__)
#		define code$cmp$argc02$2(state,t1,t2,a1,a2) code$cmp$argt$##t1##$##t2(state, a1,a2)
#		define code$cmp$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for cmp(mem, imm08)"))
#		define code$cmp$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$7m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$cmp$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for cmp(mem, imm32)"))
#		define code$cmp$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 38, modrm$rm(_1, _0))
#		define code$cmp$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 39, modrm$rm(_1, _0))
#		define code$cmp$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 39, modrm$rm(_1, _0))
#		define code$cmp$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 39, modrm$rm(_1, _0))
#		define code$cmp$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 38, modrm$rm(_1, _0))
#		define code$cmp$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$7m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$cmp$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 39, modrm$rm(_1, _0))
#		define code$cmp$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$7m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$cmp$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 39, modrm$rm(_1, _0))
#		define code$cmp$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$7m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$cmp$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 39, modrm$rm(_1, _0))
#		define code$cmp$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (3c), (rex08r(_0) 80, modrm$7r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 3a, modrm$rm(_0, _1))
#		define code$cmp$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 3a, modrm$rm(_0, _1))
#		define code$cmp$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 38, modrm$rr(_1, _0))
#		define code$cmp$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 3d), (rex16r(_0) 81, modrm$7r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$cmp$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 3b, modrm$rm(_0, _1))
#		define code$cmp$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 3b, modrm$rm(_0, _1))
#		define code$cmp$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 39, modrm$rr(_1, _0))
#		define code$cmp$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (3d), (rex32r(_0) 81, modrm$7r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$cmp$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 3b, modrm$rm(_0, _1))
#		define code$cmp$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 3b, modrm$rm(_0, _1))
#		define code$cmp$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 39, modrm$rr(_1, _0))
#		define code$cmp$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$cmp$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 3d), (rex64r(_0) 81, modrm$7r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$cmp$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 3b, modrm$rm(_0, _1))
#		define code$cmp$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 3b, modrm$rm(_0, _1))
#		define code$cmp$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 39, modrm$rr(_1, _0))
#		define code$cmpeqpd(state,n,...) code$cmpeqpd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpeqpd$argc02(state,a1,a2) code$cmpeqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpeqpd$argc02$1(...) code$cmpeqpd$argc02$2(__VA_ARGS__)
#		define code$cmpeqpd$argc02$2(state,t1,t2,a1,a2) code$cmpeqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpeqpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 00)
#		define code$cmpeqps(state,n,...) code$cmpeqps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpeqps$argc02(state,a1,a2) code$cmpeqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpeqps$argc02$1(...) code$cmpeqps$argc02$2(__VA_ARGS__)
#		define code$cmpeqps$argc02$2(state,t1,t2,a1,a2) code$cmpeqps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpeqps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 00)
#		define code$cmpeqsd(state,n,...) code$cmpeqsd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpeqsd$argc02(state,a1,a2) code$cmpeqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpeqsd$argc02$1(...) code$cmpeqsd$argc02$2(__VA_ARGS__)
#		define code$cmpeqsd$argc02$2(state,t1,t2,a1,a2) code$cmpeqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpeqsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 00)
#		define code$cmpeqss(state,n,...) code$cmpeqss$argc##n(state, ##__VA_ARGS__)
#		define code$cmpeqss$argc02(state,a1,a2) code$cmpeqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpeqss$argc02$1(...) code$cmpeqss$argc02$2(__VA_ARGS__)
#		define code$cmpeqss$argc02$2(state,t1,t2,a1,a2) code$cmpeqss$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpeqss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 00)
#		define code$cmpeqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 00)
#		define code$cmplepd(state,n,...) code$cmplepd$argc##n(state, ##__VA_ARGS__)
#		define code$cmplepd$argc02(state,a1,a2) code$cmplepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmplepd$argc02$1(...) code$cmplepd$argc02$2(__VA_ARGS__)
#		define code$cmplepd$argc02$2(state,t1,t2,a1,a2) code$cmplepd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmplepd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmplepd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmplepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 02)
#		define code$cmpleps(state,n,...) code$cmpleps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpleps$argc02(state,a1,a2) code$cmpleps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpleps$argc02$1(...) code$cmpleps$argc02$2(__VA_ARGS__)
#		define code$cmpleps$argc02$2(state,t1,t2,a1,a2) code$cmpleps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpleps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmpleps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmpleps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 02)
#		define code$cmplesd(state,n,...) code$cmplesd$argc##n(state, ##__VA_ARGS__)
#		define code$cmplesd$argc02(state,a1,a2) code$cmplesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmplesd$argc02$1(...) code$cmplesd$argc02$2(__VA_ARGS__)
#		define code$cmplesd$argc02$2(state,t1,t2,a1,a2) code$cmplesd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmplesd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmplesd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmplesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 02)
#		define code$cmpless(state,n,...) code$cmpless$argc##n(state, ##__VA_ARGS__)
#		define code$cmpless$argc02(state,a1,a2) code$cmpless$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpless$argc02$1(...) code$cmpless$argc02$2(__VA_ARGS__)
#		define code$cmpless$argc02$2(state,t1,t2,a1,a2) code$cmpless$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpless$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmpless$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 02)
#		define code$cmpless$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 02)
#		define code$cmpltpd(state,n,...) code$cmpltpd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpltpd$argc02(state,a1,a2) code$cmpltpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpltpd$argc02$1(...) code$cmpltpd$argc02$2(__VA_ARGS__)
#		define code$cmpltpd$argc02$2(state,t1,t2,a1,a2) code$cmpltpd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpltpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 01)
#		define code$cmpltps(state,n,...) code$cmpltps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpltps$argc02(state,a1,a2) code$cmpltps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpltps$argc02$1(...) code$cmpltps$argc02$2(__VA_ARGS__)
#		define code$cmpltps$argc02$2(state,t1,t2,a1,a2) code$cmpltps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpltps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 01)
#		define code$cmpltsd(state,n,...) code$cmpltsd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpltsd$argc02(state,a1,a2) code$cmpltsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpltsd$argc02$1(...) code$cmpltsd$argc02$2(__VA_ARGS__)
#		define code$cmpltsd$argc02$2(state,t1,t2,a1,a2) code$cmpltsd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpltsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 01)
#		define code$cmpltss(state,n,...) code$cmpltss$argc##n(state, ##__VA_ARGS__)
#		define code$cmpltss$argc02(state,a1,a2) code$cmpltss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpltss$argc02$1(...) code$cmpltss$argc02$2(__VA_ARGS__)
#		define code$cmpltss$argc02$2(state,t1,t2,a1,a2) code$cmpltss$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpltss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 01)
#		define code$cmpltss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 01)
#		define code$cmpneqpd(state,n,...) code$cmpneqpd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpneqpd$argc02(state,a1,a2) code$cmpneqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpneqpd$argc02$1(...) code$cmpneqpd$argc02$2(__VA_ARGS__)
#		define code$cmpneqpd$argc02$2(state,t1,t2,a1,a2) code$cmpneqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpneqpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 04)
#		define code$cmpneqps(state,n,...) code$cmpneqps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpneqps$argc02(state,a1,a2) code$cmpneqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpneqps$argc02$1(...) code$cmpneqps$argc02$2(__VA_ARGS__)
#		define code$cmpneqps$argc02$2(state,t1,t2,a1,a2) code$cmpneqps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpneqps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 04)
#		define code$cmpneqsd(state,n,...) code$cmpneqsd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpneqsd$argc02(state,a1,a2) code$cmpneqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpneqsd$argc02$1(...) code$cmpneqsd$argc02$2(__VA_ARGS__)
#		define code$cmpneqsd$argc02$2(state,t1,t2,a1,a2) code$cmpneqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpneqsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 04)
#		define code$cmpneqss(state,n,...) code$cmpneqss$argc##n(state, ##__VA_ARGS__)
#		define code$cmpneqss$argc02(state,a1,a2) code$cmpneqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpneqss$argc02$1(...) code$cmpneqss$argc02$2(__VA_ARGS__)
#		define code$cmpneqss$argc02$2(state,t1,t2,a1,a2) code$cmpneqss$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpneqss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 04)
#		define code$cmpneqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 04)
#		define code$cmpnlepd(state,n,...) code$cmpnlepd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnlepd$argc02(state,a1,a2) code$cmpnlepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnlepd$argc02$1(...) code$cmpnlepd$argc02$2(__VA_ARGS__)
#		define code$cmpnlepd$argc02$2(state,t1,t2,a1,a2) code$cmpnlepd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnlepd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnlepd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnlepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 06)
#		define code$cmpnleps(state,n,...) code$cmpnleps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnleps$argc02(state,a1,a2) code$cmpnleps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnleps$argc02$1(...) code$cmpnleps$argc02$2(__VA_ARGS__)
#		define code$cmpnleps$argc02$2(state,t1,t2,a1,a2) code$cmpnleps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnleps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnleps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnleps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 06)
#		define code$cmpnlesd(state,n,...) code$cmpnlesd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnlesd$argc02(state,a1,a2) code$cmpnlesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnlesd$argc02$1(...) code$cmpnlesd$argc02$2(__VA_ARGS__)
#		define code$cmpnlesd$argc02$2(state,t1,t2,a1,a2) code$cmpnlesd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnlesd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnlesd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnlesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 06)
#		define code$cmpnless(state,n,...) code$cmpnless$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnless$argc02(state,a1,a2) code$cmpnless$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnless$argc02$1(...) code$cmpnless$argc02$2(__VA_ARGS__)
#		define code$cmpnless$argc02$2(state,t1,t2,a1,a2) code$cmpnless$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnless$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnless$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 06)
#		define code$cmpnless$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 06)
#		define code$cmpnltpd(state,n,...) code$cmpnltpd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnltpd$argc02(state,a1,a2) code$cmpnltpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnltpd$argc02$1(...) code$cmpnltpd$argc02$2(__VA_ARGS__)
#		define code$cmpnltpd$argc02$2(state,t1,t2,a1,a2) code$cmpnltpd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnltpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 05)
#		define code$cmpnltps(state,n,...) code$cmpnltps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnltps$argc02(state,a1,a2) code$cmpnltps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnltps$argc02$1(...) code$cmpnltps$argc02$2(__VA_ARGS__)
#		define code$cmpnltps$argc02$2(state,t1,t2,a1,a2) code$cmpnltps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnltps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 05)
#		define code$cmpnltsd(state,n,...) code$cmpnltsd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnltsd$argc02(state,a1,a2) code$cmpnltsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnltsd$argc02$1(...) code$cmpnltsd$argc02$2(__VA_ARGS__)
#		define code$cmpnltsd$argc02$2(state,t1,t2,a1,a2) code$cmpnltsd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnltsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 05)
#		define code$cmpnltss(state,n,...) code$cmpnltss$argc##n(state, ##__VA_ARGS__)
#		define code$cmpnltss$argc02(state,a1,a2) code$cmpnltss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpnltss$argc02$1(...) code$cmpnltss$argc02$2(__VA_ARGS__)
#		define code$cmpnltss$argc02$2(state,t1,t2,a1,a2) code$cmpnltss$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpnltss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 05)
#		define code$cmpnltss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 05)
#		define code$cmpordpd(state,n,...) code$cmpordpd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpordpd$argc02(state,a1,a2) code$cmpordpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpordpd$argc02$1(...) code$cmpordpd$argc02$2(__VA_ARGS__)
#		define code$cmpordpd$argc02$2(state,t1,t2,a1,a2) code$cmpordpd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpordpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 07)
#		define code$cmpordps(state,n,...) code$cmpordps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpordps$argc02(state,a1,a2) code$cmpordps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpordps$argc02$1(...) code$cmpordps$argc02$2(__VA_ARGS__)
#		define code$cmpordps$argc02$2(state,t1,t2,a1,a2) code$cmpordps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpordps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 07)
#		define code$cmpordsd(state,n,...) code$cmpordsd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpordsd$argc02(state,a1,a2) code$cmpordsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpordsd$argc02$1(...) code$cmpordsd$argc02$2(__VA_ARGS__)
#		define code$cmpordsd$argc02$2(state,t1,t2,a1,a2) code$cmpordsd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpordsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 07)
#		define code$cmpordss(state,n,...) code$cmpordss$argc##n(state, ##__VA_ARGS__)
#		define code$cmpordss$argc02(state,a1,a2) code$cmpordss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpordss$argc02$1(...) code$cmpordss$argc02$2(__VA_ARGS__)
#		define code$cmpordss$argc02$2(state,t1,t2,a1,a2) code$cmpordss$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpordss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 07)
#		define code$cmpordss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 07)
#		define code$cmppd(state,n,...) code$cmppd$argc##n(state, ##__VA_ARGS__)
#		define code$cmppd$argc03(state,a1,a2,a3) code$cmppd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$cmppd$argc03$1(...) code$cmppd$argc03$2(__VA_ARGS__)
#		define code$cmppd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$cmppd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$cmppd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmppd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmppd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpps(state,n,...) code$cmpps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpps$argc03(state,a1,a2,a3) code$cmpps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$cmpps$argc03$1(...) code$cmpps$argc03$2(__VA_ARGS__)
#		define code$cmpps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$cmpps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$cmpps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpsb(state,n,...) code$cmpsb$argc##n(state, ##__VA_ARGS__)
#		define code$cmpsb$argc00(state,_) code$cmpsb$argt$(state)
#		define code$cmpsb$argt$(state) bytes(a6)
#		define code$cmpsd(state,n,...) code$cmpsd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpsd$argc00(state,_) code$cmpsd$argt$(state)
#		define code$cmpsd$argc03(state,a1,a2,a3) code$cmpsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$cmpsd$argc03$1(...) code$cmpsd$argc03$2(__VA_ARGS__)
#		define code$cmpsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$cmpsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$cmpsd$argt$(state) bytes(a7)
#		define code$cmpsd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpsd$argt$mmreg128$mem64$imm08(state,_0,_1,_2) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpsd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpsq(state,n,...) code$cmpsq$argc##n(state, ##__VA_ARGS__)
#		define code$cmpsq$argc00(state,_) code$cmpsq$argt$(state)
#		define code$cmpsq$argt$(state) bytes(48, a7)
#		define code$cmpss(state,n,...) code$cmpss$argc##n(state, ##__VA_ARGS__)
#		define code$cmpss$argc03(state,a1,a2,a3) code$cmpss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$cmpss$argc03$1(...) code$cmpss$argc03$2(__VA_ARGS__)
#		define code$cmpss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$cmpss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$cmpss$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpss$argt$mmreg128$mem32$imm08(state,_0,_1,_2) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpss$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$cmpsw(state,n,...) code$cmpsw$argc##n(state, ##__VA_ARGS__)
#		define code$cmpsw$argc00(state,_) code$cmpsw$argt$(state)
#		define code$cmpsw$argt$(state) bytes(66, a7)
#		define code$cmpunordpd(state,n,...) code$cmpunordpd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpunordpd$argc02(state,a1,a2) code$cmpunordpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpunordpd$argc02$1(...) code$cmpunordpd$argc02$2(__VA_ARGS__)
#		define code$cmpunordpd$argc02$2(state,t1,t2,a1,a2) code$cmpunordpd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpunordpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 03)
#		define code$cmpunordps(state,n,...) code$cmpunordps$argc##n(state, ##__VA_ARGS__)
#		define code$cmpunordps$argc02(state,a1,a2) code$cmpunordps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpunordps$argc02$1(...) code$cmpunordps$argc02$2(__VA_ARGS__)
#		define code$cmpunordps$argc02$2(state,t1,t2,a1,a2) code$cmpunordps$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpunordps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 03)
#		define code$cmpunordsd(state,n,...) code$cmpunordsd$argc##n(state, ##__VA_ARGS__)
#		define code$cmpunordsd$argc02(state,a1,a2) code$cmpunordsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpunordsd$argc02$1(...) code$cmpunordsd$argc02$2(__VA_ARGS__)
#		define code$cmpunordsd$argc02$2(state,t1,t2,a1,a2) code$cmpunordsd$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpunordsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 03)
#		define code$cmpunordss(state,n,...) code$cmpunordss$argc##n(state, ##__VA_ARGS__)
#		define code$cmpunordss$argc02(state,a1,a2) code$cmpunordss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpunordss$argc02$1(...) code$cmpunordss$argc02$2(__VA_ARGS__)
#		define code$cmpunordss$argc02$2(state,t1,t2,a1,a2) code$cmpunordss$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpunordss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, c2, modrm$rm(_0, _1), 03)
#		define code$cmpunordss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, c2, modrm$rr(_0, _1), 03)
#		define code$cmpxchg(state,n,...) code$cmpxchg$argc##n(state, ##__VA_ARGS__)
#		define code$cmpxchg$argc02(state,a1,a2) code$cmpxchg$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cmpxchg$argc02$1(...) code$cmpxchg$argc02$2(__VA_ARGS__)
#		define code$cmpxchg$argc02$2(state,t1,t2,a1,a2) code$cmpxchg$argt$##t1##$##t2(state, a1,a2)
#		define code$cmpxchg$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 0f, b0, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, b1, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, b1, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, b1, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 0f, b0, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, b1, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, b1, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, b1, modrm$rm(_1, _0))
#		define code$cmpxchg$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 0f, b0, modrm$rr(_1, _0))
#		define code$cmpxchg$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, b1, modrm$rr(_1, _0))
#		define code$cmpxchg$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, b1, modrm$rr(_1, _0))
#		define code$cmpxchg$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, b1, modrm$rr(_1, _0))
#		define code$cmpxchg8b(state,n,...) code$cmpxchg8b$argc##n(state, ##__VA_ARGS__)
#		define code$cmpxchg8b$argc01(state,a1) code$cmpxchg8b$argc01$1(state, operand$gettype(a1), a1)
#		define code$cmpxchg8b$argc01$1(...) code$cmpxchg8b$argc01$2(__VA_ARGS__)
#		define code$cmpxchg8b$argc01$2(state,t1,a1) code$cmpxchg8b$argt$##t1(state, a1)
#		define code$cmpxchg8b$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for cmpxchg8b(mem)"))
#		define code$cmpxchg8b$argt$mem128(state,_0) bytes(rex64m(_0) 0f, c7, modrm$1m(_0))
#		define code$cmpxchg8b$argt$mem64(state,_0) bytes(rex32m(_0) 0f, c7, modrm$1m(_0))
#		define code$comisd(state,n,...) code$comisd$argc##n(state, ##__VA_ARGS__)
#		define code$comisd$argc02(state,a1,a2) code$comisd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$comisd$argc02$1(...) code$comisd$argc02$2(__VA_ARGS__)
#		define code$comisd$argc02$2(state,t1,t2,a1,a2) code$comisd$argt$##t1##$##t2(state, a1,a2)
#		define code$comisd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2f, modrm$rm(_0, _1))
#		define code$comisd$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2f, modrm$rm(_0, _1))
#		define code$comisd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 2f, modrm$rr(_0, _1))
#		define code$comiss(state,n,...) code$comiss$argc##n(state, ##__VA_ARGS__)
#		define code$comiss$argc02(state,a1,a2) code$comiss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$comiss$argc02$1(...) code$comiss$argc02$2(__VA_ARGS__)
#		define code$comiss$argc02$2(state,t1,t2,a1,a2) code$comiss$argt$##t1##$##t2(state, a1,a2)
#		define code$comiss$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2f, modrm$rm(_0, _1))
#		define code$comiss$argt$mmreg128$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2f, modrm$rm(_0, _1))
#		define code$comiss$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 2f, modrm$rr(_0, _1))
#		define code$cpuid(state,n,...) code$cpuid$argc##n(state, ##__VA_ARGS__)
#		define code$cpuid$argc00(state,_) code$cpuid$argt$(state)
#		define code$cpuid$argt$(state) bytes(0f, a2)
#		define code$cqo(state,n,...) code$cqo$argc##n(state, ##__VA_ARGS__)
#		define code$cqo$argc00(state,_) code$cqo$argt$(state)
#		define code$cqo$argt$(state) bytes(/* rex64r(rax) = */48, 99)
#		define code$crc32(state,n,...) code$crc32$argc##n(state, ##__VA_ARGS__)
#		define code$crc32$argc02(state,a1,a2) code$crc32$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$crc32$argc02$1(...) code$crc32$argc02$2(__VA_ARGS__)
#		define code$crc32$argc02$2(state,t1,t2,a1,a2) code$crc32$argt$##t1##$##t2(state, a1,a2)
#		define code$crc32$argt$reg32$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for crc32(reg32, mem)"))
#		define code$crc32$argt$reg32$mem08(state,_0,_1) bytes(f2, rex08rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$crc32$argt$reg32$mem16(state,_0,_1) bytes(66, f2, rex32rm(_0, _1) 0f, 38, f1, modrm$rm(_0, _1))
#		define code$crc32$argt$reg32$mem32(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 38, f1, modrm$rm(_0, _1))
#		define code$crc32$argt$reg32$reg08(state,_0,_1) bytes(f2, rex08rr(_1, _0) 0f, 38, f0, modrm$rr(_0, _1))
#		define code$crc32$argt$reg32$reg16(state,_0,_1) bytes(66, f2, rex32rr(_1, _0) 0f, 38, f1, modrm$rr(_0, _1))
#		define code$crc32$argt$reg32$reg32(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 38, f1, modrm$rr(_0, _1))
#		define code$crc32$argt$reg64$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for crc32(reg64, mem)"))
#		define code$crc32$argt$reg64$mem08(state,_0,_1) bytes(f2, rex64rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$crc32$argt$reg64$mem64(state,_0,_1) bytes(f2, rex64rm(_0, _1) 0f, 38, f1, modrm$rm(_0, _1))
#		define code$crc32$argt$reg64$reg08(state,_0,_1) bytes(f2, rex64rr(_1, _0) 0f, 38, f0, modrm$rr(_0, _1))
#		define code$crc32$argt$reg64$reg64(state,_0,_1) bytes(f2, rex64rr(_1, _0) 0f, 38, f1, modrm$rr(_0, _1))
#		define code$cvtdq2pd(state,n,...) code$cvtdq2pd$argc##n(state, ##__VA_ARGS__)
#		define code$cvtdq2pd$argc02(state,a1,a2) code$cvtdq2pd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtdq2pd$argc02$1(...) code$cvtdq2pd$argc02$2(__VA_ARGS__)
#		define code$cvtdq2pd$argc02$2(state,t1,t2,a1,a2) code$cvtdq2pd$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtdq2pd$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, e6, modrm$rm(_0, _1))
#		define code$cvtdq2pd$argt$mmreg128$mem64(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, e6, modrm$rm(_0, _1))
#		define code$cvtdq2pd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, e6, modrm$rr(_0, _1))
#		define code$cvtdq2ps(state,n,...) code$cvtdq2ps$argc##n(state, ##__VA_ARGS__)
#		define code$cvtdq2ps$argc02(state,a1,a2) code$cvtdq2ps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtdq2ps$argc02$1(...) code$cvtdq2ps$argc02$2(__VA_ARGS__)
#		define code$cvtdq2ps$argc02$2(state,t1,t2,a1,a2) code$cvtdq2ps$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtdq2ps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5b, modrm$rm(_0, _1))
#		define code$cvtdq2ps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5b, modrm$rm(_0, _1))
#		define code$cvtdq2ps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 5b, modrm$rr(_0, _1))
#		define code$cvtpd2dq(state,n,...) code$cvtpd2dq$argc##n(state, ##__VA_ARGS__)
#		define code$cvtpd2dq$argc02(state,a1,a2) code$cvtpd2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtpd2dq$argc02$1(...) code$cvtpd2dq$argc02$2(__VA_ARGS__)
#		define code$cvtpd2dq$argc02$2(state,t1,t2,a1,a2) code$cvtpd2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtpd2dq$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, e6, modrm$rm(_0, _1))
#		define code$cvtpd2dq$argt$mmreg128$mem128(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, e6, modrm$rm(_0, _1))
#		define code$cvtpd2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, e6, modrm$rr(_0, _1))
#		define code$cvtpd2pi(state,n,...) code$cvtpd2pi$argc##n(state, ##__VA_ARGS__)
#		define code$cvtpd2pi$argc02(state,a1,a2) code$cvtpd2pi$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtpd2pi$argc02$1(...) code$cvtpd2pi$argc02$2(__VA_ARGS__)
#		define code$cvtpd2pi$argc02$2(state,t1,t2,a1,a2) code$cvtpd2pi$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtpd2pi$argt$mmreg64$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtpd2pi$argt$mmreg64$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtpd2pi$argt$mmreg64$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 2d, modrm$rr(_0, _1))
#		define code$cvtpd2ps(state,n,...) code$cvtpd2ps$argc##n(state, ##__VA_ARGS__)
#		define code$cvtpd2ps$argc02(state,a1,a2) code$cvtpd2ps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtpd2ps$argc02$1(...) code$cvtpd2ps$argc02$2(__VA_ARGS__)
#		define code$cvtpd2ps$argc02$2(state,t1,t2,a1,a2) code$cvtpd2ps$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtpd2ps$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtpd2ps$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtpd2ps$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 5a, modrm$rr(_0, _1))
#		define code$cvtpi2pd(state,n,...) code$cvtpi2pd$argc##n(state, ##__VA_ARGS__)
#		define code$cvtpi2pd$argc02(state,a1,a2) code$cvtpi2pd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtpi2pd$argc02$1(...) code$cvtpi2pd$argc02$2(__VA_ARGS__)
#		define code$cvtpi2pd$argc02$2(state,t1,t2,a1,a2) code$cvtpi2pd$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtpi2pd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtpi2pd$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtpi2pd$argt$mmreg128$mmreg64(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 2a, modrm$rr(_0, _1))
#		define code$cvtpi2ps(state,n,...) code$cvtpi2ps$argc##n(state, ##__VA_ARGS__)
#		define code$cvtpi2ps$argc02(state,a1,a2) code$cvtpi2ps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtpi2ps$argc02$1(...) code$cvtpi2ps$argc02$2(__VA_ARGS__)
#		define code$cvtpi2ps$argc02$2(state,t1,t2,a1,a2) code$cvtpi2ps$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtpi2ps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtpi2ps$argt$mmreg128$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtpi2ps$argt$mmreg128$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 2a, modrm$rr(_0, _1))
#		define code$cvtps2dq(state,n,...) code$cvtps2dq$argc##n(state, ##__VA_ARGS__)
#		define code$cvtps2dq$argc02(state,a1,a2) code$cvtps2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtps2dq$argc02$1(...) code$cvtps2dq$argc02$2(__VA_ARGS__)
#		define code$cvtps2dq$argc02$2(state,t1,t2,a1,a2) code$cvtps2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtps2dq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5b, modrm$rm(_0, _1))
#		define code$cvtps2dq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5b, modrm$rm(_0, _1))
#		define code$cvtps2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 5b, modrm$rr(_0, _1))
#		define code$cvtps2pd(state,n,...) code$cvtps2pd$argc##n(state, ##__VA_ARGS__)
#		define code$cvtps2pd$argc02(state,a1,a2) code$cvtps2pd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtps2pd$argc02$1(...) code$cvtps2pd$argc02$2(__VA_ARGS__)
#		define code$cvtps2pd$argc02$2(state,t1,t2,a1,a2) code$cvtps2pd$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtps2pd$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtps2pd$argt$mmreg128$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtps2pd$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 5a, modrm$rr(_0, _1))
#		define code$cvtps2pi(state,n,...) code$cvtps2pi$argc##n(state, ##__VA_ARGS__)
#		define code$cvtps2pi$argc02(state,a1,a2) code$cvtps2pi$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtps2pi$argc02$1(...) code$cvtps2pi$argc02$2(__VA_ARGS__)
#		define code$cvtps2pi$argc02$2(state,t1,t2,a1,a2) code$cvtps2pi$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtps2pi$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtps2pi$argt$mmreg128$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtps2pi$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 2d, modrm$rr(_0, _1))
#		define code$cvtsd2si(state,n,...) code$cvtsd2si$argc##n(state, ##__VA_ARGS__)
#		define code$cvtsd2si$argc02(state,a1,a2) code$cvtsd2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtsd2si$argc02$1(...) code$cvtsd2si$argc02$2(__VA_ARGS__)
#		define code$cvtsd2si$argc02$2(state,t1,t2,a1,a2) code$cvtsd2si$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtsd2si$argt$reg32$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtsd2si$argt$reg32$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtsd2si$argt$reg32$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 2d, modrm$rr(_0, _1))
#		define code$cvtsd2si$argt$reg64$mem(state,_0,_1) bytes(f2, rex64rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtsd2si$argt$reg64$mem64(state,_0,_1) bytes(f2, rex64rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtsd2si$argt$reg64$mmreg128(state,_0,_1) bytes(f2, rex64rr(_1, _0) 0f, 2d, modrm$rr(_0, _1))
#		define code$cvtsd2ss(state,n,...) code$cvtsd2ss$argc##n(state, ##__VA_ARGS__)
#		define code$cvtsd2ss$argc02(state,a1,a2) code$cvtsd2ss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtsd2ss$argc02$1(...) code$cvtsd2ss$argc02$2(__VA_ARGS__)
#		define code$cvtsd2ss$argc02$2(state,t1,t2,a1,a2) code$cvtsd2ss$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtsd2ss$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtsd2ss$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtsd2ss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 5a, modrm$rr(_0, _1))
#		define code$cvtsi2sd(state,n,...) code$cvtsi2sd$argc##n(state, ##__VA_ARGS__)
#		define code$cvtsi2sd$argc02(state,a1,a2) code$cvtsi2sd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtsi2sd$argc02$1(...) code$cvtsi2sd$argc02$2(__VA_ARGS__)
#		define code$cvtsi2sd$argc02$2(state,t1,t2,a1,a2) code$cvtsi2sd$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtsi2sd$argt$mmreg128$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for cvtsi2sd(mmreg128, mem)"))
#		define code$cvtsi2sd$argt$mmreg128$mem32(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtsi2sd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex64rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtsi2sd$argt$mmreg128$reg32(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 2a, modrm$rr(_0, _1))
#		define code$cvtsi2sd$argt$mmreg128$reg64(state,_0,_1) bytes(f2, rex64rr(_1, _0) 0f, 2a, modrm$rr(_0, _1))
#		define code$cvtsi2ss(state,n,...) code$cvtsi2ss$argc##n(state, ##__VA_ARGS__)
#		define code$cvtsi2ss$argc02(state,a1,a2) code$cvtsi2ss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtsi2ss$argc02$1(...) code$cvtsi2ss$argc02$2(__VA_ARGS__)
#		define code$cvtsi2ss$argc02$2(state,t1,t2,a1,a2) code$cvtsi2ss$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtsi2ss$argt$mmreg128$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for cvtsi2ss(mmreg128, mem)"))
#		define code$cvtsi2ss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtsi2ss$argt$mmreg128$mem64(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, 2a, modrm$rm(_0, _1))
#		define code$cvtsi2ss$argt$mmreg128$reg32(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 2a, modrm$rr(_0, _1))
#		define code$cvtsi2ss$argt$mmreg128$reg64(state,_0,_1) bytes(f3, rex64rr(_1, _0) 0f, 2a, modrm$rr(_0, _1))
#		define code$cvtss2sd(state,n,...) code$cvtss2sd$argc##n(state, ##__VA_ARGS__)
#		define code$cvtss2sd$argc02(state,a1,a2) code$cvtss2sd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtss2sd$argc02$1(...) code$cvtss2sd$argc02$2(__VA_ARGS__)
#		define code$cvtss2sd$argc02$2(state,t1,t2,a1,a2) code$cvtss2sd$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtss2sd$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtss2sd$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5a, modrm$rm(_0, _1))
#		define code$cvtss2sd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 5a, modrm$rr(_0, _1))
#		define code$cvtss2si(state,n,...) code$cvtss2si$argc##n(state, ##__VA_ARGS__)
#		define code$cvtss2si$argc02(state,a1,a2) code$cvtss2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvtss2si$argc02$1(...) code$cvtss2si$argc02$2(__VA_ARGS__)
#		define code$cvtss2si$argc02$2(state,t1,t2,a1,a2) code$cvtss2si$argt$##t1##$##t2(state, a1,a2)
#		define code$cvtss2si$argt$reg32$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtss2si$argt$reg32$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtss2si$argt$reg32$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 2d, modrm$rr(_0, _1))
#		define code$cvtss2si$argt$reg64$mem(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtss2si$argt$reg64$mem32(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, 2d, modrm$rm(_0, _1))
#		define code$cvtss2si$argt$reg64$mmreg128(state,_0,_1) bytes(f3, rex64rr(_1, _0) 0f, 2d, modrm$rr(_0, _1))
#		define code$cvttpd2dq(state,n,...) code$cvttpd2dq$argc##n(state, ##__VA_ARGS__)
#		define code$cvttpd2dq$argc02(state,a1,a2) code$cvttpd2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvttpd2dq$argc02$1(...) code$cvttpd2dq$argc02$2(__VA_ARGS__)
#		define code$cvttpd2dq$argc02$2(state,t1,t2,a1,a2) code$cvttpd2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$cvttpd2dq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e6, modrm$rm(_0, _1))
#		define code$cvttpd2dq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e6, modrm$rm(_0, _1))
#		define code$cvttpd2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e6, modrm$rr(_0, _1))
#		define code$cvttpd2pi(state,n,...) code$cvttpd2pi$argc##n(state, ##__VA_ARGS__)
#		define code$cvttpd2pi$argc02(state,a1,a2) code$cvttpd2pi$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvttpd2pi$argc02$1(...) code$cvttpd2pi$argc02$2(__VA_ARGS__)
#		define code$cvttpd2pi$argc02$2(state,t1,t2,a1,a2) code$cvttpd2pi$argt$##t1##$##t2(state, a1,a2)
#		define code$cvttpd2pi$argt$mmreg64$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttpd2pi$argt$mmreg64$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttpd2pi$argt$mmreg64$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 2c, modrm$rr(_0, _1))
#		define code$cvttps2dq(state,n,...) code$cvttps2dq$argc##n(state, ##__VA_ARGS__)
#		define code$cvttps2dq$argc02(state,a1,a2) code$cvttps2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvttps2dq$argc02$1(...) code$cvttps2dq$argc02$2(__VA_ARGS__)
#		define code$cvttps2dq$argc02$2(state,t1,t2,a1,a2) code$cvttps2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$cvttps2dq$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5b, modrm$rm(_0, _1))
#		define code$cvttps2dq$argt$mmreg128$mem128(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5b, modrm$rm(_0, _1))
#		define code$cvttps2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 5b, modrm$rr(_0, _1))
#		define code$cvttps2pi(state,n,...) code$cvttps2pi$argc##n(state, ##__VA_ARGS__)
#		define code$cvttps2pi$argc02(state,a1,a2) code$cvttps2pi$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvttps2pi$argc02$1(...) code$cvttps2pi$argc02$2(__VA_ARGS__)
#		define code$cvttps2pi$argc02$2(state,t1,t2,a1,a2) code$cvttps2pi$argt$##t1##$##t2(state, a1,a2)
#		define code$cvttps2pi$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttps2pi$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttps2pi$argt$mmreg64$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 2c, modrm$rr(_0, _1))
#		define code$cvttsd2si(state,n,...) code$cvttsd2si$argc##n(state, ##__VA_ARGS__)
#		define code$cvttsd2si$argc02(state,a1,a2) code$cvttsd2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvttsd2si$argc02$1(...) code$cvttsd2si$argc02$2(__VA_ARGS__)
#		define code$cvttsd2si$argc02$2(state,t1,t2,a1,a2) code$cvttsd2si$argt$##t1##$##t2(state, a1,a2)
#		define code$cvttsd2si$argt$reg32$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttsd2si$argt$reg32$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttsd2si$argt$reg32$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 2c, modrm$rr(_0, _1))
#		define code$cvttsd2si$argt$reg64$mem(state,_0,_1) bytes(f2, rex64rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttsd2si$argt$reg64$mem64(state,_0,_1) bytes(f2, rex64rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttsd2si$argt$reg64$mmreg128(state,_0,_1) bytes(f2, rex64rr(_1, _0) 0f, 2c, modrm$rr(_0, _1))
#		define code$cvttss2si(state,n,...) code$cvttss2si$argc##n(state, ##__VA_ARGS__)
#		define code$cvttss2si$argc02(state,a1,a2) code$cvttss2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$cvttss2si$argc02$1(...) code$cvttss2si$argc02$2(__VA_ARGS__)
#		define code$cvttss2si$argc02$2(state,t1,t2,a1,a2) code$cvttss2si$argt$##t1##$##t2(state, a1,a2)
#		define code$cvttss2si$argt$reg32$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttss2si$argt$reg32$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttss2si$argt$reg32$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 2c, modrm$rr(_0, _1))
#		define code$cvttss2si$argt$reg64$mem(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttss2si$argt$reg64$mem32(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, 2c, modrm$rm(_0, _1))
#		define code$cvttss2si$argt$reg64$mmreg128(state,_0,_1) bytes(f3, rex64rr(_1, _0) 0f, 2c, modrm$rr(_0, _1))
#		define code$cwd(state,n,...) code$cwd$argc##n(state, ##__VA_ARGS__)
#		define code$cwd$argc00(state,_) code$cwd$argt$(state)
#		define code$cwd$argt$(state) bytes(99)
#		define code$dec(state,n,...) code$dec$argc##n(state, ##__VA_ARGS__)
#		define code$dec$argc01(state,a1) code$dec$argc01$1(state, operand$gettype(a1), a1)
#		define code$dec$argc01$1(...) code$dec$argc01$2(__VA_ARGS__)
#		define code$dec$argc01$2(state,t1,a1) code$dec$argt$##t1(state, a1)
#		define code$dec$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for dec(mem)"))
#		define code$dec$argt$mem08(state,_0) bytes(rex08m(_0) fe, modrm$1m(_0))
#		define code$dec$argt$mem16(state,_0) bytes(rex16m(_0) ff, modrm$1m(_0))
#		define code$dec$argt$mem32(state,_0) bytes(rex32m(_0) ff, modrm$1m(_0))
#		define code$dec$argt$mem64(state,_0) bytes(rex64m(_0) ff, modrm$1m(_0))
#		define code$dec$argt$reg08(state,_0) bytes(rex08r(_0) fe, modrm$1r(_0))
#		define code$dec$argt$reg16(state,_0) bytes(rex16r(_0) ff, modrm$1r(_0))
#		define code$dec$argt$reg32(state,_0) bytes(rex32r(_0) ff, modrm$1r(_0))
#		define code$dec$argt$reg64(state,_0) bytes(rex64r(_0) ff, modrm$1r(_0))
#		define code$div(state,n,...) code$div$argc##n(state, ##__VA_ARGS__)
#		define code$div$argc01(state,a1) code$div$argc01$1(state, operand$gettype(a1), a1)
#		define code$div$argc01$1(...) code$div$argc01$2(__VA_ARGS__)
#		define code$div$argc01$2(state,t1,a1) code$div$argt$##t1(state, a1)
#		define code$div$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for div(mem)"))
#		define code$div$argt$mem08(state,_0) bytes(rex08m(_0) f6, modrm$6m(_0))
#		define code$div$argt$mem16(state,_0) bytes(rex16m(_0) f7, modrm$6m(_0))
#		define code$div$argt$mem32(state,_0) bytes(rex32m(_0) f7, modrm$6m(_0))
#		define code$div$argt$mem64(state,_0) bytes(rex64m(_0) f7, modrm$6m(_0))
#		define code$div$argt$reg08(state,_0) bytes(rex08r(_0) f6, modrm$6r(_0))
#		define code$div$argt$reg16(state,_0) bytes(rex16r(_0) f7, modrm$6r(_0))
#		define code$div$argt$reg32(state,_0) bytes(rex32r(_0) f7, modrm$6r(_0))
#		define code$div$argt$reg64(state,_0) bytes(rex64r(_0) f7, modrm$6r(_0))
#		define code$divpd(state,n,...) code$divpd$argc##n(state, ##__VA_ARGS__)
#		define code$divpd$argc02(state,a1,a2) code$divpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$divpd$argc02$1(...) code$divpd$argc02$2(__VA_ARGS__)
#		define code$divpd$argc02$2(state,t1,t2,a1,a2) code$divpd$argt$##t1##$##t2(state, a1,a2)
#		define code$divpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 5e, modrm$rr(_0, _1))
#		define code$divps(state,n,...) code$divps$argc##n(state, ##__VA_ARGS__)
#		define code$divps$argc02(state,a1,a2) code$divps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$divps$argc02$1(...) code$divps$argc02$2(__VA_ARGS__)
#		define code$divps$argc02$2(state,t1,t2,a1,a2) code$divps$argt$##t1##$##t2(state, a1,a2)
#		define code$divps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 5e, modrm$rr(_0, _1))
#		define code$divsd(state,n,...) code$divsd$argc##n(state, ##__VA_ARGS__)
#		define code$divsd$argc02(state,a1,a2) code$divsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$divsd$argc02$1(...) code$divsd$argc02$2(__VA_ARGS__)
#		define code$divsd$argc02$2(state,t1,t2,a1,a2) code$divsd$argt$##t1##$##t2(state, a1,a2)
#		define code$divsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 5e, modrm$rr(_0, _1))
#		define code$divss(state,n,...) code$divss$argc##n(state, ##__VA_ARGS__)
#		define code$divss$argc02(state,a1,a2) code$divss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$divss$argc02$1(...) code$divss$argc02$2(__VA_ARGS__)
#		define code$divss$argc02$2(state,t1,t2,a1,a2) code$divss$argt$##t1##$##t2(state, a1,a2)
#		define code$divss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5e, modrm$rm(_0, _1))
#		define code$divss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 5e, modrm$rr(_0, _1))
#		define code$dppd(state,n,...) code$dppd$argc##n(state, ##__VA_ARGS__)
#		define code$dppd$argc03(state,a1,a2,a3) code$dppd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$dppd$argc03$1(...) code$dppd$argc03$2(__VA_ARGS__)
#		define code$dppd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$dppd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$dppd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 41, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$dppd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 41, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$dppd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 41, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$dpps(state,n,...) code$dpps$argc##n(state, ##__VA_ARGS__)
#		define code$dpps$argc03(state,a1,a2,a3) code$dpps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$dpps$argc03$1(...) code$dpps$argc03$2(__VA_ARGS__)
#		define code$dpps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$dpps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$dpps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 40, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$dpps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 40, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$dpps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 40, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$emms(state,n,...) code$emms$argc##n(state, ##__VA_ARGS__)
#		define code$emms$argc00(state,_) code$emms$argt$(state)
#		define code$emms$argt$(state) bytes(0f, 77)
#		define code$encls(state,n,...) code$encls$argc##n(state, ##__VA_ARGS__)
#		define code$encls$argc00(state,_) code$encls$argt$(state)
#		define code$encls$argt$(state) bytes(0f, 01, cf)
#		define code$enclu(state,n,...) code$enclu$argc##n(state, ##__VA_ARGS__)
#		define code$enclu$argc00(state,_) code$enclu$argt$(state)
#		define code$enclu$argt$(state) bytes(0f, 01, d7)
#		define code$enclv(state,n,...) code$enclv$argc##n(state, ##__VA_ARGS__)
#		define code$enclv$argc00(state,_) code$enclv$argt$(state)
#		define code$enclv$argt$(state) bytes(0f, 01, c0)
#		define code$endbr32(state,n,...) code$endbr32$argc##n(state, ##__VA_ARGS__)
#		define code$endbr32$argc00(state,_) code$endbr32$argt$(state)
#		define code$endbr32$argt$(state) bytes(f3, 0f, 1e, fb)
#		define code$endbr64(state,n,...) code$endbr64$argc##n(state, ##__VA_ARGS__)
#		define code$endbr64$argc00(state,_) code$endbr64$argt$(state)
#		define code$endbr64$argt$(state) bytes(f3, 0f, 1e, fa)
#		define code$enter(state,n,...) code$enter$argc##n(state, ##__VA_ARGS__)
#		define code$enter$argc02(state,a1,a2) code$enter$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$enter$argc02$1(...) code$enter$argc02$2(__VA_ARGS__)
#		define code$enter$argc02$2(state,t1,t2,a1,a2) code$enter$argt$##t1##$##t2(state, a1,a2)
#		define code$enter$argt$imm16$imm08(state,_0,_1) bytes(c8, i16$bytes$le(which$imm16(state, _0)), i08$bytes$le(which$imm08(state, _1)))
#		define code$extractps(state,n,...) code$extractps$argc##n(state, ##__VA_ARGS__)
#		define code$extractps$argc03(state,a1,a2,a3) code$extractps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$extractps$argc03$1(...) code$extractps$argc03$2(__VA_ARGS__)
#		define code$extractps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$extractps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$extractps$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 17, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$extractps$argt$mem32$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 17, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$extractps$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_0, _1) 0f, 3a, 17, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$f2xm1(state,n,...) code$f2xm1$argc##n(state, ##__VA_ARGS__)
#		define code$f2xm1$argc00(state,_) code$f2xm1$argt$(state)
#		define code$f2xm1$argt$(state) bytes(d9, f0)
#		define code$fabs(state,n,...) code$fabs$argc##n(state, ##__VA_ARGS__)
#		define code$fabs$argc00(state,_) code$fabs$argt$(state)
#		define code$fabs$argt$(state) bytes(d9, e1)
#		define code$fadd(state,n,...) code$fadd$argc##n(state, ##__VA_ARGS__)
#		define code$fadd$argc01(state,a1) code$fadd$argc01$1(state, operand$gettype(a1), a1)
#		define code$fadd$argc01$1(...) code$fadd$argc01$2(__VA_ARGS__)
#		define code$fadd$argc01$2(state,t1,a1) code$fadd$argt$##t1(state, a1)
#		define code$fadd$argc02(state,a1,a2) code$fadd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fadd$argc02$1(...) code$fadd$argc02$2(__VA_ARGS__)
#		define code$fadd$argc02$2(state,t1,t2,a1,a2) code$fadd$argt$##t1##$##t2(state, a1,a2)
#		define code$fadd$argt$fpreg80$fpreg80(state,_0,_1) bytes(unpack(ppif(fpreg80$is$st0(_0), (d8, opcode$addregid7(c0, _1)), (dc, opcode$addregid7(c0, _0)))) assert$one$is$st0(_0, _1))
#		define code$fadd$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fadd(mem)"))
#		define code$fadd$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$0m(_0))
#		define code$fadd$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$0m(_0))
#		define code$faddp(state,n,...) code$faddp$argc##n(state, ##__VA_ARGS__)
#		define code$faddp$argc00(state,_) code$faddp$argt$(state)
#		define code$faddp$argc02(state,a1,a2) code$faddp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$faddp$argc02$1(...) code$faddp$argc02$2(__VA_ARGS__)
#		define code$faddp$argc02$2(state,t1,t2,a1,a2) code$faddp$argt$##t1##$##t2(state, a1,a2)
#		define code$faddp$argt$(state) bytes(de, c1)
#		define code$faddp$argt$fpreg80$fpreg80(state,_0,_1) bytes(de, opcode$addregid7(c0, _0) assert$is$st0(_1))
#		define code$fbld(state,n,...) code$fbld$argc##n(state, ##__VA_ARGS__)
#		define code$fbld$argc01(state,a1) code$fbld$argc01$1(state, operand$gettype(a1), a1)
#		define code$fbld$argc01$1(...) code$fbld$argc01$2(__VA_ARGS__)
#		define code$fbld$argc01$2(state,t1,a1) code$fbld$argt$##t1(state, a1)
#		define code$fbld$argt$mem(state,_0) bytes(rex32m(_0) df, modrm$4m(_0))
#		define code$fbld$argt$mem80(state,_0) bytes(rex32m(_0) df, modrm$4m(_0))
#		define code$fbstp(state,n,...) code$fbstp$argc##n(state, ##__VA_ARGS__)
#		define code$fbstp$argc01(state,a1) code$fbstp$argc01$1(state, operand$gettype(a1), a1)
#		define code$fbstp$argc01$1(...) code$fbstp$argc01$2(__VA_ARGS__)
#		define code$fbstp$argc01$2(state,t1,a1) code$fbstp$argt$##t1(state, a1)
#		define code$fbstp$argt$mem(state,_0) bytes(rex32m(_0) df, modrm$6m(_0))
#		define code$fbstp$argt$mem80(state,_0) bytes(rex32m(_0) df, modrm$6m(_0))
#		define code$fchs(state,n,...) code$fchs$argc##n(state, ##__VA_ARGS__)
#		define code$fchs$argc00(state,_) code$fchs$argt$(state)
#		define code$fchs$argt$(state) bytes(d9, e0)
#		define code$fclex(state,n,...) code$fclex$argc##n(state, ##__VA_ARGS__)
#		define code$fclex$argc00(state,_) code$fclex$argt$(state)
#		define code$fclex$argt$(state) bytes(9b, db, e2)
#		define code$fcmovb(state,n,...) code$fcmovb$argc##n(state, ##__VA_ARGS__)
#		define code$fcmovb$argc02(state,a1,a2) code$fcmovb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmovb$argc02$1(...) code$fcmovb$argc02$2(__VA_ARGS__)
#		define code$fcmovb$argc02$2(state,t1,t2,a1,a2) code$fcmovb$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmovb$argt$fpreg80$fpreg80(state,_0,_1) bytes(da, opcode$addregid7(c0, _1) assert$is$st0(_0))
#		define code$fcmovbe(state,n,...) code$fcmovbe$argc##n(state, ##__VA_ARGS__)
#		define code$fcmovbe$argc02(state,a1,a2) code$fcmovbe$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmovbe$argc02$1(...) code$fcmovbe$argc02$2(__VA_ARGS__)
#		define code$fcmovbe$argc02$2(state,t1,t2,a1,a2) code$fcmovbe$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmovbe$argt$fpreg80$fpreg80(state,_0,_1) bytes(da, opcode$addregid7(d0, _1) assert$is$st0(_0))
#		define code$fcmove(state,n,...) code$fcmove$argc##n(state, ##__VA_ARGS__)
#		define code$fcmove$argc02(state,a1,a2) code$fcmove$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmove$argc02$1(...) code$fcmove$argc02$2(__VA_ARGS__)
#		define code$fcmove$argc02$2(state,t1,t2,a1,a2) code$fcmove$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmove$argt$fpreg80$fpreg80(state,_0,_1) bytes(da, opcode$addregid7(c8, _1) assert$is$st0(_0))
#		define code$fcmovnb(state,n,...) code$fcmovnb$argc##n(state, ##__VA_ARGS__)
#		define code$fcmovnb$argc02(state,a1,a2) code$fcmovnb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmovnb$argc02$1(...) code$fcmovnb$argc02$2(__VA_ARGS__)
#		define code$fcmovnb$argc02$2(state,t1,t2,a1,a2) code$fcmovnb$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmovnb$argt$fpreg80$fpreg80(state,_0,_1) bytes(db, opcode$addregid7(c0, _1) assert$is$st0(_0))
#		define code$fcmovnbe(state,n,...) code$fcmovnbe$argc##n(state, ##__VA_ARGS__)
#		define code$fcmovnbe$argc02(state,a1,a2) code$fcmovnbe$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmovnbe$argc02$1(...) code$fcmovnbe$argc02$2(__VA_ARGS__)
#		define code$fcmovnbe$argc02$2(state,t1,t2,a1,a2) code$fcmovnbe$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmovnbe$argt$fpreg80$fpreg80(state,_0,_1) bytes(db, opcode$addregid7(d0, _1) assert$is$st0(_0))
#		define code$fcmovne(state,n,...) code$fcmovne$argc##n(state, ##__VA_ARGS__)
#		define code$fcmovne$argc02(state,a1,a2) code$fcmovne$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmovne$argc02$1(...) code$fcmovne$argc02$2(__VA_ARGS__)
#		define code$fcmovne$argc02$2(state,t1,t2,a1,a2) code$fcmovne$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmovne$argt$fpreg80$fpreg80(state,_0,_1) bytes(db, opcode$addregid7(c8, _1) assert$is$st0(_0))
#		define code$fcmovnu(state,n,...) code$fcmovnu$argc##n(state, ##__VA_ARGS__)
#		define code$fcmovnu$argc02(state,a1,a2) code$fcmovnu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmovnu$argc02$1(...) code$fcmovnu$argc02$2(__VA_ARGS__)
#		define code$fcmovnu$argc02$2(state,t1,t2,a1,a2) code$fcmovnu$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmovnu$argt$fpreg80$fpreg80(state,_0,_1) bytes(db, opcode$addregid7(d8, _1) assert$is$st0(_0))
#		define code$fcmovu(state,n,...) code$fcmovu$argc##n(state, ##__VA_ARGS__)
#		define code$fcmovu$argc02(state,a1,a2) code$fcmovu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcmovu$argc02$1(...) code$fcmovu$argc02$2(__VA_ARGS__)
#		define code$fcmovu$argc02$2(state,t1,t2,a1,a2) code$fcmovu$argt$##t1##$##t2(state, a1,a2)
#		define code$fcmovu$argt$fpreg80$fpreg80(state,_0,_1) bytes(da, opcode$addregid7(d8, _1) assert$is$st0(_0))
#		define code$fcom(state,n,...) code$fcom$argc##n(state, ##__VA_ARGS__)
#		define code$fcom$argc00(state,_) code$fcom$argt$(state)
#		define code$fcom$argc01(state,a1) code$fcom$argc01$1(state, operand$gettype(a1), a1)
#		define code$fcom$argc01$1(...) code$fcom$argc01$2(__VA_ARGS__)
#		define code$fcom$argc01$2(state,t1,a1) code$fcom$argt$##t1(state, a1)
#		define code$fcom$argt$(state) bytes(d8, d1)
#		define code$fcom$argt$fpreg80(state,_0) bytes(d8, opcode$addregid7(d0, _0))
#		define code$fcom$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fcom(mem)"))
#		define code$fcom$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$2m(_0))
#		define code$fcom$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$2m(_0))
#		define code$fcomi(state,n,...) code$fcomi$argc##n(state, ##__VA_ARGS__)
#		define code$fcomi$argc01(state,a1) code$fcomi$argc01$1(state, operand$gettype(a1), a1)
#		define code$fcomi$argc01$1(...) code$fcomi$argc01$2(__VA_ARGS__)
#		define code$fcomi$argc01$2(state,t1,a1) code$fcomi$argt$##t1(state, a1)
#		define code$fcomi$argc02(state,a1,a2) code$fcomi$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcomi$argc02$1(...) code$fcomi$argc02$2(__VA_ARGS__)
#		define code$fcomi$argc02$2(state,t1,t2,a1,a2) code$fcomi$argt$##t1##$##t2(state, a1,a2)
#		define code$fcomi$argt$fpreg80(state,_0) bytes(db, opcode$addregid7(f0, _0))
#		define code$fcomi$argt$fpreg80$fpreg80(state,_0,_1) bytes(db, opcode$addregid7(f0, _1) assert$is$st0(_0))
#		define code$fcomip(state,n,...) code$fcomip$argc##n(state, ##__VA_ARGS__)
#		define code$fcomip$argc01(state,a1) code$fcomip$argc01$1(state, operand$gettype(a1), a1)
#		define code$fcomip$argc01$1(...) code$fcomip$argc01$2(__VA_ARGS__)
#		define code$fcomip$argc01$2(state,t1,a1) code$fcomip$argt$##t1(state, a1)
#		define code$fcomip$argc02(state,a1,a2) code$fcomip$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fcomip$argc02$1(...) code$fcomip$argc02$2(__VA_ARGS__)
#		define code$fcomip$argc02$2(state,t1,t2,a1,a2) code$fcomip$argt$##t1##$##t2(state, a1,a2)
#		define code$fcomip$argt$fpreg80(state,_0) bytes(df, opcode$addregid7(f0, _0))
#		define code$fcomip$argt$fpreg80$fpreg80(state,_0,_1) bytes(df, opcode$addregid7(f0, _1) assert$is$st0(_0))
#		define code$fcomp(state,n,...) code$fcomp$argc##n(state, ##__VA_ARGS__)
#		define code$fcomp$argc00(state,_) code$fcomp$argt$(state)
#		define code$fcomp$argc01(state,a1) code$fcomp$argc01$1(state, operand$gettype(a1), a1)
#		define code$fcomp$argc01$1(...) code$fcomp$argc01$2(__VA_ARGS__)
#		define code$fcomp$argc01$2(state,t1,a1) code$fcomp$argt$##t1(state, a1)
#		define code$fcomp$argt$(state) bytes(d8, d9)
#		define code$fcomp$argt$fpreg80(state,_0) bytes(d8, opcode$addregid7(d8, _0))
#		define code$fcomp$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fcomp(mem)"))
#		define code$fcomp$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$3m(_0))
#		define code$fcomp$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$3m(_0))
#		define code$fcompp(state,n,...) code$fcompp$argc##n(state, ##__VA_ARGS__)
#		define code$fcompp$argc00(state,_) code$fcompp$argt$(state)
#		define code$fcompp$argt$(state) bytes(de, d9)
#		define code$fcos(state,n,...) code$fcos$argc##n(state, ##__VA_ARGS__)
#		define code$fcos$argc00(state,_) code$fcos$argt$(state)
#		define code$fcos$argc01(state,a1) code$fcos$argc01$1(state, operand$gettype(a1), a1)
#		define code$fcos$argc01$1(...) code$fcos$argc01$2(__VA_ARGS__)
#		define code$fcos$argc01$2(state,t1,a1) code$fcos$argt$##t1(state, a1)
#		define code$fcos$argt$(state) bytes(d9, ff)
#		define code$fcos$argt$fpreg80(state,_0) bytes(d9, ff assert$is$st0(_0))
#		define code$fdecstp(state,n,...) code$fdecstp$argc##n(state, ##__VA_ARGS__)
#		define code$fdecstp$argc00(state,_) code$fdecstp$argt$(state)
#		define code$fdecstp$argt$(state) bytes(d9, f6)
#		define code$fdiv(state,n,...) code$fdiv$argc##n(state, ##__VA_ARGS__)
#		define code$fdiv$argc01(state,a1) code$fdiv$argc01$1(state, operand$gettype(a1), a1)
#		define code$fdiv$argc01$1(...) code$fdiv$argc01$2(__VA_ARGS__)
#		define code$fdiv$argc01$2(state,t1,a1) code$fdiv$argt$##t1(state, a1)
#		define code$fdiv$argc02(state,a1,a2) code$fdiv$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fdiv$argc02$1(...) code$fdiv$argc02$2(__VA_ARGS__)
#		define code$fdiv$argc02$2(state,t1,t2,a1,a2) code$fdiv$argt$##t1##$##t2(state, a1,a2)
#		define code$fdiv$argt$fpreg80$fpreg80(state,_0,_1) bytes(unpack(ppif(fpreg80$is$st0(_0), (d8, opcode$addregid7(f0, _1)), (dc, opcode$addregid7(f8, _0) ))) assert$one$is$st0(_0, _1))
#		define code$fdiv$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fdiv(mem)"))
#		define code$fdiv$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$6m(_0))
#		define code$fdiv$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$6m(_0))
#		define code$fdivp(state,n,...) code$fdivp$argc##n(state, ##__VA_ARGS__)
#		define code$fdivp$argc00(state,_) code$fdivp$argt$(state)
#		define code$fdivp$argc02(state,a1,a2) code$fdivp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fdivp$argc02$1(...) code$fdivp$argc02$2(__VA_ARGS__)
#		define code$fdivp$argc02$2(state,t1,t2,a1,a2) code$fdivp$argt$##t1##$##t2(state, a1,a2)
#		define code$fdivp$argt$(state) bytes(de, f9)
#		define code$fdivp$argt$fpreg80$fpreg80(state,_0,_1) bytes(de, opcode$addregid7(f8, _0) assert$is$st0(_1))
#		define code$fdivr(state,n,...) code$fdivr$argc##n(state, ##__VA_ARGS__)
#		define code$fdivr$argc01(state,a1) code$fdivr$argc01$1(state, operand$gettype(a1), a1)
#		define code$fdivr$argc01$1(...) code$fdivr$argc01$2(__VA_ARGS__)
#		define code$fdivr$argc01$2(state,t1,a1) code$fdivr$argt$##t1(state, a1)
#		define code$fdivr$argc02(state,a1,a2) code$fdivr$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fdivr$argc02$1(...) code$fdivr$argc02$2(__VA_ARGS__)
#		define code$fdivr$argc02$2(state,t1,t2,a1,a2) code$fdivr$argt$##t1##$##t2(state, a1,a2)
#		define code$fdivr$argt$fpreg80$fpreg80(state,_0,_1) bytes(unpack(ppif(fpreg80$is$st0(_0), (d8, opcode$addregid7(f8, _1)), (dc, opcode$addregid7(f0, _0)))) assert$one$is$st0(_0, _1))
#		define code$fdivr$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fdivr(mem)"))
#		define code$fdivr$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$7m(_0))
#		define code$fdivr$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$7m(_0))
#		define code$fdivrp(state,n,...) code$fdivrp$argc##n(state, ##__VA_ARGS__)
#		define code$fdivrp$argc00(state,_) code$fdivrp$argt$(state)
#		define code$fdivrp$argc02(state,a1,a2) code$fdivrp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fdivrp$argc02$1(...) code$fdivrp$argc02$2(__VA_ARGS__)
#		define code$fdivrp$argc02$2(state,t1,t2,a1,a2) code$fdivrp$argt$##t1##$##t2(state, a1,a2)
#		define code$fdivrp$argt$(state) bytes(de, f1)
#		define code$fdivrp$argt$fpreg80$fpreg80(state,_0,_1) bytes(de, opcode$addregid7(f0, _0) assert$is$st0(_1))
#		define code$ffree(state,n,...) code$ffree$argc##n(state, ##__VA_ARGS__)
#		define code$ffree$argc01(state,a1) code$ffree$argc01$1(state, operand$gettype(a1), a1)
#		define code$ffree$argc01$1(...) code$ffree$argc01$2(__VA_ARGS__)
#		define code$ffree$argc01$2(state,t1,a1) code$ffree$argt$##t1(state, a1)
#		define code$ffree$argt$fpreg80(state,_0) bytes(dd, opcode$addregid7(c0, _0))
#		define code$fiadd(state,n,...) code$fiadd$argc##n(state, ##__VA_ARGS__)
#		define code$fiadd$argc01(state,a1) code$fiadd$argc01$1(state, operand$gettype(a1), a1)
#		define code$fiadd$argc01$1(...) code$fiadd$argc01$2(__VA_ARGS__)
#		define code$fiadd$argc01$2(state,t1,a1) code$fiadd$argt$##t1(state, a1)
#		define code$fiadd$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fiadd(mem)"))
#		define code$fiadd$argt$mem16(state,_0) bytes(rex32m(_0) de, modrm$0m(_0))
#		define code$fiadd$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$0m(_0))
#		define code$ficom(state,n,...) code$ficom$argc##n(state, ##__VA_ARGS__)
#		define code$ficom$argc01(state,a1) code$ficom$argc01$1(state, operand$gettype(a1), a1)
#		define code$ficom$argc01$1(...) code$ficom$argc01$2(__VA_ARGS__)
#		define code$ficom$argc01$2(state,t1,a1) code$ficom$argt$##t1(state, a1)
#		define code$ficom$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for ficom(mem)"))
#		define code$ficom$argt$mem16(state,_0) bytes(rex32m(_0) de, modrm$2m(_0))
#		define code$ficom$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$2m(_0))
#		define code$ficomp(state,n,...) code$ficomp$argc##n(state, ##__VA_ARGS__)
#		define code$ficomp$argc01(state,a1) code$ficomp$argc01$1(state, operand$gettype(a1), a1)
#		define code$ficomp$argc01$1(...) code$ficomp$argc01$2(__VA_ARGS__)
#		define code$ficomp$argc01$2(state,t1,a1) code$ficomp$argt$##t1(state, a1)
#		define code$ficomp$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for ficomp(mem)"))
#		define code$ficomp$argt$mem16(state,_0) bytes(rex32m(_0) de, modrm$3m(_0))
#		define code$ficomp$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$3m(_0))
#		define code$fidiv(state,n,...) code$fidiv$argc##n(state, ##__VA_ARGS__)
#		define code$fidiv$argc01(state,a1) code$fidiv$argc01$1(state, operand$gettype(a1), a1)
#		define code$fidiv$argc01$1(...) code$fidiv$argc01$2(__VA_ARGS__)
#		define code$fidiv$argc01$2(state,t1,a1) code$fidiv$argt$##t1(state, a1)
#		define code$fidiv$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fidiv(mem)"))
#		define code$fidiv$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$6m(_0))
#		define code$fidiv$argt$mem64(state,_0) bytes(rex32m(_0) de, modrm$6m(_0))
#		define code$fidivr(state,n,...) code$fidivr$argc##n(state, ##__VA_ARGS__)
#		define code$fidivr$argc01(state,a1) code$fidivr$argc01$1(state, operand$gettype(a1), a1)
#		define code$fidivr$argc01$1(...) code$fidivr$argc01$2(__VA_ARGS__)
#		define code$fidivr$argc01$2(state,t1,a1) code$fidivr$argt$##t1(state, a1)
#		define code$fidivr$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fidivr(mem)"))
#		define code$fidivr$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$7m(_0))
#		define code$fidivr$argt$mem64(state,_0) bytes(rex32m(_0) de, modrm$7m(_0))
#		define code$fild(state,n,...) code$fild$argc##n(state, ##__VA_ARGS__)
#		define code$fild$argc01(state,a1) code$fild$argc01$1(state, operand$gettype(a1), a1)
#		define code$fild$argc01$1(...) code$fild$argc01$2(__VA_ARGS__)
#		define code$fild$argc01$2(state,t1,a1) code$fild$argt$##t1(state, a1)
#		define code$fild$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fild(mem)"))
#		define code$fild$argt$mem16(state,_0) bytes(rex32m(_0) df, modrm$0m(_0))
#		define code$fild$argt$mem32(state,_0) bytes(rex32m(_0) db, modrm$0m(_0))
#		define code$fild$argt$mem64(state,_0) bytes(rex32m(_0) df, modrm$5m(_0))
#		define code$fimul(state,n,...) code$fimul$argc##n(state, ##__VA_ARGS__)
#		define code$fimul$argc01(state,a1) code$fimul$argc01$1(state, operand$gettype(a1), a1)
#		define code$fimul$argc01$1(...) code$fimul$argc01$2(__VA_ARGS__)
#		define code$fimul$argc01$2(state,t1,a1) code$fimul$argt$##t1(state, a1)
#		define code$fimul$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fimul(mem)"))
#		define code$fimul$argt$mem16(state,_0) bytes(rex32m(_0) de, modrm$1m(_0))
#		define code$fimul$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$1m(_0))
#		define code$fincstp(state,n,...) code$fincstp$argc##n(state, ##__VA_ARGS__)
#		define code$fincstp$argc00(state,_) code$fincstp$argt$(state)
#		define code$fincstp$argt$(state) bytes(d9, f7)
#		define code$finit(state,n,...) code$finit$argc##n(state, ##__VA_ARGS__)
#		define code$finit$argc00(state,_) code$finit$argt$(state)
#		define code$finit$argt$(state) bytes(9b, db, e3)
#		define code$fist(state,n,...) code$fist$argc##n(state, ##__VA_ARGS__)
#		define code$fist$argc01(state,a1) code$fist$argc01$1(state, operand$gettype(a1), a1)
#		define code$fist$argc01$1(...) code$fist$argc01$2(__VA_ARGS__)
#		define code$fist$argc01$2(state,t1,a1) code$fist$argt$##t1(state, a1)
#		define code$fist$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fist(mem)"))
#		define code$fist$argt$mem16(state,_0) bytes(rex32m(_0) df, modrm$2m(_0))
#		define code$fist$argt$mem32(state,_0) bytes(rex32m(_0) db, modrm$2m(_0))
#		define code$fistp(state,n,...) code$fistp$argc##n(state, ##__VA_ARGS__)
#		define code$fistp$argc01(state,a1) code$fistp$argc01$1(state, operand$gettype(a1), a1)
#		define code$fistp$argc01$1(...) code$fistp$argc01$2(__VA_ARGS__)
#		define code$fistp$argc01$2(state,t1,a1) code$fistp$argt$##t1(state, a1)
#		define code$fistp$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fistp(mem)"))
#		define code$fistp$argt$mem16(state,_0) bytes(rex32m(_0) df, modrm$3m(_0))
#		define code$fistp$argt$mem32(state,_0) bytes(rex32m(_0) db, modrm$3m(_0))
#		define code$fistp$argt$mem64(state,_0) bytes(rex32m(_0) df, modrm$7m(_0))
#		define code$fisttp(state,n,...) code$fisttp$argc##n(state, ##__VA_ARGS__)
#		define code$fisttp$argc01(state,a1) code$fisttp$argc01$1(state, operand$gettype(a1), a1)
#		define code$fisttp$argc01$1(...) code$fisttp$argc01$2(__VA_ARGS__)
#		define code$fisttp$argc01$2(state,t1,a1) code$fisttp$argt$##t1(state, a1)
#		define code$fisttp$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fisttp(mem)"))
#		define code$fisttp$argt$mem16(state,_0) bytes(rex32m(_0) df, modrm$1m(_0))
#		define code$fisttp$argt$mem32(state,_0) bytes(rex32m(_0) db, modrm$1m(_0))
#		define code$fisttp$argt$mem64(state,_0) bytes(rex32m(_0) dd, modrm$1m(_0))
#		define code$fisub(state,n,...) code$fisub$argc##n(state, ##__VA_ARGS__)
#		define code$fisub$argc01(state,a1) code$fisub$argc01$1(state, operand$gettype(a1), a1)
#		define code$fisub$argc01$1(...) code$fisub$argc01$2(__VA_ARGS__)
#		define code$fisub$argc01$2(state,t1,a1) code$fisub$argt$##t1(state, a1)
#		define code$fisub$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fisub(mem)"))
#		define code$fisub$argt$mem16(state,_0) bytes(rex32m(_0) de, modrm$4m(_0))
#		define code$fisub$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$4m(_0))
#		define code$fisubr(state,n,...) code$fisubr$argc##n(state, ##__VA_ARGS__)
#		define code$fisubr$argc01(state,a1) code$fisubr$argc01$1(state, operand$gettype(a1), a1)
#		define code$fisubr$argc01$1(...) code$fisubr$argc01$2(__VA_ARGS__)
#		define code$fisubr$argc01$2(state,t1,a1) code$fisubr$argt$##t1(state, a1)
#		define code$fisubr$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fisubr(mem)"))
#		define code$fisubr$argt$mem16(state,_0) bytes(rex32m(_0) de, modrm$5m(_0))
#		define code$fisubr$argt$mem32(state,_0) bytes(rex32m(_0) da, modrm$5m(_0))
#		define code$fld(state,n,...) code$fld$argc##n(state, ##__VA_ARGS__)
#		define code$fld$argc01(state,a1) code$fld$argc01$1(state, operand$gettype(a1), a1)
#		define code$fld$argc01$1(...) code$fld$argc01$2(__VA_ARGS__)
#		define code$fld$argc01$2(state,t1,a1) code$fld$argt$##t1(state, a1)
#		define code$fld$argt$fpreg80(state,_0) bytes(d9, opcode$addregid7(c0, _0))
#		define code$fld$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fld(mem)"))
#		define code$fld$argt$mem32(state,_0) bytes(rex32m(_0) d9, modrm$0m(_0))
#		define code$fld$argt$mem64(state,_0) bytes(rex32m(_0) dd, modrm$0m(_0))
#		define code$fld$argt$mem80(state,_0) bytes(rex32m(_0) db, modrm$5m(_0))
#		define code$fld1(state,n,...) code$fld1$argc##n(state, ##__VA_ARGS__)
#		define code$fld1$argc00(state,_) code$fld1$argt$(state)
#		define code$fld1$argt$(state) bytes(d9, e8)
#		define code$fldcw(state,n,...) code$fldcw$argc##n(state, ##__VA_ARGS__)
#		define code$fldcw$argc01(state,a1) code$fldcw$argc01$1(state, operand$gettype(a1), a1)
#		define code$fldcw$argc01$1(...) code$fldcw$argc01$2(__VA_ARGS__)
#		define code$fldcw$argc01$2(state,t1,a1) code$fldcw$argt$##t1(state, a1)
#		define code$fldcw$argt$mem(state,_0) bytes(rex32m(_0) d9, modrm$5m(_0))
#		define code$fldcw$argt$mem16(state,_0) bytes(rex32m(_0) d9, modrm$5m(_0))
#		define code$fldenv(state,n,...) code$fldenv$argc##n(state, ##__VA_ARGS__)
#		define code$fldenv$argc01(state,a1) code$fldenv$argc01$1(state, operand$gettype(a1), a1)
#		define code$fldenv$argc01$1(...) code$fldenv$argc01$2(__VA_ARGS__)
#		define code$fldenv$argc01$2(state,t1,a1) code$fldenv$argt$##t1(state, a1)
#		define code$fldenv$argt$mem(state,_0) bytes(rex32m(_0) d9, modrm$4m(_0))
#		define code$fldl2e(state,n,...) code$fldl2e$argc##n(state, ##__VA_ARGS__)
#		define code$fldl2e$argc00(state,_) code$fldl2e$argt$(state)
#		define code$fldl2e$argt$(state) bytes(d9, ea)
#		define code$fldl2t(state,n,...) code$fldl2t$argc##n(state, ##__VA_ARGS__)
#		define code$fldl2t$argc00(state,_) code$fldl2t$argt$(state)
#		define code$fldl2t$argt$(state) bytes(d9, e9)
#		define code$fldlg2(state,n,...) code$fldlg2$argc##n(state, ##__VA_ARGS__)
#		define code$fldlg2$argc00(state,_) code$fldlg2$argt$(state)
#		define code$fldlg2$argt$(state) bytes(d9, ec)
#		define code$fldln2(state,n,...) code$fldln2$argc##n(state, ##__VA_ARGS__)
#		define code$fldln2$argc00(state,_) code$fldln2$argt$(state)
#		define code$fldln2$argt$(state) bytes(d9, ed)
#		define code$fldpi(state,n,...) code$fldpi$argc##n(state, ##__VA_ARGS__)
#		define code$fldpi$argc00(state,_) code$fldpi$argt$(state)
#		define code$fldpi$argt$(state) bytes(d9, eb)
#		define code$fldz(state,n,...) code$fldz$argc##n(state, ##__VA_ARGS__)
#		define code$fldz$argc00(state,_) code$fldz$argt$(state)
#		define code$fldz$argt$(state) bytes(d9, ee)
#		define code$fmul(state,n,...) code$fmul$argc##n(state, ##__VA_ARGS__)
#		define code$fmul$argc01(state,a1) code$fmul$argc01$1(state, operand$gettype(a1), a1)
#		define code$fmul$argc01$1(...) code$fmul$argc01$2(__VA_ARGS__)
#		define code$fmul$argc01$2(state,t1,a1) code$fmul$argt$##t1(state, a1)
#		define code$fmul$argc02(state,a1,a2) code$fmul$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fmul$argc02$1(...) code$fmul$argc02$2(__VA_ARGS__)
#		define code$fmul$argc02$2(state,t1,t2,a1,a2) code$fmul$argt$##t1##$##t2(state, a1,a2)
#		define code$fmul$argt$fpreg80$fpreg80(state,_0,_1) bytes(unpack(ppif(fpreg80$is$st0(_0), (d8, opcode$addregid7(c8, _1)), (dc, opcode$addregid7(c8, _0)))) assert$one$is$st0(_0, _1))
#		define code$fmul$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fmul(mem)"))
#		define code$fmul$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$1m(_0))
#		define code$fmul$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$1m(_0))
#		define code$fmulp(state,n,...) code$fmulp$argc##n(state, ##__VA_ARGS__)
#		define code$fmulp$argc00(state,_) code$fmulp$argt$(state)
#		define code$fmulp$argc02(state,a1,a2) code$fmulp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fmulp$argc02$1(...) code$fmulp$argc02$2(__VA_ARGS__)
#		define code$fmulp$argc02$2(state,t1,t2,a1,a2) code$fmulp$argt$##t1##$##t2(state, a1,a2)
#		define code$fmulp$argt$(state) bytes(de, c9)
#		define code$fmulp$argt$fpreg80$fpreg80(state,_0,_1) bytes(de, opcode$addregid7(c8, _0) assert$is$st0(_1))
#		define code$fnclex(state,n,...) code$fnclex$argc##n(state, ##__VA_ARGS__)
#		define code$fnclex$argc00(state,_) code$fnclex$argt$(state)
#		define code$fnclex$argt$(state) bytes(db, e2)
#		define code$fninit(state,n,...) code$fninit$argc##n(state, ##__VA_ARGS__)
#		define code$fninit$argc00(state,_) code$fninit$argt$(state)
#		define code$fninit$argt$(state) bytes(db, e3)
#		define code$fnop(state,n,...) code$fnop$argc##n(state, ##__VA_ARGS__)
#		define code$fnop$argc00(state,_) code$fnop$argt$(state)
#		define code$fnop$argt$(state) bytes(d9, d0)
#		define code$fnsave(state,n,...) code$fnsave$argc##n(state, ##__VA_ARGS__)
#		define code$fnsave$argc01(state,a1) code$fnsave$argc01$1(state, operand$gettype(a1), a1)
#		define code$fnsave$argc01$1(...) code$fnsave$argc01$2(__VA_ARGS__)
#		define code$fnsave$argc01$2(state,t1,a1) code$fnsave$argt$##t1(state, a1)
#		define code$fnsave$argt$mem(state,_0) bytes(rex32m(_0) dd, modrm$6m(_0))
#		define code$fnstcw(state,n,...) code$fnstcw$argc##n(state, ##__VA_ARGS__)
#		define code$fnstcw$argc01(state,a1) code$fnstcw$argc01$1(state, operand$gettype(a1), a1)
#		define code$fnstcw$argc01$1(...) code$fnstcw$argc01$2(__VA_ARGS__)
#		define code$fnstcw$argc01$2(state,t1,a1) code$fnstcw$argt$##t1(state, a1)
#		define code$fnstcw$argt$mem(state,_0) bytes(rex32m(_0) d9, modrm$7m(_0))
#		define code$fnstcw$argt$mem16(state,_0) bytes(rex32m(_0) d9, modrm$7m(_0))
#		define code$fnstenv(state,n,...) code$fnstenv$argc##n(state, ##__VA_ARGS__)
#		define code$fnstenv$argc01(state,a1) code$fnstenv$argc01$1(state, operand$gettype(a1), a1)
#		define code$fnstenv$argc01$1(...) code$fnstenv$argc01$2(__VA_ARGS__)
#		define code$fnstenv$argc01$2(state,t1,a1) code$fnstenv$argt$##t1(state, a1)
#		define code$fnstenv$argt$mem(state,_0) bytes(rex32m(_0) d9, modrm$6m(_0))
#		define code$fnstsw(state,n,...) code$fnstsw$argc##n(state, ##__VA_ARGS__)
#		define code$fnstsw$argc01(state,a1) code$fnstsw$argc01$1(state, operand$gettype(a1), a1)
#		define code$fnstsw$argc01$1(...) code$fnstsw$argc01$2(__VA_ARGS__)
#		define code$fnstsw$argc01$2(state,t1,a1) code$fnstsw$argt$##t1(state, a1)
#		define code$fnstsw$argt$mem(state,_0) bytes(rex32m(_0) dd, modrm$7m(_0))
#		define code$fnstsw$argt$mem16(state,_0) bytes(rex32m(_0) dd, modrm$7m(_0))
#		define code$fnstsw$argt$reg16(state,_0) bytes(df, e0 assert$is$ax(_0))
#		define code$fpatan(state,n,...) code$fpatan$argc##n(state, ##__VA_ARGS__)
#		define code$fpatan$argc00(state,_) code$fpatan$argt$(state)
#		define code$fpatan$argt$(state) bytes(d9, f3)
#		define code$fprem(state,n,...) code$fprem$argc##n(state, ##__VA_ARGS__)
#		define code$fprem$argc00(state,_) code$fprem$argt$(state)
#		define code$fprem$argt$(state) bytes(d9, f8)
#		define code$fprem1(state,n,...) code$fprem1$argc##n(state, ##__VA_ARGS__)
#		define code$fprem1$argc00(state,_) code$fprem1$argt$(state)
#		define code$fprem1$argt$(state) bytes(d9, f5)
#		define code$fptan(state,n,...) code$fptan$argc##n(state, ##__VA_ARGS__)
#		define code$fptan$argc00(state,_) code$fptan$argt$(state)
#		define code$fptan$argt$(state) bytes(d9, f2)
#		define code$frndint(state,n,...) code$frndint$argc##n(state, ##__VA_ARGS__)
#		define code$frndint$argc00(state,_) code$frndint$argt$(state)
#		define code$frndint$argt$(state) bytes(d9, fc)
#		define code$frstor(state,n,...) code$frstor$argc##n(state, ##__VA_ARGS__)
#		define code$frstor$argc01(state,a1) code$frstor$argc01$1(state, operand$gettype(a1), a1)
#		define code$frstor$argc01$1(...) code$frstor$argc01$2(__VA_ARGS__)
#		define code$frstor$argc01$2(state,t1,a1) code$frstor$argt$##t1(state, a1)
#		define code$frstor$argt$mem(state,_0) bytes(rex32m(_0) dd, modrm$4m(_0))
#		define code$fsave(state,n,...) code$fsave$argc##n(state, ##__VA_ARGS__)
#		define code$fsave$argc01(state,a1) code$fsave$argc01$1(state, operand$gettype(a1), a1)
#		define code$fsave$argc01$1(...) code$fsave$argc01$2(__VA_ARGS__)
#		define code$fsave$argc01$2(state,t1,a1) code$fsave$argt$##t1(state, a1)
#		define code$fsave$argt$mem(state,_0) bytes(rex32m(_0) 9b, dd, modrm$6m(_0))
#		define code$fscale(state,n,...) code$fscale$argc##n(state, ##__VA_ARGS__)
#		define code$fscale$argc00(state,_) code$fscale$argt$(state)
#		define code$fscale$argt$(state) bytes(d9, fd)
#		define code$fsin(state,n,...) code$fsin$argc##n(state, ##__VA_ARGS__)
#		define code$fsin$argc00(state,_) code$fsin$argt$(state)
#		define code$fsin$argt$(state) bytes(d9, fe)
#		define code$fsincos(state,n,...) code$fsincos$argc##n(state, ##__VA_ARGS__)
#		define code$fsincos$argc00(state,_) code$fsincos$argt$(state)
#		define code$fsincos$argt$(state) bytes(d9, fb)
#		define code$fsqrt(state,n,...) code$fsqrt$argc##n(state, ##__VA_ARGS__)
#		define code$fsqrt$argc00(state,_) code$fsqrt$argt$(state)
#		define code$fsqrt$argt$(state) bytes(d9, fa)
#		define code$fst(state,n,...) code$fst$argc##n(state, ##__VA_ARGS__)
#		define code$fst$argc01(state,a1) code$fst$argc01$1(state, operand$gettype(a1), a1)
#		define code$fst$argc01$1(...) code$fst$argc01$2(__VA_ARGS__)
#		define code$fst$argc01$2(state,t1,a1) code$fst$argt$##t1(state, a1)
#		define code$fst$argt$fpreg80(state,_0) bytes(dd, opcode$addregid7(d0, _0))
#		define code$fst$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fst(mem)"))
#		define code$fst$argt$mem32(state,_0) bytes(rex32m(_0) d9, modrm$2m(_0))
#		define code$fst$argt$mem64(state,_0) bytes(rex32m(_0) dd, modrm$2m(_0))
#		define code$fstcw(state,n,...) code$fstcw$argc##n(state, ##__VA_ARGS__)
#		define code$fstcw$argc01(state,a1) code$fstcw$argc01$1(state, operand$gettype(a1), a1)
#		define code$fstcw$argc01$1(...) code$fstcw$argc01$2(__VA_ARGS__)
#		define code$fstcw$argc01$2(state,t1,a1) code$fstcw$argt$##t1(state, a1)
#		define code$fstcw$argt$mem(state,_0) bytes(rex32m(_0) 9b, d9, modrm$7m(_0))
#		define code$fstcw$argt$mem16(state,_0) bytes(rex32m(_0) 9b, d9, modrm$7m(_0))
#		define code$fstenv(state,n,...) code$fstenv$argc##n(state, ##__VA_ARGS__)
#		define code$fstenv$argc01(state,a1) code$fstenv$argc01$1(state, operand$gettype(a1), a1)
#		define code$fstenv$argc01$1(...) code$fstenv$argc01$2(__VA_ARGS__)
#		define code$fstenv$argc01$2(state,t1,a1) code$fstenv$argt$##t1(state, a1)
#		define code$fstenv$argt$mem(state,_0) bytes(rex32m(_0) 9b, d9, modrm$6m(_0))
#		define code$fstp(state,n,...) code$fstp$argc##n(state, ##__VA_ARGS__)
#		define code$fstp$argc01(state,a1) code$fstp$argc01$1(state, operand$gettype(a1), a1)
#		define code$fstp$argc01$1(...) code$fstp$argc01$2(__VA_ARGS__)
#		define code$fstp$argc01$2(state,t1,a1) code$fstp$argt$##t1(state, a1)
#		define code$fstp$argt$fpreg80(state,_0) bytes(dd, opcode$addregid7(d8, _0))
#		define code$fstp$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fstp(mem)"))
#		define code$fstp$argt$mem32(state,_0) bytes(rex32m(_0) d9, modrm$3m(_0))
#		define code$fstp$argt$mem64(state,_0) bytes(rex32m(_0) dd, modrm$3m(_0))
#		define code$fstp$argt$mem80(state,_0) bytes(rex32m(_0) db, modrm$7m(_0))
#		define code$fstsw(state,n,...) code$fstsw$argc##n(state, ##__VA_ARGS__)
#		define code$fstsw$argc01(state,a1) code$fstsw$argc01$1(state, operand$gettype(a1), a1)
#		define code$fstsw$argc01$1(...) code$fstsw$argc01$2(__VA_ARGS__)
#		define code$fstsw$argc01$2(state,t1,a1) code$fstsw$argt$##t1(state, a1)
#		define code$fstsw$argt$mem(state,_0) bytes(rex32m(_0) 9b, dd, modrm$7m(_0))
#		define code$fstsw$argt$mem16(state,_0) bytes(rex32m(_0) 9b, dd, modrm$7m(_0))
#		define code$fstsw$argt$reg16(state,_0) bytes(9b, df, e0 assert$is$ax(_0))
#		define code$fsub(state,n,...) code$fsub$argc##n(state, ##__VA_ARGS__)
#		define code$fsub$argc01(state,a1) code$fsub$argc01$1(state, operand$gettype(a1), a1)
#		define code$fsub$argc01$1(...) code$fsub$argc01$2(__VA_ARGS__)
#		define code$fsub$argc01$2(state,t1,a1) code$fsub$argt$##t1(state, a1)
#		define code$fsub$argc02(state,a1,a2) code$fsub$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fsub$argc02$1(...) code$fsub$argc02$2(__VA_ARGS__)
#		define code$fsub$argc02$2(state,t1,t2,a1,a2) code$fsub$argt$##t1##$##t2(state, a1,a2)
#		define code$fsub$argt$fpreg80$fpreg80(state,_0,_1) bytes(unpack(ppif(fpreg80$is$st0(_0), (d8, opcode$addregid7(e0, _1)), (dc, opcode$addregid7(e8, _0)))) assert$one$is$st0(_0, _1))
#		define code$fsub$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fsub(mem)"))
#		define code$fsub$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$4m(_0))
#		define code$fsub$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$4m(_0))
#		define code$fsubp(state,n,...) code$fsubp$argc##n(state, ##__VA_ARGS__)
#		define code$fsubp$argc00(state,_) code$fsubp$argt$(state)
#		define code$fsubp$argc02(state,a1,a2) code$fsubp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fsubp$argc02$1(...) code$fsubp$argc02$2(__VA_ARGS__)
#		define code$fsubp$argc02$2(state,t1,t2,a1,a2) code$fsubp$argt$##t1##$##t2(state, a1,a2)
#		define code$fsubp$argt$(state) bytes(de, e9)
#		define code$fsubp$argt$fpreg80$fpreg80(state,_0,_1) bytes(de, opcode$addregid7(e8, _0) assert$is$st0(_1))
#		define code$fsubr(state,n,...) code$fsubr$argc##n(state, ##__VA_ARGS__)
#		define code$fsubr$argc01(state,a1) code$fsubr$argc01$1(state, operand$gettype(a1), a1)
#		define code$fsubr$argc01$1(...) code$fsubr$argc01$2(__VA_ARGS__)
#		define code$fsubr$argc01$2(state,t1,a1) code$fsubr$argt$##t1(state, a1)
#		define code$fsubr$argc02(state,a1,a2) code$fsubr$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fsubr$argc02$1(...) code$fsubr$argc02$2(__VA_ARGS__)
#		define code$fsubr$argc02$2(state,t1,t2,a1,a2) code$fsubr$argt$##t1##$##t2(state, a1,a2)
#		define code$fsubr$argt$fpreg80$fpreg80(state,_0,_1) bytes(unpack(ppif(fpreg80$is$st0(_0), (d8, opcode$addregid7(e8, _1)), (dc, opcode$addregid7(e0, _0)))) assert$one$is$st0(_0, _1))
#		define code$fsubr$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for fsubr(mem)"))
#		define code$fsubr$argt$mem32(state,_0) bytes(rex32m(_0) d8, modrm$5m(_0))
#		define code$fsubr$argt$mem64(state,_0) bytes(rex32m(_0) dc, modrm$5m(_0))
#		define code$fsubrp(state,n,...) code$fsubrp$argc##n(state, ##__VA_ARGS__)
#		define code$fsubrp$argc00(state,_) code$fsubrp$argt$(state)
#		define code$fsubrp$argc02(state,a1,a2) code$fsubrp$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fsubrp$argc02$1(...) code$fsubrp$argc02$2(__VA_ARGS__)
#		define code$fsubrp$argc02$2(state,t1,t2,a1,a2) code$fsubrp$argt$##t1##$##t2(state, a1,a2)
#		define code$fsubrp$argt$(state) bytes(de, e1)
#		define code$fsubrp$argt$fpreg80$fpreg80(state,_0,_1) bytes(de, opcode$addregid7(e0, _0) assert$is$st0(_1))
#		define code$ftst(state,n,...) code$ftst$argc##n(state, ##__VA_ARGS__)
#		define code$ftst$argc00(state,_) code$ftst$argt$(state)
#		define code$ftst$argt$(state) bytes(d9, e4)
#		define code$fucom(state,n,...) code$fucom$argc##n(state, ##__VA_ARGS__)
#		define code$fucom$argc00(state,_) code$fucom$argt$(state)
#		define code$fucom$argc01(state,a1) code$fucom$argc01$1(state, operand$gettype(a1), a1)
#		define code$fucom$argc01$1(...) code$fucom$argc01$2(__VA_ARGS__)
#		define code$fucom$argc01$2(state,t1,a1) code$fucom$argt$##t1(state, a1)
#		define code$fucom$argt$(state) bytes(dd, e1)
#		define code$fucom$argt$fpreg80(state,_0) bytes(dd, opcode$addregid7(e0, _0))
#		define code$fucomi(state,n,...) code$fucomi$argc##n(state, ##__VA_ARGS__)
#		define code$fucomi$argc01(state,a1) code$fucomi$argc01$1(state, operand$gettype(a1), a1)
#		define code$fucomi$argc01$1(...) code$fucomi$argc01$2(__VA_ARGS__)
#		define code$fucomi$argc01$2(state,t1,a1) code$fucomi$argt$##t1(state, a1)
#		define code$fucomi$argc02(state,a1,a2) code$fucomi$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fucomi$argc02$1(...) code$fucomi$argc02$2(__VA_ARGS__)
#		define code$fucomi$argc02$2(state,t1,t2,a1,a2) code$fucomi$argt$##t1##$##t2(state, a1,a2)
#		define code$fucomi$argt$fpreg80(state,_0) bytes(db, opcode$addregid7(e8, _0))
#		define code$fucomi$argt$fpreg80$fpreg80(state,_0,_1) bytes(db, opcode$addregid7(e8, _1) assert$is$st0(_0))
#		define code$fucomip(state,n,...) code$fucomip$argc##n(state, ##__VA_ARGS__)
#		define code$fucomip$argc01(state,a1) code$fucomip$argc01$1(state, operand$gettype(a1), a1)
#		define code$fucomip$argc01$1(...) code$fucomip$argc01$2(__VA_ARGS__)
#		define code$fucomip$argc01$2(state,t1,a1) code$fucomip$argt$##t1(state, a1)
#		define code$fucomip$argc02(state,a1,a2) code$fucomip$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$fucomip$argc02$1(...) code$fucomip$argc02$2(__VA_ARGS__)
#		define code$fucomip$argc02$2(state,t1,t2,a1,a2) code$fucomip$argt$##t1##$##t2(state, a1,a2)
#		define code$fucomip$argt$fpreg80(state,_0) bytes(df, opcode$addregid7(e8, _0))
#		define code$fucomip$argt$fpreg80$fpreg80(state,_0,_1) bytes(df, opcode$addregid7(e8, _1) assert$is$st0(_0))
#		define code$fucomp(state,n,...) code$fucomp$argc##n(state, ##__VA_ARGS__)
#		define code$fucomp$argc00(state,_) code$fucomp$argt$(state)
#		define code$fucomp$argc01(state,a1) code$fucomp$argc01$1(state, operand$gettype(a1), a1)
#		define code$fucomp$argc01$1(...) code$fucomp$argc01$2(__VA_ARGS__)
#		define code$fucomp$argc01$2(state,t1,a1) code$fucomp$argt$##t1(state, a1)
#		define code$fucomp$argt$(state) bytes(dd, e9)
#		define code$fucomp$argt$fpreg80(state,_0) bytes(dd, opcode$addregid7(e8, _0))
#		define code$fucompp(state,n,...) code$fucompp$argc##n(state, ##__VA_ARGS__)
#		define code$fucompp$argc00(state,_) code$fucompp$argt$(state)
#		define code$fucompp$argt$(state) bytes(da, e9)
#		define code$fwait(state,n,...) code$fwait$argc##n(state, ##__VA_ARGS__)
#		define code$fwait$argc00(state,_) code$fwait$argt$(state)
#		define code$fwait$argt$(state) bytes(9b)
#		define code$fxam(state,n,...) code$fxam$argc##n(state, ##__VA_ARGS__)
#		define code$fxam$argc00(state,_) code$fxam$argt$(state)
#		define code$fxam$argt$(state) bytes(d9, e5)
#		define code$fxch(state,n,...) code$fxch$argc##n(state, ##__VA_ARGS__)
#		define code$fxch$argc00(state,_) code$fxch$argt$(state)
#		define code$fxch$argc01(state,a1) code$fxch$argc01$1(state, operand$gettype(a1), a1)
#		define code$fxch$argc01$1(...) code$fxch$argc01$2(__VA_ARGS__)
#		define code$fxch$argc01$2(state,t1,a1) code$fxch$argt$##t1(state, a1)
#		define code$fxch$argt$(state) bytes(d9, c9)
#		define code$fxch$argt$fpreg80(state,_0) bytes(d9, opcode$addregid7(c8, _0))
#		define code$fxrstor(state,n,...) code$fxrstor$argc##n(state, ##__VA_ARGS__)
#		define code$fxrstor$argc01(state,a1) code$fxrstor$argc01$1(state, operand$gettype(a1), a1)
#		define code$fxrstor$argc01$1(...) code$fxrstor$argc01$2(__VA_ARGS__)
#		define code$fxrstor$argc01$2(state,t1,a1) code$fxrstor$argt$##t1(state, a1)
#		define code$fxrstor$argt$mem(state,_0) bytes(rex32m(_0) 0f, ae, modrm$1m(_0))
#		define code$fxrstor64(state,n,...) code$fxrstor64$argc##n(state, ##__VA_ARGS__)
#		define code$fxrstor64$argc01(state,a1) code$fxrstor64$argc01$1(state, operand$gettype(a1), a1)
#		define code$fxrstor64$argc01$1(...) code$fxrstor64$argc01$2(__VA_ARGS__)
#		define code$fxrstor64$argc01$2(state,t1,a1) code$fxrstor64$argt$##t1(state, a1)
#		define code$fxrstor64$argt$mem(state,_0) bytes(rex64m(_0) 0f, ae, modrm$1m(_0))
#		define code$fxsave(state,n,...) code$fxsave$argc##n(state, ##__VA_ARGS__)
#		define code$fxsave$argc01(state,a1) code$fxsave$argc01$1(state, operand$gettype(a1), a1)
#		define code$fxsave$argc01$1(...) code$fxsave$argc01$2(__VA_ARGS__)
#		define code$fxsave$argc01$2(state,t1,a1) code$fxsave$argt$##t1(state, a1)
#		define code$fxsave$argt$mem(state,_0) bytes(rex32m(_0) 0f, ae, modrm$0m(_0))
#		define code$fxsave64(state,n,...) code$fxsave64$argc##n(state, ##__VA_ARGS__)
#		define code$fxsave64$argc01(state,a1) code$fxsave64$argc01$1(state, operand$gettype(a1), a1)
#		define code$fxsave64$argc01$1(...) code$fxsave64$argc01$2(__VA_ARGS__)
#		define code$fxsave64$argc01$2(state,t1,a1) code$fxsave64$argt$##t1(state, a1)
#		define code$fxsave64$argt$mem(state,_0) bytes(rex64m(_0) 0f, ae, modrm$0m(_0))
#		define code$fxtract(state,n,...) code$fxtract$argc##n(state, ##__VA_ARGS__)
#		define code$fxtract$argc00(state,_) code$fxtract$argt$(state)
#		define code$fxtract$argt$(state) bytes(d9, f4)
#		define code$fyl2x(state,n,...) code$fyl2x$argc##n(state, ##__VA_ARGS__)
#		define code$fyl2x$argc00(state,_) code$fyl2x$argt$(state)
#		define code$fyl2x$argt$(state) bytes(d9, f1)
#		define code$fyl2xp1(state,n,...) code$fyl2xp1$argc##n(state, ##__VA_ARGS__)
#		define code$fyl2xp1$argc00(state,_) code$fyl2xp1$argt$(state)
#		define code$fyl2xp1$argt$(state) bytes(d9, f9)
#		define code$gf2p8affineinvqb(state,n,...) code$gf2p8affineinvqb$argc##n(state, ##__VA_ARGS__)
#		define code$gf2p8affineinvqb$argc03(state,a1,a2,a3) code$gf2p8affineinvqb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$gf2p8affineinvqb$argc03$1(...) code$gf2p8affineinvqb$argc03$2(__VA_ARGS__)
#		define code$gf2p8affineinvqb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$gf2p8affineinvqb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$gf2p8affineinvqb$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, cf, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$gf2p8affineinvqb$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, cf, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$gf2p8affineinvqb$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, cf, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$gf2p8affineqb(state,n,...) code$gf2p8affineqb$argc##n(state, ##__VA_ARGS__)
#		define code$gf2p8affineqb$argc03(state,a1,a2,a3) code$gf2p8affineqb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$gf2p8affineqb$argc03$1(...) code$gf2p8affineqb$argc03$2(__VA_ARGS__)
#		define code$gf2p8affineqb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$gf2p8affineqb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$gf2p8affineqb$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, ce, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$gf2p8affineqb$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, ce, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$gf2p8affineqb$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, ce, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$gf2p8mulb(state,n,...) code$gf2p8mulb$argc##n(state, ##__VA_ARGS__)
#		define code$gf2p8mulb$argc02(state,a1,a2) code$gf2p8mulb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$gf2p8mulb$argc02$1(...) code$gf2p8mulb$argc02$2(__VA_ARGS__)
#		define code$gf2p8mulb$argc02$2(state,t1,t2,a1,a2) code$gf2p8mulb$argt$##t1##$##t2(state, a1,a2)
#		define code$gf2p8mulb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, cf, modrm$rm(_0, _1))
#		define code$gf2p8mulb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, cf, modrm$rm(_0, _1))
#		define code$gf2p8mulb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, cf, modrm$rr(_0, _1))
#		define code$haddpd(state,n,...) code$haddpd$argc##n(state, ##__VA_ARGS__)
#		define code$haddpd$argc02(state,a1,a2) code$haddpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$haddpd$argc02$1(...) code$haddpd$argc02$2(__VA_ARGS__)
#		define code$haddpd$argc02$2(state,t1,t2,a1,a2) code$haddpd$argt$##t1##$##t2(state, a1,a2)
#		define code$haddpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 7c, modrm$rm(_0, _1))
#		define code$haddpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 7c, modrm$rm(_0, _1))
#		define code$haddpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 7c, modrm$rr(_0, _1))
#		define code$haddps(state,n,...) code$haddps$argc##n(state, ##__VA_ARGS__)
#		define code$haddps$argc02(state,a1,a2) code$haddps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$haddps$argc02$1(...) code$haddps$argc02$2(__VA_ARGS__)
#		define code$haddps$argc02$2(state,t1,t2,a1,a2) code$haddps$argt$##t1##$##t2(state, a1,a2)
#		define code$haddps$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 7c, modrm$rm(_0, _1))
#		define code$haddps$argt$mmreg128$mem128(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 7c, modrm$rm(_0, _1))
#		define code$haddps$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 7c, modrm$rr(_0, _1))
#		define code$hlt(state,n,...) code$hlt$argc##n(state, ##__VA_ARGS__)
#		define code$hlt$argc00(state,_) code$hlt$argt$(state)
#		define code$hlt$argt$(state) bytes(f4)
#		define code$hreset(state,n,...) code$hreset$argc##n(state, ##__VA_ARGS__)
#		define code$hreset$argc01(state,a1) code$hreset$argc01$1(state, operand$gettype(a1), a1)
#		define code$hreset$argc01$1(...) code$hreset$argc01$2(__VA_ARGS__)
#		define code$hreset$argc01$2(state,t1,a1) code$hreset$argt$##t1(state, a1)
#		define code$hreset$argc02(state,a1,a2) code$hreset$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$hreset$argc02$1(...) code$hreset$argc02$2(__VA_ARGS__)
#		define code$hreset$argc02$2(state,t1,t2,a1,a2) code$hreset$argt$##t1##$##t2(state, a1,a2)
#		define code$hreset$argt$imm08(state,_0) bytes(f3, 0f, 3a, f0, c0, i08$bytes$le(which$imm08(state, _0)))
#		define code$hreset$argt$imm08$reg32(state,_0,_1) bytes(f3, 0f, 3a, f0, c0, i08$bytes$le(which$imm08(state, _0)) assert$is$eax(_1))
#		define code$hsubpd(state,n,...) code$hsubpd$argc##n(state, ##__VA_ARGS__)
#		define code$hsubpd$argc02(state,a1,a2) code$hsubpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$hsubpd$argc02$1(...) code$hsubpd$argc02$2(__VA_ARGS__)
#		define code$hsubpd$argc02$2(state,t1,t2,a1,a2) code$hsubpd$argt$##t1##$##t2(state, a1,a2)
#		define code$hsubpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 7d, modrm$rm(_0, _1))
#		define code$hsubpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 7d, modrm$rm(_0, _1))
#		define code$hsubpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 7d, modrm$rr(_0, _1))
#		define code$hsubps(state,n,...) code$hsubps$argc##n(state, ##__VA_ARGS__)
#		define code$hsubps$argc02(state,a1,a2) code$hsubps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$hsubps$argc02$1(...) code$hsubps$argc02$2(__VA_ARGS__)
#		define code$hsubps$argc02$2(state,t1,t2,a1,a2) code$hsubps$argt$##t1##$##t2(state, a1,a2)
#		define code$hsubps$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 7d, modrm$rm(_0, _1))
#		define code$hsubps$argt$mmreg128$mem128(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 7d, modrm$rm(_0, _1))
#		define code$hsubps$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 7d, modrm$rr(_0, _1))
#		define code$idiv(state,n,...) code$idiv$argc##n(state, ##__VA_ARGS__)
#		define code$idiv$argc01(state,a1) code$idiv$argc01$1(state, operand$gettype(a1), a1)
#		define code$idiv$argc01$1(...) code$idiv$argc01$2(__VA_ARGS__)
#		define code$idiv$argc01$2(state,t1,a1) code$idiv$argt$##t1(state, a1)
#		define code$idiv$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for idiv(mem)"))
#		define code$idiv$argt$mem08(state,_0) bytes(rex08m(_0) f6, modrm$7m(_0))
#		define code$idiv$argt$mem16(state,_0) bytes(rex16m(_0) f7, modrm$7m(_0))
#		define code$idiv$argt$mem32(state,_0) bytes(rex32m(_0) f7, modrm$7m(_0))
#		define code$idiv$argt$mem64(state,_0) bytes(rex64m(_0) f7, modrm$7m(_0))
#		define code$idiv$argt$reg08(state,_0) bytes(rex08r(_0) f6, modrm$7r(_0))
#		define code$idiv$argt$reg16(state,_0) bytes(rex16r(_0) f7, modrm$7r(_0))
#		define code$idiv$argt$reg32(state,_0) bytes(rex32r(_0) f7, modrm$7r(_0))
#		define code$idiv$argt$reg64(state,_0) bytes(rex64r(_0) f7, modrm$7r(_0))
#		define code$imul(state,n,...) code$imul$argc##n(state, ##__VA_ARGS__)
#		define code$imul$argc01(state,a1) code$imul$argc01$1(state, operand$gettype(a1), a1)
#		define code$imul$argc01$1(...) code$imul$argc01$2(__VA_ARGS__)
#		define code$imul$argc01$2(state,t1,a1) code$imul$argt$##t1(state, a1)
#		define code$imul$argc02(state,a1,a2) code$imul$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$imul$argc02$1(...) code$imul$argc02$2(__VA_ARGS__)
#		define code$imul$argc02$2(state,t1,t2,a1,a2) code$imul$argt$##t1##$##t2(state, a1,a2)
#		define code$imul$argc03(state,a1,a2,a3) code$imul$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$imul$argc03$1(...) code$imul$argc03$2(__VA_ARGS__)
#		define code$imul$argc03$2(state,t1,t2,t3,a1,a2,a3) code$imul$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$imul$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for imul(mem)"))
#		define code$imul$argt$mem08(state,_0) bytes(rex08m(_0) f6, modrm$5m(_0))
#		define code$imul$argt$mem16(state,_0) bytes(rex16m(_0) f7, modrm$5m(_0))
#		define code$imul$argt$mem32(state,_0) bytes(rex32m(_0) f7, modrm$5m(_0))
#		define code$imul$argt$mem64(state,_0) bytes(rex64m(_0) f7, modrm$5m(_0))
#		define code$imul$argt$reg08(state,_0) bytes(rex08r(_0) f6, modrm$5r(_0))
#		define code$imul$argt$reg16(state,_0) bytes(rex16r(_0) f7, modrm$5r(_0))
#		define code$imul$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, af, modrm$rm(_0, _1))
#		define code$imul$argt$reg16$mem$imm08(state,_0,_1,_2) bytes(rex16rm(_0, _1) 6b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg16$mem$imm16(state,_0,_1,_2) bytes(rex16rm(_0, _1) 69, modrm$rm(_0, _1), i16$bytes$le(which$imm16(state, _2)))
#		define code$imul$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, af, modrm$rm(_0, _1))
#		define code$imul$argt$reg16$mem16$imm08(state,_0,_1,_2) bytes(rex16rm(_0, _1) 6b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg16$mem16$imm16(state,_0,_1,_2) bytes(rex16rm(_0, _1) 69, modrm$rm(_0, _1), i16$bytes$le(which$imm16(state, _2)))
#		define code$imul$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, af, modrm$rr(_0, _1))
#		define code$imul$argt$reg16$reg16$imm08(state,_0,_1,_2) bytes(rex16rr(_1, _0) 6b, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg16$reg16$imm16(state,_0,_1,_2) bytes(rex16rr(_1, _0) 69, modrm$rr(_0, _1), i16$bytes$le(which$imm16(state, _2)))
#		define code$imul$argt$reg32(state,_0) bytes(rex32r(_0) f7, modrm$5r(_0))
#		define code$imul$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, af, modrm$rm(_0, _1))
#		define code$imul$argt$reg32$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 6b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg32$mem$imm32(state,_0,_1,_2) bytes(rex32rm(_0, _1) 69, modrm$rm(_0, _1), i32$bytes$le(which$imm32(state, _2)))
#		define code$imul$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, af, modrm$rm(_0, _1))
#		define code$imul$argt$reg32$mem32$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 6b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg32$mem32$imm32(state,_0,_1,_2) bytes(rex32rm(_0, _1) 69, modrm$rm(_0, _1), i32$bytes$le(which$imm32(state, _2)))
#		define code$imul$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, af, modrm$rr(_0, _1))
#		define code$imul$argt$reg32$reg32$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 6b, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg32$reg32$imm32(state,_0,_1,_2) bytes(rex32rr(_1, _0) 69, modrm$rr(_0, _1), i32$bytes$le(which$imm32(state, _2)))
#		define code$imul$argt$reg64(state,_0) bytes(rex64r(_0) f7, modrm$5r(_0))
#		define code$imul$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, af, modrm$rm(_0, _1))
#		define code$imul$argt$reg64$mem$imm08(state,_0,_1,_2) bytes(rex64rm(_0, _1) 6b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg64$mem$imm32(state,_0,_1,_2) bytes(rex64rm(_0, _1) 69, modrm$rm(_0, _1), i32$bytes$le(which$imm32(state, _2)))
#		define code$imul$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, af, modrm$rm(_0, _1))
#		define code$imul$argt$reg64$mem64$imm08(state,_0,_1,_2) bytes(rex64rm(_0, _1) 6b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg64$mem64$imm32(state,_0,_1,_2) bytes(rex64rm(_0, _1) 69, modrm$rm(_0, _1), i32$bytes$le(which$imm32(state, _2)))
#		define code$imul$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, af, modrm$rr(_0, _1))
#		define code$imul$argt$reg64$reg64$imm08(state,_0,_1,_2) bytes(rex64rr(_1, _0) 6b, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$imul$argt$reg64$reg64$imm32(state,_0,_1,_2) bytes(rex64rr(_1, _0) 69, modrm$rr(_0, _1), i32$bytes$le(which$imm32(state, _2)))
#		define code$in(state,n,...) code$in$argc##n(state, ##__VA_ARGS__)
#		define code$in$argc02(state,a1,a2) code$in$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$in$argc02$1(...) code$in$argc02$2(__VA_ARGS__)
#		define code$in$argc02$2(state,t1,t2,a1,a2) code$in$argt$##t1##$##t2(state, a1,a2)
#		define code$in$argt$reg08$imm08(state,_0,_1) bytes(e4, i08$bytes$le(which$imm08(state, _1)) assert$is$al(_0))
#		define code$in$argt$reg08$reg16(state,_0,_1) bytes(ec assert$is$al(_0) assert$is$dx(_1))
#		define code$in$argt$reg16$imm08(state,_0,_1) bytes(66, e5, i08$bytes$le(which$imm08(state, _1)) assert$is$ax(_0))
#		define code$in$argt$reg16$reg16(state,_0,_1) bytes(66, ed assert$is$ax(_0) assert$is$dx(_1))
#		define code$in$argt$reg32$imm08(state,_0,_1) bytes(e5, i08$bytes$le(which$imm08(state, _1)) assert$is$eax(_0))
#		define code$in$argt$reg32$reg16(state,_0,_1) bytes(ed assert$is$eax(_0) assert$is$dx(_1))
#		define code$inc(state,n,...) code$inc$argc##n(state, ##__VA_ARGS__)
#		define code$inc$argc01(state,a1) code$inc$argc01$1(state, operand$gettype(a1), a1)
#		define code$inc$argc01$1(...) code$inc$argc01$2(__VA_ARGS__)
#		define code$inc$argc01$2(state,t1,a1) code$inc$argt$##t1(state, a1)
#		define code$inc$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for inc(mem)"))
#		define code$inc$argt$mem08(state,_0) bytes(rex08m(_0) fe, modrm$0m(_0))
#		define code$inc$argt$mem16(state,_0) bytes(rex16m(_0) ff, modrm$0m(_0))
#		define code$inc$argt$mem32(state,_0) bytes(rex32m(_0) ff, modrm$0m(_0))
#		define code$inc$argt$mem64(state,_0) bytes(rex64m(_0) ff, modrm$0m(_0))
#		define code$inc$argt$reg08(state,_0) bytes(rex08r(_0) fe, modrm$0r(_0))
#		define code$inc$argt$reg16(state,_0) bytes(rex16r(_0) ff, modrm$0r(_0))
#		define code$inc$argt$reg32(state,_0) bytes(rex32r(_0) ff, modrm$0r(_0))
#		define code$inc$argt$reg64(state,_0) bytes(rex64r(_0) ff, modrm$0r(_0))
#		define code$incsspd(state,n,...) code$incsspd$argc##n(state, ##__VA_ARGS__)
#		define code$incsspd$argc01(state,a1) code$incsspd$argc01$1(state, operand$gettype(a1), a1)
#		define code$incsspd$argc01$1(...) code$incsspd$argc01$2(__VA_ARGS__)
#		define code$incsspd$argc01$2(state,t1,a1) code$incsspd$argt$##t1(state, a1)
#		define code$incsspd$argt$reg32(state,_0) bytes(f3, rex32r(_0) 0f, ae, modrm$5r(_0))
#		define code$incsspq(state,n,...) code$incsspq$argc##n(state, ##__VA_ARGS__)
#		define code$incsspq$argc01(state,a1) code$incsspq$argc01$1(state, operand$gettype(a1), a1)
#		define code$incsspq$argc01$1(...) code$incsspq$argc01$2(__VA_ARGS__)
#		define code$incsspq$argc01$2(state,t1,a1) code$incsspq$argt$##t1(state, a1)
#		define code$incsspq$argt$reg64(state,_0) bytes(f3, rex64r(_0) 0f, ae, modrm$5r(_0))
#		define code$insb(state,n,...) code$insb$argc##n(state, ##__VA_ARGS__)
#		define code$insb$argc00(state,_) code$insb$argt$(state)
#		define code$insb$argt$(state) bytes(6c)
#		define code$insd(state,n,...) code$insd$argc##n(state, ##__VA_ARGS__)
#		define code$insd$argc00(state,_) code$insd$argt$(state)
#		define code$insd$argt$(state) bytes(6d)
#		define code$insertps(state,n,...) code$insertps$argc##n(state, ##__VA_ARGS__)
#		define code$insertps$argc03(state,a1,a2,a3) code$insertps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$insertps$argc03$1(...) code$insertps$argc03$2(__VA_ARGS__)
#		define code$insertps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$insertps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$insertps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 21, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$insertps$argt$mmreg128$mem32$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 21, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$insertps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 21, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$insw(state,n,...) code$insw$argc##n(state, ##__VA_ARGS__)
#		define code$insw$argc00(state,_) code$insw$argt$(state)
#		define code$insw$argt$(state) bytes(66, 6d)
#		define code$int0(state,n,...) code$int0$argc##n(state, ##__VA_ARGS__)
#		define code$int0$argc00(state,_) code$int0$argt$(state)
#		define code$int0$argt$(state) bytes(ce)
#		define code$int1(state,n,...) code$int1$argc##n(state, ##__VA_ARGS__)
#		define code$int1$argc00(state,_) code$int1$argt$(state)
#		define code$int1$argt$(state) bytes(f1)
#		define code$int3(state,n,...) code$int3$argc##n(state, ##__VA_ARGS__)
#		define code$int3$argc00(state,_) code$int3$argt$(state)
#		define code$int3$argt$(state) bytes(cc)
#		define code$invd(state,n,...) code$invd$argc##n(state, ##__VA_ARGS__)
#		define code$invd$argc00(state,_) code$invd$argt$(state)
#		define code$invd$argt$(state) bytes(0f, 08)
#		define code$invept(state,n,...) code$invept$argc##n(state, ##__VA_ARGS__)
#		define code$invept$argc02(state,a1,a2) code$invept$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$invept$argc02$1(...) code$invept$argc02$2(__VA_ARGS__)
#		define code$invept$argc02$2(state,t1,t2,a1,a2) code$invept$argt$##t1##$##t2(state, a1,a2)
#		define code$invept$argt$reg64$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 38, 80, modrm$rm(_0, _1))
#		define code$invept$argt$reg64$mem128(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 38, 80, modrm$rm(_0, _1))
#		define code$invlpg(state,n,...) code$invlpg$argc##n(state, ##__VA_ARGS__)
#		define code$invlpg$argc01(state,a1) code$invlpg$argc01$1(state, operand$gettype(a1), a1)
#		define code$invlpg$argc01$1(...) code$invlpg$argc01$2(__VA_ARGS__)
#		define code$invlpg$argc01$2(state,t1,a1) code$invlpg$argt$##t1(state, a1)
#		define code$invlpg$argt$mem(state,_0) bytes(rex32m(_0) 0f, 01, modrm$7m(_0))
#		define code$invpcid(state,n,...) code$invpcid$argc##n(state, ##__VA_ARGS__)
#		define code$invpcid$argc02(state,a1,a2) code$invpcid$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$invpcid$argc02$1(...) code$invpcid$argc02$2(__VA_ARGS__)
#		define code$invpcid$argc02$2(state,t1,t2,a1,a2) code$invpcid$argt$##t1##$##t2(state, a1,a2)
#		define code$invpcid$argt$reg64$mem(state,_0,_1) bytes(66, rex64rm(_0, _1) 0f, 38, 82, modrm$rm(_0, _1))
#		define code$invpcid$argt$reg64$mem128(state,_0,_1) bytes(66, rex64rm(_0, _1) 0f, 38, 82, modrm$rm(_0, _1))
#		define code$invvpid(state,n,...) code$invvpid$argc##n(state, ##__VA_ARGS__)
#		define code$invvpid$argc02(state,a1,a2) code$invvpid$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$invvpid$argc02$1(...) code$invvpid$argc02$2(__VA_ARGS__)
#		define code$invvpid$argc02$2(state,t1,t2,a1,a2) code$invvpid$argt$##t1##$##t2(state, a1,a2)
#		define code$invvpid$argt$reg64$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 38, 81, modrm$rm(_0, _1))
#		define code$invvpid$argt$reg64$mem128(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 38, 81, modrm$rm(_0, _1))
#		define code$iret(state,n,...) code$iret$argc##n(state, ##__VA_ARGS__)
#		define code$iret$argc00(state,_) code$iret$argt$(state)
#		define code$iret$argt$(state) bytes(cf)
#		define code$iretd(state,n,...) code$iretd$argc##n(state, ##__VA_ARGS__)
#		define code$iretd$argc00(state,_) code$iretd$argt$(state)
#		define code$iretd$argt$(state) bytes(cf)
#		define code$iretq(state,n,...) code$iretq$argc##n(state, ##__VA_ARGS__)
#		define code$iretq$argc00(state,_) code$iretq$argt$(state)
#		define code$iretq$argt$(state) bytes(/* rex64r(rax) = */48, cf)
#		define code$iszerobytes(...) code$iszerobytes$1(__VA_ARGS__)
#		define code$iszerobytes$1(...) code$iszerobytes$2(__VA_ARGS__)
#		define code$iszerobytes$2(b) code$iszerobytes$for$##b
#		define code$iszerobytes$for$bytes(...) byte$eq(repeat8(0),byte$fromhex(count(__VA_ARGS__)))
#		define code$ja(state,n,...) code$ja$argc##n(state, ##__VA_ARGS__)
#		define code$ja$argc01(state,a1) code$ja$argc01$1(state, operand$gettype(a1), a1)
#		define code$ja$argc01$1(...) code$ja$argc01$2(__VA_ARGS__)
#		define code$ja$argc01$2(state,t1,a1) code$ja$argt$##t1(state, a1)
#		define code$ja$argt$rel32(state,_0) bytes(0f, 87, i32$bytes$le(which$rel32(state, _0)))
#		define code$jae(state,n,...) code$jae$argc##n(state, ##__VA_ARGS__)
#		define code$jae$argc01(state,a1) code$jae$argc01$1(state, operand$gettype(a1), a1)
#		define code$jae$argc01$1(...) code$jae$argc01$2(__VA_ARGS__)
#		define code$jae$argc01$2(state,t1,a1) code$jae$argt$##t1(state, a1)
#		define code$jae$argt$rel32(state,_0) bytes(0f, 83, i32$bytes$le(which$rel32(state, _0)))
#		define code$jb(state,n,...) code$jb$argc##n(state, ##__VA_ARGS__)
#		define code$jb$argc01(state,a1) code$jb$argc01$1(state, operand$gettype(a1), a1)
#		define code$jb$argc01$1(...) code$jb$argc01$2(__VA_ARGS__)
#		define code$jb$argc01$2(state,t1,a1) code$jb$argt$##t1(state, a1)
#		define code$jb$argt$rel32(state,_0) bytes(0f, 82, i32$bytes$le(which$rel32(state, _0)))
#		define code$jbe(state,n,...) code$jbe$argc##n(state, ##__VA_ARGS__)
#		define code$jbe$argc01(state,a1) code$jbe$argc01$1(state, operand$gettype(a1), a1)
#		define code$jbe$argc01$1(...) code$jbe$argc01$2(__VA_ARGS__)
#		define code$jbe$argc01$2(state,t1,a1) code$jbe$argt$##t1(state, a1)
#		define code$jbe$argt$rel32(state,_0) bytes(0f, 86, i32$bytes$le(which$rel32(state, _0)))
#		define code$jc(state,n,...) code$jc$argc##n(state, ##__VA_ARGS__)
#		define code$jc$argc01(state,a1) code$jc$argc01$1(state, operand$gettype(a1), a1)
#		define code$jc$argc01$1(...) code$jc$argc01$2(__VA_ARGS__)
#		define code$jc$argc01$2(state,t1,a1) code$jc$argt$##t1(state, a1)
#		define code$jc$argt$rel32(state,_0) bytes(0f, 82, i32$bytes$le(which$rel32(state, _0)))
#		define code$je(state,n,...) code$je$argc##n(state, ##__VA_ARGS__)
#		define code$je$argc01(state,a1) code$je$argc01$1(state, operand$gettype(a1), a1)
#		define code$je$argc01$1(...) code$je$argc01$2(__VA_ARGS__)
#		define code$je$argc01$2(state,t1,a1) code$je$argt$##t1(state, a1)
#		define code$je$argt$rel32(state,_0) bytes(0f, 84, i32$bytes$le(which$rel32(state, _0)))
#		define code$jg(state,n,...) code$jg$argc##n(state, ##__VA_ARGS__)
#		define code$jg$argc01(state,a1) code$jg$argc01$1(state, operand$gettype(a1), a1)
#		define code$jg$argc01$1(...) code$jg$argc01$2(__VA_ARGS__)
#		define code$jg$argc01$2(state,t1,a1) code$jg$argt$##t1(state, a1)
#		define code$jg$argt$rel32(state,_0) bytes(0f, 8f, i32$bytes$le(which$rel32(state, _0)))
#		define code$jge(state,n,...) code$jge$argc##n(state, ##__VA_ARGS__)
#		define code$jge$argc01(state,a1) code$jge$argc01$1(state, operand$gettype(a1), a1)
#		define code$jge$argc01$1(...) code$jge$argc01$2(__VA_ARGS__)
#		define code$jge$argc01$2(state,t1,a1) code$jge$argt$##t1(state, a1)
#		define code$jge$argt$rel32(state,_0) bytes(0f, 8d, i32$bytes$le(which$rel32(state, _0)))
#		define code$jl(state,n,...) code$jl$argc##n(state, ##__VA_ARGS__)
#		define code$jl$argc01(state,a1) code$jl$argc01$1(state, operand$gettype(a1), a1)
#		define code$jl$argc01$1(...) code$jl$argc01$2(__VA_ARGS__)
#		define code$jl$argc01$2(state,t1,a1) code$jl$argt$##t1(state, a1)
#		define code$jl$argt$rel32(state,_0) bytes(0f, 8c, i32$bytes$le(which$rel32(state, _0)))
#		define code$jle(state,n,...) code$jle$argc##n(state, ##__VA_ARGS__)
#		define code$jle$argc01(state,a1) code$jle$argc01$1(state, operand$gettype(a1), a1)
#		define code$jle$argc01$1(...) code$jle$argc01$2(__VA_ARGS__)
#		define code$jle$argc01$2(state,t1,a1) code$jle$argt$##t1(state, a1)
#		define code$jle$argt$rel32(state,_0) bytes(0f, 8e, i32$bytes$le(which$rel32(state, _0)))
#		define code$jmp(state,n,...) code$jmp$argc##n(state, ##__VA_ARGS__)
#		define code$jmp$argc01(state,a1) code$jmp$argc01$1(state, operand$gettype(a1), a1)
#		define code$jmp$argc01$1(...) code$jmp$argc01$2(__VA_ARGS__)
#		define code$jmp$argc01$2(state,t1,a1) code$jmp$argt$##t1(state, a1)
#		define code$jmp$argt$mem(state,_0) bytes(rex32m(_0) ff, modrm$4m(_0))
#		define code$jmp$argt$mem64(state,_0) bytes(rex32m(_0) ff, modrm$4m(_0))
#		define code$jmp$argt$reg64(state,_0) bytes(/* no REX.W */rex32r(_0) ff, modrm$4r(_0))
#		define code$jmp$argt$rel32(state,_0) bytes(e9, i32$bytes$le(which$rel32(state, _0)))
#		define code$jna(state,n,...) code$jna$argc##n(state, ##__VA_ARGS__)
#		define code$jna$argc01(state,a1) code$jna$argc01$1(state, operand$gettype(a1), a1)
#		define code$jna$argc01$1(...) code$jna$argc01$2(__VA_ARGS__)
#		define code$jna$argc01$2(state,t1,a1) code$jna$argt$##t1(state, a1)
#		define code$jna$argt$rel32(state,_0) bytes(0f, 86, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnae(state,n,...) code$jnae$argc##n(state, ##__VA_ARGS__)
#		define code$jnae$argc01(state,a1) code$jnae$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnae$argc01$1(...) code$jnae$argc01$2(__VA_ARGS__)
#		define code$jnae$argc01$2(state,t1,a1) code$jnae$argt$##t1(state, a1)
#		define code$jnae$argt$rel32(state,_0) bytes(0f, 82, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnb(state,n,...) code$jnb$argc##n(state, ##__VA_ARGS__)
#		define code$jnb$argc01(state,a1) code$jnb$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnb$argc01$1(...) code$jnb$argc01$2(__VA_ARGS__)
#		define code$jnb$argc01$2(state,t1,a1) code$jnb$argt$##t1(state, a1)
#		define code$jnb$argt$rel32(state,_0) bytes(0f, 83, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnbe(state,n,...) code$jnbe$argc##n(state, ##__VA_ARGS__)
#		define code$jnbe$argc01(state,a1) code$jnbe$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnbe$argc01$1(...) code$jnbe$argc01$2(__VA_ARGS__)
#		define code$jnbe$argc01$2(state,t1,a1) code$jnbe$argt$##t1(state, a1)
#		define code$jnbe$argt$rel32(state,_0) bytes(0f, 87, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnc(state,n,...) code$jnc$argc##n(state, ##__VA_ARGS__)
#		define code$jnc$argc01(state,a1) code$jnc$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnc$argc01$1(...) code$jnc$argc01$2(__VA_ARGS__)
#		define code$jnc$argc01$2(state,t1,a1) code$jnc$argt$##t1(state, a1)
#		define code$jnc$argt$rel32(state,_0) bytes(0f, 83, i32$bytes$le(which$rel32(state, _0)))
#		define code$jne(state,n,...) code$jne$argc##n(state, ##__VA_ARGS__)
#		define code$jne$argc01(state,a1) code$jne$argc01$1(state, operand$gettype(a1), a1)
#		define code$jne$argc01$1(...) code$jne$argc01$2(__VA_ARGS__)
#		define code$jne$argc01$2(state,t1,a1) code$jne$argt$##t1(state, a1)
#		define code$jne$argt$rel32(state,_0) bytes(0f, 85, i32$bytes$le(which$rel32(state, _0)))
#		define code$jng(state,n,...) code$jng$argc##n(state, ##__VA_ARGS__)
#		define code$jng$argc01(state,a1) code$jng$argc01$1(state, operand$gettype(a1), a1)
#		define code$jng$argc01$1(...) code$jng$argc01$2(__VA_ARGS__)
#		define code$jng$argc01$2(state,t1,a1) code$jng$argt$##t1(state, a1)
#		define code$jng$argt$rel32(state,_0) bytes(0f, 8e, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnge(state,n,...) code$jnge$argc##n(state, ##__VA_ARGS__)
#		define code$jnge$argc01(state,a1) code$jnge$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnge$argc01$1(...) code$jnge$argc01$2(__VA_ARGS__)
#		define code$jnge$argc01$2(state,t1,a1) code$jnge$argt$##t1(state, a1)
#		define code$jnge$argt$rel32(state,_0) bytes(0f, 8c, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnl(state,n,...) code$jnl$argc##n(state, ##__VA_ARGS__)
#		define code$jnl$argc01(state,a1) code$jnl$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnl$argc01$1(...) code$jnl$argc01$2(__VA_ARGS__)
#		define code$jnl$argc01$2(state,t1,a1) code$jnl$argt$##t1(state, a1)
#		define code$jnl$argt$rel32(state,_0) bytes(0f, 8d, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnle(state,n,...) code$jnle$argc##n(state, ##__VA_ARGS__)
#		define code$jnle$argc01(state,a1) code$jnle$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnle$argc01$1(...) code$jnle$argc01$2(__VA_ARGS__)
#		define code$jnle$argc01$2(state,t1,a1) code$jnle$argt$##t1(state, a1)
#		define code$jnle$argt$rel32(state,_0) bytes(0f, 8f, i32$bytes$le(which$rel32(state, _0)))
#		define code$jno(state,n,...) code$jno$argc##n(state, ##__VA_ARGS__)
#		define code$jno$argc01(state,a1) code$jno$argc01$1(state, operand$gettype(a1), a1)
#		define code$jno$argc01$1(...) code$jno$argc01$2(__VA_ARGS__)
#		define code$jno$argc01$2(state,t1,a1) code$jno$argt$##t1(state, a1)
#		define code$jno$argt$rel32(state,_0) bytes(0f, 81, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnp(state,n,...) code$jnp$argc##n(state, ##__VA_ARGS__)
#		define code$jnp$argc01(state,a1) code$jnp$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnp$argc01$1(...) code$jnp$argc01$2(__VA_ARGS__)
#		define code$jnp$argc01$2(state,t1,a1) code$jnp$argt$##t1(state, a1)
#		define code$jnp$argt$rel32(state,_0) bytes(0f, 8b, i32$bytes$le(which$rel32(state, _0)))
#		define code$jns(state,n,...) code$jns$argc##n(state, ##__VA_ARGS__)
#		define code$jns$argc01(state,a1) code$jns$argc01$1(state, operand$gettype(a1), a1)
#		define code$jns$argc01$1(...) code$jns$argc01$2(__VA_ARGS__)
#		define code$jns$argc01$2(state,t1,a1) code$jns$argt$##t1(state, a1)
#		define code$jns$argt$rel32(state,_0) bytes(0f, 89, i32$bytes$le(which$rel32(state, _0)))
#		define code$jnz(state,n,...) code$jnz$argc##n(state, ##__VA_ARGS__)
#		define code$jnz$argc01(state,a1) code$jnz$argc01$1(state, operand$gettype(a1), a1)
#		define code$jnz$argc01$1(...) code$jnz$argc01$2(__VA_ARGS__)
#		define code$jnz$argc01$2(state,t1,a1) code$jnz$argt$##t1(state, a1)
#		define code$jnz$argt$rel32(state,_0) bytes(0f, 85, i32$bytes$le(which$rel32(state, _0)))
#		define code$jo(state,n,...) code$jo$argc##n(state, ##__VA_ARGS__)
#		define code$jo$argc01(state,a1) code$jo$argc01$1(state, operand$gettype(a1), a1)
#		define code$jo$argc01$1(...) code$jo$argc01$2(__VA_ARGS__)
#		define code$jo$argc01$2(state,t1,a1) code$jo$argt$##t1(state, a1)
#		define code$jo$argt$rel32(state,_0) bytes(0f, 80, i32$bytes$le(which$rel32(state, _0)))
#		define code$jp(state,n,...) code$jp$argc##n(state, ##__VA_ARGS__)
#		define code$jp$argc01(state,a1) code$jp$argc01$1(state, operand$gettype(a1), a1)
#		define code$jp$argc01$1(...) code$jp$argc01$2(__VA_ARGS__)
#		define code$jp$argc01$2(state,t1,a1) code$jp$argt$##t1(state, a1)
#		define code$jp$argt$rel32(state,_0) bytes(0f, 8a, i32$bytes$le(which$rel32(state, _0)))
#		define code$jpe(state,n,...) code$jpe$argc##n(state, ##__VA_ARGS__)
#		define code$jpe$argc01(state,a1) code$jpe$argc01$1(state, operand$gettype(a1), a1)
#		define code$jpe$argc01$1(...) code$jpe$argc01$2(__VA_ARGS__)
#		define code$jpe$argc01$2(state,t1,a1) code$jpe$argt$##t1(state, a1)
#		define code$jpe$argt$rel32(state,_0) bytes(0f, 8a, i32$bytes$le(which$rel32(state, _0)))
#		define code$jpo(state,n,...) code$jpo$argc##n(state, ##__VA_ARGS__)
#		define code$jpo$argc01(state,a1) code$jpo$argc01$1(state, operand$gettype(a1), a1)
#		define code$jpo$argc01$1(...) code$jpo$argc01$2(__VA_ARGS__)
#		define code$jpo$argc01$2(state,t1,a1) code$jpo$argt$##t1(state, a1)
#		define code$jpo$argt$rel32(state,_0) bytes(0f, 8b, i32$bytes$le(which$rel32(state, _0)))
#		define code$js(state,n,...) code$js$argc##n(state, ##__VA_ARGS__)
#		define code$js$argc01(state,a1) code$js$argc01$1(state, operand$gettype(a1), a1)
#		define code$js$argc01$1(...) code$js$argc01$2(__VA_ARGS__)
#		define code$js$argc01$2(state,t1,a1) code$js$argt$##t1(state, a1)
#		define code$js$argt$rel32(state,_0) bytes(0f, 88, i32$bytes$le(which$rel32(state, _0)))
#		define code$jz(state,n,...) code$jz$argc##n(state, ##__VA_ARGS__)
#		define code$jz$argc01(state,a1) code$jz$argc01$1(state, operand$gettype(a1), a1)
#		define code$jz$argc01$1(...) code$jz$argc01$2(__VA_ARGS__)
#		define code$jz$argc01$2(state,t1,a1) code$jz$argt$##t1(state, a1)
#		define code$jz$argt$rel32(state,_0) bytes(0f, 84, i32$bytes$le(which$rel32(state, _0)))
#		define code$label(...) bytes()
#		define code$lar(state,n,...) code$lar$argc##n(state, ##__VA_ARGS__)
#		define code$lar$argc02(state,a1,a2) code$lar$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$lar$argc02$1(...) code$lar$argc02$2(__VA_ARGS__)
#		define code$lar$argc02$2(state,t1,t2,a1,a2) code$lar$argt$##t1##$##t2(state, a1,a2)
#		define code$lar$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 02, modrm$rm(_0, _1))
#		define code$lar$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 02, modrm$rm(_0, _1))
#		define code$lar$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 02, modrm$rr(_0, _1))
#		define code$lar$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 02, modrm$rm(_0, _1))
#		define code$lar$argt$reg32$mem16(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 02, modrm$rm(_0, _1))
#		define code$lar$argt$reg32$reg16(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 02, modrm$rr(_0, _1))
#		define code$lar$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 02, modrm$rm(_0, _1))
#		define code$lar$argt$reg64$mem16(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 02, modrm$rm(_0, _1))
#		define code$lar$argt$reg64$reg16(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 02, modrm$rr(_0, _1))
#		define code$lddqu(state,n,...) code$lddqu$argc##n(state, ##__VA_ARGS__)
#		define code$lddqu$argc02(state,a1,a2) code$lddqu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$lddqu$argc02$1(...) code$lddqu$argc02$2(__VA_ARGS__)
#		define code$lddqu$argc02$2(state,t1,t2,a1,a2) code$lddqu$argt$##t1##$##t2(state, a1,a2)
#		define code$lddqu$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, f0, modrm$rm(_0, _1))
#		define code$lddqu$argt$mmreg128$mem128(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, f0, modrm$rm(_0, _1))
#		define code$ldmxcsr(state,n,...) code$ldmxcsr$argc##n(state, ##__VA_ARGS__)
#		define code$ldmxcsr$argc01(state,a1) code$ldmxcsr$argc01$1(state, operand$gettype(a1), a1)
#		define code$ldmxcsr$argc01$1(...) code$ldmxcsr$argc01$2(__VA_ARGS__)
#		define code$ldmxcsr$argc01$2(state,t1,a1) code$ldmxcsr$argt$##t1(state, a1)
#		define code$ldmxcsr$argt$mem(state,_0) bytes(rex32m(_0) 0f, ae, modrm$2m(_0))
#		define code$ldmxcsr$argt$mem32(state,_0) bytes(rex32m(_0) 0f, ae, modrm$2m(_0))
#		define code$lea(state,n,...) code$lea$argc##n(state, ##__VA_ARGS__)
#		define code$lea$argc02(state,a1,a2) code$lea$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$lea$argc02$1(...) code$lea$argc02$2(__VA_ARGS__)
#		define code$lea$argc02$2(state,t1,t2,a1,a2) code$lea$argt$##t1##$##t2(state, a1,a2)
#		define code$lea$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem08(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem128(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem256(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem32(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem512(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem64(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg16$mem80(state,_0,_1) bytes(rex16rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem08(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem16(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem256(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem512(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg32$mem80(state,_0,_1) bytes(rex32rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem08(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem128(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem16(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem256(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem32(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem512(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$mem80(state,_0,_1) bytes(rex64rm(_0, _1) 8d, modrm$rm(_0, _1))
#		define code$lea$argt$reg64$rel32(state,_0,_1) bytes(rex64r(_0) 8d, modrm$rl(_0), i32$bytes$le(which$rel32(state, _1)))
#		define code$leave(state,n,...) code$leave$argc##n(state, ##__VA_ARGS__)
#		define code$leave$argc00(state,_) code$leave$argt$(state)
#		define code$leave$argt$(state) bytes(c9)
#		define code$lfence(state,n,...) code$lfence$argc##n(state, ##__VA_ARGS__)
#		define code$lfence$argc00(state,_) code$lfence$argt$(state)
#		define code$lfence$argt$(state) bytes(0f, ae, e8)
#		define code$lldt(state,n,...) code$lldt$argc##n(state, ##__VA_ARGS__)
#		define code$lldt$argc01(state,a1) code$lldt$argc01$1(state, operand$gettype(a1), a1)
#		define code$lldt$argc01$1(...) code$lldt$argc01$2(__VA_ARGS__)
#		define code$lldt$argc01$2(state,t1,a1) code$lldt$argt$##t1(state, a1)
#		define code$lldt$argt$mem(state,_0) bytes(/* no 66 */rex32m(_0) 0f, 00, modrm$2m(_0))
#		define code$lldt$argt$mem16(state,_0) bytes(/* no 66 */rex32m(_0) 0f, 00, modrm$2m(_0))
#		define code$lldt$argt$reg16(state,_0) bytes(/* no 66 */rex32r(_0) 0f, 00, modrm$2r(_0))
#		define code$lmsw(state,n,...) code$lmsw$argc##n(state, ##__VA_ARGS__)
#		define code$lmsw$argc01(state,a1) code$lmsw$argc01$1(state, operand$gettype(a1), a1)
#		define code$lmsw$argc01$1(...) code$lmsw$argc01$2(__VA_ARGS__)
#		define code$lmsw$argc01$2(state,t1,a1) code$lmsw$argt$##t1(state, a1)
#		define code$lmsw$argt$mem(state,_0) bytes(/* no 66 */rex32m(_0) 0f, 01, modrm$6m(_0))
#		define code$lmsw$argt$mem16(state,_0) bytes(/* no 66 */rex32m(_0) 0f, 01, modrm$6m(_0))
#		define code$lmsw$argt$reg16(state,_0) bytes(/* no 66 */rex32r(_0) 0f, 01, modrm$6r(_0))
#		define code$lods(state,n,...) code$lods$argc##n(state, ##__VA_ARGS__)
#		define code$lods$argc01(state,a1) code$lods$argc01$1(state, operand$gettype(a1), a1)
#		define code$lods$argc01$1(...) code$lods$argc01$2(__VA_ARGS__)
#		define code$lods$argc01$2(state,t1,a1) code$lods$argt$##t1(state, a1)
#		define code$lods$argt$reg08(state,_0) bytes(ac assert$is$al(_0))
#		define code$lods$argt$reg16(state,_0) bytes(66, ad assert$is$ax(_0))
#		define code$lods$argt$reg32(state,_0) bytes(ad assert$is$eax(_0))
#		define code$lods$argt$reg64(state,_0) bytes(48, ad assert$is$rax(_0))
#		define code$lodsb(state,n,...) code$lodsb$argc##n(state, ##__VA_ARGS__)
#		define code$lodsb$argc00(state,_) code$lodsb$argt$(state)
#		define code$lodsb$argt$(state) bytes(ac)
#		define code$lodsd(state,n,...) code$lodsd$argc##n(state, ##__VA_ARGS__)
#		define code$lodsd$argc00(state,_) code$lodsd$argt$(state)
#		define code$lodsd$argt$(state) bytes(ad)
#		define code$lodsq(state,n,...) code$lodsq$argc##n(state, ##__VA_ARGS__)
#		define code$lodsq$argc00(state,_) code$lodsq$argt$(state)
#		define code$lodsq$argt$(state) bytes(/* rex64r(rax) = */48, ad)
#		define code$lodsw(state,n,...) code$lodsw$argc##n(state, ##__VA_ARGS__)
#		define code$lodsw$argc00(state,_) code$lodsw$argt$(state)
#		define code$lodsw$argt$(state) bytes(66, ad)
#		define code$loop(state,n,...) code$loop$argc##n(state, ##__VA_ARGS__)
#		define code$loop$argc01(state,a1) code$loop$argc01$1(state, operand$gettype(a1), a1)
#		define code$loop$argc01$1(...) code$loop$argc01$2(__VA_ARGS__)
#		define code$loop$argc01$2(state,t1,a1) code$loop$argt$##t1(state, a1)
#		define code$loop$argt$rel32(state,_0) bytes(e2, i08$bytes$le(scast$i32$to$i08(which$rel32(state, _0))))
#		define code$loope(state,n,...) code$loope$argc##n(state, ##__VA_ARGS__)
#		define code$loope$argc01(state,a1) code$loope$argc01$1(state, operand$gettype(a1), a1)
#		define code$loope$argc01$1(...) code$loope$argc01$2(__VA_ARGS__)
#		define code$loope$argc01$2(state,t1,a1) code$loope$argt$##t1(state, a1)
#		define code$loope$argt$rel32(state,_0) bytes(e1, i08$bytes$le(scast$i32$to$i08(which$rel32(state, _0))))
#		define code$loopne(state,n,...) code$loopne$argc##n(state, ##__VA_ARGS__)
#		define code$loopne$argc01(state,a1) code$loopne$argc01$1(state, operand$gettype(a1), a1)
#		define code$loopne$argc01$1(...) code$loopne$argc01$2(__VA_ARGS__)
#		define code$loopne$argc01$2(state,t1,a1) code$loopne$argt$##t1(state, a1)
#		define code$loopne$argt$rel32(state,_0) bytes(e0, i08$bytes$le(scast$i32$to$i08(which$rel32(state, _0))))
#		define code$lsl(state,n,...) code$lsl$argc##n(state, ##__VA_ARGS__)
#		define code$lsl$argc02(state,a1,a2) code$lsl$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$lsl$argc02$1(...) code$lsl$argc02$2(__VA_ARGS__)
#		define code$lsl$argc02$2(state,t1,t2,a1,a2) code$lsl$argt$##t1##$##t2(state, a1,a2)
#		define code$lsl$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 03, modrm$rm(_0, _1))
#		define code$lsl$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 03, modrm$rm(_0, _1))
#		define code$lsl$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 0f, 03, modrm$rr(_0, _1))
#		define code$lsl$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 03, modrm$rm(_0, _1))
#		define code$lsl$argt$reg32$mem16(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 03, modrm$rm(_0, _1))
#		define code$lsl$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 03, modrm$rr(_0, _1))
#		define code$lsl$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 03, modrm$rm(_0, _1))
#		define code$lsl$argt$reg64$mem16(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 03, modrm$rm(_0, _1))
#		define code$lsl$argt$reg64$reg32(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 03, modrm$rr(_0, _1))
#		define code$ltr(state,n,...) code$ltr$argc##n(state, ##__VA_ARGS__)
#		define code$ltr$argc01(state,a1) code$ltr$argc01$1(state, operand$gettype(a1), a1)
#		define code$ltr$argc01$1(...) code$ltr$argc01$2(__VA_ARGS__)
#		define code$ltr$argc01$2(state,t1,a1) code$ltr$argt$##t1(state, a1)
#		define code$ltr$argt$mem(state,_0) bytes(/* no 66 */rex32m(_0) 0f, 00, modrm$3m(_0))
#		define code$ltr$argt$mem16(state,_0) bytes(/* no 66 */rex32m(_0) 0f, 00, modrm$3m(_0))
#		define code$ltr$argt$reg16(state,_0) bytes(/* no 66 */rex32r(_0) 0f, 00, modrm$3r(_0))
#		define code$lzcnt(state,n,...) code$lzcnt$argc##n(state, ##__VA_ARGS__)
#		define code$lzcnt$argc02(state,a1,a2) code$lzcnt$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$lzcnt$argc02$1(...) code$lzcnt$argc02$2(__VA_ARGS__)
#		define code$lzcnt$argc02$2(state,t1,t2,a1,a2) code$lzcnt$argt$##t1##$##t2(state, a1,a2)
#		define code$lzcnt$argt$reg16$mem(state,_0,_1) bytes(66, f3, rex32rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$lzcnt$argt$reg16$mem16(state,_0,_1) bytes(66, f3, rex32rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$lzcnt$argt$reg16$reg16(state,_0,_1) bytes(66, f3, rex32rr(_1, _0) 0f, bd, modrm$rr(_0, _1))
#		define code$lzcnt$argt$reg32$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$lzcnt$argt$reg32$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$lzcnt$argt$reg32$reg32(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, bd, modrm$rr(_0, _1))
#		define code$lzcnt$argt$reg64$mem(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$lzcnt$argt$reg64$mem64(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, bd, modrm$rm(_0, _1))
#		define code$lzcnt$argt$reg64$reg64(state,_0,_1) bytes(f3, rex64rr(_1, _0) 0f, bd, modrm$rr(_0, _1))
#		define code$maskmovdqu(state,n,...) code$maskmovdqu$argc##n(state, ##__VA_ARGS__)
#		define code$maskmovdqu$argc02(state,a1,a2) code$maskmovdqu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$maskmovdqu$argc02$1(...) code$maskmovdqu$argc02$2(__VA_ARGS__)
#		define code$maskmovdqu$argc02$2(state,t1,t2,a1,a2) code$maskmovdqu$argt$##t1##$##t2(state, a1,a2)
#		define code$maskmovdqu$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f7, modrm$rr(_0, _1))
#		define code$maskmovq(state,n,...) code$maskmovq$argc##n(state, ##__VA_ARGS__)
#		define code$maskmovq$argc02(state,a1,a2) code$maskmovq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$maskmovq$argc02$1(...) code$maskmovq$argc02$2(__VA_ARGS__)
#		define code$maskmovq$argc02$2(state,t1,t2,a1,a2) code$maskmovq$argt$##t1##$##t2(state, a1,a2)
#		define code$maskmovq$argt$mmreg64$mmreg64(state,_0,_1) bytes(0f, f7, modrm$rr(_0, _1))
#		define code$maxpd(state,n,...) code$maxpd$argc##n(state, ##__VA_ARGS__)
#		define code$maxpd$argc02(state,a1,a2) code$maxpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$maxpd$argc02$1(...) code$maxpd$argc02$2(__VA_ARGS__)
#		define code$maxpd$argc02$2(state,t1,t2,a1,a2) code$maxpd$argt$##t1##$##t2(state, a1,a2)
#		define code$maxpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 5f, modrm$rr(_0, _1))
#		define code$maxps(state,n,...) code$maxps$argc##n(state, ##__VA_ARGS__)
#		define code$maxps$argc02(state,a1,a2) code$maxps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$maxps$argc02$1(...) code$maxps$argc02$2(__VA_ARGS__)
#		define code$maxps$argc02$2(state,t1,t2,a1,a2) code$maxps$argt$##t1##$##t2(state, a1,a2)
#		define code$maxps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 5f, modrm$rr(_0, _1))
#		define code$maxsd(state,n,...) code$maxsd$argc##n(state, ##__VA_ARGS__)
#		define code$maxsd$argc02(state,a1,a2) code$maxsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$maxsd$argc02$1(...) code$maxsd$argc02$2(__VA_ARGS__)
#		define code$maxsd$argc02$2(state,t1,t2,a1,a2) code$maxsd$argt$##t1##$##t2(state, a1,a2)
#		define code$maxsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 5f, modrm$rr(_0, _1))
#		define code$maxss(state,n,...) code$maxss$argc##n(state, ##__VA_ARGS__)
#		define code$maxss$argc02(state,a1,a2) code$maxss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$maxss$argc02$1(...) code$maxss$argc02$2(__VA_ARGS__)
#		define code$maxss$argc02$2(state,t1,t2,a1,a2) code$maxss$argt$##t1##$##t2(state, a1,a2)
#		define code$maxss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5f, modrm$rm(_0, _1))
#		define code$maxss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 5f, modrm$rr(_0, _1))
#		define code$mfence(state,n,...) code$mfence$argc##n(state, ##__VA_ARGS__)
#		define code$mfence$argc00(state,_) code$mfence$argt$(state)
#		define code$mfence$argt$(state) bytes(0f, ae, f0)
#		define code$minpd(state,n,...) code$minpd$argc##n(state, ##__VA_ARGS__)
#		define code$minpd$argc02(state,a1,a2) code$minpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$minpd$argc02$1(...) code$minpd$argc02$2(__VA_ARGS__)
#		define code$minpd$argc02$2(state,t1,t2,a1,a2) code$minpd$argt$##t1##$##t2(state, a1,a2)
#		define code$minpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 5d, modrm$rr(_0, _1))
#		define code$minps(state,n,...) code$minps$argc##n(state, ##__VA_ARGS__)
#		define code$minps$argc02(state,a1,a2) code$minps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$minps$argc02$1(...) code$minps$argc02$2(__VA_ARGS__)
#		define code$minps$argc02$2(state,t1,t2,a1,a2) code$minps$argt$##t1##$##t2(state, a1,a2)
#		define code$minps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 5d, modrm$rr(_0, _1))
#		define code$minsd(state,n,...) code$minsd$argc##n(state, ##__VA_ARGS__)
#		define code$minsd$argc02(state,a1,a2) code$minsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$minsd$argc02$1(...) code$minsd$argc02$2(__VA_ARGS__)
#		define code$minsd$argc02$2(state,t1,t2,a1,a2) code$minsd$argt$##t1##$##t2(state, a1,a2)
#		define code$minsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 5d, modrm$rr(_0, _1))
#		define code$minss(state,n,...) code$minss$argc##n(state, ##__VA_ARGS__)
#		define code$minss$argc02(state,a1,a2) code$minss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$minss$argc02$1(...) code$minss$argc02$2(__VA_ARGS__)
#		define code$minss$argc02$2(state,t1,t2,a1,a2) code$minss$argt$##t1##$##t2(state, a1,a2)
#		define code$minss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5d, modrm$rm(_0, _1))
#		define code$minss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 5d, modrm$rr(_0, _1))
#		define code$monitor(state,n,...) code$monitor$argc##n(state, ##__VA_ARGS__)
#		define code$monitor$argc00(state,_) code$monitor$argt$(state)
#		define code$monitor$argt$(state) bytes(0f, 01, c8)
#		define code$mov(state,n,...) code$mov$argc##n(state, ##__VA_ARGS__)
#		define code$mov$argc02(state,a1,a2) code$mov$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$mov$argc02$1(...) code$mov$argc02$2(__VA_ARGS__)
#		define code$mov$argc02$2(state,t1,t2,a1,a2) code$mov$argt$##t1##$##t2(state, a1,a2)
#		define code$mov$argt$creg$reg64(state,_0,_1) bytes(rex32r(_1) 0f, 22, modrm$rr(_0, _1))
#		define code$mov$argt$dreg$reg64(state,_0,_1) bytes(rex32r(_1) 0f, 23, modrm$rr(_0, _1))
#		define code$mov$argt$mem$imm08(state,_0,_1) bytes(rex08m(_0) c6, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$mov$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) c7, modrm$0m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$mov$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for mov(mem, imm32)"))
#		define code$mov$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 88, modrm$rm(_1, _0))
#		define code$mov$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 89, modrm$rm(_1, _0))
#		define code$mov$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 89, modrm$rm(_1, _0))
#		define code$mov$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 89, modrm$rm(_1, _0))
#		define code$mov$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) c6, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$mov$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 88, modrm$rm(_1, _0))
#		define code$mov$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) c7, modrm$0m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$mov$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 89, modrm$rm(_1, _0))
#		define code$mov$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) c7, modrm$0m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$mov$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 89, modrm$rm(_1, _0))
#		define code$mov$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) c7, modrm$0m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$mov$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 89, modrm$rm(_1, _0))
#		define code$mov$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) opcode$addregid7(b0, _0), i08$bytes$le(which$imm08(state, _1)))
#		define code$mov$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 8a, modrm$rm(_0, _1))
#		define code$mov$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 8a, modrm$rm(_0, _1))
#		define code$mov$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 88, modrm$rr(_1, _0))
#		define code$mov$argt$reg08$rel32(state,_0,_1) bytes(rex08r(_0) 8a, modrm$rl(_0), i32$bytes$le(which$rel32(state, _1)))
#		define code$mov$argt$reg16$imm16(state,_0,_1) bytes(rex16r(_0) opcode$addregid7(b8, _0), i16$bytes$le(which$imm16(state, _1)))
#		define code$mov$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 8b, modrm$rm(_0, _1))
#		define code$mov$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 8b, modrm$rm(_0, _1))
#		define code$mov$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 89, modrm$rr(_1, _0))
#		define code$mov$argt$reg16$rel32(state,_0,_1) bytes(rex16r(_0) 8b, modrm$rl(_0), i32$bytes$le(which$rel32(state, _1)))
#		define code$mov$argt$reg32$imm32(state,_0,_1) bytes(rex32r(_0) opcode$addregid7(b8, _0), i32$bytes$le(which$imm32(state, _1)))
#		define code$mov$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 8b, modrm$rm(_0, _1))
#		define code$mov$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 8b, modrm$rm(_0, _1))
#		define code$mov$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 89, modrm$rr(_1, _0))
#		define code$mov$argt$reg32$rel32(state,_0,_1) bytes(rex32r(_0) 8b, modrm$rl(_0), i32$bytes$le(which$rel32(state, _1)))
#		define code$mov$argt$reg64$creg(state,_0,_1) bytes(rex32r(_0) 0f, 20, modrm$rr(_1, _0))
#		define code$mov$argt$reg64$dreg(state,_0,_1) bytes(rex32r(_0) 0f, 21, modrm$rr(_1, _0))
#		define code$mov$argt$reg64$imm32(state,_0,_1) bytes(rex32r(_0) opcode$addregid7(b8, _0), i32$bytes$le(which$imm32(state, _1)))
#		define code$mov$argt$reg64$imm64(state,_0,_1) bytes(rex64r(_0) opcode$addregid7(b8, _0), i64$bytes$le(which$imm64(state, _1)))
#		define code$mov$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 8b, modrm$rm(_0, _1))
#		define code$mov$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 8b, modrm$rm(_0, _1))
#		define code$mov$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 89, modrm$rr(_1, _0))
#		define code$mov$argt$reg64$rel32(state,_0,_1) bytes(rex64r(_0) 8b, modrm$rl(_0), i32$bytes$le(which$rel32(state, _1)))
#		define code$mov$argt$rel32$reg08(state,_0,_1) bytes(rex08r(_1) 88, modrm$rl(_1), i32$bytes$le(which$rel32(state, _0)))
#		define code$mov$argt$rel32$reg16(state,_0,_1) bytes(rex16r(_1) 89, modrm$rl(_1), i32$bytes$le(which$rel32(state, _0)))
#		define code$mov$argt$rel32$reg32(state,_0,_1) bytes(rex32r(_1) 89, modrm$rl(_1), i32$bytes$le(which$rel32(state, _0)))
#		define code$mov$argt$rel32$reg64(state,_0,_1) bytes(rex64r(_1) 89, modrm$rl(_1), i32$bytes$le(which$rel32(state, _0)))
#		define code$movapd(state,n,...) code$movapd$argc##n(state, ##__VA_ARGS__)
#		define code$movapd$argc02(state,a1,a2) code$movapd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movapd$argc02$1(...) code$movapd$argc02$2(__VA_ARGS__)
#		define code$movapd$argc02$2(state,t1,t2,a1,a2) code$movapd$argt$##t1##$##t2(state, a1,a2)
#		define code$movapd$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 29, modrm$rm(_1, _0))
#		define code$movapd$argt$mem128$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 29, modrm$rm(_1, _0))
#		define code$movapd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 28, modrm$rm(_0, _1))
#		define code$movapd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 28, modrm$rm(_0, _1))
#		define code$movapd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 28, modrm$rr(_0, _1))
#		define code$movaps(state,n,...) code$movaps$argc##n(state, ##__VA_ARGS__)
#		define code$movaps$argc02(state,a1,a2) code$movaps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movaps$argc02$1(...) code$movaps$argc02$2(__VA_ARGS__)
#		define code$movaps$argc02$2(state,t1,t2,a1,a2) code$movaps$argt$##t1##$##t2(state, a1,a2)
#		define code$movaps$argt$mem$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 29, modrm$rm(_1, _0))
#		define code$movaps$argt$mem128$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 29, modrm$rm(_1, _0))
#		define code$movaps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 28, modrm$rm(_0, _1))
#		define code$movaps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 28, modrm$rm(_0, _1))
#		define code$movaps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_0, _1) 0f, 28, modrm$rr(_0, _1))
#		define code$movbe(state,n,...) code$movbe$argc##n(state, ##__VA_ARGS__)
#		define code$movbe$argc02(state,a1,a2) code$movbe$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movbe$argc02$1(...) code$movbe$argc02$2(__VA_ARGS__)
#		define code$movbe$argc02$2(state,t1,t2,a1,a2) code$movbe$argt$##t1##$##t2(state, a1,a2)
#		define code$movbe$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, 38, f1, modrm$rm(_1, _0))
#		define code$movbe$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 38, f1, modrm$rm(_1, _0))
#		define code$movbe$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, 38, f1, modrm$rm(_1, _0))
#		define code$movbe$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, 38, f1, modrm$rm(_1, _0))
#		define code$movbe$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 38, f1, modrm$rm(_1, _0))
#		define code$movbe$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, 38, f1, modrm$rm(_1, _0))
#		define code$movbe$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$movbe$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$movbe$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$movbe$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$movbe$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$movbe$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 38, f0, modrm$rm(_0, _1))
#		define code$movd(state,n,...) code$movd$argc##n(state, ##__VA_ARGS__)
#		define code$movd$argc02(state,a1,a2) code$movd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movd$argc02$1(...) code$movd$argc02$2(__VA_ARGS__)
#		define code$movd$argc02$2(state,t1,t2,a1,a2) code$movd$argt$##t1##$##t2(state, a1,a2)
#		define code$movd$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 7e, modrm$rm(_1, _0))
#		define code$movd$argt$mem$mmreg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 7e, modrm$rm(_1, _0))
#		define code$movd$argt$mem32$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 7e, modrm$rm(_1, _0))
#		define code$movd$argt$mem32$mmreg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 7e, modrm$rm(_1, _0))
#		define code$movd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movd$argt$mmreg128$mem32(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movd$argt$mmreg128$reg32(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 6e, modrm$rr(_0, _1))
#		define code$movd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movd$argt$mmreg64$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movd$argt$mmreg64$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 6e, modrm$rr(_0, _1))
#		define code$movd$argt$reg32$mmreg128(state,_0,_1) bytes(66, rex32rr(_0, _1) 0f, 7e, modrm$rr(_1, _0))
#		define code$movd$argt$reg32$mmreg64(state,_0,_1) bytes(rex32rr(_0, _1) 0f, 7e, modrm$rr(_1, _0))
#		define code$movddup(state,n,...) code$movddup$argc##n(state, ##__VA_ARGS__)
#		define code$movddup$argc02(state,a1,a2) code$movddup$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movddup$argc02$1(...) code$movddup$argc02$2(__VA_ARGS__)
#		define code$movddup$argc02$2(state,t1,t2,a1,a2) code$movddup$argt$##t1##$##t2(state, a1,a2)
#		define code$movddup$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movddup$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movddup$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 12, modrm$rr(_0, _1))
#		define code$movdir64b(state,n,...) code$movdir64b$argc##n(state, ##__VA_ARGS__)
#		define code$movdir64b$argc02(state,a1,a2) code$movdir64b$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movdir64b$argc02$1(...) code$movdir64b$argc02$2(__VA_ARGS__)
#		define code$movdir64b$argc02$2(state,t1,t2,a1,a2) code$movdir64b$argt$##t1##$##t2(state, a1,a2)
#		define code$movdir64b$argt$reg64$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, f8, modrm$rm(_0, _1))
#		define code$movdir64b$argt$reg64$mem512(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, f8, modrm$rm(_0, _1))
#		define code$movdiri(state,n,...) code$movdiri$argc##n(state, ##__VA_ARGS__)
#		define code$movdiri$argc02(state,a1,a2) code$movdiri$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movdiri$argc02$1(...) code$movdiri$argc02$2(__VA_ARGS__)
#		define code$movdiri$argc02$2(state,t1,t2,a1,a2) code$movdiri$argt$##t1##$##t2(state, a1,a2)
#		define code$movdiri$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 38, f9, modrm$rm(_1, _0))
#		define code$movdiri$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, 38, f9, modrm$rm(_1, _0))
#		define code$movdiri$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 38, f9, modrm$rm(_1, _0))
#		define code$movdiri$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, 38, f9, modrm$rm(_1, _0))
#		define code$movdq2q(state,n,...) code$movdq2q$argc##n(state, ##__VA_ARGS__)
#		define code$movdq2q$argc02(state,a1,a2) code$movdq2q$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movdq2q$argc02$1(...) code$movdq2q$argc02$2(__VA_ARGS__)
#		define code$movdq2q$argc02$2(state,t1,t2,a1,a2) code$movdq2q$argt$##t1##$##t2(state, a1,a2)
#		define code$movdq2q$argt$mmreg64$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, d6, modrm$rr(_0, _1))
#		define code$movdqa(state,n,...) code$movdqa$argc##n(state, ##__VA_ARGS__)
#		define code$movdqa$argc02(state,a1,a2) code$movdqa$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movdqa$argc02$1(...) code$movdqa$argc02$2(__VA_ARGS__)
#		define code$movdqa$argc02$2(state,t1,t2,a1,a2) code$movdqa$argt$##t1##$##t2(state, a1,a2)
#		define code$movdqa$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 7f, modrm$rm(_1, _0))
#		define code$movdqa$argt$mem128$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 7f, modrm$rm(_1, _0))
#		define code$movdqa$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6f, modrm$rm(_0, _1))
#		define code$movdqa$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6f, modrm$rm(_0, _1))
#		define code$movdqa$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 6f, modrm$rr(_0, _1))
#		define code$movdqu(state,n,...) code$movdqu$argc##n(state, ##__VA_ARGS__)
#		define code$movdqu$argc02(state,a1,a2) code$movdqu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movdqu$argc02$1(...) code$movdqu$argc02$2(__VA_ARGS__)
#		define code$movdqu$argc02$2(state,t1,t2,a1,a2) code$movdqu$argt$##t1##$##t2(state, a1,a2)
#		define code$movdqu$argt$mem$mmreg128(state,_0,_1) bytes(f3, rex32rm(_1, _0) 0f, 7f, modrm$rm(_1, _0))
#		define code$movdqu$argt$mem128$mmreg128(state,_0,_1) bytes(f3, rex32rm(_1, _0) 0f, 7f, modrm$rm(_1, _0))
#		define code$movdqu$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 6f, modrm$rm(_0, _1))
#		define code$movdqu$argt$mmreg128$mem128(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 6f, modrm$rm(_0, _1))
#		define code$movdqu$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 6f, modrm$rr(_0, _1))
#		define code$movhlps(state,n,...) code$movhlps$argc##n(state, ##__VA_ARGS__)
#		define code$movhlps$argc02(state,a1,a2) code$movhlps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movhlps$argc02$1(...) code$movhlps$argc02$2(__VA_ARGS__)
#		define code$movhlps$argc02$2(state,t1,t2,a1,a2) code$movhlps$argt$##t1##$##t2(state, a1,a2)
#		define code$movhlps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 12, modrm$rr(_0, _1))
#		define code$movhpd(state,n,...) code$movhpd$argc##n(state, ##__VA_ARGS__)
#		define code$movhpd$argc02(state,a1,a2) code$movhpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movhpd$argc02$1(...) code$movhpd$argc02$2(__VA_ARGS__)
#		define code$movhpd$argc02$2(state,t1,t2,a1,a2) code$movhpd$argt$##t1##$##t2(state, a1,a2)
#		define code$movhpd$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 17, modrm$rm(_1, _0))
#		define code$movhpd$argt$mem64$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 17, modrm$rm(_1, _0))
#		define code$movhpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 16, modrm$rm(_0, _1))
#		define code$movhpd$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 16, modrm$rm(_0, _1))
#		define code$movhps(state,n,...) code$movhps$argc##n(state, ##__VA_ARGS__)
#		define code$movhps$argc02(state,a1,a2) code$movhps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movhps$argc02$1(...) code$movhps$argc02$2(__VA_ARGS__)
#		define code$movhps$argc02$2(state,t1,t2,a1,a2) code$movhps$argt$##t1##$##t2(state, a1,a2)
#		define code$movhps$argt$mem$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 17, modrm$rm(_1, _0))
#		define code$movhps$argt$mem64$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 17, modrm$rm(_1, _0))
#		define code$movhps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 16, modrm$rm(_0, _1))
#		define code$movhps$argt$mmreg128$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 16, modrm$rm(_0, _1))
#		define code$movlhps(state,n,...) code$movlhps$argc##n(state, ##__VA_ARGS__)
#		define code$movlhps$argc02(state,a1,a2) code$movlhps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movlhps$argc02$1(...) code$movlhps$argc02$2(__VA_ARGS__)
#		define code$movlhps$argc02$2(state,t1,t2,a1,a2) code$movlhps$argt$##t1##$##t2(state, a1,a2)
#		define code$movlhps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 16, modrm$rr(_0, _1))
#		define code$movlpd(state,n,...) code$movlpd$argc##n(state, ##__VA_ARGS__)
#		define code$movlpd$argc02(state,a1,a2) code$movlpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movlpd$argc02$1(...) code$movlpd$argc02$2(__VA_ARGS__)
#		define code$movlpd$argc02$2(state,t1,t2,a1,a2) code$movlpd$argt$##t1##$##t2(state, a1,a2)
#		define code$movlpd$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 13, modrm$rm(_1, _0))
#		define code$movlpd$argt$mem64$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 13, modrm$rm(_1, _0))
#		define code$movlpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movlpd$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movlps(state,n,...) code$movlps$argc##n(state, ##__VA_ARGS__)
#		define code$movlps$argc02(state,a1,a2) code$movlps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movlps$argc02$1(...) code$movlps$argc02$2(__VA_ARGS__)
#		define code$movlps$argc02$2(state,t1,t2,a1,a2) code$movlps$argt$##t1##$##t2(state, a1,a2)
#		define code$movlps$argt$mem$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 13, modrm$rm(_1, _0))
#		define code$movlps$argt$mem64$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 13, modrm$rm(_1, _0))
#		define code$movlps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movlps$argt$mmreg128$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movmskpd(state,n,...) code$movmskpd$argc##n(state, ##__VA_ARGS__)
#		define code$movmskpd$argc02(state,a1,a2) code$movmskpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movmskpd$argc02$1(...) code$movmskpd$argc02$2(__VA_ARGS__)
#		define code$movmskpd$argc02$2(state,t1,t2,a1,a2) code$movmskpd$argt$##t1##$##t2(state, a1,a2)
#		define code$movmskpd$argt$reg32$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 50, modrm$rr(_0, _1))
#		define code$movmskpd$argt$reg64$mmreg128(state,_0,_1) bytes(66, rex64rr(_1, _0) 0f, 50, modrm$rr(_0, _1))
#		define code$movmskps(state,n,...) code$movmskps$argc##n(state, ##__VA_ARGS__)
#		define code$movmskps$argc02(state,a1,a2) code$movmskps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movmskps$argc02$1(...) code$movmskps$argc02$2(__VA_ARGS__)
#		define code$movmskps$argc02$2(state,t1,t2,a1,a2) code$movmskps$argt$##t1##$##t2(state, a1,a2)
#		define code$movmskps$argt$reg32$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 50, modrm$rr(_0, _1))
#		define code$movmskps$argt$reg64$mmreg128(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 50, modrm$rr(_0, _1))
#		define code$movntdq(state,n,...) code$movntdq$argc##n(state, ##__VA_ARGS__)
#		define code$movntdq$argc02(state,a1,a2) code$movntdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movntdq$argc02$1(...) code$movntdq$argc02$2(__VA_ARGS__)
#		define code$movntdq$argc02$2(state,t1,t2,a1,a2) code$movntdq$argt$##t1##$##t2(state, a1,a2)
#		define code$movntdq$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, e7, modrm$rm(_1, _0))
#		define code$movntdq$argt$mem128$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, e7, modrm$rm(_1, _0))
#		define code$movntdqa(state,n,...) code$movntdqa$argc##n(state, ##__VA_ARGS__)
#		define code$movntdqa$argc02(state,a1,a2) code$movntdqa$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movntdqa$argc02$1(...) code$movntdqa$argc02$2(__VA_ARGS__)
#		define code$movntdqa$argc02$2(state,t1,t2,a1,a2) code$movntdqa$argt$##t1##$##t2(state, a1,a2)
#		define code$movntdqa$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 2a, modrm$rm(_0, _1))
#		define code$movntdqa$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 2a, modrm$rm(_0, _1))
#		define code$movnti(state,n,...) code$movnti$argc##n(state, ##__VA_ARGS__)
#		define code$movnti$argc02(state,a1,a2) code$movnti$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movnti$argc02$1(...) code$movnti$argc02$2(__VA_ARGS__)
#		define code$movnti$argc02$2(state,t1,t2,a1,a2) code$movnti$argt$##t1##$##t2(state, a1,a2)
#		define code$movnti$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, c3, modrm$rm(_1, _0))
#		define code$movnti$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, c3, modrm$rm(_1, _0))
#		define code$movnti$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, c3, modrm$rm(_1, _0))
#		define code$movnti$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, c3, modrm$rm(_1, _0))
#		define code$movntpd(state,n,...) code$movntpd$argc##n(state, ##__VA_ARGS__)
#		define code$movntpd$argc02(state,a1,a2) code$movntpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movntpd$argc02$1(...) code$movntpd$argc02$2(__VA_ARGS__)
#		define code$movntpd$argc02$2(state,t1,t2,a1,a2) code$movntpd$argt$##t1##$##t2(state, a1,a2)
#		define code$movntpd$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 2b, modrm$rm(_1, _0))
#		define code$movntpd$argt$mem128$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 2b, modrm$rm(_1, _0))
#		define code$movntps(state,n,...) code$movntps$argc##n(state, ##__VA_ARGS__)
#		define code$movntps$argc02(state,a1,a2) code$movntps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movntps$argc02$1(...) code$movntps$argc02$2(__VA_ARGS__)
#		define code$movntps$argc02$2(state,t1,t2,a1,a2) code$movntps$argt$##t1##$##t2(state, a1,a2)
#		define code$movntps$argt$mem$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 2b, modrm$rm(_1, _0))
#		define code$movntps$argt$mem128$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 2b, modrm$rm(_1, _0))
#		define code$movntq(state,n,...) code$movntq$argc##n(state, ##__VA_ARGS__)
#		define code$movntq$argc02(state,a1,a2) code$movntq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movntq$argc02$1(...) code$movntq$argc02$2(__VA_ARGS__)
#		define code$movntq$argc02$2(state,t1,t2,a1,a2) code$movntq$argt$##t1##$##t2(state, a1,a2)
#		define code$movntq$argt$mem$mmreg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, e7, modrm$rm(_1, _0))
#		define code$movntq$argt$mem64$mmreg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, e7, modrm$rm(_1, _0))
#		define code$movq(state,n,...) code$movq$argc##n(state, ##__VA_ARGS__)
#		define code$movq$argc02(state,a1,a2) code$movq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movq$argc02$1(...) code$movq$argc02$2(__VA_ARGS__)
#		define code$movq$argc02$2(state,t1,t2,a1,a2) code$movq$argt$##t1##$##t2(state, a1,a2)
#		define code$movq$argt$mem$mmreg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 7f, modrm$rm(_1, _0))
#		define code$movq$argt$mem64$mmreg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 7f, modrm$rm(_1, _0))
#		define code$movq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex64rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movq$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex64rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movq$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 7e, modrm$rr(_0, _1))
#		define code$movq$argt$mmreg128$reg64(state,_0,_1) bytes(66, rex64rr(_1, _0) 0f, 6e, modrm$rr(_0, _1))
#		define code$movq$argt$mmreg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movq$argt$mmreg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0f, 6e, modrm$rm(_0, _1))
#		define code$movq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 7f, modrm$rr(_0, _1))
#		define code$movq$argt$mmreg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 0f, 6e, modrm$rr(_0, _1))
#		define code$movq$argt$reg64$mmreg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, 7e, modrm$rr(_1, _0))
#		define code$movq2dq(state,n,...) code$movq2dq$argc##n(state, ##__VA_ARGS__)
#		define code$movq2dq$argc02(state,a1,a2) code$movq2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movq2dq$argc02$1(...) code$movq2dq$argc02$2(__VA_ARGS__)
#		define code$movq2dq$argc02$2(state,t1,t2,a1,a2) code$movq2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$movq2dq$argt$mmreg128$mmreg64(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, d6, modrm$rr(_0, _1))
#		define code$movsb(state,n,...) code$movsb$argc##n(state, ##__VA_ARGS__)
#		define code$movsb$argc00(state,_) code$movsb$argt$(state)
#		define code$movsb$argt$(state) bytes(a4)
#		define code$movsd(state,n,...) code$movsd$argc##n(state, ##__VA_ARGS__)
#		define code$movsd$argc00(state,_) code$movsd$argt$(state)
#		define code$movsd$argc02(state,a1,a2) code$movsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movsd$argc02$1(...) code$movsd$argc02$2(__VA_ARGS__)
#		define code$movsd$argc02$2(state,t1,t2,a1,a2) code$movsd$argt$##t1##$##t2(state, a1,a2)
#		define code$movsd$argt$(state) bytes(a5)
#		define code$movsd$argt$mem$mmreg128(state,_0,_1) bytes(f2, rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movsd$argt$mem64$mmreg128(state,_0,_1) bytes(f2, rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 10, modrm$rr(_0, _1))
#		define code$movshdup(state,n,...) code$movshdup$argc##n(state, ##__VA_ARGS__)
#		define code$movshdup$argc02(state,a1,a2) code$movshdup$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movshdup$argc02$1(...) code$movshdup$argc02$2(__VA_ARGS__)
#		define code$movshdup$argc02$2(state,t1,t2,a1,a2) code$movshdup$argt$##t1##$##t2(state, a1,a2)
#		define code$movshdup$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 16, modrm$rm(_0, _1))
#		define code$movshdup$argt$mmreg128$mem128(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 16, modrm$rm(_0, _1))
#		define code$movshdup$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 16, modrm$rr(_0, _1))
#		define code$movshlup(state,n,...) code$movshlup$argc##n(state, ##__VA_ARGS__)
#		define code$movshlup$argc02(state,a1,a2) code$movshlup$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movshlup$argc02$1(...) code$movshlup$argc02$2(__VA_ARGS__)
#		define code$movshlup$argc02$2(state,t1,t2,a1,a2) code$movshlup$argt$##t1##$##t2(state, a1,a2)
#		define code$movshlup$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movshlup$argt$mmreg128$mem128(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 12, modrm$rm(_0, _1))
#		define code$movshlup$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 12, modrm$rr(_0, _1))
#		define code$movsq(state,n,...) code$movsq$argc##n(state, ##__VA_ARGS__)
#		define code$movsq$argc00(state,_) code$movsq$argt$(state)
#		define code$movsq$argt$(state) bytes(/* rex64r(rax) = */48, a5)
#		define code$movss(state,n,...) code$movss$argc##n(state, ##__VA_ARGS__)
#		define code$movss$argc02(state,a1,a2) code$movss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movss$argc02$1(...) code$movss$argc02$2(__VA_ARGS__)
#		define code$movss$argc02$2(state,t1,t2,a1,a2) code$movss$argt$##t1##$##t2(state, a1,a2)
#		define code$movss$argt$mem$mmreg128(state,_0,_1) bytes(f3, rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movss$argt$mem32$mmreg128(state,_0,_1) bytes(f3, rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 10, modrm$rr(_0, _1))
#		define code$movsw(state,n,...) code$movsw$argc##n(state, ##__VA_ARGS__)
#		define code$movsw$argc00(state,_) code$movsw$argt$(state)
#		define code$movsw$argt$(state) bytes(66, a5)
#		define code$movsx(state,n,...) code$movsx$argc##n(state, ##__VA_ARGS__)
#		define code$movsx$argc02(state,a1,a2) code$movsx$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movsx$argc02$1(...) code$movsx$argc02$2(__VA_ARGS__)
#		define code$movsx$argc02$2(state,t1,t2,a1,a2) code$movsx$argt$##t1##$##t2(state, a1,a2)
#		define code$movsx$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, be, modrm$rm(_0, _1))
#		define code$movsx$argt$reg16$mem08(state,_0,_1) bytes(rex16rm(_0, _1) 0f, be, modrm$rm(_0, _1))
#		define code$movsx$argt$reg16$reg08(state,_0,_1) bytes(rex16rr(_1, _0) 0f, be, modrm$rr(_0, _1))
#		define code$movsx$argt$reg32$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for movsx(reg32, mem)"))
#		define code$movsx$argt$reg32$mem08(state,_0,_1) bytes(rex32rm(_0, _1) 0f, be, modrm$rm(_0, _1))
#		define code$movsx$argt$reg32$mem16(state,_0,_1) bytes(rex32rm(_0, _1) 0f, bf, modrm$rm(_0, _1))
#		define code$movsx$argt$reg32$reg08(state,_0,_1) bytes(rex32rr(_1, _0) 0f, be, modrm$rr(_0, _1))
#		define code$movsx$argt$reg32$reg16(state,_0,_1) bytes(rex32rr(_1, _0) 0f, bf, modrm$rr(_0, _1))
#		define code$movsx$argt$reg64$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for movsx(reg64, mem)"))
#		define code$movsx$argt$reg64$mem08(state,_0,_1) bytes(rex64rm(_0, _1) 0f, be, modrm$rm(_0, _1))
#		define code$movsx$argt$reg64$mem16(state,_0,_1) bytes(rex64rm(_0, _1) 0f, bf, modrm$rm(_0, _1))
#		define code$movsx$argt$reg64$reg08(state,_0,_1) bytes(rex64rr(_1, _0) 0f, be, modrm$rr(_0, _1))
#		define code$movsx$argt$reg64$reg16(state,_0,_1) bytes(rex64rr(_1, _0) 0f, bf, modrm$rr(_0, _1))
#		define code$movsxd(state,n,...) code$movsxd$argc##n(state, ##__VA_ARGS__)
#		define code$movsxd$argc02(state,a1,a2) code$movsxd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movsxd$argc02$1(...) code$movsxd$argc02$2(__VA_ARGS__)
#		define code$movsxd$argc02$2(state,t1,t2,a1,a2) code$movsxd$argt$##t1##$##t2(state, a1,a2)
#		define code$movsxd$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 63, modrm$rm(_0, _1))
#		define code$movsxd$argt$reg64$mem32(state,_0,_1) bytes(rex64rm(_0, _1) 63, modrm$rm(_0, _1))
#		define code$movsxd$argt$reg64$reg32(state,_0,_1) bytes(rex64rr(_1, _0) 63, modrm$rr(_0, _1))
#		define code$movupd(state,n,...) code$movupd$argc##n(state, ##__VA_ARGS__)
#		define code$movupd$argc02(state,a1,a2) code$movupd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movupd$argc02$1(...) code$movupd$argc02$2(__VA_ARGS__)
#		define code$movupd$argc02$2(state,t1,t2,a1,a2) code$movupd$argt$##t1##$##t2(state, a1,a2)
#		define code$movupd$argt$mem$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movupd$argt$mem128$mmreg128(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movupd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movupd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movupd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 10, modrm$rr(_0, _1))
#		define code$movups(state,n,...) code$movups$argc##n(state, ##__VA_ARGS__)
#		define code$movups$argc02(state,a1,a2) code$movups$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movups$argc02$1(...) code$movups$argc02$2(__VA_ARGS__)
#		define code$movups$argc02$2(state,t1,t2,a1,a2) code$movups$argt$##t1##$##t2(state, a1,a2)
#		define code$movups$argt$mem$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movups$argt$mem128$mmreg128(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 11, modrm$rm(_1, _0))
#		define code$movups$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movups$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 10, modrm$rm(_0, _1))
#		define code$movups$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 10, modrm$rr(_0, _1))
#		define code$movzx(state,n,...) code$movzx$argc##n(state, ##__VA_ARGS__)
#		define code$movzx$argc02(state,a1,a2) code$movzx$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$movzx$argc02$1(...) code$movzx$argc02$2(__VA_ARGS__)
#		define code$movzx$argc02$2(state,t1,t2,a1,a2) code$movzx$argt$##t1##$##t2(state, a1,a2)
#		define code$movzx$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0f, b6, modrm$rm(_0, _1))
#		define code$movzx$argt$reg16$mem08(state,_0,_1) bytes(rex16rm(_0, _1) 0f, b6, modrm$rm(_0, _1))
#		define code$movzx$argt$reg16$reg08(state,_0,_1) bytes(rex16rr(_1, _0) 0f, b6, modrm$rr(_0, _1))
#		define code$movzx$argt$reg32$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for movzx(reg32, mem)"))
#		define code$movzx$argt$reg32$mem08(state,_0,_1) bytes(rex32rm(_0, _1) 0f, b6, modrm$rm(_0, _1))
#		define code$movzx$argt$reg32$mem16(state,_0,_1) bytes(rex32rm(_0, _1) 0f, b7, modrm$rm(_0, _1))
#		define code$movzx$argt$reg32$reg08(state,_0,_1) bytes(rex32rr(_1, _0) 0f, b6, modrm$rr(_0, _1))
#		define code$movzx$argt$reg32$reg16(state,_0,_1) bytes(rex32rr(_1, _0) 0f, b7, modrm$rr(_0, _1))
#		define code$movzx$argt$reg64$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for movzx(reg64, mem)"))
#		define code$movzx$argt$reg64$mem08(state,_0,_1) bytes(rex64rm(_0, _1) 0f, b6, modrm$rm(_0, _1))
#		define code$movzx$argt$reg64$mem16(state,_0,_1) bytes(rex64rm(_0, _1) 0f, b7, modrm$rm(_0, _1))
#		define code$movzx$argt$reg64$reg08(state,_0,_1) bytes(rex64rr(_1, _0) 0f, b6, modrm$rr(_0, _1))
#		define code$movzx$argt$reg64$reg16(state,_0,_1) bytes(rex64rr(_1, _0) 0f, b7, modrm$rr(_0, _1))
#		define code$mpsadbw(state,n,...) code$mpsadbw$argc##n(state, ##__VA_ARGS__)
#		define code$mpsadbw$argc03(state,a1,a2,a3) code$mpsadbw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$mpsadbw$argc03$1(...) code$mpsadbw$argc03$2(__VA_ARGS__)
#		define code$mpsadbw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$mpsadbw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$mpsadbw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 42, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$mpsadbw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 42, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$mpsadbw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 42, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$mul(state,n,...) code$mul$argc##n(state, ##__VA_ARGS__)
#		define code$mul$argc01(state,a1) code$mul$argc01$1(state, operand$gettype(a1), a1)
#		define code$mul$argc01$1(...) code$mul$argc01$2(__VA_ARGS__)
#		define code$mul$argc01$2(state,t1,a1) code$mul$argt$##t1(state, a1)
#		define code$mul$argt$reg08(state,_0) bytes(rex08r(_0) f6, modrm$4r(_0))
#		define code$mul$argt$reg16(state,_0) bytes(rex16r(_0) f7, modrm$4r(_0))
#		define code$mul$argt$reg32(state,_0) bytes(rex32r(_0) f7, modrm$4r(_0))
#		define code$mul$argt$reg64(state,_0) bytes(rex64r(_0) f7, modrm$4r(_0))
#		define code$mulpd(state,n,...) code$mulpd$argc##n(state, ##__VA_ARGS__)
#		define code$mulpd$argc02(state,a1,a2) code$mulpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$mulpd$argc02$1(...) code$mulpd$argc02$2(__VA_ARGS__)
#		define code$mulpd$argc02$2(state,t1,t2,a1,a2) code$mulpd$argt$##t1##$##t2(state, a1,a2)
#		define code$mulpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 59, modrm$rr(_0, _1))
#		define code$mulps(state,n,...) code$mulps$argc##n(state, ##__VA_ARGS__)
#		define code$mulps$argc02(state,a1,a2) code$mulps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$mulps$argc02$1(...) code$mulps$argc02$2(__VA_ARGS__)
#		define code$mulps$argc02$2(state,t1,t2,a1,a2) code$mulps$argt$##t1##$##t2(state, a1,a2)
#		define code$mulps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 59, modrm$rr(_0, _1))
#		define code$mulsd(state,n,...) code$mulsd$argc##n(state, ##__VA_ARGS__)
#		define code$mulsd$argc02(state,a1,a2) code$mulsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$mulsd$argc02$1(...) code$mulsd$argc02$2(__VA_ARGS__)
#		define code$mulsd$argc02$2(state,t1,t2,a1,a2) code$mulsd$argt$##t1##$##t2(state, a1,a2)
#		define code$mulsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 59, modrm$rr(_0, _1))
#		define code$mulss(state,n,...) code$mulss$argc##n(state, ##__VA_ARGS__)
#		define code$mulss$argc02(state,a1,a2) code$mulss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$mulss$argc02$1(...) code$mulss$argc02$2(__VA_ARGS__)
#		define code$mulss$argc02$2(state,t1,t2,a1,a2) code$mulss$argt$##t1##$##t2(state, a1,a2)
#		define code$mulss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 59, modrm$rm(_0, _1))
#		define code$mulss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 59, modrm$rr(_0, _1))
#		define code$mulx(state,n,...) code$mulx$argc##n(state, ##__VA_ARGS__)
#		define code$mulx$argc03(state,a1,a2,a3) code$mulx$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$mulx$argc03$1(...) code$mulx$argc03$2(__VA_ARGS__)
#		define code$mulx$argc03$2(state,t1,t2,t3,a1,a2,a3) code$mulx$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$mulx$argt$reg32$reg32$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$mulx$argt$reg32$reg32$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$mulx$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f6, modrm$rr(_0, _2))
#		define code$mulx$argt$reg64$reg64$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$mulx$argt$reg64$reg64$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$mulx$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$none, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f6, modrm$rr(_0, _2))
#		define code$mwait(state,n,...) code$mwait$argc##n(state, ##__VA_ARGS__)
#		define code$mwait$argc00(state,_) code$mwait$argt$(state)
#		define code$mwait$argt$(state) bytes(0f, 01, c9)
#		define code$neg(state,n,...) code$neg$argc##n(state, ##__VA_ARGS__)
#		define code$neg$argc01(state,a1) code$neg$argc01$1(state, operand$gettype(a1), a1)
#		define code$neg$argc01$1(...) code$neg$argc01$2(__VA_ARGS__)
#		define code$neg$argc01$2(state,t1,a1) code$neg$argt$##t1(state, a1)
#		define code$neg$argt$reg08(state,_0) bytes(rex08r(_0) f6, modrm$3r(_0))
#		define code$neg$argt$reg16(state,_0) bytes(rex16r(_0) f7, modrm$3r(_0))
#		define code$neg$argt$reg32(state,_0) bytes(rex32r(_0) f7, modrm$3r(_0))
#		define code$neg$argt$reg64(state,_0) bytes(rex64r(_0) f7, modrm$3r(_0))
#		define code$nop(state,n,...) code$nop$argc##n(state, ##__VA_ARGS__)
#		define code$nop$argc00(state,_) code$nop$argt$(state)
#		define code$nop$argt$(state) bytes(90)
#		define code$nop2(state,n,...) code$nop2$argc##n(state, ##__VA_ARGS__)
#		define code$nop2$argc00(state,_) code$nop2$argt$(state)
#		define code$nop2$argt$(state) bytes(66, 90)
#		define code$nop3(state,n,...) code$nop3$argc##n(state, ##__VA_ARGS__)
#		define code$nop3$argc00(state,_) code$nop3$argt$(state)
#		define code$nop3$argt$(state) bytes(0f, 1f, 00)
#		define code$nop4(state,n,...) code$nop4$argc##n(state, ##__VA_ARGS__)
#		define code$nop4$argc00(state,_) code$nop4$argt$(state)
#		define code$nop4$argt$(state) bytes(0f, 1f, 40, 00)
#		define code$nop5(state,n,...) code$nop5$argc##n(state, ##__VA_ARGS__)
#		define code$nop5$argc00(state,_) code$nop5$argt$(state)
#		define code$nop5$argt$(state) bytes(0f, 1f, 44, 00, 00)
#		define code$nop6(state,n,...) code$nop6$argc##n(state, ##__VA_ARGS__)
#		define code$nop6$argc00(state,_) code$nop6$argt$(state)
#		define code$nop6$argt$(state) bytes(66, 0f, 1f, 44, 00, 00)
#		define code$nop7(state,n,...) code$nop7$argc##n(state, ##__VA_ARGS__)
#		define code$nop7$argc00(state,_) code$nop7$argt$(state)
#		define code$nop7$argt$(state) bytes(0f, 1f, 80, 00, 00, 00, 00)
#		define code$nop8(state,n,...) code$nop8$argc##n(state, ##__VA_ARGS__)
#		define code$nop8$argc00(state,_) code$nop8$argt$(state)
#		define code$nop8$argt$(state) bytes(0f, 1f, 84, 00, 00, 00, 00, 00)
#		define code$nop9(state,n,...) code$nop9$argc##n(state, ##__VA_ARGS__)
#		define code$nop9$argc00(state,_) code$nop9$argt$(state)
#		define code$nop9$argt$(state) bytes(66, 0f, 1f, 84, 00, 00, 00, 00, 00)
#		define code$not(state,n,...) code$not$argc##n(state, ##__VA_ARGS__)
#		define code$not$argc01(state,a1) code$not$argc01$1(state, operand$gettype(a1), a1)
#		define code$not$argc01$1(...) code$not$argc01$2(__VA_ARGS__)
#		define code$not$argc01$2(state,t1,a1) code$not$argt$##t1(state, a1)
#		define code$not$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for not(mem)"))
#		define code$not$argt$mem08(state,_0) bytes(rex08m(_0) f6, modrm$2m(_0))
#		define code$not$argt$mem16(state,_0) bytes(rex16m(_0) f7, modrm$2m(_0))
#		define code$not$argt$mem32(state,_0) bytes(rex32m(_0) f7, modrm$2m(_0))
#		define code$not$argt$mem64(state,_0) bytes(rex64m(_0) f7, modrm$2m(_0))
#		define code$not$argt$reg08(state,_0) bytes(rex08r(_0) f6, modrm$2r(_0))
#		define code$not$argt$reg16(state,_0) bytes(rex16r(_0) f7, modrm$2r(_0))
#		define code$not$argt$reg32(state,_0) bytes(rex32r(_0) f7, modrm$2r(_0))
#		define code$not$argt$reg64(state,_0) bytes(rex64r(_0) f7, modrm$2r(_0))
#		define code$or(state,n,...) code$or$argc##n(state, ##__VA_ARGS__)
#		define code$or$argc02(state,a1,a2) code$or$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$or$argc02$1(...) code$or$argc02$2(__VA_ARGS__)
#		define code$or$argc02$2(state,t1,t2,a1,a2) code$or$argt$##t1##$##t2(state, a1,a2)
#		define code$or$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for or(mem, imm08)"))
#		define code$or$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$1m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$or$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for or(mem, imm32)"))
#		define code$or$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 08, modrm$rm(_1, _0))
#		define code$or$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 09, modrm$rm(_1, _0))
#		define code$or$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 09, modrm$rm(_1, _0))
#		define code$or$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 09, modrm$rm(_1, _0))
#		define code$or$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 08, modrm$rm(_1, _0))
#		define code$or$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$1m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$or$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 09, modrm$rm(_1, _0))
#		define code$or$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$1m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$or$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 09, modrm$rm(_1, _0))
#		define code$or$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$1m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$or$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 09, modrm$rm(_1, _0))
#		define code$or$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (0c), (rex08r(_0) 80, modrm$1r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 0a, modrm$rm(_0, _1))
#		define code$or$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 0a, modrm$rm(_0, _1))
#		define code$or$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 08, modrm$rr(_1, _0))
#		define code$or$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$1r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 0d), (rex16r(_0) 81, modrm$1r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$or$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 0b, modrm$rm(_0, _1))
#		define code$or$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 0b, modrm$rm(_0, _1))
#		define code$or$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 09, modrm$rr(_1, _0))
#		define code$or$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$1r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (0d), (rex32r(_0) 81, modrm$1r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$or$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0b, modrm$rm(_0, _1))
#		define code$or$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0b, modrm$rm(_0, _1))
#		define code$or$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 09, modrm$rr(_1, _0))
#		define code$or$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$1r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$or$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 0d), (rex64r(_0) 81, modrm$1r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$or$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 0b, modrm$rm(_0, _1))
#		define code$or$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 0b, modrm$rm(_0, _1))
#		define code$or$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 09, modrm$rr(_1, _0))
#		define code$orpd(state,n,...) code$orpd$argc##n(state, ##__VA_ARGS__)
#		define code$orpd$argc02(state,a1,a2) code$orpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$orpd$argc02$1(...) code$orpd$argc02$2(__VA_ARGS__)
#		define code$orpd$argc02$2(state,t1,t2,a1,a2) code$orpd$argt$##t1##$##t2(state, a1,a2)
#		define code$orpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 56, modrm$rm(_0, _1))
#		define code$orpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 56, modrm$rm(_0, _1))
#		define code$orpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 56, modrm$rr(_0, _1))
#		define code$orps(state,n,...) code$orps$argc##n(state, ##__VA_ARGS__)
#		define code$orps$argc02(state,a1,a2) code$orps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$orps$argc02$1(...) code$orps$argc02$2(__VA_ARGS__)
#		define code$orps$argc02$2(state,t1,t2,a1,a2) code$orps$argt$##t1##$##t2(state, a1,a2)
#		define code$orps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 56, modrm$rm(_0, _1))
#		define code$orps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 56, modrm$rm(_0, _1))
#		define code$orps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 56, modrm$rr(_0, _1))
#		define code$out(state,n,...) code$out$argc##n(state, ##__VA_ARGS__)
#		define code$out$argc02(state,a1,a2) code$out$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$out$argc02$1(...) code$out$argc02$2(__VA_ARGS__)
#		define code$out$argc02$2(state,t1,t2,a1,a2) code$out$argt$##t1##$##t2(state, a1,a2)
#		define code$out$argt$imm08$reg08(state,_0,_1) bytes(e6, i08$bytes$le(which$imm08(state, _0)) assert$is$al(_1))
#		define code$out$argt$imm08$reg16(state,_0,_1) bytes(/* rex16r(ax) = */66, e7, i08$bytes$le(which$imm08(state, _0)) assert$is$ax(_1))
#		define code$out$argt$imm08$reg32(state,_0,_1) bytes(e7, i08$bytes$le(which$imm08(state, _0)) assert$is$eax(_1))
#		define code$out$argt$reg16$reg08(state,_0,_1) bytes(ee assert$is$al(_1) assert$is$dx(_0))
#		define code$out$argt$reg16$reg16(state,_0,_1) bytes(/* rex16r(ax) = */66, ef assert$is$ax(_1) assert$is$dx(_0))
#		define code$out$argt$reg16$reg32(state,_0,_1) bytes(ef assert$is$eax(_1) assert$is$dx(_0))
#		define code$outsb(state,n,...) code$outsb$argc##n(state, ##__VA_ARGS__)
#		define code$outsb$argc00(state,_) code$outsb$argt$(state)
#		define code$outsb$argt$(state) bytes(6e)
#		define code$outsd(state,n,...) code$outsd$argc##n(state, ##__VA_ARGS__)
#		define code$outsd$argc00(state,_) code$outsd$argt$(state)
#		define code$outsd$argt$(state) bytes(6f)
#		define code$outsw(state,n,...) code$outsw$argc##n(state, ##__VA_ARGS__)
#		define code$outsw$argc00(state,_) code$outsw$argt$(state)
#		define code$outsw$argt$(state) bytes(66, 6f)
#		define code$pabsb(state,n,...) code$pabsb$argc##n(state, ##__VA_ARGS__)
#		define code$pabsb$argc02(state,a1,a2) code$pabsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pabsb$argc02$1(...) code$pabsb$argc02$2(__VA_ARGS__)
#		define code$pabsb$argc02$2(state,t1,t2,a1,a2) code$pabsb$argt$##t1##$##t2(state, a1,a2)
#		define code$pabsb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 1c, modrm$rm(_0, _1))
#		define code$pabsb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 1c, modrm$rm(_0, _1))
#		define code$pabsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 1c, modrm$rr(_0, _1))
#		define code$pabsb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 1c, modrm$rm(_0, _1))
#		define code$pabsb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 1c, modrm$rm(_0, _1))
#		define code$pabsb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 1c, modrm$rr(_0, _1))
#		define code$pabsd(state,n,...) code$pabsd$argc##n(state, ##__VA_ARGS__)
#		define code$pabsd$argc02(state,a1,a2) code$pabsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pabsd$argc02$1(...) code$pabsd$argc02$2(__VA_ARGS__)
#		define code$pabsd$argc02$2(state,t1,t2,a1,a2) code$pabsd$argt$##t1##$##t2(state, a1,a2)
#		define code$pabsd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 1e, modrm$rm(_0, _1))
#		define code$pabsd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 1e, modrm$rm(_0, _1))
#		define code$pabsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 1e, modrm$rr(_0, _1))
#		define code$pabsd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 1e, modrm$rm(_0, _1))
#		define code$pabsd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 1e, modrm$rm(_0, _1))
#		define code$pabsd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 1e, modrm$rr(_0, _1))
#		define code$pabsw(state,n,...) code$pabsw$argc##n(state, ##__VA_ARGS__)
#		define code$pabsw$argc02(state,a1,a2) code$pabsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pabsw$argc02$1(...) code$pabsw$argc02$2(__VA_ARGS__)
#		define code$pabsw$argc02$2(state,t1,t2,a1,a2) code$pabsw$argt$##t1##$##t2(state, a1,a2)
#		define code$pabsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 1d, modrm$rm(_0, _1))
#		define code$pabsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 1d, modrm$rm(_0, _1))
#		define code$pabsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 1d, modrm$rr(_0, _1))
#		define code$pabsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 1d, modrm$rm(_0, _1))
#		define code$pabsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 1d, modrm$rm(_0, _1))
#		define code$pabsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 1d, modrm$rr(_0, _1))
#		define code$packssdw(state,n,...) code$packssdw$argc##n(state, ##__VA_ARGS__)
#		define code$packssdw$argc02(state,a1,a2) code$packssdw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$packssdw$argc02$1(...) code$packssdw$argc02$2(__VA_ARGS__)
#		define code$packssdw$argc02$2(state,t1,t2,a1,a2) code$packssdw$argt$##t1##$##t2(state, a1,a2)
#		define code$packssdw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6b, modrm$rm(_0, _1))
#		define code$packssdw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6b, modrm$rm(_0, _1))
#		define code$packssdw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 6b, modrm$rr(_0, _1))
#		define code$packssdw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 6b, modrm$rm(_0, _1))
#		define code$packssdw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 6b, modrm$rm(_0, _1))
#		define code$packssdw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 6b, modrm$rr(_0, _1))
#		define code$packsswb(state,n,...) code$packsswb$argc##n(state, ##__VA_ARGS__)
#		define code$packsswb$argc02(state,a1,a2) code$packsswb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$packsswb$argc02$1(...) code$packsswb$argc02$2(__VA_ARGS__)
#		define code$packsswb$argc02$2(state,t1,t2,a1,a2) code$packsswb$argt$##t1##$##t2(state, a1,a2)
#		define code$packsswb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 63, modrm$rm(_0, _1))
#		define code$packsswb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 63, modrm$rm(_0, _1))
#		define code$packsswb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 63, modrm$rr(_0, _1))
#		define code$packsswb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 63, modrm$rm(_0, _1))
#		define code$packsswb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 63, modrm$rm(_0, _1))
#		define code$packsswb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 63, modrm$rr(_0, _1))
#		define code$packusdw(state,n,...) code$packusdw$argc##n(state, ##__VA_ARGS__)
#		define code$packusdw$argc02(state,a1,a2) code$packusdw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$packusdw$argc02$1(...) code$packusdw$argc02$2(__VA_ARGS__)
#		define code$packusdw$argc02$2(state,t1,t2,a1,a2) code$packusdw$argt$##t1##$##t2(state, a1,a2)
#		define code$packusdw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 2b, modrm$rm(_0, _1))
#		define code$packusdw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 2b, modrm$rm(_0, _1))
#		define code$packusdw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 2b, modrm$rr(_0, _1))
#		define code$packuswb(state,n,...) code$packuswb$argc##n(state, ##__VA_ARGS__)
#		define code$packuswb$argc02(state,a1,a2) code$packuswb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$packuswb$argc02$1(...) code$packuswb$argc02$2(__VA_ARGS__)
#		define code$packuswb$argc02$2(state,t1,t2,a1,a2) code$packuswb$argt$##t1##$##t2(state, a1,a2)
#		define code$packuswb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 67, modrm$rm(_0, _1))
#		define code$packuswb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 67, modrm$rm(_0, _1))
#		define code$packuswb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 67, modrm$rr(_0, _1))
#		define code$packuswb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 67, modrm$rm(_0, _1))
#		define code$packuswb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 67, modrm$rm(_0, _1))
#		define code$packuswb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 67, modrm$rr(_0, _1))
#		define code$paddb(state,n,...) code$paddb$argc##n(state, ##__VA_ARGS__)
#		define code$paddb$argc02(state,a1,a2) code$paddb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddb$argc02$1(...) code$paddb$argc02$2(__VA_ARGS__)
#		define code$paddb$argc02$2(state,t1,t2,a1,a2) code$paddb$argt$##t1##$##t2(state, a1,a2)
#		define code$paddb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fc, modrm$rm(_0, _1))
#		define code$paddb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fc, modrm$rm(_0, _1))
#		define code$paddb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, fc, modrm$rr(_0, _1))
#		define code$paddb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fc, modrm$rm(_0, _1))
#		define code$paddb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fc, modrm$rm(_0, _1))
#		define code$paddb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, fc, modrm$rr(_0, _1))
#		define code$paddd(state,n,...) code$paddd$argc##n(state, ##__VA_ARGS__)
#		define code$paddd$argc02(state,a1,a2) code$paddd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddd$argc02$1(...) code$paddd$argc02$2(__VA_ARGS__)
#		define code$paddd$argc02$2(state,t1,t2,a1,a2) code$paddd$argt$##t1##$##t2(state, a1,a2)
#		define code$paddd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fe, modrm$rm(_0, _1))
#		define code$paddd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fe, modrm$rm(_0, _1))
#		define code$paddd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, fe, modrm$rr(_0, _1))
#		define code$paddd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fe, modrm$rm(_0, _1))
#		define code$paddd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fe, modrm$rm(_0, _1))
#		define code$paddd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, fe, modrm$rr(_0, _1))
#		define code$paddq(state,n,...) code$paddq$argc##n(state, ##__VA_ARGS__)
#		define code$paddq$argc02(state,a1,a2) code$paddq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddq$argc02$1(...) code$paddq$argc02$2(__VA_ARGS__)
#		define code$paddq$argc02$2(state,t1,t2,a1,a2) code$paddq$argt$##t1##$##t2(state, a1,a2)
#		define code$paddq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d4, modrm$rm(_0, _1))
#		define code$paddq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d4, modrm$rm(_0, _1))
#		define code$paddq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d4, modrm$rr(_0, _1))
#		define code$paddq$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d4, modrm$rm(_0, _1))
#		define code$paddq$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d4, modrm$rm(_0, _1))
#		define code$paddq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d4, modrm$rr(_0, _1))
#		define code$paddsb(state,n,...) code$paddsb$argc##n(state, ##__VA_ARGS__)
#		define code$paddsb$argc02(state,a1,a2) code$paddsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddsb$argc02$1(...) code$paddsb$argc02$2(__VA_ARGS__)
#		define code$paddsb$argc02$2(state,t1,t2,a1,a2) code$paddsb$argt$##t1##$##t2(state, a1,a2)
#		define code$paddsb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ec, modrm$rm(_0, _1))
#		define code$paddsb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ec, modrm$rm(_0, _1))
#		define code$paddsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, ec, modrm$rr(_0, _1))
#		define code$paddsb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ec, modrm$rm(_0, _1))
#		define code$paddsb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ec, modrm$rm(_0, _1))
#		define code$paddsb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, ec, modrm$rr(_0, _1))
#		define code$paddsw(state,n,...) code$paddsw$argc##n(state, ##__VA_ARGS__)
#		define code$paddsw$argc02(state,a1,a2) code$paddsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddsw$argc02$1(...) code$paddsw$argc02$2(__VA_ARGS__)
#		define code$paddsw$argc02$2(state,t1,t2,a1,a2) code$paddsw$argt$##t1##$##t2(state, a1,a2)
#		define code$paddsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ed, modrm$rm(_0, _1))
#		define code$paddsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ed, modrm$rm(_0, _1))
#		define code$paddsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, ed, modrm$rr(_0, _1))
#		define code$paddsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ed, modrm$rm(_0, _1))
#		define code$paddsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ed, modrm$rm(_0, _1))
#		define code$paddsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, ed, modrm$rr(_0, _1))
#		define code$paddusb(state,n,...) code$paddusb$argc##n(state, ##__VA_ARGS__)
#		define code$paddusb$argc02(state,a1,a2) code$paddusb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddusb$argc02$1(...) code$paddusb$argc02$2(__VA_ARGS__)
#		define code$paddusb$argc02$2(state,t1,t2,a1,a2) code$paddusb$argt$##t1##$##t2(state, a1,a2)
#		define code$paddusb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, dc, modrm$rm(_0, _1))
#		define code$paddusb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, dc, modrm$rm(_0, _1))
#		define code$paddusb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, dc, modrm$rr(_0, _1))
#		define code$paddusb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, dc, modrm$rm(_0, _1))
#		define code$paddusb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, dc, modrm$rm(_0, _1))
#		define code$paddusb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, dc, modrm$rr(_0, _1))
#		define code$paddusw(state,n,...) code$paddusw$argc##n(state, ##__VA_ARGS__)
#		define code$paddusw$argc02(state,a1,a2) code$paddusw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddusw$argc02$1(...) code$paddusw$argc02$2(__VA_ARGS__)
#		define code$paddusw$argc02$2(state,t1,t2,a1,a2) code$paddusw$argt$##t1##$##t2(state, a1,a2)
#		define code$paddusw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, dd, modrm$rm(_0, _1))
#		define code$paddusw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, dd, modrm$rm(_0, _1))
#		define code$paddusw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, dd, modrm$rr(_0, _1))
#		define code$paddusw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, dd, modrm$rm(_0, _1))
#		define code$paddusw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, dd, modrm$rm(_0, _1))
#		define code$paddusw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, dd, modrm$rr(_0, _1))
#		define code$paddw(state,n,...) code$paddw$argc##n(state, ##__VA_ARGS__)
#		define code$paddw$argc02(state,a1,a2) code$paddw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$paddw$argc02$1(...) code$paddw$argc02$2(__VA_ARGS__)
#		define code$paddw$argc02$2(state,t1,t2,a1,a2) code$paddw$argt$##t1##$##t2(state, a1,a2)
#		define code$paddw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fd, modrm$rm(_0, _1))
#		define code$paddw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fd, modrm$rm(_0, _1))
#		define code$paddw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, fd, modrm$rr(_0, _1))
#		define code$paddw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fd, modrm$rm(_0, _1))
#		define code$paddw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fd, modrm$rm(_0, _1))
#		define code$paddw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, fd, modrm$rr(_0, _1))
#		define code$palignr(state,n,...) code$palignr$argc##n(state, ##__VA_ARGS__)
#		define code$palignr$argc03(state,a1,a2,a3) code$palignr$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$palignr$argc03$1(...) code$palignr$argc03$2(__VA_ARGS__)
#		define code$palignr$argc03$2(state,t1,t2,t3,a1,a2,a3) code$palignr$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$palignr$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$palignr$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$palignr$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 0f, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$palignr$argt$mmreg64$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 3a, 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$palignr$argt$mmreg64$mem64$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 3a, 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$palignr$argt$mmreg64$mmreg64$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, 3a, 0f, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pand(state,n,...) code$pand$argc##n(state, ##__VA_ARGS__)
#		define code$pand$argc02(state,a1,a2) code$pand$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pand$argc02$1(...) code$pand$argc02$2(__VA_ARGS__)
#		define code$pand$argc02$2(state,t1,t2,a1,a2) code$pand$argt$##t1##$##t2(state, a1,a2)
#		define code$pand$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, db, modrm$rm(_0, _1))
#		define code$pand$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, db, modrm$rm(_0, _1))
#		define code$pand$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, db, modrm$rr(_0, _1))
#		define code$pand$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, db, modrm$rm(_0, _1))
#		define code$pand$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, db, modrm$rm(_0, _1))
#		define code$pand$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, db, modrm$rr(_0, _1))
#		define code$pandn(state,n,...) code$pandn$argc##n(state, ##__VA_ARGS__)
#		define code$pandn$argc02(state,a1,a2) code$pandn$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pandn$argc02$1(...) code$pandn$argc02$2(__VA_ARGS__)
#		define code$pandn$argc02$2(state,t1,t2,a1,a2) code$pandn$argt$##t1##$##t2(state, a1,a2)
#		define code$pandn$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, df, modrm$rm(_0, _1))
#		define code$pandn$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, df, modrm$rm(_0, _1))
#		define code$pandn$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, df, modrm$rr(_0, _1))
#		define code$pandn$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, df, modrm$rm(_0, _1))
#		define code$pandn$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, df, modrm$rm(_0, _1))
#		define code$pandn$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, df, modrm$rr(_0, _1))
#		define code$pause(state,n,...) code$pause$argc##n(state, ##__VA_ARGS__)
#		define code$pause$argc00(state,_) code$pause$argt$(state)
#		define code$pause$argt$(state) bytes(f3, 90)
#		define code$pavgb(state,n,...) code$pavgb$argc##n(state, ##__VA_ARGS__)
#		define code$pavgb$argc02(state,a1,a2) code$pavgb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pavgb$argc02$1(...) code$pavgb$argc02$2(__VA_ARGS__)
#		define code$pavgb$argc02$2(state,t1,t2,a1,a2) code$pavgb$argt$##t1##$##t2(state, a1,a2)
#		define code$pavgb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e0, modrm$rm(_0, _1))
#		define code$pavgb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e0, modrm$rm(_0, _1))
#		define code$pavgb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e0, modrm$rr(_0, _1))
#		define code$pavgb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e0, modrm$rm(_0, _1))
#		define code$pavgb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e0, modrm$rm(_0, _1))
#		define code$pavgb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e0, modrm$rr(_0, _1))
#		define code$pavgw(state,n,...) code$pavgw$argc##n(state, ##__VA_ARGS__)
#		define code$pavgw$argc02(state,a1,a2) code$pavgw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pavgw$argc02$1(...) code$pavgw$argc02$2(__VA_ARGS__)
#		define code$pavgw$argc02$2(state,t1,t2,a1,a2) code$pavgw$argt$##t1##$##t2(state, a1,a2)
#		define code$pavgw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e3, modrm$rm(_0, _1))
#		define code$pavgw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e3, modrm$rm(_0, _1))
#		define code$pavgw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e3, modrm$rr(_0, _1))
#		define code$pavgw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e3, modrm$rm(_0, _1))
#		define code$pavgw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e3, modrm$rm(_0, _1))
#		define code$pavgw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e3, modrm$rr(_0, _1))
#		define code$pblendvb(state,n,...) code$pblendvb$argc##n(state, ##__VA_ARGS__)
#		define code$pblendvb$argc02(state,a1,a2) code$pblendvb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pblendvb$argc02$1(...) code$pblendvb$argc02$2(__VA_ARGS__)
#		define code$pblendvb$argc02$2(state,t1,t2,a1,a2) code$pblendvb$argt$##t1##$##t2(state, a1,a2)
#		define code$pblendvb$argc03(state,a1,a2,a3) code$pblendvb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pblendvb$argc03$1(...) code$pblendvb$argc03$2(__VA_ARGS__)
#		define code$pblendvb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pblendvb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pblendvb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 10, modrm$rm(_0, _1))
#		define code$pblendvb$argt$mmreg128$mem$mmreg128(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 38, 10, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$pblendvb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 10, modrm$rm(_0, _1))
#		define code$pblendvb$argt$mmreg128$mem128$mmreg128(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 38, 10, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$pblendvb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 10, modrm$rr(_0, _1))
#		define code$pblendvb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 38, 10, modrm$rr(_0, _1) assert$is$xmm0(_2))
#		define code$pblendw(state,n,...) code$pblendw$argc##n(state, ##__VA_ARGS__)
#		define code$pblendw$argc03(state,a1,a2,a3) code$pblendw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pblendw$argc03$1(...) code$pblendw$argc03$2(__VA_ARGS__)
#		define code$pblendw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pblendw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pblendw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0e, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pblendw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0e, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pblendw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 0e, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pclmulqdq(state,n,...) code$pclmulqdq$argc##n(state, ##__VA_ARGS__)
#		define code$pclmulqdq$argc03(state,a1,a2,a3) code$pclmulqdq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pclmulqdq$argc03$1(...) code$pclmulqdq$argc03$2(__VA_ARGS__)
#		define code$pclmulqdq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pclmulqdq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pclmulqdq$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 44, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pclmulqdq$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 44, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pclmulqdq$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 44, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpeqb(state,n,...) code$pcmpeqb$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpeqb$argc02(state,a1,a2) code$pcmpeqb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpeqb$argc02$1(...) code$pcmpeqb$argc02$2(__VA_ARGS__)
#		define code$pcmpeqb$argc02$2(state,t1,t2,a1,a2) code$pcmpeqb$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpeqb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 74, modrm$rm(_0, _1))
#		define code$pcmpeqb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 74, modrm$rm(_0, _1))
#		define code$pcmpeqb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 74, modrm$rr(_0, _1))
#		define code$pcmpeqb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 74, modrm$rm(_0, _1))
#		define code$pcmpeqb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 74, modrm$rm(_0, _1))
#		define code$pcmpeqb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 74, modrm$rr(_0, _1))
#		define code$pcmpeqd(state,n,...) code$pcmpeqd$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpeqd$argc02(state,a1,a2) code$pcmpeqd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpeqd$argc02$1(...) code$pcmpeqd$argc02$2(__VA_ARGS__)
#		define code$pcmpeqd$argc02$2(state,t1,t2,a1,a2) code$pcmpeqd$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpeqd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 76, modrm$rm(_0, _1))
#		define code$pcmpeqd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 76, modrm$rm(_0, _1))
#		define code$pcmpeqd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 76, modrm$rr(_0, _1))
#		define code$pcmpeqd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 76, modrm$rm(_0, _1))
#		define code$pcmpeqd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 76, modrm$rm(_0, _1))
#		define code$pcmpeqd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 76, modrm$rr(_0, _1))
#		define code$pcmpeqq(state,n,...) code$pcmpeqq$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpeqq$argc02(state,a1,a2) code$pcmpeqq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpeqq$argc02$1(...) code$pcmpeqq$argc02$2(__VA_ARGS__)
#		define code$pcmpeqq$argc02$2(state,t1,t2,a1,a2) code$pcmpeqq$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpeqq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 29, modrm$rm(_0, _1))
#		define code$pcmpeqq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 29, modrm$rm(_0, _1))
#		define code$pcmpeqq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 29, modrm$rr(_0, _1))
#		define code$pcmpeqw(state,n,...) code$pcmpeqw$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpeqw$argc02(state,a1,a2) code$pcmpeqw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpeqw$argc02$1(...) code$pcmpeqw$argc02$2(__VA_ARGS__)
#		define code$pcmpeqw$argc02$2(state,t1,t2,a1,a2) code$pcmpeqw$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpeqw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 75, modrm$rm(_0, _1))
#		define code$pcmpeqw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 75, modrm$rm(_0, _1))
#		define code$pcmpeqw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 75, modrm$rr(_0, _1))
#		define code$pcmpeqw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 75, modrm$rm(_0, _1))
#		define code$pcmpeqw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 75, modrm$rm(_0, _1))
#		define code$pcmpeqw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 75, modrm$rr(_0, _1))
#		define code$pcmpestri(state,n,...) code$pcmpestri$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpestri$argc03(state,a1,a2,a3) code$pcmpestri$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pcmpestri$argc03$1(...) code$pcmpestri$argc03$2(__VA_ARGS__)
#		define code$pcmpestri$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pcmpestri$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pcmpestri$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 61, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpestri$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 61, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpestri$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 61, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpestrm(state,n,...) code$pcmpestrm$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpestrm$argc03(state,a1,a2,a3) code$pcmpestrm$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pcmpestrm$argc03$1(...) code$pcmpestrm$argc03$2(__VA_ARGS__)
#		define code$pcmpestrm$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pcmpestrm$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pcmpestrm$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 60, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpestrm$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 60, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpestrm$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 60, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpgtb(state,n,...) code$pcmpgtb$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpgtb$argc02(state,a1,a2) code$pcmpgtb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpgtb$argc02$1(...) code$pcmpgtb$argc02$2(__VA_ARGS__)
#		define code$pcmpgtb$argc02$2(state,t1,t2,a1,a2) code$pcmpgtb$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpgtb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 64, modrm$rm(_0, _1))
#		define code$pcmpgtb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 64, modrm$rm(_0, _1))
#		define code$pcmpgtb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 64, modrm$rr(_0, _1))
#		define code$pcmpgtb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 64, modrm$rm(_0, _1))
#		define code$pcmpgtb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 64, modrm$rm(_0, _1))
#		define code$pcmpgtb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 64, modrm$rr(_0, _1))
#		define code$pcmpgtd(state,n,...) code$pcmpgtd$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpgtd$argc02(state,a1,a2) code$pcmpgtd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpgtd$argc02$1(...) code$pcmpgtd$argc02$2(__VA_ARGS__)
#		define code$pcmpgtd$argc02$2(state,t1,t2,a1,a2) code$pcmpgtd$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpgtd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 66, modrm$rm(_0, _1))
#		define code$pcmpgtd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 66, modrm$rm(_0, _1))
#		define code$pcmpgtd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 66, modrm$rr(_0, _1))
#		define code$pcmpgtd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 66, modrm$rm(_0, _1))
#		define code$pcmpgtd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 66, modrm$rm(_0, _1))
#		define code$pcmpgtd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 66, modrm$rr(_0, _1))
#		define code$pcmpgtq(state,n,...) code$pcmpgtq$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpgtq$argc02(state,a1,a2) code$pcmpgtq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpgtq$argc02$1(...) code$pcmpgtq$argc02$2(__VA_ARGS__)
#		define code$pcmpgtq$argc02$2(state,t1,t2,a1,a2) code$pcmpgtq$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpgtq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 37, modrm$rm(_0, _1))
#		define code$pcmpgtq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 37, modrm$rm(_0, _1))
#		define code$pcmpgtq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 37, modrm$rr(_0, _1))
#		define code$pcmpgtw(state,n,...) code$pcmpgtw$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpgtw$argc02(state,a1,a2) code$pcmpgtw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pcmpgtw$argc02$1(...) code$pcmpgtw$argc02$2(__VA_ARGS__)
#		define code$pcmpgtw$argc02$2(state,t1,t2,a1,a2) code$pcmpgtw$argt$##t1##$##t2(state, a1,a2)
#		define code$pcmpgtw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 65, modrm$rm(_0, _1))
#		define code$pcmpgtw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 65, modrm$rm(_0, _1))
#		define code$pcmpgtw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 65, modrm$rr(_0, _1))
#		define code$pcmpgtw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 65, modrm$rm(_0, _1))
#		define code$pcmpgtw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 65, modrm$rm(_0, _1))
#		define code$pcmpgtw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 65, modrm$rr(_0, _1))
#		define code$pcmpistri(state,n,...) code$pcmpistri$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpistri$argc03(state,a1,a2,a3) code$pcmpistri$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pcmpistri$argc03$1(...) code$pcmpistri$argc03$2(__VA_ARGS__)
#		define code$pcmpistri$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pcmpistri$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pcmpistri$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 63, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpistri$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 63, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpistri$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 63, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpistrm(state,n,...) code$pcmpistrm$argc##n(state, ##__VA_ARGS__)
#		define code$pcmpistrm$argc03(state,a1,a2,a3) code$pcmpistrm$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pcmpistrm$argc03$1(...) code$pcmpistrm$argc03$2(__VA_ARGS__)
#		define code$pcmpistrm$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pcmpistrm$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pcmpistrm$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 62, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpistrm$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 62, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pcmpistrm$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 62, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pconfig(state,n,...) code$pconfig$argc##n(state, ##__VA_ARGS__)
#		define code$pconfig$argc00(state,_) code$pconfig$argt$(state)
#		define code$pconfig$argt$(state) bytes(0f, 01, c5)
#		define code$pdep(state,n,...) code$pdep$argc##n(state, ##__VA_ARGS__)
#		define code$pdep$argc03(state,a1,a2,a3) code$pdep$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pdep$argc03$1(...) code$pdep$argc03$2(__VA_ARGS__)
#		define code$pdep$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pdep$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pdep$argt$reg32$reg32$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pdep$argt$reg32$reg32$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pdep$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f5, modrm$rr(_0, _2))
#		define code$pdep$argt$reg64$reg64$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pdep$argt$reg64$reg64$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pdep$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f5, modrm$rr(_0, _2))
#		define code$pext(state,n,...) code$pext$argc##n(state, ##__VA_ARGS__)
#		define code$pext$argc03(state,a1,a2,a3) code$pext$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pext$argc03$1(...) code$pext$argc03$2(__VA_ARGS__)
#		define code$pext$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pext$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pext$argt$reg32$reg32$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pext$argt$reg32$reg32$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pext$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w0, _0, _1, _2), f5, modrm$rr(_0, _2))
#		define code$pext$argt$reg64$reg64$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pext$argt$reg64$reg64$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$pext$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w1, _0, _1, _2), f5, modrm$rr(_0, _2))
#		define code$pextrb(state,n,...) code$pextrb$argc##n(state, ##__VA_ARGS__)
#		define code$pextrb$argc03(state,a1,a2,a3) code$pextrb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pextrb$argc03$1(...) code$pextrb$argc03$2(__VA_ARGS__)
#		define code$pextrb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pextrb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pextrb$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 14, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrb$argt$mem08$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 14, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrb$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_0, _1) 0f, 3a, 14, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrb$argt$reg64$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_0, _1) 0f, 3a, 14, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrd(state,n,...) code$pextrd$argc##n(state, ##__VA_ARGS__)
#		define code$pextrd$argc03(state,a1,a2,a3) code$pextrd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pextrd$argc03$1(...) code$pextrd$argc03$2(__VA_ARGS__)
#		define code$pextrd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pextrd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pextrd$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrd$argt$mem32$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrd$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_0, _1) 0f, 3a, 16, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrq(state,n,...) code$pextrq$argc##n(state, ##__VA_ARGS__)
#		define code$pextrq$argc03(state,a1,a2,a3) code$pextrq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pextrq$argc03$1(...) code$pextrq$argc03$2(__VA_ARGS__)
#		define code$pextrq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pextrq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pextrq$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex64rm(_1, _0) 0f, 3a, 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrq$argt$mem64$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex64rm(_1, _0) 0f, 3a, 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrq$argt$reg64$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex64rr(_0, _1) 0f, 3a, 16, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrw(state,n,...) code$pextrw$argc##n(state, ##__VA_ARGS__)
#		define code$pextrw$argc03(state,a1,a2,a3) code$pextrw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pextrw$argc03$1(...) code$pextrw$argc03$2(__VA_ARGS__)
#		define code$pextrw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pextrw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pextrw$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 15, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrw$argt$mem16$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_1, _0) 0f, 3a, 15, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrw$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, c5, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrw$argt$reg32$mmreg64$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, c5, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrw$argt$reg64$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, c5, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pextrw$argt$reg64$mmreg64$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, c5, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$phaddd(state,n,...) code$phaddd$argc##n(state, ##__VA_ARGS__)
#		define code$phaddd$argc02(state,a1,a2) code$phaddd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$phaddd$argc02$1(...) code$phaddd$argc02$2(__VA_ARGS__)
#		define code$phaddd$argc02$2(state,t1,t2,a1,a2) code$phaddd$argt$##t1##$##t2(state, a1,a2)
#		define code$phaddd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 02, modrm$rm(_0, _1))
#		define code$phaddd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 02, modrm$rm(_0, _1))
#		define code$phaddd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 02, modrm$rr(_0, _1))
#		define code$phaddd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 02, modrm$rm(_0, _1))
#		define code$phaddd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 02, modrm$rm(_0, _1))
#		define code$phaddd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 02, modrm$rr(_0, _1))
#		define code$phaddsw(state,n,...) code$phaddsw$argc##n(state, ##__VA_ARGS__)
#		define code$phaddsw$argc02(state,a1,a2) code$phaddsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$phaddsw$argc02$1(...) code$phaddsw$argc02$2(__VA_ARGS__)
#		define code$phaddsw$argc02$2(state,t1,t2,a1,a2) code$phaddsw$argt$##t1##$##t2(state, a1,a2)
#		define code$phaddsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 03, modrm$rm(_0, _1))
#		define code$phaddsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 03, modrm$rm(_0, _1))
#		define code$phaddsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 03, modrm$rr(_0, _1))
#		define code$phaddsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 03, modrm$rm(_0, _1))
#		define code$phaddsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 03, modrm$rm(_0, _1))
#		define code$phaddsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 03, modrm$rr(_0, _1))
#		define code$phaddw(state,n,...) code$phaddw$argc##n(state, ##__VA_ARGS__)
#		define code$phaddw$argc02(state,a1,a2) code$phaddw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$phaddw$argc02$1(...) code$phaddw$argc02$2(__VA_ARGS__)
#		define code$phaddw$argc02$2(state,t1,t2,a1,a2) code$phaddw$argt$##t1##$##t2(state, a1,a2)
#		define code$phaddw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 01, modrm$rm(_0, _1))
#		define code$phaddw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 01, modrm$rm(_0, _1))
#		define code$phaddw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 01, modrm$rr(_0, _1))
#		define code$phaddw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 01, modrm$rm(_0, _1))
#		define code$phaddw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 01, modrm$rm(_0, _1))
#		define code$phaddw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 01, modrm$rr(_0, _1))
#		define code$phminposuw(state,n,...) code$phminposuw$argc##n(state, ##__VA_ARGS__)
#		define code$phminposuw$argc02(state,a1,a2) code$phminposuw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$phminposuw$argc02$1(...) code$phminposuw$argc02$2(__VA_ARGS__)
#		define code$phminposuw$argc02$2(state,t1,t2,a1,a2) code$phminposuw$argt$##t1##$##t2(state, a1,a2)
#		define code$phminposuw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 41, modrm$rm(_0, _1))
#		define code$phminposuw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 41, modrm$rm(_0, _1))
#		define code$phminposuw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 41, modrm$rr(_0, _1))
#		define code$phsubd(state,n,...) code$phsubd$argc##n(state, ##__VA_ARGS__)
#		define code$phsubd$argc02(state,a1,a2) code$phsubd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$phsubd$argc02$1(...) code$phsubd$argc02$2(__VA_ARGS__)
#		define code$phsubd$argc02$2(state,t1,t2,a1,a2) code$phsubd$argt$##t1##$##t2(state, a1,a2)
#		define code$phsubd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 06, modrm$rm(_0, _1))
#		define code$phsubd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 06, modrm$rm(_0, _1))
#		define code$phsubd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 06, modrm$rr(_0, _1))
#		define code$phsubd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 06, modrm$rm(_0, _1))
#		define code$phsubd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 06, modrm$rm(_0, _1))
#		define code$phsubd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 06, modrm$rr(_0, _1))
#		define code$phsubsw(state,n,...) code$phsubsw$argc##n(state, ##__VA_ARGS__)
#		define code$phsubsw$argc02(state,a1,a2) code$phsubsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$phsubsw$argc02$1(...) code$phsubsw$argc02$2(__VA_ARGS__)
#		define code$phsubsw$argc02$2(state,t1,t2,a1,a2) code$phsubsw$argt$##t1##$##t2(state, a1,a2)
#		define code$phsubsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 07, modrm$rm(_0, _1))
#		define code$phsubsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 07, modrm$rm(_0, _1))
#		define code$phsubsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 07, modrm$rr(_0, _1))
#		define code$phsubsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 07, modrm$rm(_0, _1))
#		define code$phsubsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 07, modrm$rm(_0, _1))
#		define code$phsubsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 07, modrm$rr(_0, _1))
#		define code$phsubw(state,n,...) code$phsubw$argc##n(state, ##__VA_ARGS__)
#		define code$phsubw$argc02(state,a1,a2) code$phsubw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$phsubw$argc02$1(...) code$phsubw$argc02$2(__VA_ARGS__)
#		define code$phsubw$argc02$2(state,t1,t2,a1,a2) code$phsubw$argt$##t1##$##t2(state, a1,a2)
#		define code$phsubw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 05, modrm$rm(_0, _1))
#		define code$phsubw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 05, modrm$rm(_0, _1))
#		define code$phsubw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 05, modrm$rr(_0, _1))
#		define code$phsubw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 05, modrm$rm(_0, _1))
#		define code$phsubw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 05, modrm$rm(_0, _1))
#		define code$phsubw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 05, modrm$rr(_0, _1))
#		define code$pinsrb(state,n,...) code$pinsrb$argc##n(state, ##__VA_ARGS__)
#		define code$pinsrb$argc03(state,a1,a2,a3) code$pinsrb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pinsrb$argc03$1(...) code$pinsrb$argc03$2(__VA_ARGS__)
#		define code$pinsrb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pinsrb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pinsrb$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 20, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrb$argt$mmreg128$mem08$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 20, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrb$argt$mmreg128$reg32$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 20, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrd(state,n,...) code$pinsrd$argc##n(state, ##__VA_ARGS__)
#		define code$pinsrd$argc03(state,a1,a2,a3) code$pinsrd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pinsrd$argc03$1(...) code$pinsrd$argc03$2(__VA_ARGS__)
#		define code$pinsrd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pinsrd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pinsrd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrd$argt$mmreg128$mem32$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrd$argt$mmreg128$reg32$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 22, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrq(state,n,...) code$pinsrq$argc##n(state, ##__VA_ARGS__)
#		define code$pinsrq$argc03(state,a1,a2,a3) code$pinsrq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pinsrq$argc03$1(...) code$pinsrq$argc03$2(__VA_ARGS__)
#		define code$pinsrq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pinsrq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pinsrq$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex64rm(_0, _1) 0f, 3a, 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrq$argt$mmreg128$mem64$imm08(state,_0,_1,_2) bytes(66, rex64rm(_0, _1) 0f, 3a, 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrq$argt$mmreg128$reg64$imm08(state,_0,_1,_2) bytes(66, rex64rr(_1, _0) 0f, 3a, 22, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrw(state,n,...) code$pinsrw$argc##n(state, ##__VA_ARGS__)
#		define code$pinsrw$argc03(state,a1,a2,a3) code$pinsrw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pinsrw$argc03$1(...) code$pinsrw$argc03$2(__VA_ARGS__)
#		define code$pinsrw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pinsrw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pinsrw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, c4, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrw$argt$mmreg128$mem16$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, c4, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrw$argt$mmreg128$reg32$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, c4, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrw$argt$mmreg64$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, c4, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrw$argt$mmreg64$mem16$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, c4, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pinsrw$argt$mmreg64$reg32$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, c4, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pmaddubsw(state,n,...) code$pmaddubsw$argc##n(state, ##__VA_ARGS__)
#		define code$pmaddubsw$argc02(state,a1,a2) code$pmaddubsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaddubsw$argc02$1(...) code$pmaddubsw$argc02$2(__VA_ARGS__)
#		define code$pmaddubsw$argc02$2(state,t1,t2,a1,a2) code$pmaddubsw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaddubsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 04, modrm$rm(_0, _1))
#		define code$pmaddubsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 04, modrm$rm(_0, _1))
#		define code$pmaddubsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 04, modrm$rr(_0, _1))
#		define code$pmaddubsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 04, modrm$rm(_0, _1))
#		define code$pmaddubsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 04, modrm$rm(_0, _1))
#		define code$pmaddubsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 04, modrm$rr(_0, _1))
#		define code$pmaddwd(state,n,...) code$pmaddwd$argc##n(state, ##__VA_ARGS__)
#		define code$pmaddwd$argc02(state,a1,a2) code$pmaddwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaddwd$argc02$1(...) code$pmaddwd$argc02$2(__VA_ARGS__)
#		define code$pmaddwd$argc02$2(state,t1,t2,a1,a2) code$pmaddwd$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaddwd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f5, modrm$rm(_0, _1))
#		define code$pmaddwd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f5, modrm$rm(_0, _1))
#		define code$pmaddwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f5, modrm$rr(_0, _1))
#		define code$pmaddwd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f5, modrm$rm(_0, _1))
#		define code$pmaddwd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f5, modrm$rm(_0, _1))
#		define code$pmaddwd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f5, modrm$rr(_0, _1))
#		define code$pmaxsb(state,n,...) code$pmaxsb$argc##n(state, ##__VA_ARGS__)
#		define code$pmaxsb$argc02(state,a1,a2) code$pmaxsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaxsb$argc02$1(...) code$pmaxsb$argc02$2(__VA_ARGS__)
#		define code$pmaxsb$argc02$2(state,t1,t2,a1,a2) code$pmaxsb$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaxsb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3c, modrm$rm(_0, _1))
#		define code$pmaxsb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3c, modrm$rm(_0, _1))
#		define code$pmaxsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 3c, modrm$rr(_0, _1))
#		define code$pmaxsd(state,n,...) code$pmaxsd$argc##n(state, ##__VA_ARGS__)
#		define code$pmaxsd$argc02(state,a1,a2) code$pmaxsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaxsd$argc02$1(...) code$pmaxsd$argc02$2(__VA_ARGS__)
#		define code$pmaxsd$argc02$2(state,t1,t2,a1,a2) code$pmaxsd$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaxsd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3d, modrm$rm(_0, _1))
#		define code$pmaxsd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3d, modrm$rm(_0, _1))
#		define code$pmaxsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 3d, modrm$rr(_0, _1))
#		define code$pmaxsw(state,n,...) code$pmaxsw$argc##n(state, ##__VA_ARGS__)
#		define code$pmaxsw$argc02(state,a1,a2) code$pmaxsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaxsw$argc02$1(...) code$pmaxsw$argc02$2(__VA_ARGS__)
#		define code$pmaxsw$argc02$2(state,t1,t2,a1,a2) code$pmaxsw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaxsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ee, modrm$rm(_0, _1))
#		define code$pmaxsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ee, modrm$rm(_0, _1))
#		define code$pmaxsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, ee, modrm$rr(_0, _1))
#		define code$pmaxsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ee, modrm$rm(_0, _1))
#		define code$pmaxsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ee, modrm$rm(_0, _1))
#		define code$pmaxsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, ee, modrm$rr(_0, _1))
#		define code$pmaxub(state,n,...) code$pmaxub$argc##n(state, ##__VA_ARGS__)
#		define code$pmaxub$argc02(state,a1,a2) code$pmaxub$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaxub$argc02$1(...) code$pmaxub$argc02$2(__VA_ARGS__)
#		define code$pmaxub$argc02$2(state,t1,t2,a1,a2) code$pmaxub$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaxub$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, de, modrm$rm(_0, _1))
#		define code$pmaxub$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, de, modrm$rm(_0, _1))
#		define code$pmaxub$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, de, modrm$rr(_0, _1))
#		define code$pmaxub$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, de, modrm$rm(_0, _1))
#		define code$pmaxub$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, de, modrm$rm(_0, _1))
#		define code$pmaxub$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, de, modrm$rr(_0, _1))
#		define code$pmaxud(state,n,...) code$pmaxud$argc##n(state, ##__VA_ARGS__)
#		define code$pmaxud$argc02(state,a1,a2) code$pmaxud$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaxud$argc02$1(...) code$pmaxud$argc02$2(__VA_ARGS__)
#		define code$pmaxud$argc02$2(state,t1,t2,a1,a2) code$pmaxud$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaxud$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3f, modrm$rm(_0, _1))
#		define code$pmaxud$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3f, modrm$rm(_0, _1))
#		define code$pmaxud$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 3f, modrm$rr(_0, _1))
#		define code$pmaxuw(state,n,...) code$pmaxuw$argc##n(state, ##__VA_ARGS__)
#		define code$pmaxuw$argc02(state,a1,a2) code$pmaxuw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmaxuw$argc02$1(...) code$pmaxuw$argc02$2(__VA_ARGS__)
#		define code$pmaxuw$argc02$2(state,t1,t2,a1,a2) code$pmaxuw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmaxuw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3e, modrm$rm(_0, _1))
#		define code$pmaxuw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3e, modrm$rm(_0, _1))
#		define code$pmaxuw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 3e, modrm$rr(_0, _1))
#		define code$pminsb(state,n,...) code$pminsb$argc##n(state, ##__VA_ARGS__)
#		define code$pminsb$argc02(state,a1,a2) code$pminsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pminsb$argc02$1(...) code$pminsb$argc02$2(__VA_ARGS__)
#		define code$pminsb$argc02$2(state,t1,t2,a1,a2) code$pminsb$argt$##t1##$##t2(state, a1,a2)
#		define code$pminsb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 38, modrm$rm(_0, _1))
#		define code$pminsb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 38, modrm$rm(_0, _1))
#		define code$pminsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 38, modrm$rr(_0, _1))
#		define code$pminsd(state,n,...) code$pminsd$argc##n(state, ##__VA_ARGS__)
#		define code$pminsd$argc02(state,a1,a2) code$pminsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pminsd$argc02$1(...) code$pminsd$argc02$2(__VA_ARGS__)
#		define code$pminsd$argc02$2(state,t1,t2,a1,a2) code$pminsd$argt$##t1##$##t2(state, a1,a2)
#		define code$pminsd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 39, modrm$rm(_0, _1))
#		define code$pminsd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 39, modrm$rm(_0, _1))
#		define code$pminsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 39, modrm$rr(_0, _1))
#		define code$pminsw(state,n,...) code$pminsw$argc##n(state, ##__VA_ARGS__)
#		define code$pminsw$argc02(state,a1,a2) code$pminsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pminsw$argc02$1(...) code$pminsw$argc02$2(__VA_ARGS__)
#		define code$pminsw$argc02$2(state,t1,t2,a1,a2) code$pminsw$argt$##t1##$##t2(state, a1,a2)
#		define code$pminsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ea, modrm$rm(_0, _1))
#		define code$pminsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ea, modrm$rm(_0, _1))
#		define code$pminsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, ea, modrm$rr(_0, _1))
#		define code$pminsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ea, modrm$rm(_0, _1))
#		define code$pminsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ea, modrm$rm(_0, _1))
#		define code$pminsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, ea, modrm$rr(_0, _1))
#		define code$pminub(state,n,...) code$pminub$argc##n(state, ##__VA_ARGS__)
#		define code$pminub$argc02(state,a1,a2) code$pminub$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pminub$argc02$1(...) code$pminub$argc02$2(__VA_ARGS__)
#		define code$pminub$argc02$2(state,t1,t2,a1,a2) code$pminub$argt$##t1##$##t2(state, a1,a2)
#		define code$pminub$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, da, modrm$rm(_0, _1))
#		define code$pminub$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, da, modrm$rm(_0, _1))
#		define code$pminub$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, da, modrm$rr(_0, _1))
#		define code$pminub$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, da, modrm$rm(_0, _1))
#		define code$pminub$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, da, modrm$rm(_0, _1))
#		define code$pminub$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, da, modrm$rr(_0, _1))
#		define code$pminud(state,n,...) code$pminud$argc##n(state, ##__VA_ARGS__)
#		define code$pminud$argc02(state,a1,a2) code$pminud$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pminud$argc02$1(...) code$pminud$argc02$2(__VA_ARGS__)
#		define code$pminud$argc02$2(state,t1,t2,a1,a2) code$pminud$argt$##t1##$##t2(state, a1,a2)
#		define code$pminud$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3b, modrm$rm(_0, _1))
#		define code$pminud$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3b, modrm$rm(_0, _1))
#		define code$pminud$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 3b, modrm$rr(_0, _1))
#		define code$pminuw(state,n,...) code$pminuw$argc##n(state, ##__VA_ARGS__)
#		define code$pminuw$argc02(state,a1,a2) code$pminuw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pminuw$argc02$1(...) code$pminuw$argc02$2(__VA_ARGS__)
#		define code$pminuw$argc02$2(state,t1,t2,a1,a2) code$pminuw$argt$##t1##$##t2(state, a1,a2)
#		define code$pminuw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3a, modrm$rm(_0, _1))
#		define code$pminuw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 3a, modrm$rm(_0, _1))
#		define code$pminuw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 3a, modrm$rr(_0, _1))
#		define code$pmovmskb(state,n,...) code$pmovmskb$argc##n(state, ##__VA_ARGS__)
#		define code$pmovmskb$argc02(state,a1,a2) code$pmovmskb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovmskb$argc02$1(...) code$pmovmskb$argc02$2(__VA_ARGS__)
#		define code$pmovmskb$argc02$2(state,t1,t2,a1,a2) code$pmovmskb$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovmskb$argt$reg32$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d7, modrm$rr(_0, _1))
#		define code$pmovmskb$argt$reg32$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d7, modrm$rr(_0, _1))
#		define code$pmovsxbd(state,n,...) code$pmovsxbd$argc##n(state, ##__VA_ARGS__)
#		define code$pmovsxbd$argc02(state,a1,a2) code$pmovsxbd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovsxbd$argc02$1(...) code$pmovsxbd$argc02$2(__VA_ARGS__)
#		define code$pmovsxbd$argc02$2(state,t1,t2,a1,a2) code$pmovsxbd$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovsxbd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 21, modrm$rm(_0, _1))
#		define code$pmovsxbd$argt$mmreg128$mem32(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 21, modrm$rm(_0, _1))
#		define code$pmovsxbd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 21, modrm$rr(_0, _1))
#		define code$pmovsxbq(state,n,...) code$pmovsxbq$argc##n(state, ##__VA_ARGS__)
#		define code$pmovsxbq$argc02(state,a1,a2) code$pmovsxbq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovsxbq$argc02$1(...) code$pmovsxbq$argc02$2(__VA_ARGS__)
#		define code$pmovsxbq$argc02$2(state,t1,t2,a1,a2) code$pmovsxbq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovsxbq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 22, modrm$rm(_0, _1))
#		define code$pmovsxbq$argt$mmreg128$mem16(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 22, modrm$rm(_0, _1))
#		define code$pmovsxbq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 22, modrm$rr(_0, _1))
#		define code$pmovsxbw(state,n,...) code$pmovsxbw$argc##n(state, ##__VA_ARGS__)
#		define code$pmovsxbw$argc02(state,a1,a2) code$pmovsxbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovsxbw$argc02$1(...) code$pmovsxbw$argc02$2(__VA_ARGS__)
#		define code$pmovsxbw$argc02$2(state,t1,t2,a1,a2) code$pmovsxbw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovsxbw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 20, modrm$rm(_0, _1))
#		define code$pmovsxbw$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 20, modrm$rm(_0, _1))
#		define code$pmovsxbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 20, modrm$rr(_0, _1))
#		define code$pmovsxdq(state,n,...) code$pmovsxdq$argc##n(state, ##__VA_ARGS__)
#		define code$pmovsxdq$argc02(state,a1,a2) code$pmovsxdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovsxdq$argc02$1(...) code$pmovsxdq$argc02$2(__VA_ARGS__)
#		define code$pmovsxdq$argc02$2(state,t1,t2,a1,a2) code$pmovsxdq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovsxdq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 25, modrm$rm(_0, _1))
#		define code$pmovsxdq$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 25, modrm$rm(_0, _1))
#		define code$pmovsxdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 25, modrm$rr(_0, _1))
#		define code$pmovsxwd(state,n,...) code$pmovsxwd$argc##n(state, ##__VA_ARGS__)
#		define code$pmovsxwd$argc02(state,a1,a2) code$pmovsxwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovsxwd$argc02$1(...) code$pmovsxwd$argc02$2(__VA_ARGS__)
#		define code$pmovsxwd$argc02$2(state,t1,t2,a1,a2) code$pmovsxwd$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovsxwd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 23, modrm$rm(_0, _1))
#		define code$pmovsxwd$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 23, modrm$rm(_0, _1))
#		define code$pmovsxwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 23, modrm$rr(_0, _1))
#		define code$pmovsxwq(state,n,...) code$pmovsxwq$argc##n(state, ##__VA_ARGS__)
#		define code$pmovsxwq$argc02(state,a1,a2) code$pmovsxwq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovsxwq$argc02$1(...) code$pmovsxwq$argc02$2(__VA_ARGS__)
#		define code$pmovsxwq$argc02$2(state,t1,t2,a1,a2) code$pmovsxwq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovsxwq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 24, modrm$rm(_0, _1))
#		define code$pmovsxwq$argt$mmreg128$mem32(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 24, modrm$rm(_0, _1))
#		define code$pmovsxwq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 24, modrm$rr(_0, _1))
#		define code$pmovzxbd(state,n,...) code$pmovzxbd$argc##n(state, ##__VA_ARGS__)
#		define code$pmovzxbd$argc02(state,a1,a2) code$pmovzxbd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovzxbd$argc02$1(...) code$pmovzxbd$argc02$2(__VA_ARGS__)
#		define code$pmovzxbd$argc02$2(state,t1,t2,a1,a2) code$pmovzxbd$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovzxbd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 31, modrm$rm(_0, _1))
#		define code$pmovzxbd$argt$mmreg128$mem32(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 31, modrm$rm(_0, _1))
#		define code$pmovzxbd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 31, modrm$rr(_0, _1))
#		define code$pmovzxbq(state,n,...) code$pmovzxbq$argc##n(state, ##__VA_ARGS__)
#		define code$pmovzxbq$argc02(state,a1,a2) code$pmovzxbq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovzxbq$argc02$1(...) code$pmovzxbq$argc02$2(__VA_ARGS__)
#		define code$pmovzxbq$argc02$2(state,t1,t2,a1,a2) code$pmovzxbq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovzxbq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 32, modrm$rm(_0, _1))
#		define code$pmovzxbq$argt$mmreg128$mem16(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 32, modrm$rm(_0, _1))
#		define code$pmovzxbq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 32, modrm$rr(_0, _1))
#		define code$pmovzxbw(state,n,...) code$pmovzxbw$argc##n(state, ##__VA_ARGS__)
#		define code$pmovzxbw$argc02(state,a1,a2) code$pmovzxbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovzxbw$argc02$1(...) code$pmovzxbw$argc02$2(__VA_ARGS__)
#		define code$pmovzxbw$argc02$2(state,t1,t2,a1,a2) code$pmovzxbw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovzxbw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 30, modrm$rm(_0, _1))
#		define code$pmovzxbw$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 30, modrm$rm(_0, _1))
#		define code$pmovzxbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 30, modrm$rr(_0, _1))
#		define code$pmovzxdq(state,n,...) code$pmovzxdq$argc##n(state, ##__VA_ARGS__)
#		define code$pmovzxdq$argc02(state,a1,a2) code$pmovzxdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovzxdq$argc02$1(...) code$pmovzxdq$argc02$2(__VA_ARGS__)
#		define code$pmovzxdq$argc02$2(state,t1,t2,a1,a2) code$pmovzxdq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovzxdq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 35, modrm$rm(_0, _1))
#		define code$pmovzxdq$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 35, modrm$rm(_0, _1))
#		define code$pmovzxdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 35, modrm$rr(_0, _1))
#		define code$pmovzxwd(state,n,...) code$pmovzxwd$argc##n(state, ##__VA_ARGS__)
#		define code$pmovzxwd$argc02(state,a1,a2) code$pmovzxwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovzxwd$argc02$1(...) code$pmovzxwd$argc02$2(__VA_ARGS__)
#		define code$pmovzxwd$argc02$2(state,t1,t2,a1,a2) code$pmovzxwd$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovzxwd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 33, modrm$rm(_0, _1))
#		define code$pmovzxwd$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 33, modrm$rm(_0, _1))
#		define code$pmovzxwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 33, modrm$rr(_0, _1))
#		define code$pmovzxwq(state,n,...) code$pmovzxwq$argc##n(state, ##__VA_ARGS__)
#		define code$pmovzxwq$argc02(state,a1,a2) code$pmovzxwq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmovzxwq$argc02$1(...) code$pmovzxwq$argc02$2(__VA_ARGS__)
#		define code$pmovzxwq$argc02$2(state,t1,t2,a1,a2) code$pmovzxwq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmovzxwq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 34, modrm$rm(_0, _1))
#		define code$pmovzxwq$argt$mmreg128$mem32(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 34, modrm$rm(_0, _1))
#		define code$pmovzxwq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 34, modrm$rr(_0, _1))
#		define code$pmuldq(state,n,...) code$pmuldq$argc##n(state, ##__VA_ARGS__)
#		define code$pmuldq$argc02(state,a1,a2) code$pmuldq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmuldq$argc02$1(...) code$pmuldq$argc02$2(__VA_ARGS__)
#		define code$pmuldq$argc02$2(state,t1,t2,a1,a2) code$pmuldq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmuldq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 28, modrm$rm(_0, _1))
#		define code$pmuldq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 28, modrm$rm(_0, _1))
#		define code$pmuldq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 28, modrm$rr(_0, _1))
#		define code$pmulhrsw(state,n,...) code$pmulhrsw$argc##n(state, ##__VA_ARGS__)
#		define code$pmulhrsw$argc02(state,a1,a2) code$pmulhrsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmulhrsw$argc02$1(...) code$pmulhrsw$argc02$2(__VA_ARGS__)
#		define code$pmulhrsw$argc02$2(state,t1,t2,a1,a2) code$pmulhrsw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmulhrsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 0b, modrm$rm(_0, _1))
#		define code$pmulhrsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 0b, modrm$rm(_0, _1))
#		define code$pmulhrsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 0b, modrm$rr(_0, _1))
#		define code$pmulhrsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 0b, modrm$rm(_0, _1))
#		define code$pmulhrsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 0b, modrm$rm(_0, _1))
#		define code$pmulhrsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 0b, modrm$rr(_0, _1))
#		define code$pmulhw(state,n,...) code$pmulhw$argc##n(state, ##__VA_ARGS__)
#		define code$pmulhw$argc02(state,a1,a2) code$pmulhw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmulhw$argc02$1(...) code$pmulhw$argc02$2(__VA_ARGS__)
#		define code$pmulhw$argc02$2(state,t1,t2,a1,a2) code$pmulhw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmulhw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e5, modrm$rm(_0, _1))
#		define code$pmulhw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e5, modrm$rm(_0, _1))
#		define code$pmulhw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e5, modrm$rr(_0, _1))
#		define code$pmulhw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e5, modrm$rm(_0, _1))
#		define code$pmulhw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e5, modrm$rm(_0, _1))
#		define code$pmulhw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e5, modrm$rr(_0, _1))
#		define code$pmulld(state,n,...) code$pmulld$argc##n(state, ##__VA_ARGS__)
#		define code$pmulld$argc02(state,a1,a2) code$pmulld$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmulld$argc02$1(...) code$pmulld$argc02$2(__VA_ARGS__)
#		define code$pmulld$argc02$2(state,t1,t2,a1,a2) code$pmulld$argt$##t1##$##t2(state, a1,a2)
#		define code$pmulld$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 40, modrm$rm(_0, _1))
#		define code$pmulld$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 40, modrm$rm(_0, _1))
#		define code$pmulld$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 40, modrm$rr(_0, _1))
#		define code$pmullw(state,n,...) code$pmullw$argc##n(state, ##__VA_ARGS__)
#		define code$pmullw$argc02(state,a1,a2) code$pmullw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmullw$argc02$1(...) code$pmullw$argc02$2(__VA_ARGS__)
#		define code$pmullw$argc02$2(state,t1,t2,a1,a2) code$pmullw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmullw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d5, modrm$rm(_0, _1))
#		define code$pmullw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d5, modrm$rm(_0, _1))
#		define code$pmullw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d5, modrm$rr(_0, _1))
#		define code$pmullw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d5, modrm$rm(_0, _1))
#		define code$pmullw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d5, modrm$rm(_0, _1))
#		define code$pmullw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d5, modrm$rr(_0, _1))
#		define code$pmuludq(state,n,...) code$pmuludq$argc##n(state, ##__VA_ARGS__)
#		define code$pmuludq$argc02(state,a1,a2) code$pmuludq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmuludq$argc02$1(...) code$pmuludq$argc02$2(__VA_ARGS__)
#		define code$pmuludq$argc02$2(state,t1,t2,a1,a2) code$pmuludq$argt$##t1##$##t2(state, a1,a2)
#		define code$pmuludq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f4, modrm$rm(_0, _1))
#		define code$pmuludq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f4, modrm$rm(_0, _1))
#		define code$pmuludq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f4, modrm$rr(_0, _1))
#		define code$pmuludq$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f4, modrm$rm(_0, _1))
#		define code$pmuludq$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f4, modrm$rm(_0, _1))
#		define code$pmuludq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f4, modrm$rr(_0, _1))
#		define code$pmuluw(state,n,...) code$pmuluw$argc##n(state, ##__VA_ARGS__)
#		define code$pmuluw$argc02(state,a1,a2) code$pmuluw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pmuluw$argc02$1(...) code$pmuluw$argc02$2(__VA_ARGS__)
#		define code$pmuluw$argc02$2(state,t1,t2,a1,a2) code$pmuluw$argt$##t1##$##t2(state, a1,a2)
#		define code$pmuluw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e4, modrm$rm(_0, _1))
#		define code$pmuluw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e4, modrm$rm(_0, _1))
#		define code$pmuluw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e4, modrm$rr(_0, _1))
#		define code$pmuluw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e4, modrm$rm(_0, _1))
#		define code$pmuluw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e4, modrm$rm(_0, _1))
#		define code$pmuluw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e4, modrm$rr(_0, _1))
#		define code$pop(state,n,...) code$pop$argc##n(state, ##__VA_ARGS__)
#		define code$pop$argc01(state,a1) code$pop$argc01$1(state, operand$gettype(a1), a1)
#		define code$pop$argc01$1(...) code$pop$argc01$2(__VA_ARGS__)
#		define code$pop$argc01$2(state,t1,a1) code$pop$argt$##t1(state, a1)
#		define code$pop$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for pop(mem)"))
#		define code$pop$argt$mem16(state,_0) bytes(rex16m(_0) 8f, modrm$0m(_0))
#		define code$pop$argt$mem64(state,_0) bytes(/* no REX.W */rex32m(_0) 8f, modrm$0m(_0))
#		define code$pop$argt$reg16(state,_0) bytes(rex16r(_0) 8f, modrm$0r(_0))
#		define code$pop$argt$reg64(state,_0) bytes(/* no REX.W */rex32r(_0) 8f, modrm$0r(_0))
#		define code$popcnt(state,n,...) code$popcnt$argc##n(state, ##__VA_ARGS__)
#		define code$popcnt$argc02(state,a1,a2) code$popcnt$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$popcnt$argc02$1(...) code$popcnt$argc02$2(__VA_ARGS__)
#		define code$popcnt$argc02$2(state,t1,t2,a1,a2) code$popcnt$argt$##t1##$##t2(state, a1,a2)
#		define code$popcnt$argt$reg16$mem(state,_0,_1) bytes(f3, rex16rm(_0, _1) 0f, b8, modrm$rm(_0, _1))
#		define code$popcnt$argt$reg16$mem16(state,_0,_1) bytes(f3, rex16rm(_0, _1) 0f, b8, modrm$rm(_0, _1))
#		define code$popcnt$argt$reg16$reg16(state,_0,_1) bytes(f3, rex16rr(_1, _0) 0f, b8, modrm$rr(_0, _1))
#		define code$popcnt$argt$reg32$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, b8, modrm$rm(_0, _1))
#		define code$popcnt$argt$reg32$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, b8, modrm$rm(_0, _1))
#		define code$popcnt$argt$reg32$reg32(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, b8, modrm$rr(_0, _1))
#		define code$popcnt$argt$reg64$mem(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, b8, modrm$rm(_0, _1))
#		define code$popcnt$argt$reg64$mem64(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, b8, modrm$rm(_0, _1))
#		define code$popcnt$argt$reg64$reg64(state,_0,_1) bytes(f3, rex64rr(_1, _0) 0f, b8, modrm$rr(_0, _1))
#		define code$popf(state,n,...) code$popf$argc##n(state, ##__VA_ARGS__)
#		define code$popf$argc00(state,_) code$popf$argt$(state)
#		define code$popf$argt$(state) bytes(9d)
#		define code$popfq(state,n,...) code$popfq$argc##n(state, ##__VA_ARGS__)
#		define code$popfq$argc00(state,_) code$popfq$argt$(state)
#		define code$popfq$argt$(state) bytes(9d)
#		define code$por(state,n,...) code$por$argc##n(state, ##__VA_ARGS__)
#		define code$por$argc02(state,a1,a2) code$por$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$por$argc02$1(...) code$por$argc02$2(__VA_ARGS__)
#		define code$por$argc02$2(state,t1,t2,a1,a2) code$por$argt$##t1##$##t2(state, a1,a2)
#		define code$por$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, eb, modrm$rm(_0, _1))
#		define code$por$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, eb, modrm$rm(_0, _1))
#		define code$por$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, eb, modrm$rr(_0, _1))
#		define code$por$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, eb, modrm$rm(_0, _1))
#		define code$por$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, eb, modrm$rm(_0, _1))
#		define code$por$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, eb, modrm$rr(_0, _1))
#		define code$prefetchnta(state,n,...) code$prefetchnta$argc##n(state, ##__VA_ARGS__)
#		define code$prefetchnta$argc01(state,a1) code$prefetchnta$argc01$1(state, operand$gettype(a1), a1)
#		define code$prefetchnta$argc01$1(...) code$prefetchnta$argc01$2(__VA_ARGS__)
#		define code$prefetchnta$argc01$2(state,t1,a1) code$prefetchnta$argt$##t1(state, a1)
#		define code$prefetchnta$argt$mem(state,_0) bytes(rex32m(_0) 0f, 18, modrm$0m(_0))
#		define code$prefetchnta$argt$mem08(state,_0) bytes(rex32m(_0) 0f, 18, modrm$0m(_0))
#		define code$prefetcht0(state,n,...) code$prefetcht0$argc##n(state, ##__VA_ARGS__)
#		define code$prefetcht0$argc01(state,a1) code$prefetcht0$argc01$1(state, operand$gettype(a1), a1)
#		define code$prefetcht0$argc01$1(...) code$prefetcht0$argc01$2(__VA_ARGS__)
#		define code$prefetcht0$argc01$2(state,t1,a1) code$prefetcht0$argt$##t1(state, a1)
#		define code$prefetcht0$argt$mem(state,_0) bytes(rex32m(_0) 0f, 18, modrm$1m(_0))
#		define code$prefetcht0$argt$mem08(state,_0) bytes(rex32m(_0) 0f, 18, modrm$1m(_0))
#		define code$prefetcht1(state,n,...) code$prefetcht1$argc##n(state, ##__VA_ARGS__)
#		define code$prefetcht1$argc01(state,a1) code$prefetcht1$argc01$1(state, operand$gettype(a1), a1)
#		define code$prefetcht1$argc01$1(...) code$prefetcht1$argc01$2(__VA_ARGS__)
#		define code$prefetcht1$argc01$2(state,t1,a1) code$prefetcht1$argt$##t1(state, a1)
#		define code$prefetcht1$argt$mem(state,_0) bytes(rex32m(_0) 0f, 18, modrm$2m(_0))
#		define code$prefetcht1$argt$mem08(state,_0) bytes(rex32m(_0) 0f, 18, modrm$2m(_0))
#		define code$prefetcht2(state,n,...) code$prefetcht2$argc##n(state, ##__VA_ARGS__)
#		define code$prefetcht2$argc01(state,a1) code$prefetcht2$argc01$1(state, operand$gettype(a1), a1)
#		define code$prefetcht2$argc01$1(...) code$prefetcht2$argc01$2(__VA_ARGS__)
#		define code$prefetcht2$argc01$2(state,t1,a1) code$prefetcht2$argt$##t1(state, a1)
#		define code$prefetcht2$argt$mem(state,_0) bytes(rex32m(_0) 0f, 18, modrm$3m(_0))
#		define code$prefetcht2$argt$mem08(state,_0) bytes(rex32m(_0) 0f, 18, modrm$3m(_0))
#		define code$prefetchw(state,n,...) code$prefetchw$argc##n(state, ##__VA_ARGS__)
#		define code$prefetchw$argc01(state,a1) code$prefetchw$argc01$1(state, operand$gettype(a1), a1)
#		define code$prefetchw$argc01$1(...) code$prefetchw$argc01$2(__VA_ARGS__)
#		define code$prefetchw$argc01$2(state,t1,a1) code$prefetchw$argt$##t1(state, a1)
#		define code$prefetchw$argt$mem(state,_0) bytes(rex32m(_0) 0f, 0d, modrm$1m(_0))
#		define code$prefetchw$argt$mem08(state,_0) bytes(rex32m(_0) 0f, 0d, modrm$1m(_0))
#		define code$prefix$bhnottaken(state,n,...) code$prefix$bhnottaken$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$bhnottaken$argc00(state,_) code$prefix$bhnottaken$argt$(state)
#		define code$prefix$bhnottaken$argt$(state) bytes(3e)
#		define code$prefix$bhtaken(state,n,...) code$prefix$bhtaken$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$bhtaken$argc00(state,_) code$prefix$bhtaken$argt$(state)
#		define code$prefix$bhtaken$argt$(state) bytes(2e)
#		define code$prefix$lock(state,n,...) code$prefix$lock$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$lock$argc00(state,_) code$prefix$lock$argt$(state)
#		define code$prefix$lock$argt$(state) bytes(f0)
#		define code$prefix$rep(state,n,...) code$prefix$rep$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$rep$argc00(state,_) code$prefix$rep$argt$(state)
#		define code$prefix$rep$argt$(state) bytes(f3)
#		define code$prefix$repe(state,n,...) code$prefix$repe$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$repe$argc00(state,_) code$prefix$repe$argt$(state)
#		define code$prefix$repe$argt$(state) bytes(f3)
#		define code$prefix$repne(state,n,...) code$prefix$repne$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$repne$argc00(state,_) code$prefix$repne$argt$(state)
#		define code$prefix$repne$argt$(state) bytes(f2)
#		define code$prefix$repnz(state,n,...) code$prefix$repnz$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$repnz$argc00(state,_) code$prefix$repnz$argt$(state)
#		define code$prefix$repnz$argt$(state) bytes(f2)
#		define code$prefix$repz(state,n,...) code$prefix$repz$argc##n(state, ##__VA_ARGS__)
#		define code$prefix$repz$argc00(state,_) code$prefix$repz$argt$(state)
#		define code$prefix$repz$argt$(state) bytes(f3)
#		define code$psadbw(state,n,...) code$psadbw$argc##n(state, ##__VA_ARGS__)
#		define code$psadbw$argc02(state,a1,a2) code$psadbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psadbw$argc02$1(...) code$psadbw$argc02$2(__VA_ARGS__)
#		define code$psadbw$argc02$2(state,t1,t2,a1,a2) code$psadbw$argt$##t1##$##t2(state, a1,a2)
#		define code$psadbw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f6, modrm$rm(_0, _1))
#		define code$psadbw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f6, modrm$rm(_0, _1))
#		define code$psadbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f6, modrm$rr(_0, _1))
#		define code$psadbw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f6, modrm$rm(_0, _1))
#		define code$psadbw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f6, modrm$rm(_0, _1))
#		define code$psadbw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f6, modrm$rr(_0, _1))
#		define code$pshufb(state,n,...) code$pshufb$argc##n(state, ##__VA_ARGS__)
#		define code$pshufb$argc02(state,a1,a2) code$pshufb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pshufb$argc02$1(...) code$pshufb$argc02$2(__VA_ARGS__)
#		define code$pshufb$argc02$2(state,t1,t2,a1,a2) code$pshufb$argt$##t1##$##t2(state, a1,a2)
#		define code$pshufb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 00, modrm$rm(_0, _1))
#		define code$pshufb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 00, modrm$rm(_0, _1))
#		define code$pshufb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 00, modrm$rr(_0, _1))
#		define code$pshufb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 00, modrm$rm(_0, _1))
#		define code$pshufb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 00, modrm$rm(_0, _1))
#		define code$pshufb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 00, modrm$rr(_0, _1))
#		define code$pshufd(state,n,...) code$pshufd$argc##n(state, ##__VA_ARGS__)
#		define code$pshufd$argc03(state,a1,a2,a3) code$pshufd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pshufd$argc03$1(...) code$pshufd$argc03$2(__VA_ARGS__)
#		define code$pshufd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pshufd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pshufd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshuflw(state,n,...) code$pshuflw$argc##n(state, ##__VA_ARGS__)
#		define code$pshuflw$argc03(state,a1,a2,a3) code$pshuflw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pshuflw$argc03$1(...) code$pshuflw$argc03$2(__VA_ARGS__)
#		define code$pshuflw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pshuflw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pshuflw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(f2, rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshuflw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(f2, rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshuflw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(f2, rex32rr(_1, _0) 0f, 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufw(state,n,...) code$pshufw$argc##n(state, ##__VA_ARGS__)
#		define code$pshufw$argc03(state,a1,a2,a3) code$pshufw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$pshufw$argc03$1(...) code$pshufw$argc03$2(__VA_ARGS__)
#		define code$pshufw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$pshufw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$pshufw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(f3, rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(f3, rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(f3, rex32rr(_1, _0) 0f, 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufw$argt$mmreg64$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufw$argt$mmreg64$mem64$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$pshufw$argt$mmreg64$mmreg64$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$psignb(state,n,...) code$psignb$argc##n(state, ##__VA_ARGS__)
#		define code$psignb$argc02(state,a1,a2) code$psignb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psignb$argc02$1(...) code$psignb$argc02$2(__VA_ARGS__)
#		define code$psignb$argc02$2(state,t1,t2,a1,a2) code$psignb$argt$##t1##$##t2(state, a1,a2)
#		define code$psignb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 08, modrm$rm(_0, _1))
#		define code$psignb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 08, modrm$rm(_0, _1))
#		define code$psignb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 08, modrm$rr(_0, _1))
#		define code$psignb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 08, modrm$rm(_0, _1))
#		define code$psignb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 08, modrm$rm(_0, _1))
#		define code$psignb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 08, modrm$rr(_0, _1))
#		define code$psignd(state,n,...) code$psignd$argc##n(state, ##__VA_ARGS__)
#		define code$psignd$argc02(state,a1,a2) code$psignd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psignd$argc02$1(...) code$psignd$argc02$2(__VA_ARGS__)
#		define code$psignd$argc02$2(state,t1,t2,a1,a2) code$psignd$argt$##t1##$##t2(state, a1,a2)
#		define code$psignd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 0a, modrm$rm(_0, _1))
#		define code$psignd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 0a, modrm$rm(_0, _1))
#		define code$psignd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 0a, modrm$rr(_0, _1))
#		define code$psignd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 0a, modrm$rm(_0, _1))
#		define code$psignd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 0a, modrm$rm(_0, _1))
#		define code$psignd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 0a, modrm$rr(_0, _1))
#		define code$psignw(state,n,...) code$psignw$argc##n(state, ##__VA_ARGS__)
#		define code$psignw$argc02(state,a1,a2) code$psignw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psignw$argc02$1(...) code$psignw$argc02$2(__VA_ARGS__)
#		define code$psignw$argc02$2(state,t1,t2,a1,a2) code$psignw$argt$##t1##$##t2(state, a1,a2)
#		define code$psignw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 09, modrm$rm(_0, _1))
#		define code$psignw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 09, modrm$rm(_0, _1))
#		define code$psignw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 09, modrm$rr(_0, _1))
#		define code$psignw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 09, modrm$rm(_0, _1))
#		define code$psignw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, 09, modrm$rm(_0, _1))
#		define code$psignw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, 09, modrm$rr(_0, _1))
#		define code$pslld(state,n,...) code$pslld$argc##n(state, ##__VA_ARGS__)
#		define code$pslld$argc02(state,a1,a2) code$pslld$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pslld$argc02$1(...) code$pslld$argc02$2(__VA_ARGS__)
#		define code$pslld$argc02$2(state,t1,t2,a1,a2) code$pslld$argt$##t1##$##t2(state, a1,a2)
#		define code$pslld$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 72, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$pslld$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f2, modrm$rm(_0, _1))
#		define code$pslld$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f2, modrm$rm(_0, _1))
#		define code$pslld$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f2, modrm$rr(_0, _1))
#		define code$pslld$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 72, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$pslld$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f2, modrm$rm(_0, _1))
#		define code$pslld$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f2, modrm$rm(_0, _1))
#		define code$pslld$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f2, modrm$rr(_0, _1))
#		define code$pslldq(state,n,...) code$pslldq$argc##n(state, ##__VA_ARGS__)
#		define code$pslldq$argc02(state,a1,a2) code$pslldq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pslldq$argc02$1(...) code$pslldq$argc02$2(__VA_ARGS__)
#		define code$pslldq$argc02$2(state,t1,t2,a1,a2) code$pslldq$argt$##t1##$##t2(state, a1,a2)
#		define code$pslldq$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 73, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psllq(state,n,...) code$psllq$argc##n(state, ##__VA_ARGS__)
#		define code$psllq$argc02(state,a1,a2) code$psllq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psllq$argc02$1(...) code$psllq$argc02$2(__VA_ARGS__)
#		define code$psllq$argc02$2(state,t1,t2,a1,a2) code$psllq$argt$##t1##$##t2(state, a1,a2)
#		define code$psllq$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 73, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psllq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f3, modrm$rm(_0, _1))
#		define code$psllq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f3, modrm$rm(_0, _1))
#		define code$psllq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f3, modrm$rr(_0, _1))
#		define code$psllq$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 73, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psllq$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f3, modrm$rm(_0, _1))
#		define code$psllq$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f3, modrm$rm(_0, _1))
#		define code$psllq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f3, modrm$rr(_0, _1))
#		define code$psllw(state,n,...) code$psllw$argc##n(state, ##__VA_ARGS__)
#		define code$psllw$argc02(state,a1,a2) code$psllw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psllw$argc02$1(...) code$psllw$argc02$2(__VA_ARGS__)
#		define code$psllw$argc02$2(state,t1,t2,a1,a2) code$psllw$argt$##t1##$##t2(state, a1,a2)
#		define code$psllw$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 71, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psllw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f1, modrm$rm(_0, _1))
#		define code$psllw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f1, modrm$rm(_0, _1))
#		define code$psllw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f1, modrm$rr(_0, _1))
#		define code$psllw$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 71, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psllw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f1, modrm$rm(_0, _1))
#		define code$psllw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f1, modrm$rm(_0, _1))
#		define code$psllw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f1, modrm$rr(_0, _1))
#		define code$psrad(state,n,...) code$psrad$argc##n(state, ##__VA_ARGS__)
#		define code$psrad$argc02(state,a1,a2) code$psrad$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psrad$argc02$1(...) code$psrad$argc02$2(__VA_ARGS__)
#		define code$psrad$argc02$2(state,t1,t2,a1,a2) code$psrad$argt$##t1##$##t2(state, a1,a2)
#		define code$psrad$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 72, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrad$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e2, modrm$rm(_0, _1))
#		define code$psrad$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e2, modrm$rm(_0, _1))
#		define code$psrad$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e2, modrm$rr(_0, _1))
#		define code$psrad$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 72, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrad$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e2, modrm$rm(_0, _1))
#		define code$psrad$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e2, modrm$rm(_0, _1))
#		define code$psrad$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e2, modrm$rr(_0, _1))
#		define code$psraw(state,n,...) code$psraw$argc##n(state, ##__VA_ARGS__)
#		define code$psraw$argc02(state,a1,a2) code$psraw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psraw$argc02$1(...) code$psraw$argc02$2(__VA_ARGS__)
#		define code$psraw$argc02$2(state,t1,t2,a1,a2) code$psraw$argt$##t1##$##t2(state, a1,a2)
#		define code$psraw$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 71, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psraw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e1, modrm$rm(_0, _1))
#		define code$psraw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e1, modrm$rm(_0, _1))
#		define code$psraw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e1, modrm$rr(_0, _1))
#		define code$psraw$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 71, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psraw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e1, modrm$rm(_0, _1))
#		define code$psraw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e1, modrm$rm(_0, _1))
#		define code$psraw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e1, modrm$rr(_0, _1))
#		define code$psrld(state,n,...) code$psrld$argc##n(state, ##__VA_ARGS__)
#		define code$psrld$argc02(state,a1,a2) code$psrld$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psrld$argc02$1(...) code$psrld$argc02$2(__VA_ARGS__)
#		define code$psrld$argc02$2(state,t1,t2,a1,a2) code$psrld$argt$##t1##$##t2(state, a1,a2)
#		define code$psrld$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 72, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrld$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d2, modrm$rm(_0, _1))
#		define code$psrld$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d2, modrm$rm(_0, _1))
#		define code$psrld$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d2, modrm$rr(_0, _1))
#		define code$psrld$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 72, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrld$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d2, modrm$rm(_0, _1))
#		define code$psrld$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d2, modrm$rm(_0, _1))
#		define code$psrld$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d2, modrm$rr(_0, _1))
#		define code$psrldq(state,n,...) code$psrldq$argc##n(state, ##__VA_ARGS__)
#		define code$psrldq$argc02(state,a1,a2) code$psrldq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psrldq$argc02$1(...) code$psrldq$argc02$2(__VA_ARGS__)
#		define code$psrldq$argc02$2(state,t1,t2,a1,a2) code$psrldq$argt$##t1##$##t2(state, a1,a2)
#		define code$psrldq$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 73, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrlq(state,n,...) code$psrlq$argc##n(state, ##__VA_ARGS__)
#		define code$psrlq$argc02(state,a1,a2) code$psrlq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psrlq$argc02$1(...) code$psrlq$argc02$2(__VA_ARGS__)
#		define code$psrlq$argc02$2(state,t1,t2,a1,a2) code$psrlq$argt$##t1##$##t2(state, a1,a2)
#		define code$psrlq$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 73, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrlq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d3, modrm$rm(_0, _1))
#		define code$psrlq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d3, modrm$rm(_0, _1))
#		define code$psrlq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d3, modrm$rr(_0, _1))
#		define code$psrlq$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 73, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrlq$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d3, modrm$rm(_0, _1))
#		define code$psrlq$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d3, modrm$rm(_0, _1))
#		define code$psrlq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d3, modrm$rr(_0, _1))
#		define code$psrlw(state,n,...) code$psrlw$argc##n(state, ##__VA_ARGS__)
#		define code$psrlw$argc02(state,a1,a2) code$psrlw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psrlw$argc02$1(...) code$psrlw$argc02$2(__VA_ARGS__)
#		define code$psrlw$argc02$2(state,t1,t2,a1,a2) code$psrlw$argt$##t1##$##t2(state, a1,a2)
#		define code$psrlw$argt$mmreg128$imm08(state,_0,_1) bytes(66, rex32r(_0) 0f, 71, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrlw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d1, modrm$rm(_0, _1))
#		define code$psrlw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d1, modrm$rm(_0, _1))
#		define code$psrlw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d1, modrm$rr(_0, _1))
#		define code$psrlw$argt$mmreg64$imm08(state,_0,_1) bytes(rex32r(_0) 0f, 71, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$psrlw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d1, modrm$rm(_0, _1))
#		define code$psrlw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d1, modrm$rm(_0, _1))
#		define code$psrlw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d1, modrm$rr(_0, _1))
#		define code$psubb(state,n,...) code$psubb$argc##n(state, ##__VA_ARGS__)
#		define code$psubb$argc02(state,a1,a2) code$psubb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubb$argc02$1(...) code$psubb$argc02$2(__VA_ARGS__)
#		define code$psubb$argc02$2(state,t1,t2,a1,a2) code$psubb$argt$##t1##$##t2(state, a1,a2)
#		define code$psubb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f8, modrm$rm(_0, _1))
#		define code$psubb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f8, modrm$rm(_0, _1))
#		define code$psubb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f8, modrm$rr(_0, _1))
#		define code$psubb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f8, modrm$rm(_0, _1))
#		define code$psubb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f8, modrm$rm(_0, _1))
#		define code$psubb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f8, modrm$rr(_0, _1))
#		define code$psubd(state,n,...) code$psubd$argc##n(state, ##__VA_ARGS__)
#		define code$psubd$argc02(state,a1,a2) code$psubd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubd$argc02$1(...) code$psubd$argc02$2(__VA_ARGS__)
#		define code$psubd$argc02$2(state,t1,t2,a1,a2) code$psubd$argt$##t1##$##t2(state, a1,a2)
#		define code$psubd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fa, modrm$rm(_0, _1))
#		define code$psubd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fa, modrm$rm(_0, _1))
#		define code$psubd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, fa, modrm$rr(_0, _1))
#		define code$psubd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fa, modrm$rm(_0, _1))
#		define code$psubd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fa, modrm$rm(_0, _1))
#		define code$psubd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, fa, modrm$rr(_0, _1))
#		define code$psubq(state,n,...) code$psubq$argc##n(state, ##__VA_ARGS__)
#		define code$psubq$argc02(state,a1,a2) code$psubq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubq$argc02$1(...) code$psubq$argc02$2(__VA_ARGS__)
#		define code$psubq$argc02$2(state,t1,t2,a1,a2) code$psubq$argt$##t1##$##t2(state, a1,a2)
#		define code$psubq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fb, modrm$rm(_0, _1))
#		define code$psubq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, fb, modrm$rm(_0, _1))
#		define code$psubq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, fb, modrm$rr(_0, _1))
#		define code$psubq$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fb, modrm$rm(_0, _1))
#		define code$psubq$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, fb, modrm$rm(_0, _1))
#		define code$psubq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, fb, modrm$rr(_0, _1))
#		define code$psubsb(state,n,...) code$psubsb$argc##n(state, ##__VA_ARGS__)
#		define code$psubsb$argc02(state,a1,a2) code$psubsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubsb$argc02$1(...) code$psubsb$argc02$2(__VA_ARGS__)
#		define code$psubsb$argc02$2(state,t1,t2,a1,a2) code$psubsb$argt$##t1##$##t2(state, a1,a2)
#		define code$psubsb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e8, modrm$rm(_0, _1))
#		define code$psubsb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e8, modrm$rm(_0, _1))
#		define code$psubsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e8, modrm$rr(_0, _1))
#		define code$psubsb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e8, modrm$rm(_0, _1))
#		define code$psubsb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e8, modrm$rm(_0, _1))
#		define code$psubsb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e8, modrm$rr(_0, _1))
#		define code$psubsw(state,n,...) code$psubsw$argc##n(state, ##__VA_ARGS__)
#		define code$psubsw$argc02(state,a1,a2) code$psubsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubsw$argc02$1(...) code$psubsw$argc02$2(__VA_ARGS__)
#		define code$psubsw$argc02$2(state,t1,t2,a1,a2) code$psubsw$argt$##t1##$##t2(state, a1,a2)
#		define code$psubsw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e9, modrm$rm(_0, _1))
#		define code$psubsw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, e9, modrm$rm(_0, _1))
#		define code$psubsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, e9, modrm$rr(_0, _1))
#		define code$psubsw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e9, modrm$rm(_0, _1))
#		define code$psubsw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, e9, modrm$rm(_0, _1))
#		define code$psubsw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, e9, modrm$rr(_0, _1))
#		define code$psubusb(state,n,...) code$psubusb$argc##n(state, ##__VA_ARGS__)
#		define code$psubusb$argc02(state,a1,a2) code$psubusb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubusb$argc02$1(...) code$psubusb$argc02$2(__VA_ARGS__)
#		define code$psubusb$argc02$2(state,t1,t2,a1,a2) code$psubusb$argt$##t1##$##t2(state, a1,a2)
#		define code$psubusb$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d8, modrm$rm(_0, _1))
#		define code$psubusb$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d8, modrm$rm(_0, _1))
#		define code$psubusb$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d8, modrm$rr(_0, _1))
#		define code$psubusb$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d8, modrm$rm(_0, _1))
#		define code$psubusb$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d8, modrm$rm(_0, _1))
#		define code$psubusb$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d8, modrm$rr(_0, _1))
#		define code$psubusw(state,n,...) code$psubusw$argc##n(state, ##__VA_ARGS__)
#		define code$psubusw$argc02(state,a1,a2) code$psubusw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubusw$argc02$1(...) code$psubusw$argc02$2(__VA_ARGS__)
#		define code$psubusw$argc02$2(state,t1,t2,a1,a2) code$psubusw$argt$##t1##$##t2(state, a1,a2)
#		define code$psubusw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d9, modrm$rm(_0, _1))
#		define code$psubusw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, d9, modrm$rm(_0, _1))
#		define code$psubusw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, d9, modrm$rr(_0, _1))
#		define code$psubusw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d9, modrm$rm(_0, _1))
#		define code$psubusw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, d9, modrm$rm(_0, _1))
#		define code$psubusw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, d9, modrm$rr(_0, _1))
#		define code$psubw(state,n,...) code$psubw$argc##n(state, ##__VA_ARGS__)
#		define code$psubw$argc02(state,a1,a2) code$psubw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$psubw$argc02$1(...) code$psubw$argc02$2(__VA_ARGS__)
#		define code$psubw$argc02$2(state,t1,t2,a1,a2) code$psubw$argt$##t1##$##t2(state, a1,a2)
#		define code$psubw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f9, modrm$rm(_0, _1))
#		define code$psubw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, f9, modrm$rm(_0, _1))
#		define code$psubw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, f9, modrm$rr(_0, _1))
#		define code$psubw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f9, modrm$rm(_0, _1))
#		define code$psubw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, f9, modrm$rm(_0, _1))
#		define code$psubw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, f9, modrm$rr(_0, _1))
#		define code$ptest(state,n,...) code$ptest$argc##n(state, ##__VA_ARGS__)
#		define code$ptest$argc02(state,a1,a2) code$ptest$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$ptest$argc02$1(...) code$ptest$argc02$2(__VA_ARGS__)
#		define code$ptest$argc02$2(state,t1,t2,a1,a2) code$ptest$argt$##t1##$##t2(state, a1,a2)
#		define code$ptest$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 17, modrm$rm(_0, _1))
#		define code$ptest$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 38, 17, modrm$rm(_0, _1))
#		define code$ptest$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 38, 17, modrm$rr(_0, _1))
#		define code$ptwrite(state,n,...) code$ptwrite$argc##n(state, ##__VA_ARGS__)
#		define code$ptwrite$argc01(state,a1) code$ptwrite$argc01$1(state, operand$gettype(a1), a1)
#		define code$ptwrite$argc01$1(...) code$ptwrite$argc01$2(__VA_ARGS__)
#		define code$ptwrite$argc01$2(state,t1,a1) code$ptwrite$argt$##t1(state, a1)
#		define code$ptwrite$argt$reg32(state,_0) bytes(f3, rex32r(_0) 0f, ae, modrm$4r(_0))
#		define code$ptwrite$argt$reg64(state,_0) bytes(f3, rex64r(_0) 0f, ae, modrm$4r(_0))
#		define code$punpckhbw(state,n,...) code$punpckhbw$argc##n(state, ##__VA_ARGS__)
#		define code$punpckhbw$argc02(state,a1,a2) code$punpckhbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpckhbw$argc02$1(...) code$punpckhbw$argc02$2(__VA_ARGS__)
#		define code$punpckhbw$argc02$2(state,t1,t2,a1,a2) code$punpckhbw$argt$##t1##$##t2(state, a1,a2)
#		define code$punpckhbw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 68, modrm$rm(_0, _1))
#		define code$punpckhbw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 68, modrm$rm(_0, _1))
#		define code$punpckhbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 68, modrm$rr(_0, _1))
#		define code$punpckhbw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 68, modrm$rm(_0, _1))
#		define code$punpckhbw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 68, modrm$rm(_0, _1))
#		define code$punpckhbw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 68, modrm$rr(_0, _1))
#		define code$punpckhdq(state,n,...) code$punpckhdq$argc##n(state, ##__VA_ARGS__)
#		define code$punpckhdq$argc02(state,a1,a2) code$punpckhdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpckhdq$argc02$1(...) code$punpckhdq$argc02$2(__VA_ARGS__)
#		define code$punpckhdq$argc02$2(state,t1,t2,a1,a2) code$punpckhdq$argt$##t1##$##t2(state, a1,a2)
#		define code$punpckhdq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6a, modrm$rm(_0, _1))
#		define code$punpckhdq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6a, modrm$rm(_0, _1))
#		define code$punpckhdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 6a, modrm$rr(_0, _1))
#		define code$punpckhdq$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 6a, modrm$rm(_0, _1))
#		define code$punpckhdq$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 6a, modrm$rm(_0, _1))
#		define code$punpckhdq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 6a, modrm$rr(_0, _1))
#		define code$punpckhqdq(state,n,...) code$punpckhqdq$argc##n(state, ##__VA_ARGS__)
#		define code$punpckhqdq$argc02(state,a1,a2) code$punpckhqdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpckhqdq$argc02$1(...) code$punpckhqdq$argc02$2(__VA_ARGS__)
#		define code$punpckhqdq$argc02$2(state,t1,t2,a1,a2) code$punpckhqdq$argt$##t1##$##t2(state, a1,a2)
#		define code$punpckhqdq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6d, modrm$rm(_0, _1))
#		define code$punpckhqdq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6d, modrm$rm(_0, _1))
#		define code$punpckhqdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 6d, modrm$rr(_0, _1))
#		define code$punpckhwd(state,n,...) code$punpckhwd$argc##n(state, ##__VA_ARGS__)
#		define code$punpckhwd$argc02(state,a1,a2) code$punpckhwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpckhwd$argc02$1(...) code$punpckhwd$argc02$2(__VA_ARGS__)
#		define code$punpckhwd$argc02$2(state,t1,t2,a1,a2) code$punpckhwd$argt$##t1##$##t2(state, a1,a2)
#		define code$punpckhwd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 69, modrm$rm(_0, _1))
#		define code$punpckhwd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 69, modrm$rm(_0, _1))
#		define code$punpckhwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 69, modrm$rr(_0, _1))
#		define code$punpckhwd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 69, modrm$rm(_0, _1))
#		define code$punpckhwd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 69, modrm$rm(_0, _1))
#		define code$punpckhwd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 69, modrm$rr(_0, _1))
#		define code$punpcklbw(state,n,...) code$punpcklbw$argc##n(state, ##__VA_ARGS__)
#		define code$punpcklbw$argc02(state,a1,a2) code$punpcklbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpcklbw$argc02$1(...) code$punpcklbw$argc02$2(__VA_ARGS__)
#		define code$punpcklbw$argc02$2(state,t1,t2,a1,a2) code$punpcklbw$argt$##t1##$##t2(state, a1,a2)
#		define code$punpcklbw$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 60, modrm$rm(_0, _1))
#		define code$punpcklbw$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 60, modrm$rm(_0, _1))
#		define code$punpcklbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 60, modrm$rr(_0, _1))
#		define code$punpcklbw$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 60, modrm$rm(_0, _1))
#		define code$punpcklbw$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 60, modrm$rm(_0, _1))
#		define code$punpcklbw$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 60, modrm$rr(_0, _1))
#		define code$punpckldq(state,n,...) code$punpckldq$argc##n(state, ##__VA_ARGS__)
#		define code$punpckldq$argc02(state,a1,a2) code$punpckldq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpckldq$argc02$1(...) code$punpckldq$argc02$2(__VA_ARGS__)
#		define code$punpckldq$argc02$2(state,t1,t2,a1,a2) code$punpckldq$argt$##t1##$##t2(state, a1,a2)
#		define code$punpckldq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 62, modrm$rm(_0, _1))
#		define code$punpckldq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 62, modrm$rm(_0, _1))
#		define code$punpckldq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 62, modrm$rr(_0, _1))
#		define code$punpckldq$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 62, modrm$rm(_0, _1))
#		define code$punpckldq$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 62, modrm$rm(_0, _1))
#		define code$punpckldq$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 62, modrm$rr(_0, _1))
#		define code$punpcklqdq(state,n,...) code$punpcklqdq$argc##n(state, ##__VA_ARGS__)
#		define code$punpcklqdq$argc02(state,a1,a2) code$punpcklqdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpcklqdq$argc02$1(...) code$punpcklqdq$argc02$2(__VA_ARGS__)
#		define code$punpcklqdq$argc02$2(state,t1,t2,a1,a2) code$punpcklqdq$argt$##t1##$##t2(state, a1,a2)
#		define code$punpcklqdq$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6c, modrm$rm(_0, _1))
#		define code$punpcklqdq$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 6c, modrm$rm(_0, _1))
#		define code$punpcklqdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 6c, modrm$rr(_0, _1))
#		define code$punpcklwd(state,n,...) code$punpcklwd$argc##n(state, ##__VA_ARGS__)
#		define code$punpcklwd$argc02(state,a1,a2) code$punpcklwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$punpcklwd$argc02$1(...) code$punpcklwd$argc02$2(__VA_ARGS__)
#		define code$punpcklwd$argc02$2(state,t1,t2,a1,a2) code$punpcklwd$argt$##t1##$##t2(state, a1,a2)
#		define code$punpcklwd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 61, modrm$rm(_0, _1))
#		define code$punpcklwd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 61, modrm$rm(_0, _1))
#		define code$punpcklwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 61, modrm$rr(_0, _1))
#		define code$punpcklwd$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 61, modrm$rm(_0, _1))
#		define code$punpcklwd$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 61, modrm$rm(_0, _1))
#		define code$punpcklwd$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 61, modrm$rr(_0, _1))
#		define code$push(state,n,...) code$push$argc##n(state, ##__VA_ARGS__)
#		define code$push$argc01(state,a1) code$push$argc01$1(state, operand$gettype(a1), a1)
#		define code$push$argc01$1(...) code$push$argc01$2(__VA_ARGS__)
#		define code$push$argc01$2(state,t1,a1) code$push$argt$##t1(state, a1)
#		define code$push$argt$imm08(state,_0) bytes(6a, i08$bytes$le(which$imm08(state, _0)))
#		define code$push$argt$imm32(state,_0) bytes(68, i32$bytes$le(which$imm32(state, _0)))
#		define code$push$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for push(mem)"))
#		define code$push$argt$mem16(state,_0) bytes(rex16m(_0) ff, modrm$6m(_0))
#		define code$push$argt$mem64(state,_0) bytes(rex32m(_0) ff, modrm$6m(_0))
#		define code$push$argt$reg16(state,_0) bytes(rex16r(_0) opcode$addregid7(50, _0))
#		define code$push$argt$reg64(state,_0) bytes(/* no REX.W */rex32r(_0) opcode$addregid7(50, _0))
#		define code$pushf(state,n,...) code$pushf$argc##n(state, ##__VA_ARGS__)
#		define code$pushf$argc00(state,_) code$pushf$argt$(state)
#		define code$pushf$argt$(state) bytes(66, 9c)
#		define code$pushfq(state,n,...) code$pushfq$argc##n(state, ##__VA_ARGS__)
#		define code$pushfq$argc00(state,_) code$pushfq$argt$(state)
#		define code$pushfq$argt$(state) bytes(9c)
#		define code$pxor(state,n,...) code$pxor$argc##n(state, ##__VA_ARGS__)
#		define code$pxor$argc02(state,a1,a2) code$pxor$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$pxor$argc02$1(...) code$pxor$argc02$2(__VA_ARGS__)
#		define code$pxor$argc02$2(state,t1,t2,a1,a2) code$pxor$argt$##t1##$##t2(state, a1,a2)
#		define code$pxor$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ef, modrm$rm(_0, _1))
#		define code$pxor$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, ef, modrm$rm(_0, _1))
#		define code$pxor$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, ef, modrm$rr(_0, _1))
#		define code$pxor$argt$mmreg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ef, modrm$rm(_0, _1))
#		define code$pxor$argt$mmreg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, ef, modrm$rm(_0, _1))
#		define code$pxor$argt$mmreg64$mmreg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, ef, modrm$rr(_0, _1))
#		define code$rawbyte(state,n,...) code$rawbyte$argc##n(state, ##__VA_ARGS__)
#		define code$rawbyte$argc01(state,a1) code$rawbyte$argc01$1(state, operand$gettype(a1), a1)
#		define code$rawbyte$argc01$1(...) code$rawbyte$argc01$2(__VA_ARGS__)
#		define code$rawbyte$argc01$2(state,t1,a1) code$rawbyte$argt$##t1(state, a1)
#		define code$rawbyte$argt$imm08(state,_0) bytes(i08$bytes$le(which$imm08(state, _0)))
#		define code$rawint(state,n,...) code$rawint$argc##n(state, ##__VA_ARGS__)
#		define code$rawint$argc01(state,a1) code$rawint$argc01$1(state, operand$gettype(a1), a1)
#		define code$rawint$argc01$1(...) code$rawint$argc01$2(__VA_ARGS__)
#		define code$rawint$argc01$2(state,t1,a1) code$rawint$argt$##t1(state, a1)
#		define code$rawint$argt$imm08(state,_0) bytes(cd, i08$bytes$le(which$imm08(state, _0)))
#		define code$rcl(state,n,...) code$rcl$argc##n(state, ##__VA_ARGS__)
#		define code$rcl$argc02(state,a1,a2) code$rcl$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$rcl$argc02$1(...) code$rcl$argc02$2(__VA_ARGS__)
#		define code$rcl$argc02$2(state,t1,t2,a1,a2) code$rcl$argt$##t1##$##t2(state, a1,a2)
#		define code$rcl$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for rcl(mem, imm08)"))
#		define code$rcl$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for rcl(mem, reg08)"))
#		define code$rcl$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$2m(_0)), (c0, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$2m(_0) assert$is$cl(_1))
#		define code$rcl$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$2m(_0)), (c1, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$2m(_0) assert$is$cl(_1))
#		define code$rcl$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$2m(_0)), (c1, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$2m(_0) assert$is$cl(_1))
#		define code$rcl$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$2m(_0)), (c1, modrm$2m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$2m(_0) assert$is$cl(_1))
#		define code$rcl$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$2r(_0)), (c0, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$2r(_0) assert$is$cl(_1))
#		define code$rcl$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$2r(_0)), (c1, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$2r(_0) assert$is$cl(_1))
#		define code$rcl$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$2r(_0)), (c1, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$2r(_0) assert$is$cl(_1))
#		define code$rcl$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$2r(_0)), (c1, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcl$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$2r(_0) assert$is$cl(_1))
#		define code$rcpps(state,n,...) code$rcpps$argc##n(state, ##__VA_ARGS__)
#		define code$rcpps$argc02(state,a1,a2) code$rcpps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$rcpps$argc02$1(...) code$rcpps$argc02$2(__VA_ARGS__)
#		define code$rcpps$argc02$2(state,t1,t2,a1,a2) code$rcpps$argt$##t1##$##t2(state, a1,a2)
#		define code$rcpps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 53, modrm$rm(_0, _1))
#		define code$rcpps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 53, modrm$rm(_0, _1))
#		define code$rcpps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 53, modrm$rr(_0, _1))
#		define code$rcpss(state,n,...) code$rcpss$argc##n(state, ##__VA_ARGS__)
#		define code$rcpss$argc02(state,a1,a2) code$rcpss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$rcpss$argc02$1(...) code$rcpss$argc02$2(__VA_ARGS__)
#		define code$rcpss$argc02$2(state,t1,t2,a1,a2) code$rcpss$argt$##t1##$##t2(state, a1,a2)
#		define code$rcpss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 53, modrm$rm(_0, _1))
#		define code$rcpss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 53, modrm$rm(_0, _1))
#		define code$rcpss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 53, modrm$rr(_0, _1))
#		define code$rcr(state,n,...) code$rcr$argc##n(state, ##__VA_ARGS__)
#		define code$rcr$argc02(state,a1,a2) code$rcr$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$rcr$argc02$1(...) code$rcr$argc02$2(__VA_ARGS__)
#		define code$rcr$argc02$2(state,t1,t2,a1,a2) code$rcr$argt$##t1##$##t2(state, a1,a2)
#		define code$rcr$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for rcr(mem, imm08)"))
#		define code$rcr$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for rcr(mem, reg08)"))
#		define code$rcr$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$3m(_0)), (c0, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$3m(_0) assert$is$cl(_1))
#		define code$rcr$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$3m(_0)), (c1, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$3m(_0) assert$is$cl(_1))
#		define code$rcr$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$3m(_0)), (c1, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$3m(_0) assert$is$cl(_1))
#		define code$rcr$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$3m(_0)), (c1, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$3m(_0) assert$is$cl(_1))
#		define code$rcr$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$3r(_0)), (c0, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$3r(_0) assert$is$cl(_1))
#		define code$rcr$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$3r(_0)), (c1, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$3r(_0) assert$is$cl(_1))
#		define code$rcr$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$3r(_0)), (c1, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$3r(_0) assert$is$cl(_1))
#		define code$rcr$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$3r(_0)), (c1, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rcr$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$3r(_0) assert$is$cl(_1))
#		define code$rdfsbase(state,n,...) code$rdfsbase$argc##n(state, ##__VA_ARGS__)
#		define code$rdfsbase$argc01(state,a1) code$rdfsbase$argc01$1(state, operand$gettype(a1), a1)
#		define code$rdfsbase$argc01$1(...) code$rdfsbase$argc01$2(__VA_ARGS__)
#		define code$rdfsbase$argc01$2(state,t1,a1) code$rdfsbase$argt$##t1(state, a1)
#		define code$rdfsbase$argt$reg32(state,_0) bytes(f3, rex32r(_0) 0f, ae, modrm$0r(_0))
#		define code$rdfsbase$argt$reg64(state,_0) bytes(f3, rex64r(_0) 0f, ae, modrm$0r(_0))
#		define code$rdgsbase(state,n,...) code$rdgsbase$argc##n(state, ##__VA_ARGS__)
#		define code$rdgsbase$argc01(state,a1) code$rdgsbase$argc01$1(state, operand$gettype(a1), a1)
#		define code$rdgsbase$argc01$1(...) code$rdgsbase$argc01$2(__VA_ARGS__)
#		define code$rdgsbase$argc01$2(state,t1,a1) code$rdgsbase$argt$##t1(state, a1)
#		define code$rdgsbase$argt$reg32(state,_0) bytes(f3, rex32r(_0) 0f, ae, modrm$1r(_0))
#		define code$rdgsbase$argt$reg64(state,_0) bytes(f3, rex64r(_0) 0f, ae, modrm$1r(_0))
#		define code$rdmsr(state,n,...) code$rdmsr$argc##n(state, ##__VA_ARGS__)
#		define code$rdmsr$argc00(state,_) code$rdmsr$argt$(state)
#		define code$rdmsr$argt$(state) bytes(0f, 32)
#		define code$rdpid(state,n,...) code$rdpid$argc##n(state, ##__VA_ARGS__)
#		define code$rdpid$argc01(state,a1) code$rdpid$argc01$1(state, operand$gettype(a1), a1)
#		define code$rdpid$argc01$1(...) code$rdpid$argc01$2(__VA_ARGS__)
#		define code$rdpid$argc01$2(state,t1,a1) code$rdpid$argt$##t1(state, a1)
#		define code$rdpid$argt$reg64(state,_0) bytes(f3, /* no rex.W */rex32r(_0) 0f, c7, modrm$7r(_0))
#		define code$rdpkru(state,n,...) code$rdpkru$argc##n(state, ##__VA_ARGS__)
#		define code$rdpkru$argc00(state,_) code$rdpkru$argt$(state)
#		define code$rdpkru$argt$(state) bytes(0f, 01, ee)
#		define code$rdpmc(state,n,...) code$rdpmc$argc##n(state, ##__VA_ARGS__)
#		define code$rdpmc$argc00(state,_) code$rdpmc$argt$(state)
#		define code$rdpmc$argt$(state) bytes(0f, 33)
#		define code$rdrand(state,n,...) code$rdrand$argc##n(state, ##__VA_ARGS__)
#		define code$rdrand$argc01(state,a1) code$rdrand$argc01$1(state, operand$gettype(a1), a1)
#		define code$rdrand$argc01$1(...) code$rdrand$argc01$2(__VA_ARGS__)
#		define code$rdrand$argc01$2(state,t1,a1) code$rdrand$argt$##t1(state, a1)
#		define code$rdrand$argt$reg16(state,_0) bytes(rex16r(_0) 0f, c7, modrm$6r(_0))
#		define code$rdrand$argt$reg32(state,_0) bytes(rex32r(_0) 0f, c7, modrm$6r(_0))
#		define code$rdrand$argt$reg64(state,_0) bytes(rex64r(_0) 0f, c7, modrm$6r(_0))
#		define code$rdseed(state,n,...) code$rdseed$argc##n(state, ##__VA_ARGS__)
#		define code$rdseed$argc01(state,a1) code$rdseed$argc01$1(state, operand$gettype(a1), a1)
#		define code$rdseed$argc01$1(...) code$rdseed$argc01$2(__VA_ARGS__)
#		define code$rdseed$argc01$2(state,t1,a1) code$rdseed$argt$##t1(state, a1)
#		define code$rdseed$argt$reg16(state,_0) bytes(rex16r(_0) 0f, c7, modrm$7r(_0))
#		define code$rdseed$argt$reg32(state,_0) bytes(rex32r(_0) 0f, c7, modrm$7r(_0))
#		define code$rdseed$argt$reg64(state,_0) bytes(rex64r(_0) 0f, c7, modrm$7r(_0))
#		define code$rdsspd(state,n,...) code$rdsspd$argc##n(state, ##__VA_ARGS__)
#		define code$rdsspd$argc01(state,a1) code$rdsspd$argc01$1(state, operand$gettype(a1), a1)
#		define code$rdsspd$argc01$1(...) code$rdsspd$argc01$2(__VA_ARGS__)
#		define code$rdsspd$argc01$2(state,t1,a1) code$rdsspd$argt$##t1(state, a1)
#		define code$rdsspd$argt$reg32(state,_0) bytes(f3, rex32r(_0) 0f, 1e, modrm$1r(_0))
#		define code$rdsspq(state,n,...) code$rdsspq$argc##n(state, ##__VA_ARGS__)
#		define code$rdsspq$argc01(state,a1) code$rdsspq$argc01$1(state, operand$gettype(a1), a1)
#		define code$rdsspq$argc01$1(...) code$rdsspq$argc01$2(__VA_ARGS__)
#		define code$rdsspq$argc01$2(state,t1,a1) code$rdsspq$argt$##t1(state, a1)
#		define code$rdsspq$argt$reg64(state,_0) bytes(f3, rex64r(_0) 0f, 1e, modrm$1r(_0))
#		define code$rdtsc(state,n,...) code$rdtsc$argc##n(state, ##__VA_ARGS__)
#		define code$rdtsc$argc00(state,_) code$rdtsc$argt$(state)
#		define code$rdtsc$argt$(state) bytes(0f, 31)
#		define code$rdtscp(state,n,...) code$rdtscp$argc##n(state, ##__VA_ARGS__)
#		define code$rdtscp$argc00(state,_) code$rdtscp$argt$(state)
#		define code$rdtscp$argt$(state) bytes(0f, 01, f9)
#		define code$ret(state,n,...) code$ret$argc##n(state, ##__VA_ARGS__)
#		define code$ret$argc00(state,_) code$ret$argt$(state)
#		define code$ret$argc01(state,a1) code$ret$argc01$1(state, operand$gettype(a1), a1)
#		define code$ret$argc01$1(...) code$ret$argc01$2(__VA_ARGS__)
#		define code$ret$argc01$2(state,t1,a1) code$ret$argt$##t1(state, a1)
#		define code$ret$argt$(state) bytes(c3)
#		define code$ret$argt$imm16(state,_0) bytes(c2, i16$bytes$le(which$imm16(state, _0)))
#		define code$rol(state,n,...) code$rol$argc##n(state, ##__VA_ARGS__)
#		define code$rol$argc02(state,a1,a2) code$rol$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$rol$argc02$1(...) code$rol$argc02$2(__VA_ARGS__)
#		define code$rol$argc02$2(state,t1,t2,a1,a2) code$rol$argt$##t1##$##t2(state, a1,a2)
#		define code$rol$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for rol(mem, imm08)"))
#		define code$rol$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for rol(mem, reg08)"))
#		define code$rol$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$0m(_0)), (c0, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$0m(_0) assert$is$cl(_1))
#		define code$rol$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$0m(_0)), (c1, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$0m(_0) assert$is$cl(_1))
#		define code$rol$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$0m(_0)), (c1, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$0m(_0) assert$is$cl(_1))
#		define code$rol$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$0m(_0)), (c1, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$0m(_0) assert$is$cl(_1))
#		define code$rol$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$0r(_0)), (c0, modrm$0r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$0r(_0) assert$is$cl(_1))
#		define code$rol$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$0r(_0)), (c1, modrm$0r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$0r(_0) assert$is$cl(_1))
#		define code$rol$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$0r(_0)), (c1, modrm$0r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$0r(_0) assert$is$cl(_1))
#		define code$rol$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$0r(_0)), (c1, modrm$0r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$rol$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$0r(_0) assert$is$cl(_1))
#		define code$ror(state,n,...) code$ror$argc##n(state, ##__VA_ARGS__)
#		define code$ror$argc02(state,a1,a2) code$ror$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$ror$argc02$1(...) code$ror$argc02$2(__VA_ARGS__)
#		define code$ror$argc02$2(state,t1,t2,a1,a2) code$ror$argt$##t1##$##t2(state, a1,a2)
#		define code$ror$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for ror(mem, imm08)"))
#		define code$ror$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for ror(mem, reg08)"))
#		define code$ror$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$1m(_0)), (c0, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$1m(_0) assert$is$cl(_1))
#		define code$ror$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$1m(_0)), (c1, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$1m(_0) assert$is$cl(_1))
#		define code$ror$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$1m(_0)), (c1, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$1m(_0) assert$is$cl(_1))
#		define code$ror$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$1m(_0)), (c1, modrm$1m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$1m(_0) assert$is$cl(_1))
#		define code$ror$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$1r(_0)), (c0, modrm$1r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$1r(_0) assert$is$cl(_1))
#		define code$ror$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$1r(_0)), (c1, modrm$1r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$1r(_0) assert$is$cl(_1))
#		define code$ror$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$1r(_0)), (c1, modrm$1r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$1r(_0) assert$is$cl(_1))
#		define code$ror$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$1r(_0)), (c1, modrm$1r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$ror$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$1r(_0) assert$is$cl(_1))
#		define code$rorx(state,n,...) code$rorx$argc##n(state, ##__VA_ARGS__)
#		define code$rorx$argc03(state,a1,a2,a3) code$rorx$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$rorx$argc03$1(...) code$rorx$argc03$2(__VA_ARGS__)
#		define code$rorx$argc03$2(state,t1,t2,t3,a1,a2,a3) code$rorx$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$rorx$argt$reg32$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f3a, vex$w0, _0, _1), f0, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$rorx$argt$reg32$mem32$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f3a, vex$w0, _0, _1), f0, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$rorx$argt$reg32$reg32$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$lz, vex$pp$f2, vex$mmmmm$0f3a, vex$w0, _0, _1), f0, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$rorx$argt$reg64$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f3a, vex$w1, _0, _1), f0, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$rorx$argt$reg64$mem64$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f3a, vex$w1, _0, _1), f0, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$rorx$argt$reg64$reg64$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$lz, vex$pp$f2, vex$mmmmm$0f3a, vex$w1, _0, _1), f0, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundpd(state,n,...) code$roundpd$argc##n(state, ##__VA_ARGS__)
#		define code$roundpd$argc03(state,a1,a2,a3) code$roundpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$roundpd$argc03$1(...) code$roundpd$argc03$2(__VA_ARGS__)
#		define code$roundpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$roundpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$roundpd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 09, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundpd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 09, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundpd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 09, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundps(state,n,...) code$roundps$argc##n(state, ##__VA_ARGS__)
#		define code$roundps$argc03(state,a1,a2,a3) code$roundps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$roundps$argc03$1(...) code$roundps$argc03$2(__VA_ARGS__)
#		define code$roundps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$roundps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$roundps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 08, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 08, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 08, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundsd(state,n,...) code$roundsd$argc##n(state, ##__VA_ARGS__)
#		define code$roundsd$argc03(state,a1,a2,a3) code$roundsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$roundsd$argc03$1(...) code$roundsd$argc03$2(__VA_ARGS__)
#		define code$roundsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$roundsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$roundsd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundsd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundsd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 0b, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundss(state,n,...) code$roundss$argc##n(state, ##__VA_ARGS__)
#		define code$roundss$argc03(state,a1,a2,a3) code$roundss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$roundss$argc03$1(...) code$roundss$argc03$2(__VA_ARGS__)
#		define code$roundss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$roundss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$roundss$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0a, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundss$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, 3a, 0a, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$roundss$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, 3a, 0a, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$rsm(state,n,...) code$rsm$argc##n(state, ##__VA_ARGS__)
#		define code$rsm$argc00(state,_) code$rsm$argt$(state)
#		define code$rsm$argt$(state) bytes(0f, aa)
#		define code$rsqrtps(state,n,...) code$rsqrtps$argc##n(state, ##__VA_ARGS__)
#		define code$rsqrtps$argc02(state,a1,a2) code$rsqrtps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$rsqrtps$argc02$1(...) code$rsqrtps$argc02$2(__VA_ARGS__)
#		define code$rsqrtps$argc02$2(state,t1,t2,a1,a2) code$rsqrtps$argt$##t1##$##t2(state, a1,a2)
#		define code$rsqrtps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 52, modrm$rm(_0, _1))
#		define code$rsqrtps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 52, modrm$rm(_0, _1))
#		define code$rsqrtps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 52, modrm$rr(_0, _1))
#		define code$rsqrtss(state,n,...) code$rsqrtss$argc##n(state, ##__VA_ARGS__)
#		define code$rsqrtss$argc02(state,a1,a2) code$rsqrtss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$rsqrtss$argc02$1(...) code$rsqrtss$argc02$2(__VA_ARGS__)
#		define code$rsqrtss$argc02$2(state,t1,t2,a1,a2) code$rsqrtss$argt$##t1##$##t2(state, a1,a2)
#		define code$rsqrtss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 52, modrm$rm(_0, _1))
#		define code$rsqrtss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 52, modrm$rm(_0, _1))
#		define code$rsqrtss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 52, modrm$rr(_0, _1))
#		define code$rstorssp(state,n,...) code$rstorssp$argc##n(state, ##__VA_ARGS__)
#		define code$rstorssp$argc01(state,a1) code$rstorssp$argc01$1(state, operand$gettype(a1), a1)
#		define code$rstorssp$argc01$1(...) code$rstorssp$argc01$2(__VA_ARGS__)
#		define code$rstorssp$argc01$2(state,t1,a1) code$rstorssp$argt$##t1(state, a1)
#		define code$rstorssp$argt$mem(state,_0) bytes(f3, rex32m(_0) 0f, 01, modrm$5m(_0))
#		define code$rstorssp$argt$mem64(state,_0) bytes(f3, rex32m(_0) 0f, 01, modrm$5m(_0))
#		define code$sal(state,n,...) code$sal$argc##n(state, ##__VA_ARGS__)
#		define code$sal$argc02(state,a1,a2) code$sal$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sal$argc02$1(...) code$sal$argc02$2(__VA_ARGS__)
#		define code$sal$argc02$2(state,t1,t2,a1,a2) code$sal$argt$##t1##$##t2(state, a1,a2)
#		define code$sal$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sal(mem, imm08)"))
#		define code$sal$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sal(mem, reg08)"))
#		define code$sal$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$4m(_0)), (c0, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$4m(_0) assert$is$cl(_1))
#		define code$sal$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4m(_0)), (c1, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$4m(_0) assert$is$cl(_1))
#		define code$sal$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4m(_0)), (c1, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$4m(_0) assert$is$cl(_1))
#		define code$sal$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4m(_0)), (c1, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$4m(_0) assert$is$cl(_1))
#		define code$sal$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$4r(_0)), (c0, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$4r(_0) assert$is$cl(_1))
#		define code$sal$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4r(_0)), (c1, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$4r(_0) assert$is$cl(_1))
#		define code$sal$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4r(_0)), (c1, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$4r(_0) assert$is$cl(_1))
#		define code$sal$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4r(_0)), (c1, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sal$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$4r(_0) assert$is$cl(_1))
#		define code$sar(state,n,...) code$sar$argc##n(state, ##__VA_ARGS__)
#		define code$sar$argc02(state,a1,a2) code$sar$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sar$argc02$1(...) code$sar$argc02$2(__VA_ARGS__)
#		define code$sar$argc02$2(state,t1,t2,a1,a2) code$sar$argt$##t1##$##t2(state, a1,a2)
#		define code$sar$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sar(mem, imm08)"))
#		define code$sar$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sar(mem, reg08)"))
#		define code$sar$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$7m(_0)), (c0, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$7m(_0) assert$is$cl(_1))
#		define code$sar$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$7m(_0)), (c1, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$7m(_0) assert$is$cl(_1))
#		define code$sar$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$7m(_0)), (c1, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$7m(_0) assert$is$cl(_1))
#		define code$sar$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$7m(_0)), (c1, modrm$7m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$7m(_0) assert$is$cl(_1))
#		define code$sar$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$7r(_0)), (c0, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$7r(_0) assert$is$cl(_1))
#		define code$sar$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$7r(_0)), (c1, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$7r(_0) assert$is$cl(_1))
#		define code$sar$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$7r(_0)), (c1, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$7r(_0) assert$is$cl(_1))
#		define code$sar$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$7r(_0)), (c1, modrm$7r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$sar$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$7r(_0) assert$is$cl(_1))
#		define code$sarx(state,n,...) code$sarx$argc##n(state, ##__VA_ARGS__)
#		define code$sarx$argc03(state,a1,a2,a3) code$sarx$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$sarx$argc03$1(...) code$sarx$argc03$2(__VA_ARGS__)
#		define code$sarx$argc03$2(state,t1,t2,t3,a1,a2,a3) code$sarx$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$sarx$argt$reg32$mem$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$sarx$argt$reg32$mem32$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$sarx$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$sarx$argt$reg64$mem$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$sarx$argt$reg64$mem64$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$sarx$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f3, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$saveprevssp(state,n,...) code$saveprevssp$argc##n(state, ##__VA_ARGS__)
#		define code$saveprevssp$argc00(state,_) code$saveprevssp$argt$(state)
#		define code$saveprevssp$argt$(state) bytes(f3, 0f, 01, ea)
#		define code$sbb(state,n,...) code$sbb$argc##n(state, ##__VA_ARGS__)
#		define code$sbb$argc02(state,a1,a2) code$sbb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sbb$argc02$1(...) code$sbb$argc02$2(__VA_ARGS__)
#		define code$sbb$argc02$2(state,t1,t2,a1,a2) code$sbb$argt$##t1##$##t2(state, a1,a2)
#		define code$sbb$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sbb(mem, imm08)"))
#		define code$sbb$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$3m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$sbb$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sbb(mem, imm32)"))
#		define code$sbb$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 18, modrm$rm(_1, _0))
#		define code$sbb$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 19, modrm$rm(_1, _0))
#		define code$sbb$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 19, modrm$rm(_1, _0))
#		define code$sbb$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 19, modrm$rm(_1, _0))
#		define code$sbb$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 18, modrm$rm(_1, _0))
#		define code$sbb$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$3m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$sbb$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 19, modrm$rm(_1, _0))
#		define code$sbb$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$3m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$sbb$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 19, modrm$rm(_1, _0))
#		define code$sbb$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$3m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$3m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$sbb$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 19, modrm$rm(_1, _0))
#		define code$sbb$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (1c), (rex08r(_0) 80, modrm$3r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 1a, modrm$rm(_0, _1))
#		define code$sbb$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 1a, modrm$rm(_0, _1))
#		define code$sbb$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 18, modrm$rr(_1, _0))
#		define code$sbb$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 1d), (rex16r(_0) 81, modrm$3r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$sbb$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 1b, modrm$rm(_0, _1))
#		define code$sbb$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 1b, modrm$rm(_0, _1))
#		define code$sbb$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 19, modrm$rr(_1, _0))
#		define code$sbb$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (1d), (rex32r(_0) 81, modrm$3r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$sbb$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 1b, modrm$rm(_0, _1))
#		define code$sbb$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 1b, modrm$rm(_0, _1))
#		define code$sbb$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 19, modrm$rr(_1, _0))
#		define code$sbb$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sbb$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 1d), (rex64r(_0) 81, modrm$3r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$sbb$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 1b, modrm$rm(_0, _1))
#		define code$sbb$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 1b, modrm$rm(_0, _1))
#		define code$sbb$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 19, modrm$rr(_1, _0))
#		define code$scasb(state,n,...) code$scasb$argc##n(state, ##__VA_ARGS__)
#		define code$scasb$argc00(state,_) code$scasb$argt$(state)
#		define code$scasb$argt$(state) bytes(ae)
#		define code$scasd(state,n,...) code$scasd$argc##n(state, ##__VA_ARGS__)
#		define code$scasd$argc00(state,_) code$scasd$argt$(state)
#		define code$scasd$argt$(state) bytes(af)
#		define code$scasq(state,n,...) code$scasq$argc##n(state, ##__VA_ARGS__)
#		define code$scasq$argc00(state,_) code$scasq$argt$(state)
#		define code$scasq$argt$(state) bytes(/* rex64r(rax) = */48, af)
#		define code$scasw(state,n,...) code$scasw$argc##n(state, ##__VA_ARGS__)
#		define code$scasw$argc00(state,_) code$scasw$argt$(state)
#		define code$scasw$argt$(state) bytes(66, af)
#		define code$serialize(state,n,...) code$serialize$argc##n(state, ##__VA_ARGS__)
#		define code$serialize$argc00(state,_) code$serialize$argt$(state)
#		define code$serialize$argt$(state) bytes(0f, 01, e8)
#		define code$seta(state,n,...) code$seta$argc##n(state, ##__VA_ARGS__)
#		define code$seta$argc01(state,a1) code$seta$argc01$1(state, operand$gettype(a1), a1)
#		define code$seta$argc01$1(...) code$seta$argc01$2(__VA_ARGS__)
#		define code$seta$argc01$2(state,t1,a1) code$seta$argt$##t1(state, a1)
#		define code$seta$argt$mem(state,_0) bytes(rex08m(_0) 0f, 97, modrm$0m(_0))
#		define code$seta$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 97, modrm$0m(_0))
#		define code$seta$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 97, modrm$0r(_0))
#		define code$setae(state,n,...) code$setae$argc##n(state, ##__VA_ARGS__)
#		define code$setae$argc01(state,a1) code$setae$argc01$1(state, operand$gettype(a1), a1)
#		define code$setae$argc01$1(...) code$setae$argc01$2(__VA_ARGS__)
#		define code$setae$argc01$2(state,t1,a1) code$setae$argt$##t1(state, a1)
#		define code$setae$argt$mem(state,_0) bytes(rex08m(_0) 0f, 93, modrm$0m(_0))
#		define code$setae$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 93, modrm$0m(_0))
#		define code$setae$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 93, modrm$0r(_0))
#		define code$setb(state,n,...) code$setb$argc##n(state, ##__VA_ARGS__)
#		define code$setb$argc01(state,a1) code$setb$argc01$1(state, operand$gettype(a1), a1)
#		define code$setb$argc01$1(...) code$setb$argc01$2(__VA_ARGS__)
#		define code$setb$argc01$2(state,t1,a1) code$setb$argt$##t1(state, a1)
#		define code$setb$argt$mem(state,_0) bytes(rex08m(_0) 0f, 92, modrm$0m(_0))
#		define code$setb$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 92, modrm$0m(_0))
#		define code$setb$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 92, modrm$0r(_0))
#		define code$setbe(state,n,...) code$setbe$argc##n(state, ##__VA_ARGS__)
#		define code$setbe$argc01(state,a1) code$setbe$argc01$1(state, operand$gettype(a1), a1)
#		define code$setbe$argc01$1(...) code$setbe$argc01$2(__VA_ARGS__)
#		define code$setbe$argc01$2(state,t1,a1) code$setbe$argt$##t1(state, a1)
#		define code$setbe$argt$mem(state,_0) bytes(rex08m(_0) 0f, 96, modrm$0m(_0))
#		define code$setbe$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 96, modrm$0m(_0))
#		define code$setbe$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 96, modrm$0r(_0))
#		define code$setc(state,n,...) code$setc$argc##n(state, ##__VA_ARGS__)
#		define code$setc$argc01(state,a1) code$setc$argc01$1(state, operand$gettype(a1), a1)
#		define code$setc$argc01$1(...) code$setc$argc01$2(__VA_ARGS__)
#		define code$setc$argc01$2(state,t1,a1) code$setc$argt$##t1(state, a1)
#		define code$setc$argt$mem(state,_0) bytes(rex08m(_0) 0f, 92, modrm$0m(_0))
#		define code$setc$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 92, modrm$0m(_0))
#		define code$setc$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 92, modrm$0r(_0))
#		define code$sete(state,n,...) code$sete$argc##n(state, ##__VA_ARGS__)
#		define code$sete$argc01(state,a1) code$sete$argc01$1(state, operand$gettype(a1), a1)
#		define code$sete$argc01$1(...) code$sete$argc01$2(__VA_ARGS__)
#		define code$sete$argc01$2(state,t1,a1) code$sete$argt$##t1(state, a1)
#		define code$sete$argt$mem(state,_0) bytes(rex08m(_0) 0f, 94, modrm$0m(_0))
#		define code$sete$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 94, modrm$0m(_0))
#		define code$sete$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 94, modrm$0r(_0))
#		define code$setg(state,n,...) code$setg$argc##n(state, ##__VA_ARGS__)
#		define code$setg$argc01(state,a1) code$setg$argc01$1(state, operand$gettype(a1), a1)
#		define code$setg$argc01$1(...) code$setg$argc01$2(__VA_ARGS__)
#		define code$setg$argc01$2(state,t1,a1) code$setg$argt$##t1(state, a1)
#		define code$setg$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9f, modrm$0m(_0))
#		define code$setg$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9f, modrm$0m(_0))
#		define code$setg$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9f, modrm$0r(_0))
#		define code$setge(state,n,...) code$setge$argc##n(state, ##__VA_ARGS__)
#		define code$setge$argc01(state,a1) code$setge$argc01$1(state, operand$gettype(a1), a1)
#		define code$setge$argc01$1(...) code$setge$argc01$2(__VA_ARGS__)
#		define code$setge$argc01$2(state,t1,a1) code$setge$argt$##t1(state, a1)
#		define code$setge$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9d, modrm$0m(_0))
#		define code$setge$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9d, modrm$0m(_0))
#		define code$setge$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9d, modrm$0r(_0))
#		define code$setl(state,n,...) code$setl$argc##n(state, ##__VA_ARGS__)
#		define code$setl$argc01(state,a1) code$setl$argc01$1(state, operand$gettype(a1), a1)
#		define code$setl$argc01$1(...) code$setl$argc01$2(__VA_ARGS__)
#		define code$setl$argc01$2(state,t1,a1) code$setl$argt$##t1(state, a1)
#		define code$setl$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9c, modrm$0m(_0))
#		define code$setl$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9c, modrm$0m(_0))
#		define code$setl$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9c, modrm$0r(_0))
#		define code$setle(state,n,...) code$setle$argc##n(state, ##__VA_ARGS__)
#		define code$setle$argc01(state,a1) code$setle$argc01$1(state, operand$gettype(a1), a1)
#		define code$setle$argc01$1(...) code$setle$argc01$2(__VA_ARGS__)
#		define code$setle$argc01$2(state,t1,a1) code$setle$argt$##t1(state, a1)
#		define code$setle$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9e, modrm$0m(_0))
#		define code$setle$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9e, modrm$0m(_0))
#		define code$setle$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9e, modrm$0r(_0))
#		define code$setna(state,n,...) code$setna$argc##n(state, ##__VA_ARGS__)
#		define code$setna$argc01(state,a1) code$setna$argc01$1(state, operand$gettype(a1), a1)
#		define code$setna$argc01$1(...) code$setna$argc01$2(__VA_ARGS__)
#		define code$setna$argc01$2(state,t1,a1) code$setna$argt$##t1(state, a1)
#		define code$setna$argt$mem(state,_0) bytes(rex08m(_0) 0f, 96, modrm$0m(_0))
#		define code$setna$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 96, modrm$0m(_0))
#		define code$setna$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 96, modrm$0r(_0))
#		define code$setnae(state,n,...) code$setnae$argc##n(state, ##__VA_ARGS__)
#		define code$setnae$argc01(state,a1) code$setnae$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnae$argc01$1(...) code$setnae$argc01$2(__VA_ARGS__)
#		define code$setnae$argc01$2(state,t1,a1) code$setnae$argt$##t1(state, a1)
#		define code$setnae$argt$mem(state,_0) bytes(rex08m(_0) 0f, 92, modrm$0m(_0))
#		define code$setnae$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 92, modrm$0m(_0))
#		define code$setnae$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 92, modrm$0r(_0))
#		define code$setnb(state,n,...) code$setnb$argc##n(state, ##__VA_ARGS__)
#		define code$setnb$argc01(state,a1) code$setnb$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnb$argc01$1(...) code$setnb$argc01$2(__VA_ARGS__)
#		define code$setnb$argc01$2(state,t1,a1) code$setnb$argt$##t1(state, a1)
#		define code$setnb$argt$mem(state,_0) bytes(rex08m(_0) 0f, 93, modrm$0m(_0))
#		define code$setnb$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 93, modrm$0m(_0))
#		define code$setnb$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 93, modrm$0r(_0))
#		define code$setnbe(state,n,...) code$setnbe$argc##n(state, ##__VA_ARGS__)
#		define code$setnbe$argc01(state,a1) code$setnbe$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnbe$argc01$1(...) code$setnbe$argc01$2(__VA_ARGS__)
#		define code$setnbe$argc01$2(state,t1,a1) code$setnbe$argt$##t1(state, a1)
#		define code$setnbe$argt$mem(state,_0) bytes(rex08m(_0) 0f, 97, modrm$0m(_0))
#		define code$setnbe$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 97, modrm$0m(_0))
#		define code$setnbe$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 97, modrm$0r(_0))
#		define code$setnc(state,n,...) code$setnc$argc##n(state, ##__VA_ARGS__)
#		define code$setnc$argc01(state,a1) code$setnc$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnc$argc01$1(...) code$setnc$argc01$2(__VA_ARGS__)
#		define code$setnc$argc01$2(state,t1,a1) code$setnc$argt$##t1(state, a1)
#		define code$setnc$argt$mem(state,_0) bytes(rex08m(_0) 0f, 93, modrm$0m(_0))
#		define code$setnc$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 93, modrm$0m(_0))
#		define code$setnc$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 93, modrm$0r(_0))
#		define code$setne(state,n,...) code$setne$argc##n(state, ##__VA_ARGS__)
#		define code$setne$argc01(state,a1) code$setne$argc01$1(state, operand$gettype(a1), a1)
#		define code$setne$argc01$1(...) code$setne$argc01$2(__VA_ARGS__)
#		define code$setne$argc01$2(state,t1,a1) code$setne$argt$##t1(state, a1)
#		define code$setne$argt$mem(state,_0) bytes(rex08m(_0) 0f, 95, modrm$0m(_0))
#		define code$setne$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 95, modrm$0m(_0))
#		define code$setne$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 95, modrm$0r(_0))
#		define code$setng(state,n,...) code$setng$argc##n(state, ##__VA_ARGS__)
#		define code$setng$argc01(state,a1) code$setng$argc01$1(state, operand$gettype(a1), a1)
#		define code$setng$argc01$1(...) code$setng$argc01$2(__VA_ARGS__)
#		define code$setng$argc01$2(state,t1,a1) code$setng$argt$##t1(state, a1)
#		define code$setng$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9e, modrm$0m(_0))
#		define code$setng$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9e, modrm$0m(_0))
#		define code$setng$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9e, modrm$0r(_0))
#		define code$setnge(state,n,...) code$setnge$argc##n(state, ##__VA_ARGS__)
#		define code$setnge$argc01(state,a1) code$setnge$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnge$argc01$1(...) code$setnge$argc01$2(__VA_ARGS__)
#		define code$setnge$argc01$2(state,t1,a1) code$setnge$argt$##t1(state, a1)
#		define code$setnge$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9c, modrm$0m(_0))
#		define code$setnge$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9c, modrm$0m(_0))
#		define code$setnge$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9c, modrm$0r(_0))
#		define code$setnl(state,n,...) code$setnl$argc##n(state, ##__VA_ARGS__)
#		define code$setnl$argc01(state,a1) code$setnl$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnl$argc01$1(...) code$setnl$argc01$2(__VA_ARGS__)
#		define code$setnl$argc01$2(state,t1,a1) code$setnl$argt$##t1(state, a1)
#		define code$setnl$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9d, modrm$0m(_0))
#		define code$setnl$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9d, modrm$0m(_0))
#		define code$setnl$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9d, modrm$0r(_0))
#		define code$setnle(state,n,...) code$setnle$argc##n(state, ##__VA_ARGS__)
#		define code$setnle$argc01(state,a1) code$setnle$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnle$argc01$1(...) code$setnle$argc01$2(__VA_ARGS__)
#		define code$setnle$argc01$2(state,t1,a1) code$setnle$argt$##t1(state, a1)
#		define code$setnle$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9f, modrm$0m(_0))
#		define code$setnle$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9f, modrm$0m(_0))
#		define code$setnle$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9f, modrm$0r(_0))
#		define code$setno(state,n,...) code$setno$argc##n(state, ##__VA_ARGS__)
#		define code$setno$argc01(state,a1) code$setno$argc01$1(state, operand$gettype(a1), a1)
#		define code$setno$argc01$1(...) code$setno$argc01$2(__VA_ARGS__)
#		define code$setno$argc01$2(state,t1,a1) code$setno$argt$##t1(state, a1)
#		define code$setno$argt$mem(state,_0) bytes(rex08m(_0) 0f, 91, modrm$0m(_0))
#		define code$setno$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 91, modrm$0m(_0))
#		define code$setno$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 91, modrm$0r(_0))
#		define code$setnp(state,n,...) code$setnp$argc##n(state, ##__VA_ARGS__)
#		define code$setnp$argc01(state,a1) code$setnp$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnp$argc01$1(...) code$setnp$argc01$2(__VA_ARGS__)
#		define code$setnp$argc01$2(state,t1,a1) code$setnp$argt$##t1(state, a1)
#		define code$setnp$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9b, modrm$0m(_0))
#		define code$setnp$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9b, modrm$0m(_0))
#		define code$setnp$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9b, modrm$0r(_0))
#		define code$setns(state,n,...) code$setns$argc##n(state, ##__VA_ARGS__)
#		define code$setns$argc01(state,a1) code$setns$argc01$1(state, operand$gettype(a1), a1)
#		define code$setns$argc01$1(...) code$setns$argc01$2(__VA_ARGS__)
#		define code$setns$argc01$2(state,t1,a1) code$setns$argt$##t1(state, a1)
#		define code$setns$argt$mem(state,_0) bytes(rex08m(_0) 0f, 99, modrm$0m(_0))
#		define code$setns$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 99, modrm$0m(_0))
#		define code$setns$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 99, modrm$0r(_0))
#		define code$setnz(state,n,...) code$setnz$argc##n(state, ##__VA_ARGS__)
#		define code$setnz$argc01(state,a1) code$setnz$argc01$1(state, operand$gettype(a1), a1)
#		define code$setnz$argc01$1(...) code$setnz$argc01$2(__VA_ARGS__)
#		define code$setnz$argc01$2(state,t1,a1) code$setnz$argt$##t1(state, a1)
#		define code$setnz$argt$mem(state,_0) bytes(rex08m(_0) 0f, 95, modrm$0m(_0))
#		define code$setnz$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 95, modrm$0m(_0))
#		define code$setnz$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 95, modrm$0r(_0))
#		define code$seto(state,n,...) code$seto$argc##n(state, ##__VA_ARGS__)
#		define code$seto$argc01(state,a1) code$seto$argc01$1(state, operand$gettype(a1), a1)
#		define code$seto$argc01$1(...) code$seto$argc01$2(__VA_ARGS__)
#		define code$seto$argc01$2(state,t1,a1) code$seto$argt$##t1(state, a1)
#		define code$seto$argt$mem(state,_0) bytes(rex08m(_0) 0f, 90, modrm$0m(_0))
#		define code$seto$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 90, modrm$0m(_0))
#		define code$seto$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 90, modrm$0r(_0))
#		define code$setp(state,n,...) code$setp$argc##n(state, ##__VA_ARGS__)
#		define code$setp$argc01(state,a1) code$setp$argc01$1(state, operand$gettype(a1), a1)
#		define code$setp$argc01$1(...) code$setp$argc01$2(__VA_ARGS__)
#		define code$setp$argc01$2(state,t1,a1) code$setp$argt$##t1(state, a1)
#		define code$setp$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9a, modrm$0m(_0))
#		define code$setp$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9a, modrm$0m(_0))
#		define code$setp$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9a, modrm$0r(_0))
#		define code$setpe(state,n,...) code$setpe$argc##n(state, ##__VA_ARGS__)
#		define code$setpe$argc01(state,a1) code$setpe$argc01$1(state, operand$gettype(a1), a1)
#		define code$setpe$argc01$1(...) code$setpe$argc01$2(__VA_ARGS__)
#		define code$setpe$argc01$2(state,t1,a1) code$setpe$argt$##t1(state, a1)
#		define code$setpe$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9a, modrm$0m(_0))
#		define code$setpe$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9a, modrm$0m(_0))
#		define code$setpe$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9a, modrm$0r(_0))
#		define code$setpo(state,n,...) code$setpo$argc##n(state, ##__VA_ARGS__)
#		define code$setpo$argc01(state,a1) code$setpo$argc01$1(state, operand$gettype(a1), a1)
#		define code$setpo$argc01$1(...) code$setpo$argc01$2(__VA_ARGS__)
#		define code$setpo$argc01$2(state,t1,a1) code$setpo$argt$##t1(state, a1)
#		define code$setpo$argt$mem(state,_0) bytes(rex08m(_0) 0f, 9b, modrm$0m(_0))
#		define code$setpo$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 9b, modrm$0m(_0))
#		define code$setpo$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 9b, modrm$0r(_0))
#		define code$sets(state,n,...) code$sets$argc##n(state, ##__VA_ARGS__)
#		define code$sets$argc01(state,a1) code$sets$argc01$1(state, operand$gettype(a1), a1)
#		define code$sets$argc01$1(...) code$sets$argc01$2(__VA_ARGS__)
#		define code$sets$argc01$2(state,t1,a1) code$sets$argt$##t1(state, a1)
#		define code$sets$argt$mem(state,_0) bytes(rex08m(_0) 0f, 98, modrm$0m(_0))
#		define code$sets$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 98, modrm$0m(_0))
#		define code$sets$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 98, modrm$0r(_0))
#		define code$setssbsy(state,n,...) code$setssbsy$argc##n(state, ##__VA_ARGS__)
#		define code$setssbsy$argc00(state,_) code$setssbsy$argt$(state)
#		define code$setssbsy$argt$(state) bytes(f3, 0f, 01, e8)
#		define code$setz(state,n,...) code$setz$argc##n(state, ##__VA_ARGS__)
#		define code$setz$argc01(state,a1) code$setz$argc01$1(state, operand$gettype(a1), a1)
#		define code$setz$argc01$1(...) code$setz$argc01$2(__VA_ARGS__)
#		define code$setz$argc01$2(state,t1,a1) code$setz$argt$##t1(state, a1)
#		define code$setz$argt$mem(state,_0) bytes(rex08m(_0) 0f, 94, modrm$0m(_0))
#		define code$setz$argt$mem08(state,_0) bytes(rex08m(_0) 0f, 94, modrm$0m(_0))
#		define code$setz$argt$reg08(state,_0) bytes(rex08r(_0) 0f, 94, modrm$0r(_0))
#		define code$sfence(state,n,...) code$sfence$argc##n(state, ##__VA_ARGS__)
#		define code$sfence$argc00(state,_) code$sfence$argt$(state)
#		define code$sfence$argt$(state) bytes(0f, ae, f8)
#		define code$sgdt(state,n,...) code$sgdt$argc##n(state, ##__VA_ARGS__)
#		define code$sgdt$argc01(state,a1) code$sgdt$argc01$1(state, operand$gettype(a1), a1)
#		define code$sgdt$argc01$1(...) code$sgdt$argc01$2(__VA_ARGS__)
#		define code$sgdt$argc01$2(state,t1,a1) code$sgdt$argt$##t1(state, a1)
#		define code$sgdt$argt$mem(state,_0) bytes(rex32m(_0) 0f, 01, modrm$0m(_0))
#		define code$sha1msg1(state,n,...) code$sha1msg1$argc##n(state, ##__VA_ARGS__)
#		define code$sha1msg1$argc02(state,a1,a2) code$sha1msg1$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sha1msg1$argc02$1(...) code$sha1msg1$argc02$2(__VA_ARGS__)
#		define code$sha1msg1$argc02$2(state,t1,t2,a1,a2) code$sha1msg1$argt$##t1##$##t2(state, a1,a2)
#		define code$sha1msg1$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, c9, modrm$rm(_0, _1))
#		define code$sha1msg1$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, c9, modrm$rm(_0, _1))
#		define code$sha1msg1$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, c9, modrm$rr(_0, _1))
#		define code$sha1msg2(state,n,...) code$sha1msg2$argc##n(state, ##__VA_ARGS__)
#		define code$sha1msg2$argc02(state,a1,a2) code$sha1msg2$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sha1msg2$argc02$1(...) code$sha1msg2$argc02$2(__VA_ARGS__)
#		define code$sha1msg2$argc02$2(state,t1,t2,a1,a2) code$sha1msg2$argt$##t1##$##t2(state, a1,a2)
#		define code$sha1msg2$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, ca, modrm$rm(_0, _1))
#		define code$sha1msg2$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, ca, modrm$rm(_0, _1))
#		define code$sha1msg2$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, ca, modrm$rr(_0, _1))
#		define code$sha1nexte(state,n,...) code$sha1nexte$argc##n(state, ##__VA_ARGS__)
#		define code$sha1nexte$argc03(state,a1,a2,a3) code$sha1nexte$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$sha1nexte$argc03$1(...) code$sha1nexte$argc03$2(__VA_ARGS__)
#		define code$sha1nexte$argc03$2(state,t1,t2,t3,a1,a2,a3) code$sha1nexte$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$sha1nexte$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 38, c8, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$sha1nexte$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 38, c8, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$sha1nexte$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, 38, c8, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$sha1rnds4(state,n,...) code$sha1rnds4$argc##n(state, ##__VA_ARGS__)
#		define code$sha1rnds4$argc03(state,a1,a2,a3) code$sha1rnds4$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$sha1rnds4$argc03$1(...) code$sha1rnds4$argc03$2(__VA_ARGS__)
#		define code$sha1rnds4$argc03$2(state,t1,t2,t3,a1,a2,a3) code$sha1rnds4$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$sha1rnds4$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 3a, cc, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$sha1rnds4$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 3a, cc, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$sha1rnds4$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, 3a, cc, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$sha256msg1(state,n,...) code$sha256msg1$argc##n(state, ##__VA_ARGS__)
#		define code$sha256msg1$argc02(state,a1,a2) code$sha256msg1$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sha256msg1$argc02$1(...) code$sha256msg1$argc02$2(__VA_ARGS__)
#		define code$sha256msg1$argc02$2(state,t1,t2,a1,a2) code$sha256msg1$argt$##t1##$##t2(state, a1,a2)
#		define code$sha256msg1$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, cc, modrm$rm(_0, _1))
#		define code$sha256msg1$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, cc, modrm$rm(_0, _1))
#		define code$sha256msg1$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, cc, modrm$rr(_0, _1))
#		define code$sha256msg2(state,n,...) code$sha256msg2$argc##n(state, ##__VA_ARGS__)
#		define code$sha256msg2$argc02(state,a1,a2) code$sha256msg2$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sha256msg2$argc02$1(...) code$sha256msg2$argc02$2(__VA_ARGS__)
#		define code$sha256msg2$argc02$2(state,t1,t2,a1,a2) code$sha256msg2$argt$##t1##$##t2(state, a1,a2)
#		define code$sha256msg2$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, cd, modrm$rm(_0, _1))
#		define code$sha256msg2$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, cd, modrm$rm(_0, _1))
#		define code$sha256msg2$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, cd, modrm$rr(_0, _1))
#		define code$sha256rnds2(state,n,...) code$sha256rnds2$argc##n(state, ##__VA_ARGS__)
#		define code$sha256rnds2$argc02(state,a1,a2) code$sha256rnds2$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sha256rnds2$argc02$1(...) code$sha256rnds2$argc02$2(__VA_ARGS__)
#		define code$sha256rnds2$argc02$2(state,t1,t2,a1,a2) code$sha256rnds2$argt$##t1##$##t2(state, a1,a2)
#		define code$sha256rnds2$argc03(state,a1,a2,a3) code$sha256rnds2$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$sha256rnds2$argc03$1(...) code$sha256rnds2$argc03$2(__VA_ARGS__)
#		define code$sha256rnds2$argc03$2(state,t1,t2,t3,a1,a2,a3) code$sha256rnds2$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$sha256rnds2$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, cb, modrm$rm(_0, _1))
#		define code$sha256rnds2$argt$mmreg128$mem$mmreg128(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 38, cb, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$sha256rnds2$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 38, cb, modrm$rm(_0, _1))
#		define code$sha256rnds2$argt$mmreg128$mem128$mmreg128(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, 38, cb, modrm$rm(_0, _1) assert$is$xmm0(_2))
#		define code$sha256rnds2$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 38, cb, modrm$rr(_0, _1))
#		define code$sha256rnds2$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, 38, cb, modrm$rr(_0, _1) assert$is$xmm0(_2))
#		define code$shl(state,n,...) code$shl$argc##n(state, ##__VA_ARGS__)
#		define code$shl$argc02(state,a1,a2) code$shl$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$shl$argc02$1(...) code$shl$argc02$2(__VA_ARGS__)
#		define code$shl$argc02$2(state,t1,t2,a1,a2) code$shl$argt$##t1##$##t2(state, a1,a2)
#		define code$shl$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for shl(mem, imm08)"))
#		define code$shl$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for shl(mem, reg08)"))
#		define code$shl$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$4m(_0)), (c0, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$4m(_0) assert$is$cl(_1))
#		define code$shl$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4m(_0)), (c1, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$4m(_0) assert$is$cl(_1))
#		define code$shl$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4m(_0)), (c1, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$4m(_0) assert$is$cl(_1))
#		define code$shl$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4m(_0)), (c1, modrm$4m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$4m(_0) assert$is$cl(_1))
#		define code$shl$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$4r(_0)), (c0, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$4r(_0) assert$is$cl(_1))
#		define code$shl$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4r(_0)), (c1, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$4r(_0) assert$is$cl(_1))
#		define code$shl$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4r(_0)), (c1, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$4r(_0) assert$is$cl(_1))
#		define code$shl$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$4r(_0)), (c1, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shl$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$4r(_0) assert$is$cl(_1))
#		define code$shld(state,n,...) code$shld$argc##n(state, ##__VA_ARGS__)
#		define code$shld$argc03(state,a1,a2,a3) code$shld$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$shld$argc03$1(...) code$shld$argc03$2(__VA_ARGS__)
#		define code$shld$argc03$2(state,t1,t2,t3,a1,a2,a3) code$shld$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$shld$argt$mem$reg16$imm08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, a4, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$mem$reg16$reg08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, a5, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$mem$reg32$imm08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, a4, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$mem$reg32$reg08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, a5, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$mem$reg64$imm08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, a4, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$mem$reg64$reg08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, a5, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$mem16$reg16$imm08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, a4, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$mem16$reg16$reg08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, a5, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$mem32$reg32$imm08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, a4, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$mem32$reg32$reg08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, a5, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$mem64$reg64$imm08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, a4, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$mem64$reg64$reg08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, a5, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$reg16$reg16$imm08(state,_0,_1,_2) bytes(rex16rr(_0, _1) 0f, a4, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$reg16$reg16$reg08(state,_0,_1,_2) bytes(rex16rr(_0, _1) 0f, a5, modrm$rr(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$reg32$reg32$imm08(state,_0,_1,_2) bytes(rex32rr(_0, _1) 0f, a4, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$reg32$reg32$reg08(state,_0,_1,_2) bytes(rex32rr(_0, _1) 0f, a5, modrm$rr(_1, _0) assert$is$cl(_2))
#		define code$shld$argt$reg64$reg64$imm08(state,_0,_1,_2) bytes(rex64rr(_0, _1) 0f, a4, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shld$argt$reg64$reg64$reg08(state,_0,_1,_2) bytes(rex64rr(_0, _1) 0f, a5, modrm$rr(_1, _0) assert$is$cl(_2))
#		define code$shlx(state,n,...) code$shlx$argc##n(state, ##__VA_ARGS__)
#		define code$shlx$argc03(state,a1,a2,a3) code$shlx$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$shlx$argc03$1(...) code$shlx$argc03$2(__VA_ARGS__)
#		define code$shlx$argc03$2(state,t1,t2,t3,a1,a2,a3) code$shlx$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$shlx$argt$reg32$mem$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shlx$argt$reg32$mem32$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shlx$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$shlx$argt$reg64$mem$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shlx$argt$reg64$mem64$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shlx$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$shr(state,n,...) code$shr$argc##n(state, ##__VA_ARGS__)
#		define code$shr$argc02(state,a1,a2) code$shr$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$shr$argc02$1(...) code$shr$argc02$2(__VA_ARGS__)
#		define code$shr$argc02$2(state,t1,t2,a1,a2) code$shr$argt$##t1##$##t2(state, a1,a2)
#		define code$shr$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for shr(mem, imm08)"))
#		define code$shr$argt$mem$reg08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for shr(mem, reg08)"))
#		define code$shr$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$5m(_0)), (c0, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$mem08$reg08(state,_0,_1) bytes(rex08m(_0) d2, modrm$5m(_0) assert$is$cl(_1))
#		define code$shr$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$5m(_0)), (c1, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$mem16$reg08(state,_0,_1) bytes(rex16m(_0) d3, modrm$5m(_0) assert$is$cl(_1))
#		define code$shr$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$5m(_0)), (c1, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$mem32$reg08(state,_0,_1) bytes(rex32m(_0) d3, modrm$5m(_0) assert$is$cl(_1))
#		define code$shr$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$5m(_0)), (c1, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$mem64$reg08(state,_0,_1) bytes(rex64m(_0) d3, modrm$5m(_0) assert$is$cl(_1))
#		define code$shr$argt$reg08$imm08(state,_0,_1) bytes(rex08r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d0, modrm$5r(_0)), (c0, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$reg08$reg08(state,_0,_1) bytes(rex08r(_0) d2, modrm$5r(_0) assert$is$cl(_1))
#		define code$shr$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$5r(_0)), (c1, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$reg16$reg08(state,_0,_1) bytes(rex16r(_0) d3, modrm$5r(_0) assert$is$cl(_1))
#		define code$shr$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$5r(_0)), (c1, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$reg32$reg08(state,_0,_1) bytes(rex32r(_0) d3, modrm$5r(_0) assert$is$cl(_1))
#		define code$shr$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) unpack(ppif(i08$iseq(i08$one, which$imm08(state, _1)), (d1, modrm$5r(_0)), (c1, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1))))))
#		define code$shr$argt$reg64$reg08(state,_0,_1) bytes(rex64r(_0) d3, modrm$5r(_0) assert$is$cl(_1))
#		define code$shrd(state,n,...) code$shrd$argc##n(state, ##__VA_ARGS__)
#		define code$shrd$argc03(state,a1,a2,a3) code$shrd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$shrd$argc03$1(...) code$shrd$argc03$2(__VA_ARGS__)
#		define code$shrd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$shrd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$shrd$argt$mem$reg16$imm08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, ac, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$mem$reg16$reg08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, ad, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$mem$reg32$imm08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, ac, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$mem$reg32$reg08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, ad, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$mem$reg64$imm08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, ac, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$mem$reg64$reg08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, ad, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$mem16$reg16$imm08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, ac, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$mem16$reg16$reg08(state,_0,_1,_2) bytes(rex16rm(_1, _0) 0f, ad, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$mem32$reg32$imm08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, ac, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$mem32$reg32$reg08(state,_0,_1,_2) bytes(rex32rm(_1, _0) 0f, ad, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$mem64$reg64$imm08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, ac, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$mem64$reg64$reg08(state,_0,_1,_2) bytes(rex64rm(_1, _0) 0f, ad, modrm$rm(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$reg16$reg16$imm08(state,_0,_1,_2) bytes(rex16rr(_0, _1) 0f, ac, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$reg16$reg16$reg08(state,_0,_1,_2) bytes(rex16rr(_0, _1) 0f, ad, modrm$rr(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$reg32$reg32$imm08(state,_0,_1,_2) bytes(rex32rr(_0, _1) 0f, ac, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$reg32$reg32$reg08(state,_0,_1,_2) bytes(rex32rr(_0, _1) 0f, ad, modrm$rr(_1, _0) assert$is$cl(_2))
#		define code$shrd$argt$reg64$reg64$imm08(state,_0,_1,_2) bytes(rex64rr(_0, _1) 0f, ac, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$shrd$argt$reg64$reg64$reg08(state,_0,_1,_2) bytes(rex64rr(_0, _1) 0f, ad, modrm$rr(_1, _0) assert$is$cl(_2))
#		define code$shrx(state,n,...) code$shrx$argc##n(state, ##__VA_ARGS__)
#		define code$shrx$argc03(state,a1,a2,a3) code$shrx$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$shrx$argc03$1(...) code$shrx$argc03$2(__VA_ARGS__)
#		define code$shrx$argc03$2(state,t1,t2,t3,a1,a2,a3) code$shrx$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$shrx$argt$reg32$mem$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shrx$argt$reg32$mem32$reg32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shrx$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w0, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$shrx$argt$reg64$mem$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shrx$argt$reg64$mem64$reg64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rm(_0, _1))
#		define code$shrx$argt$reg64$reg64$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lz, vex$pp$f2, vex$mmmmm$0f38, vex$w1, _0, _2, _1), f7, modrm$rr(_0, _1))
#		define code$shufpd(state,n,...) code$shufpd$argc##n(state, ##__VA_ARGS__)
#		define code$shufpd$argc03(state,a1,a2,a3) code$shufpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$shufpd$argc03$1(...) code$shufpd$argc03$2(__VA_ARGS__)
#		define code$shufpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$shufpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$shufpd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$shufpd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(66, rex32rm(_0, _1) 0f, c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$shufpd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(66, rex32rr(_1, _0) 0f, c6, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$shufps(state,n,...) code$shufps$argc##n(state, ##__VA_ARGS__)
#		define code$shufps$argc03(state,a1,a2,a3) code$shufps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$shufps$argc03$1(...) code$shufps$argc03$2(__VA_ARGS__)
#		define code$shufps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$shufps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$shufps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$shufps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(rex32rm(_0, _1) 0f, c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$shufps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(rex32rr(_1, _0) 0f, c6, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$sidt(state,n,...) code$sidt$argc##n(state, ##__VA_ARGS__)
#		define code$sidt$argc01(state,a1) code$sidt$argc01$1(state, operand$gettype(a1), a1)
#		define code$sidt$argc01$1(...) code$sidt$argc01$2(__VA_ARGS__)
#		define code$sidt$argc01$2(state,t1,a1) code$sidt$argt$##t1(state, a1)
#		define code$sidt$argt$mem(state,_0) bytes(rex32m(_0) 0f, 01, modrm$1m(_0))
#		define code$sldt(state,n,...) code$sldt$argc##n(state, ##__VA_ARGS__)
#		define code$sldt$argc01(state,a1) code$sldt$argc01$1(state, operand$gettype(a1), a1)
#		define code$sldt$argc01$1(...) code$sldt$argc01$2(__VA_ARGS__)
#		define code$sldt$argc01$2(state,t1,a1) code$sldt$argt$##t1(state, a1)
#		define code$sldt$argt$mem(state,_0) bytes(rex16m(_0) 0f, 00, modrm$0m(_0))
#		define code$sldt$argt$mem16(state,_0) bytes(rex16m(_0) 0f, 00, modrm$0m(_0))
#		define code$sldt$argt$reg16(state,_0) bytes(rex16r(_0) 0f, 00, modrm$0r(_0))
#		define code$smsw(state,n,...) code$smsw$argc##n(state, ##__VA_ARGS__)
#		define code$smsw$argc01(state,a1) code$smsw$argc01$1(state, operand$gettype(a1), a1)
#		define code$smsw$argc01$1(...) code$smsw$argc01$2(__VA_ARGS__)
#		define code$smsw$argc01$2(state,t1,a1) code$smsw$argt$##t1(state, a1)
#		define code$smsw$argt$mem(state,_0) bytes(error$if(1, "ambigous memory operand size for smsw(mem)"))
#		define code$smsw$argt$mem16(state,_0) bytes(rex16m(_0) 0f, 01, modrm$4m(_0))
#		define code$smsw$argt$mem32(state,_0) bytes(rex32m(_0) 0f, 01, modrm$4m(_0))
#		define code$smsw$argt$mem64(state,_0) bytes(rex64m(_0) 0f, 01, modrm$4m(_0))
#		define code$smsw$argt$reg16(state,_0) bytes(rex16r(_0) 0f, 01, modrm$4r(_0))
#		define code$smsw$argt$reg32(state,_0) bytes(rex32r(_0) 0f, 01, modrm$4r(_0))
#		define code$smsw$argt$reg64(state,_0) bytes(rex64r(_0) 0f, 01, modrm$4r(_0))
#		define code$sqrtpd(state,n,...) code$sqrtpd$argc##n(state, ##__VA_ARGS__)
#		define code$sqrtpd$argc02(state,a1,a2) code$sqrtpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sqrtpd$argc02$1(...) code$sqrtpd$argc02$2(__VA_ARGS__)
#		define code$sqrtpd$argc02$2(state,t1,t2,a1,a2) code$sqrtpd$argt$##t1##$##t2(state, a1,a2)
#		define code$sqrtpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 51, modrm$rr(_0, _1))
#		define code$sqrtps(state,n,...) code$sqrtps$argc##n(state, ##__VA_ARGS__)
#		define code$sqrtps$argc02(state,a1,a2) code$sqrtps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sqrtps$argc02$1(...) code$sqrtps$argc02$2(__VA_ARGS__)
#		define code$sqrtps$argc02$2(state,t1,t2,a1,a2) code$sqrtps$argt$##t1##$##t2(state, a1,a2)
#		define code$sqrtps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 51, modrm$rr(_0, _1))
#		define code$sqrtsd(state,n,...) code$sqrtsd$argc##n(state, ##__VA_ARGS__)
#		define code$sqrtsd$argc02(state,a1,a2) code$sqrtsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sqrtsd$argc02$1(...) code$sqrtsd$argc02$2(__VA_ARGS__)
#		define code$sqrtsd$argc02$2(state,t1,t2,a1,a2) code$sqrtsd$argt$##t1##$##t2(state, a1,a2)
#		define code$sqrtsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 51, modrm$rr(_0, _1))
#		define code$sqrtss(state,n,...) code$sqrtss$argc##n(state, ##__VA_ARGS__)
#		define code$sqrtss$argc02(state,a1,a2) code$sqrtss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sqrtss$argc02$1(...) code$sqrtss$argc02$2(__VA_ARGS__)
#		define code$sqrtss$argc02$2(state,t1,t2,a1,a2) code$sqrtss$argt$##t1##$##t2(state, a1,a2)
#		define code$sqrtss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 51, modrm$rm(_0, _1))
#		define code$sqrtss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 51, modrm$rr(_0, _1))
#		define code$stac(state,n,...) code$stac$argc##n(state, ##__VA_ARGS__)
#		define code$stac$argc00(state,_) code$stac$argt$(state)
#		define code$stac$argt$(state) bytes(0f, 01, cb)
#		define code$stc(state,n,...) code$stc$argc##n(state, ##__VA_ARGS__)
#		define code$stc$argc00(state,_) code$stc$argt$(state)
#		define code$stc$argt$(state) bytes(f9)
#		define code$std(state,n,...) code$std$argc##n(state, ##__VA_ARGS__)
#		define code$std$argc00(state,_) code$std$argt$(state)
#		define code$std$argt$(state) bytes(fd)
#		define code$sti(state,n,...) code$sti$argc##n(state, ##__VA_ARGS__)
#		define code$sti$argc00(state,_) code$sti$argt$(state)
#		define code$sti$argt$(state) bytes(fb)
#		define code$stmxcsr(state,n,...) code$stmxcsr$argc##n(state, ##__VA_ARGS__)
#		define code$stmxcsr$argc01(state,a1) code$stmxcsr$argc01$1(state, operand$gettype(a1), a1)
#		define code$stmxcsr$argc01$1(...) code$stmxcsr$argc01$2(__VA_ARGS__)
#		define code$stmxcsr$argc01$2(state,t1,a1) code$stmxcsr$argt$##t1(state, a1)
#		define code$stmxcsr$argt$mem(state,_0) bytes(rex32m(_0) 0f, ae, modrm$3m(_0))
#		define code$stmxcsr$argt$mem32(state,_0) bytes(rex32m(_0) 0f, ae, modrm$3m(_0))
#		define code$stosb(state,n,...) code$stosb$argc##n(state, ##__VA_ARGS__)
#		define code$stosb$argc00(state,_) code$stosb$argt$(state)
#		define code$stosb$argt$(state) bytes(aa)
#		define code$stosd(state,n,...) code$stosd$argc##n(state, ##__VA_ARGS__)
#		define code$stosd$argc00(state,_) code$stosd$argt$(state)
#		define code$stosd$argt$(state) bytes(ab)
#		define code$stosq(state,n,...) code$stosq$argc##n(state, ##__VA_ARGS__)
#		define code$stosq$argc00(state,_) code$stosq$argt$(state)
#		define code$stosq$argt$(state) bytes(/* rex64r(rax) = */48, ab)
#		define code$stosw(state,n,...) code$stosw$argc##n(state, ##__VA_ARGS__)
#		define code$stosw$argc00(state,_) code$stosw$argt$(state)
#		define code$stosw$argt$(state) bytes(66, ab)
#		define code$str(state,n,...) code$str$argc##n(state, ##__VA_ARGS__)
#		define code$str$argc01(state,a1) code$str$argc01$1(state, operand$gettype(a1), a1)
#		define code$str$argc01$1(...) code$str$argc01$2(__VA_ARGS__)
#		define code$str$argc01$2(state,t1,a1) code$str$argt$##t1(state, a1)
#		define code$str$argt$mem(state,_0) bytes(rex16m(_0) 0f, 00, modrm$1m(_0))
#		define code$str$argt$mem16(state,_0) bytes(rex16m(_0) 0f, 00, modrm$1m(_0))
#		define code$str$argt$reg16(state,_0) bytes(rex16r(_0) 0f, 00, modrm$1r(_0))
#		define code$sub(state,n,...) code$sub$argc##n(state, ##__VA_ARGS__)
#		define code$sub$argc02(state,a1,a2) code$sub$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$sub$argc02$1(...) code$sub$argc02$2(__VA_ARGS__)
#		define code$sub$argc02$2(state,t1,t2,a1,a2) code$sub$argt$##t1##$##t2(state, a1,a2)
#		define code$sub$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sub(mem, imm08)"))
#		define code$sub$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$5m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$sub$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for sub(mem, imm32)"))
#		define code$sub$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 28, modrm$rm(_1, _0))
#		define code$sub$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 29, modrm$rm(_1, _0))
#		define code$sub$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 29, modrm$rm(_1, _0))
#		define code$sub$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 29, modrm$rm(_1, _0))
#		define code$sub$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 28, modrm$rm(_1, _0))
#		define code$sub$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$5m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$sub$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 29, modrm$rm(_1, _0))
#		define code$sub$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$5m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$sub$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 29, modrm$rm(_1, _0))
#		define code$sub$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$5m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$5m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$sub$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 29, modrm$rm(_1, _0))
#		define code$sub$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (2c), (rex08r(_0) 80, modrm$5r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 2a, modrm$rm(_0, _1))
#		define code$sub$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 2a, modrm$rm(_0, _1))
#		define code$sub$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 28, modrm$rr(_1, _0))
#		define code$sub$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 2d), (rex16r(_0) 81, modrm$5r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$sub$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 2b, modrm$rm(_0, _1))
#		define code$sub$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 2b, modrm$rm(_0, _1))
#		define code$sub$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 29, modrm$rr(_1, _0))
#		define code$sub$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (2d), (rex32r(_0) 81, modrm$5r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$sub$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 2b, modrm$rm(_0, _1))
#		define code$sub$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 2b, modrm$rm(_0, _1))
#		define code$sub$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 29, modrm$rr(_1, _0))
#		define code$sub$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$5r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$sub$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 2d), (rex64r(_0) 81, modrm$5r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$sub$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 2b, modrm$rm(_0, _1))
#		define code$sub$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 2b, modrm$rm(_0, _1))
#		define code$sub$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 29, modrm$rr(_1, _0))
#		define code$subpd(state,n,...) code$subpd$argc##n(state, ##__VA_ARGS__)
#		define code$subpd$argc02(state,a1,a2) code$subpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$subpd$argc02$1(...) code$subpd$argc02$2(__VA_ARGS__)
#		define code$subpd$argc02$2(state,t1,t2,a1,a2) code$subpd$argt$##t1##$##t2(state, a1,a2)
#		define code$subpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 5c, modrm$rr(_0, _1))
#		define code$subps(state,n,...) code$subps$argc##n(state, ##__VA_ARGS__)
#		define code$subps$argc02(state,a1,a2) code$subps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$subps$argc02$1(...) code$subps$argc02$2(__VA_ARGS__)
#		define code$subps$argc02$2(state,t1,t2,a1,a2) code$subps$argt$##t1##$##t2(state, a1,a2)
#		define code$subps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 5c, modrm$rr(_0, _1))
#		define code$subsd(state,n,...) code$subsd$argc##n(state, ##__VA_ARGS__)
#		define code$subsd$argc02(state,a1,a2) code$subsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$subsd$argc02$1(...) code$subsd$argc02$2(__VA_ARGS__)
#		define code$subsd$argc02$2(state,t1,t2,a1,a2) code$subsd$argt$##t1##$##t2(state, a1,a2)
#		define code$subsd$argt$mmreg128$mem(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subsd$argt$mmreg128$mem64(state,_0,_1) bytes(f2, rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(f2, rex32rr(_1, _0) 0f, 5c, modrm$rr(_0, _1))
#		define code$subss(state,n,...) code$subss$argc##n(state, ##__VA_ARGS__)
#		define code$subss$argc02(state,a1,a2) code$subss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$subss$argc02$1(...) code$subss$argc02$2(__VA_ARGS__)
#		define code$subss$argc02$2(state,t1,t2,a1,a2) code$subss$argt$##t1##$##t2(state, a1,a2)
#		define code$subss$argt$mmreg128$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subss$argt$mmreg128$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, 5c, modrm$rm(_0, _1))
#		define code$subss$argt$mmreg128$mmreg128(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, 5c, modrm$rr(_0, _1))
#		define code$swapgs(state,n,...) code$swapgs$argc##n(state, ##__VA_ARGS__)
#		define code$swapgs$argc00(state,_) code$swapgs$argt$(state)
#		define code$swapgs$argt$(state) bytes(0f, 01, f8)
#		define code$syscall(state,n,...) code$syscall$argc##n(state, ##__VA_ARGS__)
#		define code$syscall$argc00(state,_) code$syscall$argt$(state)
#		define code$syscall$argt$(state) bytes(0f, 05)
#		define code$sysenter(state,n,...) code$sysenter$argc##n(state, ##__VA_ARGS__)
#		define code$sysenter$argc00(state,_) code$sysenter$argt$(state)
#		define code$sysenter$argt$(state) bytes(0f, 34)
#		define code$sysexit(state,n,...) code$sysexit$argc##n(state, ##__VA_ARGS__)
#		define code$sysexit$argc00(state,_) code$sysexit$argt$(state)
#		define code$sysexit$argt$(state) bytes(0f, 35)
#		define code$sysexit64(state,n,...) code$sysexit64$argc##n(state, ##__VA_ARGS__)
#		define code$sysexit64$argc00(state,_) code$sysexit64$argt$(state)
#		define code$sysexit64$argt$(state) bytes(48, 0f, 35)
#		define code$sysret(state,n,...) code$sysret$argc##n(state, ##__VA_ARGS__)
#		define code$sysret$argc00(state,_) code$sysret$argt$(state)
#		define code$sysret$argt$(state) bytes(0f, 07)
#		define code$sysret64(state,n,...) code$sysret64$argc##n(state, ##__VA_ARGS__)
#		define code$sysret64$argc00(state,_) code$sysret64$argt$(state)
#		define code$sysret64$argt$(state) bytes(48, 0f, 07)
#		define code$test(state,n,...) code$test$argc##n(state, ##__VA_ARGS__)
#		define code$test$argc02(state,a1,a2) code$test$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$test$argc02$1(...) code$test$argc02$2(__VA_ARGS__)
#		define code$test$argc02$2(state,t1,t2,a1,a2) code$test$argt$##t1##$##t2(state, a1,a2)
#		define code$test$argt$mem$imm08(state,_0,_1) bytes(rex08m(_0) f6, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$test$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) f7, modrm$0m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$test$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for test(mem, imm32)"))
#		define code$test$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 84, modrm$rm(_1, _0))
#		define code$test$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 85, modrm$rm(_1, _0))
#		define code$test$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 85, modrm$rm(_1, _0))
#		define code$test$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 85, modrm$rm(_1, _0))
#		define code$test$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) f6, modrm$0m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$test$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 84, modrm$rm(_1, _0))
#		define code$test$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) f7, modrm$0m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$test$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 85, modrm$rm(_1, _0))
#		define code$test$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) f7, modrm$0m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$test$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 85, modrm$rm(_1, _0))
#		define code$test$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) f7, modrm$0m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$test$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 85, modrm$rm(_1, _0))
#		define code$test$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (a8), (rex08r(_0) f6, modrm$0r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$test$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 84, modrm$rr(_1, _0))
#		define code$test$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, a9), (rex16r(_0) f7, modrm$0r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$test$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 85, modrm$rr(_1, _0))
#		define code$test$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (a9), (rex32r(_0) f7, modrm$0r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$test$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 85, modrm$rr(_1, _0))
#		define code$test$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, a9), (rex64r(_0) f7, modrm$0r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$test$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 85, modrm$rr(_1, _0))
#		define code$tpause(state,n,...) code$tpause$argc##n(state, ##__VA_ARGS__)
#		define code$tpause$argc01(state,a1) code$tpause$argc01$1(state, operand$gettype(a1), a1)
#		define code$tpause$argc01$1(...) code$tpause$argc01$2(__VA_ARGS__)
#		define code$tpause$argc01$2(state,t1,a1) code$tpause$argt$##t1(state, a1)
#		define code$tpause$argc03(state,a1,a2,a3) code$tpause$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$tpause$argc03$1(...) code$tpause$argc03$2(__VA_ARGS__)
#		define code$tpause$argc03$2(state,t1,t2,t3,a1,a2,a3) code$tpause$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$tpause$argt$reg32(state,_0) bytes(66, rex32r(_0) 0f, ae, modrm$6r(_0))
#		define code$tpause$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(66, rex32r(_0) 0f, ae, modrm$6r(_0) assert$is$edx(_1) assert$is$eax(_2))
#		define code$tzcnt(state,n,...) code$tzcnt$argc##n(state, ##__VA_ARGS__)
#		define code$tzcnt$argc02(state,a1,a2) code$tzcnt$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$tzcnt$argc02$1(...) code$tzcnt$argc02$2(__VA_ARGS__)
#		define code$tzcnt$argc02$2(state,t1,t2,a1,a2) code$tzcnt$argt$##t1##$##t2(state, a1,a2)
#		define code$tzcnt$argt$reg16$mem(state,_0,_1) bytes(66, f3, /* no 66 */rex32rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$tzcnt$argt$reg16$mem16(state,_0,_1) bytes(66, f3, /* no 66 */rex32rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$tzcnt$argt$reg16$reg16(state,_0,_1) bytes(66, f3, /* no 66 */rex32rr(_1, _0) 0f, bc, modrm$rr(_0, _1))
#		define code$tzcnt$argt$reg32$mem(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$tzcnt$argt$reg32$mem32(state,_0,_1) bytes(f3, rex32rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$tzcnt$argt$reg32$reg32(state,_0,_1) bytes(f3, rex32rr(_1, _0) 0f, bc, modrm$rr(_0, _1))
#		define code$tzcnt$argt$reg64$mem(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$tzcnt$argt$reg64$mem64(state,_0,_1) bytes(f3, rex64rm(_0, _1) 0f, bc, modrm$rm(_0, _1))
#		define code$tzcnt$argt$reg64$reg64(state,_0,_1) bytes(f3, rex64rr(_1, _0) 0f, bc, modrm$rr(_0, _1))
#		define code$ucomisd(state,n,...) code$ucomisd$argc##n(state, ##__VA_ARGS__)
#		define code$ucomisd$argc02(state,a1,a2) code$ucomisd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$ucomisd$argc02$1(...) code$ucomisd$argc02$2(__VA_ARGS__)
#		define code$ucomisd$argc02$2(state,t1,t2,a1,a2) code$ucomisd$argt$##t1##$##t2(state, a1,a2)
#		define code$ucomisd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2e, modrm$rm(_0, _1))
#		define code$ucomisd$argt$mmreg128$mem64(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 2e, modrm$rm(_0, _1))
#		define code$ucomisd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 2e, modrm$rr(_0, _1))
#		define code$ucomiss(state,n,...) code$ucomiss$argc##n(state, ##__VA_ARGS__)
#		define code$ucomiss$argc02(state,a1,a2) code$ucomiss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$ucomiss$argc02$1(...) code$ucomiss$argc02$2(__VA_ARGS__)
#		define code$ucomiss$argc02$2(state,t1,t2,a1,a2) code$ucomiss$argt$##t1##$##t2(state, a1,a2)
#		define code$ucomiss$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2e, modrm$rm(_0, _1))
#		define code$ucomiss$argt$mmreg128$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 2e, modrm$rm(_0, _1))
#		define code$ucomiss$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 2e, modrm$rr(_0, _1))
#		define code$ud1(state,n,...) code$ud1$argc##n(state, ##__VA_ARGS__)
#		define code$ud1$argc02(state,a1,a2) code$ud1$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$ud1$argc02$1(...) code$ud1$argc02$2(__VA_ARGS__)
#		define code$ud1$argc02$2(state,t1,t2,a1,a2) code$ud1$argt$##t1##$##t2(state, a1,a2)
#		define code$ud1$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, b9, modrm$rm(_0, _1))
#		define code$ud1$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 0f, b9, modrm$rm(_0, _1))
#		define code$ud1$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 0f, b9, modrm$rr(_0, _1))
#		define code$ud2(state,n,...) code$ud2$argc##n(state, ##__VA_ARGS__)
#		define code$ud2$argc00(state,_) code$ud2$argt$(state)
#		define code$ud2$argt$(state) bytes(0f, 0b)
#		define code$umonitor(state,n,...) code$umonitor$argc##n(state, ##__VA_ARGS__)
#		define code$umonitor$argc01(state,a1) code$umonitor$argc01$1(state, operand$gettype(a1), a1)
#		define code$umonitor$argc01$1(...) code$umonitor$argc01$2(__VA_ARGS__)
#		define code$umonitor$argc01$2(state,t1,a1) code$umonitor$argt$##t1(state, a1)
#		define code$umonitor$argt$reg32(state,_0) bytes(67, f3, rex32r(_0) 0f, ae, modrm$6r(_0))
#		define code$umonitor$argt$reg64(state,_0) bytes(f3, /* no REX.W */rex32r(_0) 0f, ae, modrm$6r(_0))
#		define code$umwait(state,n,...) code$umwait$argc##n(state, ##__VA_ARGS__)
#		define code$umwait$argc01(state,a1) code$umwait$argc01$1(state, operand$gettype(a1), a1)
#		define code$umwait$argc01$1(...) code$umwait$argc01$2(__VA_ARGS__)
#		define code$umwait$argc01$2(state,t1,a1) code$umwait$argt$##t1(state, a1)
#		define code$umwait$argc03(state,a1,a2,a3) code$umwait$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$umwait$argc03$1(...) code$umwait$argc03$2(__VA_ARGS__)
#		define code$umwait$argc03$2(state,t1,t2,t3,a1,a2,a3) code$umwait$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$umwait$argt$reg32(state,_0) bytes(f2, rex32r(_0) 0f, a2, modrm$6r(_0))
#		define code$umwait$argt$reg32$reg32$reg32(state,_0,_1,_2) bytes(f2, rex32r(_0) 0f, a2, modrm$6r(_0) assert$is$edx(_1) assert$is$eax(_2))
#		define code$unpckhpd(state,n,...) code$unpckhpd$argc##n(state, ##__VA_ARGS__)
#		define code$unpckhpd$argc02(state,a1,a2) code$unpckhpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$unpckhpd$argc02$1(...) code$unpckhpd$argc02$2(__VA_ARGS__)
#		define code$unpckhpd$argc02$2(state,t1,t2,a1,a2) code$unpckhpd$argt$##t1##$##t2(state, a1,a2)
#		define code$unpckhpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 15, modrm$rm(_0, _1))
#		define code$unpckhpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 15, modrm$rm(_0, _1))
#		define code$unpckhpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 15, modrm$rr(_0, _1))
#		define code$unpckhps(state,n,...) code$unpckhps$argc##n(state, ##__VA_ARGS__)
#		define code$unpckhps$argc02(state,a1,a2) code$unpckhps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$unpckhps$argc02$1(...) code$unpckhps$argc02$2(__VA_ARGS__)
#		define code$unpckhps$argc02$2(state,t1,t2,a1,a2) code$unpckhps$argt$##t1##$##t2(state, a1,a2)
#		define code$unpckhps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 15, modrm$rm(_0, _1))
#		define code$unpckhps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 15, modrm$rm(_0, _1))
#		define code$unpckhps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 15, modrm$rr(_0, _1))
#		define code$unpcklpd(state,n,...) code$unpcklpd$argc##n(state, ##__VA_ARGS__)
#		define code$unpcklpd$argc02(state,a1,a2) code$unpcklpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$unpcklpd$argc02$1(...) code$unpcklpd$argc02$2(__VA_ARGS__)
#		define code$unpcklpd$argc02$2(state,t1,t2,a1,a2) code$unpcklpd$argt$##t1##$##t2(state, a1,a2)
#		define code$unpcklpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 14, modrm$rm(_0, _1))
#		define code$unpcklpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 14, modrm$rm(_0, _1))
#		define code$unpcklpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 14, modrm$rr(_0, _1))
#		define code$unpcklps(state,n,...) code$unpcklps$argc##n(state, ##__VA_ARGS__)
#		define code$unpcklps$argc02(state,a1,a2) code$unpcklps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$unpcklps$argc02$1(...) code$unpcklps$argc02$2(__VA_ARGS__)
#		define code$unpcklps$argc02$2(state,t1,t2,a1,a2) code$unpcklps$argt$##t1##$##t2(state, a1,a2)
#		define code$unpcklps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 14, modrm$rm(_0, _1))
#		define code$unpcklps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 14, modrm$rm(_0, _1))
#		define code$unpcklps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 14, modrm$rr(_0, _1))
#		define code$vaddpd(state,n,...) code$vaddpd$argc##n(state, ##__VA_ARGS__)
#		define code$vaddpd$argc02(state,a1,a2) code$vaddpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaddpd$argc02$1(...) code$vaddpd$argc02$2(__VA_ARGS__)
#		define code$vaddpd$argc02$2(state,t1,t2,a1,a2) code$vaddpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vaddpd$argc03(state,a1,a2,a3) code$vaddpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaddpd$argc03$1(...) code$vaddpd$argc03$2(__VA_ARGS__)
#		define code$vaddpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaddpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaddpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rr(_0, _1))
#		define code$vaddpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rr(_0, _2))
#		define code$vaddpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rr(_0, _1))
#		define code$vaddpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rr(_0, _2))
#		define code$vaddps(state,n,...) code$vaddps$argc##n(state, ##__VA_ARGS__)
#		define code$vaddps$argc02(state,a1,a2) code$vaddps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaddps$argc02$1(...) code$vaddps$argc02$2(__VA_ARGS__)
#		define code$vaddps$argc02$2(state,t1,t2,a1,a2) code$vaddps$argt$##t1##$##t2(state, a1,a2)
#		define code$vaddps$argc03(state,a1,a2,a3) code$vaddps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaddps$argc03$1(...) code$vaddps$argc03$2(__VA_ARGS__)
#		define code$vaddps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaddps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaddps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rr(_0, _1))
#		define code$vaddps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rr(_0, _2))
#		define code$vaddps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rr(_0, _1))
#		define code$vaddps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rr(_0, _2))
#		define code$vaddss(state,n,...) code$vaddss$argc##n(state, ##__VA_ARGS__)
#		define code$vaddss$argc02(state,a1,a2) code$vaddss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaddss$argc02$1(...) code$vaddss$argc02$2(__VA_ARGS__)
#		define code$vaddss$argc02$2(state,t1,t2,a1,a2) code$vaddss$argt$##t1##$##t2(state, a1,a2)
#		define code$vaddss$argc03(state,a1,a2,a3) code$vaddss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaddss$argc03$1(...) code$vaddss$argc03$2(__VA_ARGS__)
#		define code$vaddss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaddss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaddss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vaddss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 58, modrm$rr(_0, _1))
#		define code$vaddss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rm(_0, _2))
#		define code$vaddss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 58, modrm$rr(_0, _2))
#		define code$vaddsubpd(state,n,...) code$vaddsubpd$argc##n(state, ##__VA_ARGS__)
#		define code$vaddsubpd$argc02(state,a1,a2) code$vaddsubpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaddsubpd$argc02$1(...) code$vaddsubpd$argc02$2(__VA_ARGS__)
#		define code$vaddsubpd$argc02$2(state,t1,t2,a1,a2) code$vaddsubpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vaddsubpd$argc03(state,a1,a2,a3) code$vaddsubpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaddsubpd$argc03$1(...) code$vaddsubpd$argc03$2(__VA_ARGS__)
#		define code$vaddsubpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaddsubpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaddsubpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rr(_0, _1))
#		define code$vaddsubpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rr(_0, _2))
#		define code$vaddsubpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rr(_0, _1))
#		define code$vaddsubpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rr(_0, _2))
#		define code$vaddsubps(state,n,...) code$vaddsubps$argc##n(state, ##__VA_ARGS__)
#		define code$vaddsubps$argc02(state,a1,a2) code$vaddsubps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaddsubps$argc02$1(...) code$vaddsubps$argc02$2(__VA_ARGS__)
#		define code$vaddsubps$argc02$2(state,t1,t2,a1,a2) code$vaddsubps$argt$##t1##$##t2(state, a1,a2)
#		define code$vaddsubps$argc03(state,a1,a2,a3) code$vaddsubps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaddsubps$argc03$1(...) code$vaddsubps$argc03$2(__VA_ARGS__)
#		define code$vaddsubps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaddsubps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaddsubps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rr(_0, _1))
#		define code$vaddsubps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rr(_0, _2))
#		define code$vaddsubps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rm(_0, _1))
#		define code$vaddsubps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), d0, modrm$rr(_0, _1))
#		define code$vaddsubps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rm(_0, _2))
#		define code$vaddsubps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), d0, modrm$rr(_0, _2))
#		define code$vaesdec(state,n,...) code$vaesdec$argc##n(state, ##__VA_ARGS__)
#		define code$vaesdec$argc02(state,a1,a2) code$vaesdec$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaesdec$argc02$1(...) code$vaesdec$argc02$2(__VA_ARGS__)
#		define code$vaesdec$argc02$2(state,t1,t2,a1,a2) code$vaesdec$argt$##t1##$##t2(state, a1,a2)
#		define code$vaesdec$argc03(state,a1,a2,a3) code$vaesdec$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaesdec$argc03$1(...) code$vaesdec$argc03$2(__VA_ARGS__)
#		define code$vaesdec$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaesdec$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaesdec$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), de, modrm$rr(_0, _1))
#		define code$vaesdec$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), de, modrm$rr(_0, _2))
#		define code$vaesdec$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), de, modrm$rr(_0, _1))
#		define code$vaesdec$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), de, modrm$rr(_0, _2))
#		define code$vaesdeclast(state,n,...) code$vaesdeclast$argc##n(state, ##__VA_ARGS__)
#		define code$vaesdeclast$argc02(state,a1,a2) code$vaesdeclast$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaesdeclast$argc02$1(...) code$vaesdeclast$argc02$2(__VA_ARGS__)
#		define code$vaesdeclast$argc02$2(state,t1,t2,a1,a2) code$vaesdeclast$argt$##t1##$##t2(state, a1,a2)
#		define code$vaesdeclast$argc03(state,a1,a2,a3) code$vaesdeclast$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaesdeclast$argc03$1(...) code$vaesdeclast$argc03$2(__VA_ARGS__)
#		define code$vaesdeclast$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaesdeclast$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaesdeclast$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), df, modrm$rr(_0, _1))
#		define code$vaesdeclast$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), df, modrm$rr(_0, _2))
#		define code$vaesdeclast$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), df, modrm$rr(_0, _1))
#		define code$vaesdeclast$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), df, modrm$rr(_0, _2))
#		define code$vaesenc(state,n,...) code$vaesenc$argc##n(state, ##__VA_ARGS__)
#		define code$vaesenc$argc02(state,a1,a2) code$vaesenc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaesenc$argc02$1(...) code$vaesenc$argc02$2(__VA_ARGS__)
#		define code$vaesenc$argc02$2(state,t1,t2,a1,a2) code$vaesenc$argt$##t1##$##t2(state, a1,a2)
#		define code$vaesenc$argc03(state,a1,a2,a3) code$vaesenc$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaesenc$argc03$1(...) code$vaesenc$argc03$2(__VA_ARGS__)
#		define code$vaesenc$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaesenc$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaesenc$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), dc, modrm$rr(_0, _1))
#		define code$vaesenc$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), dc, modrm$rr(_0, _2))
#		define code$vaesenc$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), dc, modrm$rr(_0, _1))
#		define code$vaesenc$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), dc, modrm$rr(_0, _2))
#		define code$vaesenclast(state,n,...) code$vaesenclast$argc##n(state, ##__VA_ARGS__)
#		define code$vaesenclast$argc02(state,a1,a2) code$vaesenclast$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaesenclast$argc02$1(...) code$vaesenclast$argc02$2(__VA_ARGS__)
#		define code$vaesenclast$argc02$2(state,t1,t2,a1,a2) code$vaesenclast$argt$##t1##$##t2(state, a1,a2)
#		define code$vaesenclast$argc03(state,a1,a2,a3) code$vaesenclast$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaesenclast$argc03$1(...) code$vaesenclast$argc03$2(__VA_ARGS__)
#		define code$vaesenclast$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaesenclast$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaesenclast$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), dd, modrm$rr(_0, _1))
#		define code$vaesenclast$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), dd, modrm$rr(_0, _2))
#		define code$vaesenclast$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), dd, modrm$rr(_0, _1))
#		define code$vaesenclast$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), dd, modrm$rr(_0, _2))
#		define code$vaesimc(state,n,...) code$vaesimc$argc##n(state, ##__VA_ARGS__)
#		define code$vaesimc$argc02(state,a1,a2) code$vaesimc$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vaesimc$argc02$1(...) code$vaesimc$argc02$2(__VA_ARGS__)
#		define code$vaesimc$argc02$2(state,t1,t2,a1,a2) code$vaesimc$argt$##t1##$##t2(state, a1,a2)
#		define code$vaesimc$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), db, modrm$rm(_0, _1))
#		define code$vaesimc$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), db, modrm$rm(_0, _1))
#		define code$vaesimc$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), db, modrm$rr(_0, _1))
#		define code$vaeskeygenassist(state,n,...) code$vaeskeygenassist$argc##n(state, ##__VA_ARGS__)
#		define code$vaeskeygenassist$argc03(state,a1,a2,a3) code$vaeskeygenassist$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vaeskeygenassist$argc03$1(...) code$vaeskeygenassist$argc03$2(__VA_ARGS__)
#		define code$vaeskeygenassist$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vaeskeygenassist$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vaeskeygenassist$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), df, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vaeskeygenassist$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), df, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vaeskeygenassist$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), df, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vandnpd(state,n,...) code$vandnpd$argc##n(state, ##__VA_ARGS__)
#		define code$vandnpd$argc02(state,a1,a2) code$vandnpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vandnpd$argc02$1(...) code$vandnpd$argc02$2(__VA_ARGS__)
#		define code$vandnpd$argc02$2(state,t1,t2,a1,a2) code$vandnpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vandnpd$argc03(state,a1,a2,a3) code$vandnpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vandnpd$argc03$1(...) code$vandnpd$argc03$2(__VA_ARGS__)
#		define code$vandnpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vandnpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vandnpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rr(_0, _1))
#		define code$vandnpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rr(_0, _2))
#		define code$vandnpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rr(_0, _1))
#		define code$vandnpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rr(_0, _2))
#		define code$vandnps(state,n,...) code$vandnps$argc##n(state, ##__VA_ARGS__)
#		define code$vandnps$argc02(state,a1,a2) code$vandnps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vandnps$argc02$1(...) code$vandnps$argc02$2(__VA_ARGS__)
#		define code$vandnps$argc02$2(state,t1,t2,a1,a2) code$vandnps$argt$##t1##$##t2(state, a1,a2)
#		define code$vandnps$argc03(state,a1,a2,a3) code$vandnps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vandnps$argc03$1(...) code$vandnps$argc03$2(__VA_ARGS__)
#		define code$vandnps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vandnps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vandnps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rr(_0, _1))
#		define code$vandnps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rr(_0, _2))
#		define code$vandnps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rm(_0, _1))
#		define code$vandnps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 55, modrm$rr(_0, _1))
#		define code$vandnps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rm(_0, _2))
#		define code$vandnps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 55, modrm$rr(_0, _2))
#		define code$vandpd(state,n,...) code$vandpd$argc##n(state, ##__VA_ARGS__)
#		define code$vandpd$argc02(state,a1,a2) code$vandpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vandpd$argc02$1(...) code$vandpd$argc02$2(__VA_ARGS__)
#		define code$vandpd$argc02$2(state,t1,t2,a1,a2) code$vandpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vandpd$argc03(state,a1,a2,a3) code$vandpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vandpd$argc03$1(...) code$vandpd$argc03$2(__VA_ARGS__)
#		define code$vandpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vandpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vandpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rr(_0, _1))
#		define code$vandpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rr(_0, _2))
#		define code$vandpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rr(_0, _1))
#		define code$vandpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rr(_0, _2))
#		define code$vandps(state,n,...) code$vandps$argc##n(state, ##__VA_ARGS__)
#		define code$vandps$argc02(state,a1,a2) code$vandps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vandps$argc02$1(...) code$vandps$argc02$2(__VA_ARGS__)
#		define code$vandps$argc02$2(state,t1,t2,a1,a2) code$vandps$argt$##t1##$##t2(state, a1,a2)
#		define code$vandps$argc03(state,a1,a2,a3) code$vandps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vandps$argc03$1(...) code$vandps$argc03$2(__VA_ARGS__)
#		define code$vandps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vandps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vandps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rr(_0, _1))
#		define code$vandps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rr(_0, _2))
#		define code$vandps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rm(_0, _1))
#		define code$vandps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 54, modrm$rr(_0, _1))
#		define code$vandps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rm(_0, _2))
#		define code$vandps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 54, modrm$rr(_0, _2))
#		define code$vblendpd(state,n,...) code$vblendpd$argc##n(state, ##__VA_ARGS__)
#		define code$vblendpd$argc03(state,a1,a2,a3) code$vblendpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vblendpd$argc03$1(...) code$vblendpd$argc03$2(__VA_ARGS__)
#		define code$vblendpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vblendpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vblendpd$argc04(state,a1,a2,a3,a4) code$vblendpd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vblendpd$argc04$1(...) code$vblendpd$argc04$2(__VA_ARGS__)
#		define code$vblendpd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vblendpd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vblendpd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0d, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendpd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0d, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendpd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0d, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendpd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0d, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendpd$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0d, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendpd$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0d, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendpd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0d, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendpd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0d, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendpd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0d, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendpd$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0d, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendpd$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0d, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendpd$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0d, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendps(state,n,...) code$vblendps$argc##n(state, ##__VA_ARGS__)
#		define code$vblendps$argc03(state,a1,a2,a3) code$vblendps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vblendps$argc03$1(...) code$vblendps$argc03$2(__VA_ARGS__)
#		define code$vblendps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vblendps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vblendps$argc04(state,a1,a2,a3,a4) code$vblendps$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vblendps$argc04$1(...) code$vblendps$argc04$2(__VA_ARGS__)
#		define code$vblendps$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vblendps$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vblendps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0c, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0c, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0c, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendps$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0c, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendps$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0c, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendps$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0c, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendps$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0c, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendps$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0c, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendps$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0c, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vblendps$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0c, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendps$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0c, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendps$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0c, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vblendvpd(state,n,...) code$vblendvpd$argc##n(state, ##__VA_ARGS__)
#		define code$vblendvpd$argc03(state,a1,a2,a3) code$vblendvpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vblendvpd$argc03$1(...) code$vblendvpd$argc03$2(__VA_ARGS__)
#		define code$vblendvpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vblendvpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vblendvpd$argc04(state,a1,a2,a3,a4) code$vblendvpd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vblendvpd$argc04$1(...) code$vblendvpd$argc04$2(__VA_ARGS__)
#		define code$vblendvpd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vblendvpd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vblendvpd$argt$mmreg128$mem$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4b, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvpd$argt$mmreg128$mem128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4b, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvpd$argt$mmreg128$mmreg128$mem$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4b, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvpd$argt$mmreg128$mmreg128$mem128$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4b, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4b, modrm$rr(_0, _1), modrm$is4(_2))
#		define code$vblendvpd$argt$mmreg128$mmreg128$mmreg128$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4b, modrm$rr(_0, _2), modrm$is4(_3))
#		define code$vblendvpd$argt$mmreg256$mem$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4b, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvpd$argt$mmreg256$mem256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4b, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvpd$argt$mmreg256$mmreg256$mem$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4b, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvpd$argt$mmreg256$mmreg256$mem256$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4b, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4b, modrm$rr(_0, _1), modrm$is4(_2))
#		define code$vblendvpd$argt$mmreg256$mmreg256$mmreg256$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4b, modrm$rr(_0, _2), modrm$is4(_3))
#		define code$vblendvps(state,n,...) code$vblendvps$argc##n(state, ##__VA_ARGS__)
#		define code$vblendvps$argc03(state,a1,a2,a3) code$vblendvps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vblendvps$argc03$1(...) code$vblendvps$argc03$2(__VA_ARGS__)
#		define code$vblendvps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vblendvps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vblendvps$argc04(state,a1,a2,a3,a4) code$vblendvps$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vblendvps$argc04$1(...) code$vblendvps$argc04$2(__VA_ARGS__)
#		define code$vblendvps$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vblendvps$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vblendvps$argt$mmreg128$mem$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4a, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvps$argt$mmreg128$mem128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4a, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvps$argt$mmreg128$mmreg128$mem$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4a, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvps$argt$mmreg128$mmreg128$mem128$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4a, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4a, modrm$rr(_0, _1), modrm$is4(_2))
#		define code$vblendvps$argt$mmreg128$mmreg128$mmreg128$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4a, modrm$rr(_0, _2), modrm$is4(_3))
#		define code$vblendvps$argt$mmreg256$mem$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4a, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvps$argt$mmreg256$mem256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4a, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vblendvps$argt$mmreg256$mmreg256$mem$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4a, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvps$argt$mmreg256$mmreg256$mem256$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4a, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vblendvps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4a, modrm$rr(_0, _1), modrm$is4(_2))
#		define code$vblendvps$argt$mmreg256$mmreg256$mmreg256$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4a, modrm$rr(_0, _2), modrm$is4(_3))
#		define code$vbroadcastf128(state,n,...) code$vbroadcastf128$argc##n(state, ##__VA_ARGS__)
#		define code$vbroadcastf128$argc02(state,a1,a2) code$vbroadcastf128$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vbroadcastf128$argc02$1(...) code$vbroadcastf128$argc02$2(__VA_ARGS__)
#		define code$vbroadcastf128$argc02$2(state,t1,t2,a1,a2) code$vbroadcastf128$argt$##t1##$##t2(state, a1,a2)
#		define code$vbroadcastf128$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 1a, modrm$rm(_0, _1))
#		define code$vbroadcastf128$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 1a, modrm$rm(_0, _1))
#		define code$vbroadcasti128(state,n,...) code$vbroadcasti128$argc##n(state, ##__VA_ARGS__)
#		define code$vbroadcasti128$argc02(state,a1,a2) code$vbroadcasti128$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vbroadcasti128$argc02$1(...) code$vbroadcasti128$argc02$2(__VA_ARGS__)
#		define code$vbroadcasti128$argc02$2(state,t1,t2,a1,a2) code$vbroadcasti128$argt$##t1##$##t2(state, a1,a2)
#		define code$vbroadcasti128$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vbroadcasti128$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vbroadcastsd(state,n,...) code$vbroadcastsd$argc##n(state, ##__VA_ARGS__)
#		define code$vbroadcastsd$argc02(state,a1,a2) code$vbroadcastsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vbroadcastsd$argc02$1(...) code$vbroadcastsd$argc02$2(__VA_ARGS__)
#		define code$vbroadcastsd$argc02$2(state,t1,t2,a1,a2) code$vbroadcastsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vbroadcastsd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 19, modrm$rm(_0, _1))
#		define code$vbroadcastsd$argt$mmreg256$mem64(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 19, modrm$rm(_0, _1))
#		define code$vbroadcastsd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 19, modrm$rr(_0, _1))
#		define code$vbroadcastss(state,n,...) code$vbroadcastss$argc##n(state, ##__VA_ARGS__)
#		define code$vbroadcastss$argc02(state,a1,a2) code$vbroadcastss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vbroadcastss$argc02$1(...) code$vbroadcastss$argc02$2(__VA_ARGS__)
#		define code$vbroadcastss$argc02$2(state,t1,t2,a1,a2) code$vbroadcastss$argt$##t1##$##t2(state, a1,a2)
#		define code$vbroadcastss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 18, modrm$rm(_0, _1))
#		define code$vbroadcastss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 18, modrm$rm(_0, _1))
#		define code$vbroadcastss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 18, modrm$rr(_0, _1))
#		define code$vbroadcastss$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 18, modrm$rm(_0, _1))
#		define code$vbroadcastss$argt$mmreg256$mem32(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 18, modrm$rm(_0, _1))
#		define code$vbroadcastss$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 18, modrm$rr(_0, _1))
#		define code$vcmpeq_ospd(state,n,...) code$vcmpeq_ospd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_ospd$argc02(state,a1,a2) code$vcmpeq_ospd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_ospd$argc02$1(...) code$vcmpeq_ospd$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_ospd$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_ospd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_ospd$argc03(state,a1,a2,a3) code$vcmpeq_ospd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_ospd$argc03$1(...) code$vcmpeq_ospd$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_ospd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_ospd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_ospd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_ospd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_ospd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 10)
#		define code$vcmpeq_ospd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_ospd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_ospd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 10)
#		define code$vcmpeq_ospd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_ospd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_ospd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 10)
#		define code$vcmpeq_ospd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_ospd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_ospd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 10)
#		define code$vcmpeq_osps(state,n,...) code$vcmpeq_osps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_osps$argc02(state,a1,a2) code$vcmpeq_osps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_osps$argc02$1(...) code$vcmpeq_osps$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_osps$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_osps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_osps$argc03(state,a1,a2,a3) code$vcmpeq_osps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_osps$argc03$1(...) code$vcmpeq_osps$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_osps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_osps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_osps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_osps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_osps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 10)
#		define code$vcmpeq_osps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_osps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_osps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 10)
#		define code$vcmpeq_osps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_osps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_osps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 10)
#		define code$vcmpeq_osps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_osps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_osps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 10)
#		define code$vcmpeq_ossd(state,n,...) code$vcmpeq_ossd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_ossd$argc02(state,a1,a2) code$vcmpeq_ossd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_ossd$argc02$1(...) code$vcmpeq_ossd$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_ossd$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_ossd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_ossd$argc03(state,a1,a2,a3) code$vcmpeq_ossd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_ossd$argc03$1(...) code$vcmpeq_ossd$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_ossd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_ossd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_ossd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_ossd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_ossd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 10)
#		define code$vcmpeq_ossd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_ossd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_ossd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 10)
#		define code$vcmpeq_osss(state,n,...) code$vcmpeq_osss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_osss$argc02(state,a1,a2) code$vcmpeq_osss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_osss$argc02$1(...) code$vcmpeq_osss$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_osss$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_osss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_osss$argc03(state,a1,a2,a3) code$vcmpeq_osss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_osss$argc03$1(...) code$vcmpeq_osss$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_osss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_osss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_osss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_osss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 10)
#		define code$vcmpeq_osss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 10)
#		define code$vcmpeq_osss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_osss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 10)
#		define code$vcmpeq_osss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 10)
#		define code$vcmpeq_uqpd(state,n,...) code$vcmpeq_uqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_uqpd$argc02(state,a1,a2) code$vcmpeq_uqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_uqpd$argc02$1(...) code$vcmpeq_uqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_uqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_uqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_uqpd$argc03(state,a1,a2,a3) code$vcmpeq_uqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_uqpd$argc03$1(...) code$vcmpeq_uqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_uqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_uqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_uqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 08)
#		define code$vcmpeq_uqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 08)
#		define code$vcmpeq_uqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 08)
#		define code$vcmpeq_uqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 08)
#		define code$vcmpeq_uqps(state,n,...) code$vcmpeq_uqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_uqps$argc02(state,a1,a2) code$vcmpeq_uqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_uqps$argc02$1(...) code$vcmpeq_uqps$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_uqps$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_uqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_uqps$argc03(state,a1,a2,a3) code$vcmpeq_uqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_uqps$argc03$1(...) code$vcmpeq_uqps$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_uqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_uqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_uqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 08)
#		define code$vcmpeq_uqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 08)
#		define code$vcmpeq_uqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 08)
#		define code$vcmpeq_uqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 08)
#		define code$vcmpeq_uqsd(state,n,...) code$vcmpeq_uqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_uqsd$argc02(state,a1,a2) code$vcmpeq_uqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_uqsd$argc02$1(...) code$vcmpeq_uqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_uqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_uqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_uqsd$argc03(state,a1,a2,a3) code$vcmpeq_uqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_uqsd$argc03$1(...) code$vcmpeq_uqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_uqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_uqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_uqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 08)
#		define code$vcmpeq_uqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 08)
#		define code$vcmpeq_uqss(state,n,...) code$vcmpeq_uqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_uqss$argc02(state,a1,a2) code$vcmpeq_uqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_uqss$argc02$1(...) code$vcmpeq_uqss$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_uqss$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_uqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_uqss$argc03(state,a1,a2,a3) code$vcmpeq_uqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_uqss$argc03$1(...) code$vcmpeq_uqss$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_uqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_uqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_uqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 08)
#		define code$vcmpeq_uqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 08)
#		define code$vcmpeq_uqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 08)
#		define code$vcmpeq_uqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 08)
#		define code$vcmpeq_uspd(state,n,...) code$vcmpeq_uspd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_uspd$argc02(state,a1,a2) code$vcmpeq_uspd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_uspd$argc02$1(...) code$vcmpeq_uspd$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_uspd$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_uspd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_uspd$argc03(state,a1,a2,a3) code$vcmpeq_uspd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_uspd$argc03$1(...) code$vcmpeq_uspd$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_uspd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_uspd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_uspd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_uspd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_uspd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 18)
#		define code$vcmpeq_uspd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_uspd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_uspd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 18)
#		define code$vcmpeq_uspd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_uspd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_uspd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 18)
#		define code$vcmpeq_uspd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_uspd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_uspd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 18)
#		define code$vcmpeq_usps(state,n,...) code$vcmpeq_usps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_usps$argc02(state,a1,a2) code$vcmpeq_usps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_usps$argc02$1(...) code$vcmpeq_usps$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_usps$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_usps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_usps$argc03(state,a1,a2,a3) code$vcmpeq_usps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_usps$argc03$1(...) code$vcmpeq_usps$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_usps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_usps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_usps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_usps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_usps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 18)
#		define code$vcmpeq_usps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_usps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_usps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 18)
#		define code$vcmpeq_usps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_usps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_usps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 18)
#		define code$vcmpeq_usps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_usps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_usps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 18)
#		define code$vcmpeq_ussd(state,n,...) code$vcmpeq_ussd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_ussd$argc02(state,a1,a2) code$vcmpeq_ussd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_ussd$argc02$1(...) code$vcmpeq_ussd$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_ussd$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_ussd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_ussd$argc03(state,a1,a2,a3) code$vcmpeq_ussd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_ussd$argc03$1(...) code$vcmpeq_ussd$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_ussd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_ussd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_ussd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_ussd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_ussd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 18)
#		define code$vcmpeq_ussd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_ussd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_ussd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 18)
#		define code$vcmpeq_usss(state,n,...) code$vcmpeq_usss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeq_usss$argc02(state,a1,a2) code$vcmpeq_usss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeq_usss$argc02$1(...) code$vcmpeq_usss$argc02$2(__VA_ARGS__)
#		define code$vcmpeq_usss$argc02$2(state,t1,t2,a1,a2) code$vcmpeq_usss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeq_usss$argc03(state,a1,a2,a3) code$vcmpeq_usss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeq_usss$argc03$1(...) code$vcmpeq_usss$argc03$2(__VA_ARGS__)
#		define code$vcmpeq_usss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeq_usss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeq_usss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_usss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 18)
#		define code$vcmpeq_usss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 18)
#		define code$vcmpeq_usss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_usss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 18)
#		define code$vcmpeq_usss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 18)
#		define code$vcmpeqpd(state,n,...) code$vcmpeqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeqpd$argc02(state,a1,a2) code$vcmpeqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeqpd$argc02$1(...) code$vcmpeqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpeqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpeqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeqpd$argc03(state,a1,a2,a3) code$vcmpeqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeqpd$argc03$1(...) code$vcmpeqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpeqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 00)
#		define code$vcmpeqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 00)
#		define code$vcmpeqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 00)
#		define code$vcmpeqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 00)
#		define code$vcmpeqps(state,n,...) code$vcmpeqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeqps$argc02(state,a1,a2) code$vcmpeqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeqps$argc02$1(...) code$vcmpeqps$argc02$2(__VA_ARGS__)
#		define code$vcmpeqps$argc02$2(state,t1,t2,a1,a2) code$vcmpeqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeqps$argc03(state,a1,a2,a3) code$vcmpeqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeqps$argc03$1(...) code$vcmpeqps$argc03$2(__VA_ARGS__)
#		define code$vcmpeqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 00)
#		define code$vcmpeqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 00)
#		define code$vcmpeqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 00)
#		define code$vcmpeqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 00)
#		define code$vcmpeqsd(state,n,...) code$vcmpeqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeqsd$argc02(state,a1,a2) code$vcmpeqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeqsd$argc02$1(...) code$vcmpeqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpeqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpeqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeqsd$argc03(state,a1,a2,a3) code$vcmpeqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeqsd$argc03$1(...) code$vcmpeqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpeqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 00)
#		define code$vcmpeqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 00)
#		define code$vcmpeqss(state,n,...) code$vcmpeqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpeqss$argc02(state,a1,a2) code$vcmpeqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpeqss$argc02$1(...) code$vcmpeqss$argc02$2(__VA_ARGS__)
#		define code$vcmpeqss$argc02$2(state,t1,t2,a1,a2) code$vcmpeqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpeqss$argc03(state,a1,a2,a3) code$vcmpeqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpeqss$argc03$1(...) code$vcmpeqss$argc03$2(__VA_ARGS__)
#		define code$vcmpeqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpeqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpeqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 00)
#		define code$vcmpeqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 00)
#		define code$vcmpeqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 00)
#		define code$vcmpeqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 00)
#		define code$vcmpfalse_ospd(state,n,...) code$vcmpfalse_ospd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalse_ospd$argc02(state,a1,a2) code$vcmpfalse_ospd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalse_ospd$argc02$1(...) code$vcmpfalse_ospd$argc02$2(__VA_ARGS__)
#		define code$vcmpfalse_ospd$argc02$2(state,t1,t2,a1,a2) code$vcmpfalse_ospd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalse_ospd$argc03(state,a1,a2,a3) code$vcmpfalse_ospd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalse_ospd$argc03$1(...) code$vcmpfalse_ospd$argc03$2(__VA_ARGS__)
#		define code$vcmpfalse_ospd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalse_ospd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalse_ospd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_ospd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1b)
#		define code$vcmpfalse_osps(state,n,...) code$vcmpfalse_osps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalse_osps$argc02(state,a1,a2) code$vcmpfalse_osps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalse_osps$argc02$1(...) code$vcmpfalse_osps$argc02$2(__VA_ARGS__)
#		define code$vcmpfalse_osps$argc02$2(state,t1,t2,a1,a2) code$vcmpfalse_osps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalse_osps$argc03(state,a1,a2,a3) code$vcmpfalse_osps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalse_osps$argc03$1(...) code$vcmpfalse_osps$argc03$2(__VA_ARGS__)
#		define code$vcmpfalse_osps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalse_osps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalse_osps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_osps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_osps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1b)
#		define code$vcmpfalse_osps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_osps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_osps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1b)
#		define code$vcmpfalse_osps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_osps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_osps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1b)
#		define code$vcmpfalse_osps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_osps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_osps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1b)
#		define code$vcmpfalse_ossd(state,n,...) code$vcmpfalse_ossd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalse_ossd$argc02(state,a1,a2) code$vcmpfalse_ossd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalse_ossd$argc02$1(...) code$vcmpfalse_ossd$argc02$2(__VA_ARGS__)
#		define code$vcmpfalse_ossd$argc02$2(state,t1,t2,a1,a2) code$vcmpfalse_ossd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalse_ossd$argc03(state,a1,a2,a3) code$vcmpfalse_ossd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalse_ossd$argc03$1(...) code$vcmpfalse_ossd$argc03$2(__VA_ARGS__)
#		define code$vcmpfalse_ossd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalse_ossd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalse_ossd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_ossd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_ossd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1b)
#		define code$vcmpfalse_ossd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_ossd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_ossd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1b)
#		define code$vcmpfalse_osss(state,n,...) code$vcmpfalse_osss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalse_osss$argc02(state,a1,a2) code$vcmpfalse_osss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalse_osss$argc02$1(...) code$vcmpfalse_osss$argc02$2(__VA_ARGS__)
#		define code$vcmpfalse_osss$argc02$2(state,t1,t2,a1,a2) code$vcmpfalse_osss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalse_osss$argc03(state,a1,a2,a3) code$vcmpfalse_osss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalse_osss$argc03$1(...) code$vcmpfalse_osss$argc03$2(__VA_ARGS__)
#		define code$vcmpfalse_osss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalse_osss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalse_osss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_osss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1b)
#		define code$vcmpfalse_osss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1b)
#		define code$vcmpfalse_osss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_osss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1b)
#		define code$vcmpfalse_osss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1b)
#		define code$vcmpfalsepd(state,n,...) code$vcmpfalsepd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalsepd$argc02(state,a1,a2) code$vcmpfalsepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalsepd$argc02$1(...) code$vcmpfalsepd$argc02$2(__VA_ARGS__)
#		define code$vcmpfalsepd$argc02$2(state,t1,t2,a1,a2) code$vcmpfalsepd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalsepd$argc03(state,a1,a2,a3) code$vcmpfalsepd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalsepd$argc03$1(...) code$vcmpfalsepd$argc03$2(__VA_ARGS__)
#		define code$vcmpfalsepd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalsepd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalsepd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsepd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0b)
#		define code$vcmpfalsepd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsepd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsepd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0b)
#		define code$vcmpfalsepd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsepd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsepd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0b)
#		define code$vcmpfalsepd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsepd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsepd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0b)
#		define code$vcmpfalseps(state,n,...) code$vcmpfalseps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalseps$argc02(state,a1,a2) code$vcmpfalseps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalseps$argc02$1(...) code$vcmpfalseps$argc02$2(__VA_ARGS__)
#		define code$vcmpfalseps$argc02$2(state,t1,t2,a1,a2) code$vcmpfalseps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalseps$argc03(state,a1,a2,a3) code$vcmpfalseps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalseps$argc03$1(...) code$vcmpfalseps$argc03$2(__VA_ARGS__)
#		define code$vcmpfalseps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalseps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalseps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalseps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalseps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0b)
#		define code$vcmpfalseps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalseps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalseps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0b)
#		define code$vcmpfalseps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalseps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalseps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0b)
#		define code$vcmpfalseps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalseps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalseps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0b)
#		define code$vcmpfalsesd(state,n,...) code$vcmpfalsesd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalsesd$argc02(state,a1,a2) code$vcmpfalsesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalsesd$argc02$1(...) code$vcmpfalsesd$argc02$2(__VA_ARGS__)
#		define code$vcmpfalsesd$argc02$2(state,t1,t2,a1,a2) code$vcmpfalsesd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalsesd$argc03(state,a1,a2,a3) code$vcmpfalsesd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalsesd$argc03$1(...) code$vcmpfalsesd$argc03$2(__VA_ARGS__)
#		define code$vcmpfalsesd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalsesd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalsesd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsesd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0b)
#		define code$vcmpfalsesd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsesd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsesd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0b)
#		define code$vcmpfalsess(state,n,...) code$vcmpfalsess$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpfalsess$argc02(state,a1,a2) code$vcmpfalsess$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpfalsess$argc02$1(...) code$vcmpfalsess$argc02$2(__VA_ARGS__)
#		define code$vcmpfalsess$argc02$2(state,t1,t2,a1,a2) code$vcmpfalsess$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpfalsess$argc03(state,a1,a2,a3) code$vcmpfalsess$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpfalsess$argc03$1(...) code$vcmpfalsess$argc03$2(__VA_ARGS__)
#		define code$vcmpfalsess$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpfalsess$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpfalsess$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsess$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0b)
#		define code$vcmpfalsess$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0b)
#		define code$vcmpfalsess$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsess$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0b)
#		define code$vcmpfalsess$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0b)
#		define code$vcmpge_oqpd(state,n,...) code$vcmpge_oqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpge_oqpd$argc02(state,a1,a2) code$vcmpge_oqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpge_oqpd$argc02$1(...) code$vcmpge_oqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpge_oqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpge_oqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpge_oqpd$argc03(state,a1,a2,a3) code$vcmpge_oqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpge_oqpd$argc03$1(...) code$vcmpge_oqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpge_oqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpge_oqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpge_oqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1d)
#		define code$vcmpge_oqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1d)
#		define code$vcmpge_oqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1d)
#		define code$vcmpge_oqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1d)
#		define code$vcmpge_oqps(state,n,...) code$vcmpge_oqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpge_oqps$argc02(state,a1,a2) code$vcmpge_oqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpge_oqps$argc02$1(...) code$vcmpge_oqps$argc02$2(__VA_ARGS__)
#		define code$vcmpge_oqps$argc02$2(state,t1,t2,a1,a2) code$vcmpge_oqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpge_oqps$argc03(state,a1,a2,a3) code$vcmpge_oqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpge_oqps$argc03$1(...) code$vcmpge_oqps$argc03$2(__VA_ARGS__)
#		define code$vcmpge_oqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpge_oqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpge_oqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1d)
#		define code$vcmpge_oqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1d)
#		define code$vcmpge_oqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1d)
#		define code$vcmpge_oqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1d)
#		define code$vcmpge_oqsd(state,n,...) code$vcmpge_oqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpge_oqsd$argc02(state,a1,a2) code$vcmpge_oqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpge_oqsd$argc02$1(...) code$vcmpge_oqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpge_oqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpge_oqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpge_oqsd$argc03(state,a1,a2,a3) code$vcmpge_oqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpge_oqsd$argc03$1(...) code$vcmpge_oqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpge_oqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpge_oqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpge_oqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1d)
#		define code$vcmpge_oqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1d)
#		define code$vcmpge_oqss(state,n,...) code$vcmpge_oqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpge_oqss$argc02(state,a1,a2) code$vcmpge_oqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpge_oqss$argc02$1(...) code$vcmpge_oqss$argc02$2(__VA_ARGS__)
#		define code$vcmpge_oqss$argc02$2(state,t1,t2,a1,a2) code$vcmpge_oqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpge_oqss$argc03(state,a1,a2,a3) code$vcmpge_oqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpge_oqss$argc03$1(...) code$vcmpge_oqss$argc03$2(__VA_ARGS__)
#		define code$vcmpge_oqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpge_oqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpge_oqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1d)
#		define code$vcmpge_oqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1d)
#		define code$vcmpge_oqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1d)
#		define code$vcmpge_oqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1d)
#		define code$vcmpgepd(state,n,...) code$vcmpgepd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgepd$argc02(state,a1,a2) code$vcmpgepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgepd$argc02$1(...) code$vcmpgepd$argc02$2(__VA_ARGS__)
#		define code$vcmpgepd$argc02$2(state,t1,t2,a1,a2) code$vcmpgepd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgepd$argc03(state,a1,a2,a3) code$vcmpgepd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgepd$argc03$1(...) code$vcmpgepd$argc03$2(__VA_ARGS__)
#		define code$vcmpgepd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgepd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgepd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgepd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0d)
#		define code$vcmpgepd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgepd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgepd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0d)
#		define code$vcmpgepd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgepd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgepd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0d)
#		define code$vcmpgepd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgepd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgepd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0d)
#		define code$vcmpgeps(state,n,...) code$vcmpgeps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgeps$argc02(state,a1,a2) code$vcmpgeps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgeps$argc02$1(...) code$vcmpgeps$argc02$2(__VA_ARGS__)
#		define code$vcmpgeps$argc02$2(state,t1,t2,a1,a2) code$vcmpgeps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgeps$argc03(state,a1,a2,a3) code$vcmpgeps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgeps$argc03$1(...) code$vcmpgeps$argc03$2(__VA_ARGS__)
#		define code$vcmpgeps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgeps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgeps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgeps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgeps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0d)
#		define code$vcmpgeps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgeps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgeps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0d)
#		define code$vcmpgeps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgeps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgeps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0d)
#		define code$vcmpgeps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgeps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgeps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0d)
#		define code$vcmpgesd(state,n,...) code$vcmpgesd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgesd$argc02(state,a1,a2) code$vcmpgesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgesd$argc02$1(...) code$vcmpgesd$argc02$2(__VA_ARGS__)
#		define code$vcmpgesd$argc02$2(state,t1,t2,a1,a2) code$vcmpgesd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgesd$argc03(state,a1,a2,a3) code$vcmpgesd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgesd$argc03$1(...) code$vcmpgesd$argc03$2(__VA_ARGS__)
#		define code$vcmpgesd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgesd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgesd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgesd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0d)
#		define code$vcmpgesd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgesd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgesd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0d)
#		define code$vcmpgess(state,n,...) code$vcmpgess$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgess$argc02(state,a1,a2) code$vcmpgess$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgess$argc02$1(...) code$vcmpgess$argc02$2(__VA_ARGS__)
#		define code$vcmpgess$argc02$2(state,t1,t2,a1,a2) code$vcmpgess$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgess$argc03(state,a1,a2,a3) code$vcmpgess$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgess$argc03$1(...) code$vcmpgess$argc03$2(__VA_ARGS__)
#		define code$vcmpgess$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgess$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgess$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgess$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0d)
#		define code$vcmpgess$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0d)
#		define code$vcmpgess$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgess$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0d)
#		define code$vcmpgess$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0d)
#		define code$vcmpgt_oqpd(state,n,...) code$vcmpgt_oqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgt_oqpd$argc02(state,a1,a2) code$vcmpgt_oqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgt_oqpd$argc02$1(...) code$vcmpgt_oqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpgt_oqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpgt_oqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgt_oqpd$argc03(state,a1,a2,a3) code$vcmpgt_oqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgt_oqpd$argc03$1(...) code$vcmpgt_oqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpgt_oqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgt_oqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgt_oqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1e)
#		define code$vcmpgt_oqps(state,n,...) code$vcmpgt_oqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgt_oqps$argc02(state,a1,a2) code$vcmpgt_oqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgt_oqps$argc02$1(...) code$vcmpgt_oqps$argc02$2(__VA_ARGS__)
#		define code$vcmpgt_oqps$argc02$2(state,t1,t2,a1,a2) code$vcmpgt_oqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgt_oqps$argc03(state,a1,a2,a3) code$vcmpgt_oqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgt_oqps$argc03$1(...) code$vcmpgt_oqps$argc03$2(__VA_ARGS__)
#		define code$vcmpgt_oqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgt_oqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgt_oqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1e)
#		define code$vcmpgt_oqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1e)
#		define code$vcmpgt_oqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1e)
#		define code$vcmpgt_oqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1e)
#		define code$vcmpgt_oqsd(state,n,...) code$vcmpgt_oqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgt_oqsd$argc02(state,a1,a2) code$vcmpgt_oqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgt_oqsd$argc02$1(...) code$vcmpgt_oqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpgt_oqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpgt_oqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgt_oqsd$argc03(state,a1,a2,a3) code$vcmpgt_oqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgt_oqsd$argc03$1(...) code$vcmpgt_oqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpgt_oqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgt_oqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgt_oqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1e)
#		define code$vcmpgt_oqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1e)
#		define code$vcmpgt_oqss(state,n,...) code$vcmpgt_oqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgt_oqss$argc02(state,a1,a2) code$vcmpgt_oqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgt_oqss$argc02$1(...) code$vcmpgt_oqss$argc02$2(__VA_ARGS__)
#		define code$vcmpgt_oqss$argc02$2(state,t1,t2,a1,a2) code$vcmpgt_oqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgt_oqss$argc03(state,a1,a2,a3) code$vcmpgt_oqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgt_oqss$argc03$1(...) code$vcmpgt_oqss$argc03$2(__VA_ARGS__)
#		define code$vcmpgt_oqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgt_oqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgt_oqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1e)
#		define code$vcmpgt_oqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1e)
#		define code$vcmpgt_oqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1e)
#		define code$vcmpgt_oqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1e)
#		define code$vcmpgtpd(state,n,...) code$vcmpgtpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgtpd$argc02(state,a1,a2) code$vcmpgtpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgtpd$argc02$1(...) code$vcmpgtpd$argc02$2(__VA_ARGS__)
#		define code$vcmpgtpd$argc02$2(state,t1,t2,a1,a2) code$vcmpgtpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgtpd$argc03(state,a1,a2,a3) code$vcmpgtpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgtpd$argc03$1(...) code$vcmpgtpd$argc03$2(__VA_ARGS__)
#		define code$vcmpgtpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgtpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgtpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0e)
#		define code$vcmpgtpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0e)
#		define code$vcmpgtpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0e)
#		define code$vcmpgtpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0e)
#		define code$vcmpgtps(state,n,...) code$vcmpgtps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgtps$argc02(state,a1,a2) code$vcmpgtps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgtps$argc02$1(...) code$vcmpgtps$argc02$2(__VA_ARGS__)
#		define code$vcmpgtps$argc02$2(state,t1,t2,a1,a2) code$vcmpgtps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgtps$argc03(state,a1,a2,a3) code$vcmpgtps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgtps$argc03$1(...) code$vcmpgtps$argc03$2(__VA_ARGS__)
#		define code$vcmpgtps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgtps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgtps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0e)
#		define code$vcmpgtps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0e)
#		define code$vcmpgtps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0e)
#		define code$vcmpgtps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0e)
#		define code$vcmpgtsd(state,n,...) code$vcmpgtsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgtsd$argc02(state,a1,a2) code$vcmpgtsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgtsd$argc02$1(...) code$vcmpgtsd$argc02$2(__VA_ARGS__)
#		define code$vcmpgtsd$argc02$2(state,t1,t2,a1,a2) code$vcmpgtsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgtsd$argc03(state,a1,a2,a3) code$vcmpgtsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgtsd$argc03$1(...) code$vcmpgtsd$argc03$2(__VA_ARGS__)
#		define code$vcmpgtsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgtsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgtsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0e)
#		define code$vcmpgtsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0e)
#		define code$vcmpgtss(state,n,...) code$vcmpgtss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpgtss$argc02(state,a1,a2) code$vcmpgtss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpgtss$argc02$1(...) code$vcmpgtss$argc02$2(__VA_ARGS__)
#		define code$vcmpgtss$argc02$2(state,t1,t2,a1,a2) code$vcmpgtss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpgtss$argc03(state,a1,a2,a3) code$vcmpgtss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpgtss$argc03$1(...) code$vcmpgtss$argc03$2(__VA_ARGS__)
#		define code$vcmpgtss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpgtss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpgtss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0e)
#		define code$vcmpgtss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0e)
#		define code$vcmpgtss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0e)
#		define code$vcmpgtss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0e)
#		define code$vcmple_oqpd(state,n,...) code$vcmple_oqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmple_oqpd$argc02(state,a1,a2) code$vcmple_oqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmple_oqpd$argc02$1(...) code$vcmple_oqpd$argc02$2(__VA_ARGS__)
#		define code$vcmple_oqpd$argc02$2(state,t1,t2,a1,a2) code$vcmple_oqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmple_oqpd$argc03(state,a1,a2,a3) code$vcmple_oqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmple_oqpd$argc03$1(...) code$vcmple_oqpd$argc03$2(__VA_ARGS__)
#		define code$vcmple_oqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmple_oqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmple_oqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 12)
#		define code$vcmple_oqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 12)
#		define code$vcmple_oqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 12)
#		define code$vcmple_oqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 12)
#		define code$vcmple_oqps(state,n,...) code$vcmple_oqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmple_oqps$argc02(state,a1,a2) code$vcmple_oqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmple_oqps$argc02$1(...) code$vcmple_oqps$argc02$2(__VA_ARGS__)
#		define code$vcmple_oqps$argc02$2(state,t1,t2,a1,a2) code$vcmple_oqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmple_oqps$argc03(state,a1,a2,a3) code$vcmple_oqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmple_oqps$argc03$1(...) code$vcmple_oqps$argc03$2(__VA_ARGS__)
#		define code$vcmple_oqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmple_oqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmple_oqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 12)
#		define code$vcmple_oqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 12)
#		define code$vcmple_oqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 12)
#		define code$vcmple_oqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 12)
#		define code$vcmple_oqsd(state,n,...) code$vcmple_oqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmple_oqsd$argc02(state,a1,a2) code$vcmple_oqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmple_oqsd$argc02$1(...) code$vcmple_oqsd$argc02$2(__VA_ARGS__)
#		define code$vcmple_oqsd$argc02$2(state,t1,t2,a1,a2) code$vcmple_oqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmple_oqsd$argc03(state,a1,a2,a3) code$vcmple_oqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmple_oqsd$argc03$1(...) code$vcmple_oqsd$argc03$2(__VA_ARGS__)
#		define code$vcmple_oqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmple_oqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmple_oqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 12)
#		define code$vcmple_oqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 12)
#		define code$vcmple_oqss(state,n,...) code$vcmple_oqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmple_oqss$argc02(state,a1,a2) code$vcmple_oqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmple_oqss$argc02$1(...) code$vcmple_oqss$argc02$2(__VA_ARGS__)
#		define code$vcmple_oqss$argc02$2(state,t1,t2,a1,a2) code$vcmple_oqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmple_oqss$argc03(state,a1,a2,a3) code$vcmple_oqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmple_oqss$argc03$1(...) code$vcmple_oqss$argc03$2(__VA_ARGS__)
#		define code$vcmple_oqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmple_oqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmple_oqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 12)
#		define code$vcmple_oqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 12)
#		define code$vcmple_oqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 12)
#		define code$vcmple_oqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 12)
#		define code$vcmplepd(state,n,...) code$vcmplepd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmplepd$argc02(state,a1,a2) code$vcmplepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmplepd$argc02$1(...) code$vcmplepd$argc02$2(__VA_ARGS__)
#		define code$vcmplepd$argc02$2(state,t1,t2,a1,a2) code$vcmplepd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmplepd$argc03(state,a1,a2,a3) code$vcmplepd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmplepd$argc03$1(...) code$vcmplepd$argc03$2(__VA_ARGS__)
#		define code$vcmplepd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmplepd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmplepd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmplepd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmplepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 02)
#		define code$vcmplepd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmplepd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmplepd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 02)
#		define code$vcmplepd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmplepd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmplepd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 02)
#		define code$vcmplepd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmplepd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmplepd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 02)
#		define code$vcmpleps(state,n,...) code$vcmpleps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpleps$argc02(state,a1,a2) code$vcmpleps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpleps$argc02$1(...) code$vcmpleps$argc02$2(__VA_ARGS__)
#		define code$vcmpleps$argc02$2(state,t1,t2,a1,a2) code$vcmpleps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpleps$argc03(state,a1,a2,a3) code$vcmpleps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpleps$argc03$1(...) code$vcmpleps$argc03$2(__VA_ARGS__)
#		define code$vcmpleps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpleps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpleps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmpleps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmpleps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 02)
#		define code$vcmpleps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmpleps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmpleps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 02)
#		define code$vcmpleps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmpleps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmpleps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 02)
#		define code$vcmpleps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmpleps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmpleps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 02)
#		define code$vcmplesd(state,n,...) code$vcmplesd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmplesd$argc02(state,a1,a2) code$vcmplesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmplesd$argc02$1(...) code$vcmplesd$argc02$2(__VA_ARGS__)
#		define code$vcmplesd$argc02$2(state,t1,t2,a1,a2) code$vcmplesd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmplesd$argc03(state,a1,a2,a3) code$vcmplesd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmplesd$argc03$1(...) code$vcmplesd$argc03$2(__VA_ARGS__)
#		define code$vcmplesd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmplesd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmplesd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmplesd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmplesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 02)
#		define code$vcmplesd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmplesd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmplesd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 02)
#		define code$vcmpless(state,n,...) code$vcmpless$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpless$argc02(state,a1,a2) code$vcmpless$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpless$argc02$1(...) code$vcmpless$argc02$2(__VA_ARGS__)
#		define code$vcmpless$argc02$2(state,t1,t2,a1,a2) code$vcmpless$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpless$argc03(state,a1,a2,a3) code$vcmpless$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpless$argc03$1(...) code$vcmpless$argc03$2(__VA_ARGS__)
#		define code$vcmpless$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpless$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpless$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmpless$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 02)
#		define code$vcmpless$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 02)
#		define code$vcmpless$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmpless$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 02)
#		define code$vcmpless$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 02)
#		define code$vcmplt_oqpd(state,n,...) code$vcmplt_oqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmplt_oqpd$argc02(state,a1,a2) code$vcmplt_oqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmplt_oqpd$argc02$1(...) code$vcmplt_oqpd$argc02$2(__VA_ARGS__)
#		define code$vcmplt_oqpd$argc02$2(state,t1,t2,a1,a2) code$vcmplt_oqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmplt_oqpd$argc03(state,a1,a2,a3) code$vcmplt_oqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmplt_oqpd$argc03$1(...) code$vcmplt_oqpd$argc03$2(__VA_ARGS__)
#		define code$vcmplt_oqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmplt_oqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmplt_oqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 11)
#		define code$vcmplt_oqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 11)
#		define code$vcmplt_oqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 11)
#		define code$vcmplt_oqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 11)
#		define code$vcmplt_oqps(state,n,...) code$vcmplt_oqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmplt_oqps$argc02(state,a1,a2) code$vcmplt_oqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmplt_oqps$argc02$1(...) code$vcmplt_oqps$argc02$2(__VA_ARGS__)
#		define code$vcmplt_oqps$argc02$2(state,t1,t2,a1,a2) code$vcmplt_oqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmplt_oqps$argc03(state,a1,a2,a3) code$vcmplt_oqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmplt_oqps$argc03$1(...) code$vcmplt_oqps$argc03$2(__VA_ARGS__)
#		define code$vcmplt_oqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmplt_oqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmplt_oqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 11)
#		define code$vcmplt_oqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 11)
#		define code$vcmplt_oqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 11)
#		define code$vcmplt_oqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 11)
#		define code$vcmplt_oqsd(state,n,...) code$vcmplt_oqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmplt_oqsd$argc02(state,a1,a2) code$vcmplt_oqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmplt_oqsd$argc02$1(...) code$vcmplt_oqsd$argc02$2(__VA_ARGS__)
#		define code$vcmplt_oqsd$argc02$2(state,t1,t2,a1,a2) code$vcmplt_oqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmplt_oqsd$argc03(state,a1,a2,a3) code$vcmplt_oqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmplt_oqsd$argc03$1(...) code$vcmplt_oqsd$argc03$2(__VA_ARGS__)
#		define code$vcmplt_oqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmplt_oqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmplt_oqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 11)
#		define code$vcmplt_oqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 11)
#		define code$vcmplt_oqss(state,n,...) code$vcmplt_oqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmplt_oqss$argc02(state,a1,a2) code$vcmplt_oqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmplt_oqss$argc02$1(...) code$vcmplt_oqss$argc02$2(__VA_ARGS__)
#		define code$vcmplt_oqss$argc02$2(state,t1,t2,a1,a2) code$vcmplt_oqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmplt_oqss$argc03(state,a1,a2,a3) code$vcmplt_oqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmplt_oqss$argc03$1(...) code$vcmplt_oqss$argc03$2(__VA_ARGS__)
#		define code$vcmplt_oqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmplt_oqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmplt_oqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 11)
#		define code$vcmplt_oqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 11)
#		define code$vcmplt_oqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 11)
#		define code$vcmplt_oqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 11)
#		define code$vcmpltpd(state,n,...) code$vcmpltpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpltpd$argc02(state,a1,a2) code$vcmpltpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpltpd$argc02$1(...) code$vcmpltpd$argc02$2(__VA_ARGS__)
#		define code$vcmpltpd$argc02$2(state,t1,t2,a1,a2) code$vcmpltpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpltpd$argc03(state,a1,a2,a3) code$vcmpltpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpltpd$argc03$1(...) code$vcmpltpd$argc03$2(__VA_ARGS__)
#		define code$vcmpltpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpltpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpltpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 01)
#		define code$vcmpltpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 01)
#		define code$vcmpltpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 01)
#		define code$vcmpltpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 01)
#		define code$vcmpltps(state,n,...) code$vcmpltps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpltps$argc02(state,a1,a2) code$vcmpltps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpltps$argc02$1(...) code$vcmpltps$argc02$2(__VA_ARGS__)
#		define code$vcmpltps$argc02$2(state,t1,t2,a1,a2) code$vcmpltps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpltps$argc03(state,a1,a2,a3) code$vcmpltps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpltps$argc03$1(...) code$vcmpltps$argc03$2(__VA_ARGS__)
#		define code$vcmpltps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpltps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpltps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 01)
#		define code$vcmpltps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 01)
#		define code$vcmpltps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 01)
#		define code$vcmpltps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 01)
#		define code$vcmpltsd(state,n,...) code$vcmpltsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpltsd$argc02(state,a1,a2) code$vcmpltsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpltsd$argc02$1(...) code$vcmpltsd$argc02$2(__VA_ARGS__)
#		define code$vcmpltsd$argc02$2(state,t1,t2,a1,a2) code$vcmpltsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpltsd$argc03(state,a1,a2,a3) code$vcmpltsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpltsd$argc03$1(...) code$vcmpltsd$argc03$2(__VA_ARGS__)
#		define code$vcmpltsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpltsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpltsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 01)
#		define code$vcmpltsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 01)
#		define code$vcmpltss(state,n,...) code$vcmpltss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpltss$argc02(state,a1,a2) code$vcmpltss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpltss$argc02$1(...) code$vcmpltss$argc02$2(__VA_ARGS__)
#		define code$vcmpltss$argc02$2(state,t1,t2,a1,a2) code$vcmpltss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpltss$argc03(state,a1,a2,a3) code$vcmpltss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpltss$argc03$1(...) code$vcmpltss$argc03$2(__VA_ARGS__)
#		define code$vcmpltss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpltss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpltss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 01)
#		define code$vcmpltss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 01)
#		define code$vcmpltss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 01)
#		define code$vcmpltss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 01)
#		define code$vcmpneq_oqpd(state,n,...) code$vcmpneq_oqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_oqpd$argc02(state,a1,a2) code$vcmpneq_oqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_oqpd$argc02$1(...) code$vcmpneq_oqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_oqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_oqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_oqpd$argc03(state,a1,a2,a3) code$vcmpneq_oqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_oqpd$argc03$1(...) code$vcmpneq_oqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_oqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_oqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_oqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0c)
#		define code$vcmpneq_oqps(state,n,...) code$vcmpneq_oqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_oqps$argc02(state,a1,a2) code$vcmpneq_oqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_oqps$argc02$1(...) code$vcmpneq_oqps$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_oqps$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_oqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_oqps$argc03(state,a1,a2,a3) code$vcmpneq_oqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_oqps$argc03$1(...) code$vcmpneq_oqps$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_oqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_oqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_oqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0c)
#		define code$vcmpneq_oqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0c)
#		define code$vcmpneq_oqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0c)
#		define code$vcmpneq_oqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0c)
#		define code$vcmpneq_oqsd(state,n,...) code$vcmpneq_oqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_oqsd$argc02(state,a1,a2) code$vcmpneq_oqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_oqsd$argc02$1(...) code$vcmpneq_oqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_oqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_oqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_oqsd$argc03(state,a1,a2,a3) code$vcmpneq_oqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_oqsd$argc03$1(...) code$vcmpneq_oqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_oqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_oqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_oqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0c)
#		define code$vcmpneq_oqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0c)
#		define code$vcmpneq_oqss(state,n,...) code$vcmpneq_oqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_oqss$argc02(state,a1,a2) code$vcmpneq_oqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_oqss$argc02$1(...) code$vcmpneq_oqss$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_oqss$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_oqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_oqss$argc03(state,a1,a2,a3) code$vcmpneq_oqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_oqss$argc03$1(...) code$vcmpneq_oqss$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_oqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_oqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_oqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0c)
#		define code$vcmpneq_oqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0c)
#		define code$vcmpneq_oqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0c)
#		define code$vcmpneq_oqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0c)
#		define code$vcmpneq_ospd(state,n,...) code$vcmpneq_ospd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_ospd$argc02(state,a1,a2) code$vcmpneq_ospd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_ospd$argc02$1(...) code$vcmpneq_ospd$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_ospd$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_ospd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_ospd$argc03(state,a1,a2,a3) code$vcmpneq_ospd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_ospd$argc03$1(...) code$vcmpneq_ospd$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_ospd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_ospd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_ospd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_ospd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_ospd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1c)
#		define code$vcmpneq_ospd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_ospd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_ospd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1c)
#		define code$vcmpneq_ospd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_ospd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_ospd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1c)
#		define code$vcmpneq_ospd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_ospd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_ospd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1c)
#		define code$vcmpneq_osps(state,n,...) code$vcmpneq_osps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_osps$argc02(state,a1,a2) code$vcmpneq_osps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_osps$argc02$1(...) code$vcmpneq_osps$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_osps$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_osps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_osps$argc03(state,a1,a2,a3) code$vcmpneq_osps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_osps$argc03$1(...) code$vcmpneq_osps$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_osps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_osps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_osps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_osps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_osps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1c)
#		define code$vcmpneq_osps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_osps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_osps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1c)
#		define code$vcmpneq_osps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_osps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_osps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1c)
#		define code$vcmpneq_osps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_osps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_osps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1c)
#		define code$vcmpneq_ossd(state,n,...) code$vcmpneq_ossd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_ossd$argc02(state,a1,a2) code$vcmpneq_ossd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_ossd$argc02$1(...) code$vcmpneq_ossd$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_ossd$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_ossd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_ossd$argc03(state,a1,a2,a3) code$vcmpneq_ossd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_ossd$argc03$1(...) code$vcmpneq_ossd$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_ossd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_ossd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_ossd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_ossd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_ossd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1c)
#		define code$vcmpneq_ossd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_ossd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_ossd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1c)
#		define code$vcmpneq_osss(state,n,...) code$vcmpneq_osss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_osss$argc02(state,a1,a2) code$vcmpneq_osss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_osss$argc02$1(...) code$vcmpneq_osss$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_osss$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_osss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_osss$argc03(state,a1,a2,a3) code$vcmpneq_osss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_osss$argc03$1(...) code$vcmpneq_osss$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_osss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_osss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_osss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_osss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1c)
#		define code$vcmpneq_osss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1c)
#		define code$vcmpneq_osss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_osss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1c)
#		define code$vcmpneq_osss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1c)
#		define code$vcmpneq_uspd(state,n,...) code$vcmpneq_uspd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_uspd$argc02(state,a1,a2) code$vcmpneq_uspd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_uspd$argc02$1(...) code$vcmpneq_uspd$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_uspd$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_uspd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_uspd$argc03(state,a1,a2,a3) code$vcmpneq_uspd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_uspd$argc03$1(...) code$vcmpneq_uspd$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_uspd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_uspd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_uspd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_uspd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_uspd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 14)
#		define code$vcmpneq_uspd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_uspd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_uspd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 14)
#		define code$vcmpneq_uspd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_uspd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_uspd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 14)
#		define code$vcmpneq_uspd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_uspd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_uspd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 14)
#		define code$vcmpneq_usps(state,n,...) code$vcmpneq_usps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_usps$argc02(state,a1,a2) code$vcmpneq_usps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_usps$argc02$1(...) code$vcmpneq_usps$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_usps$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_usps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_usps$argc03(state,a1,a2,a3) code$vcmpneq_usps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_usps$argc03$1(...) code$vcmpneq_usps$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_usps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_usps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_usps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_usps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_usps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 14)
#		define code$vcmpneq_usps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_usps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_usps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 14)
#		define code$vcmpneq_usps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_usps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_usps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 14)
#		define code$vcmpneq_usps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_usps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_usps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 14)
#		define code$vcmpneq_ussd(state,n,...) code$vcmpneq_ussd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_ussd$argc02(state,a1,a2) code$vcmpneq_ussd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_ussd$argc02$1(...) code$vcmpneq_ussd$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_ussd$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_ussd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_ussd$argc03(state,a1,a2,a3) code$vcmpneq_ussd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_ussd$argc03$1(...) code$vcmpneq_ussd$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_ussd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_ussd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_ussd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_ussd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_ussd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 14)
#		define code$vcmpneq_ussd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_ussd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_ussd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 14)
#		define code$vcmpneq_usss(state,n,...) code$vcmpneq_usss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneq_usss$argc02(state,a1,a2) code$vcmpneq_usss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneq_usss$argc02$1(...) code$vcmpneq_usss$argc02$2(__VA_ARGS__)
#		define code$vcmpneq_usss$argc02$2(state,t1,t2,a1,a2) code$vcmpneq_usss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneq_usss$argc03(state,a1,a2,a3) code$vcmpneq_usss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneq_usss$argc03$1(...) code$vcmpneq_usss$argc03$2(__VA_ARGS__)
#		define code$vcmpneq_usss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneq_usss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneq_usss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_usss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 14)
#		define code$vcmpneq_usss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 14)
#		define code$vcmpneq_usss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_usss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 14)
#		define code$vcmpneq_usss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 14)
#		define code$vcmpneqpd(state,n,...) code$vcmpneqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneqpd$argc02(state,a1,a2) code$vcmpneqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneqpd$argc02$1(...) code$vcmpneqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpneqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpneqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneqpd$argc03(state,a1,a2,a3) code$vcmpneqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneqpd$argc03$1(...) code$vcmpneqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpneqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 04)
#		define code$vcmpneqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 04)
#		define code$vcmpneqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 04)
#		define code$vcmpneqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 04)
#		define code$vcmpneqps(state,n,...) code$vcmpneqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneqps$argc02(state,a1,a2) code$vcmpneqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneqps$argc02$1(...) code$vcmpneqps$argc02$2(__VA_ARGS__)
#		define code$vcmpneqps$argc02$2(state,t1,t2,a1,a2) code$vcmpneqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneqps$argc03(state,a1,a2,a3) code$vcmpneqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneqps$argc03$1(...) code$vcmpneqps$argc03$2(__VA_ARGS__)
#		define code$vcmpneqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 04)
#		define code$vcmpneqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 04)
#		define code$vcmpneqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 04)
#		define code$vcmpneqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 04)
#		define code$vcmpneqsd(state,n,...) code$vcmpneqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneqsd$argc02(state,a1,a2) code$vcmpneqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneqsd$argc02$1(...) code$vcmpneqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpneqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpneqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneqsd$argc03(state,a1,a2,a3) code$vcmpneqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneqsd$argc03$1(...) code$vcmpneqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpneqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 04)
#		define code$vcmpneqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 04)
#		define code$vcmpneqss(state,n,...) code$vcmpneqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpneqss$argc02(state,a1,a2) code$vcmpneqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpneqss$argc02$1(...) code$vcmpneqss$argc02$2(__VA_ARGS__)
#		define code$vcmpneqss$argc02$2(state,t1,t2,a1,a2) code$vcmpneqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpneqss$argc03(state,a1,a2,a3) code$vcmpneqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpneqss$argc03$1(...) code$vcmpneqss$argc03$2(__VA_ARGS__)
#		define code$vcmpneqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpneqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpneqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 04)
#		define code$vcmpneqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 04)
#		define code$vcmpneqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 04)
#		define code$vcmpneqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 04)
#		define code$vcmpnge_uqpd(state,n,...) code$vcmpnge_uqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnge_uqpd$argc02(state,a1,a2) code$vcmpnge_uqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnge_uqpd$argc02$1(...) code$vcmpnge_uqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpnge_uqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpnge_uqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnge_uqpd$argc03(state,a1,a2,a3) code$vcmpnge_uqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnge_uqpd$argc03$1(...) code$vcmpnge_uqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpnge_uqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnge_uqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnge_uqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 19)
#		define code$vcmpnge_uqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 19)
#		define code$vcmpnge_uqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 19)
#		define code$vcmpnge_uqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 19)
#		define code$vcmpnge_uqps(state,n,...) code$vcmpnge_uqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnge_uqps$argc02(state,a1,a2) code$vcmpnge_uqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnge_uqps$argc02$1(...) code$vcmpnge_uqps$argc02$2(__VA_ARGS__)
#		define code$vcmpnge_uqps$argc02$2(state,t1,t2,a1,a2) code$vcmpnge_uqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnge_uqps$argc03(state,a1,a2,a3) code$vcmpnge_uqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnge_uqps$argc03$1(...) code$vcmpnge_uqps$argc03$2(__VA_ARGS__)
#		define code$vcmpnge_uqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnge_uqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnge_uqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 19)
#		define code$vcmpnge_uqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 19)
#		define code$vcmpnge_uqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 19)
#		define code$vcmpnge_uqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 19)
#		define code$vcmpnge_uqsd(state,n,...) code$vcmpnge_uqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnge_uqsd$argc02(state,a1,a2) code$vcmpnge_uqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnge_uqsd$argc02$1(...) code$vcmpnge_uqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpnge_uqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpnge_uqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnge_uqsd$argc03(state,a1,a2,a3) code$vcmpnge_uqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnge_uqsd$argc03$1(...) code$vcmpnge_uqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpnge_uqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnge_uqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnge_uqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 19)
#		define code$vcmpnge_uqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 19)
#		define code$vcmpnge_uqss(state,n,...) code$vcmpnge_uqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnge_uqss$argc02(state,a1,a2) code$vcmpnge_uqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnge_uqss$argc02$1(...) code$vcmpnge_uqss$argc02$2(__VA_ARGS__)
#		define code$vcmpnge_uqss$argc02$2(state,t1,t2,a1,a2) code$vcmpnge_uqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnge_uqss$argc03(state,a1,a2,a3) code$vcmpnge_uqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnge_uqss$argc03$1(...) code$vcmpnge_uqss$argc03$2(__VA_ARGS__)
#		define code$vcmpnge_uqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnge_uqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnge_uqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 19)
#		define code$vcmpnge_uqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 19)
#		define code$vcmpnge_uqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 19)
#		define code$vcmpnge_uqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 19)
#		define code$vcmpngepd(state,n,...) code$vcmpngepd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngepd$argc02(state,a1,a2) code$vcmpngepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngepd$argc02$1(...) code$vcmpngepd$argc02$2(__VA_ARGS__)
#		define code$vcmpngepd$argc02$2(state,t1,t2,a1,a2) code$vcmpngepd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngepd$argc03(state,a1,a2,a3) code$vcmpngepd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngepd$argc03$1(...) code$vcmpngepd$argc03$2(__VA_ARGS__)
#		define code$vcmpngepd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngepd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngepd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngepd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 09)
#		define code$vcmpngepd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngepd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngepd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 09)
#		define code$vcmpngepd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngepd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngepd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 09)
#		define code$vcmpngepd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngepd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngepd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 09)
#		define code$vcmpngeps(state,n,...) code$vcmpngeps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngeps$argc02(state,a1,a2) code$vcmpngeps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngeps$argc02$1(...) code$vcmpngeps$argc02$2(__VA_ARGS__)
#		define code$vcmpngeps$argc02$2(state,t1,t2,a1,a2) code$vcmpngeps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngeps$argc03(state,a1,a2,a3) code$vcmpngeps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngeps$argc03$1(...) code$vcmpngeps$argc03$2(__VA_ARGS__)
#		define code$vcmpngeps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngeps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngeps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngeps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngeps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 09)
#		define code$vcmpngeps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngeps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngeps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 09)
#		define code$vcmpngeps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngeps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngeps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 09)
#		define code$vcmpngeps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngeps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngeps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 09)
#		define code$vcmpngesd(state,n,...) code$vcmpngesd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngesd$argc02(state,a1,a2) code$vcmpngesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngesd$argc02$1(...) code$vcmpngesd$argc02$2(__VA_ARGS__)
#		define code$vcmpngesd$argc02$2(state,t1,t2,a1,a2) code$vcmpngesd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngesd$argc03(state,a1,a2,a3) code$vcmpngesd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngesd$argc03$1(...) code$vcmpngesd$argc03$2(__VA_ARGS__)
#		define code$vcmpngesd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngesd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngesd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngesd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 09)
#		define code$vcmpngesd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngesd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngesd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 09)
#		define code$vcmpngess(state,n,...) code$vcmpngess$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngess$argc02(state,a1,a2) code$vcmpngess$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngess$argc02$1(...) code$vcmpngess$argc02$2(__VA_ARGS__)
#		define code$vcmpngess$argc02$2(state,t1,t2,a1,a2) code$vcmpngess$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngess$argc03(state,a1,a2,a3) code$vcmpngess$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngess$argc03$1(...) code$vcmpngess$argc03$2(__VA_ARGS__)
#		define code$vcmpngess$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngess$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngess$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngess$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 09)
#		define code$vcmpngess$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 09)
#		define code$vcmpngess$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngess$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 09)
#		define code$vcmpngess$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 09)
#		define code$vcmpngt_uqpd(state,n,...) code$vcmpngt_uqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngt_uqpd$argc02(state,a1,a2) code$vcmpngt_uqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngt_uqpd$argc02$1(...) code$vcmpngt_uqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpngt_uqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpngt_uqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngt_uqpd$argc03(state,a1,a2,a3) code$vcmpngt_uqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngt_uqpd$argc03$1(...) code$vcmpngt_uqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpngt_uqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngt_uqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngt_uqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1a)
#		define code$vcmpngt_uqps(state,n,...) code$vcmpngt_uqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngt_uqps$argc02(state,a1,a2) code$vcmpngt_uqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngt_uqps$argc02$1(...) code$vcmpngt_uqps$argc02$2(__VA_ARGS__)
#		define code$vcmpngt_uqps$argc02$2(state,t1,t2,a1,a2) code$vcmpngt_uqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngt_uqps$argc03(state,a1,a2,a3) code$vcmpngt_uqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngt_uqps$argc03$1(...) code$vcmpngt_uqps$argc03$2(__VA_ARGS__)
#		define code$vcmpngt_uqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngt_uqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngt_uqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1a)
#		define code$vcmpngt_uqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1a)
#		define code$vcmpngt_uqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1a)
#		define code$vcmpngt_uqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1a)
#		define code$vcmpngt_uqsd(state,n,...) code$vcmpngt_uqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngt_uqsd$argc02(state,a1,a2) code$vcmpngt_uqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngt_uqsd$argc02$1(...) code$vcmpngt_uqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpngt_uqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpngt_uqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngt_uqsd$argc03(state,a1,a2,a3) code$vcmpngt_uqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngt_uqsd$argc03$1(...) code$vcmpngt_uqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpngt_uqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngt_uqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngt_uqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1a)
#		define code$vcmpngt_uqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1a)
#		define code$vcmpngt_uqss(state,n,...) code$vcmpngt_uqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngt_uqss$argc02(state,a1,a2) code$vcmpngt_uqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngt_uqss$argc02$1(...) code$vcmpngt_uqss$argc02$2(__VA_ARGS__)
#		define code$vcmpngt_uqss$argc02$2(state,t1,t2,a1,a2) code$vcmpngt_uqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngt_uqss$argc03(state,a1,a2,a3) code$vcmpngt_uqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngt_uqss$argc03$1(...) code$vcmpngt_uqss$argc03$2(__VA_ARGS__)
#		define code$vcmpngt_uqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngt_uqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngt_uqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1a)
#		define code$vcmpngt_uqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1a)
#		define code$vcmpngt_uqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1a)
#		define code$vcmpngt_uqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1a)
#		define code$vcmpngtpd(state,n,...) code$vcmpngtpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngtpd$argc02(state,a1,a2) code$vcmpngtpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngtpd$argc02$1(...) code$vcmpngtpd$argc02$2(__VA_ARGS__)
#		define code$vcmpngtpd$argc02$2(state,t1,t2,a1,a2) code$vcmpngtpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngtpd$argc03(state,a1,a2,a3) code$vcmpngtpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngtpd$argc03$1(...) code$vcmpngtpd$argc03$2(__VA_ARGS__)
#		define code$vcmpngtpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngtpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngtpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0a)
#		define code$vcmpngtpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0a)
#		define code$vcmpngtpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0a)
#		define code$vcmpngtpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0a)
#		define code$vcmpngtps(state,n,...) code$vcmpngtps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngtps$argc02(state,a1,a2) code$vcmpngtps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngtps$argc02$1(...) code$vcmpngtps$argc02$2(__VA_ARGS__)
#		define code$vcmpngtps$argc02$2(state,t1,t2,a1,a2) code$vcmpngtps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngtps$argc03(state,a1,a2,a3) code$vcmpngtps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngtps$argc03$1(...) code$vcmpngtps$argc03$2(__VA_ARGS__)
#		define code$vcmpngtps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngtps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngtps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0a)
#		define code$vcmpngtps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0a)
#		define code$vcmpngtps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0a)
#		define code$vcmpngtps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0a)
#		define code$vcmpngtsd(state,n,...) code$vcmpngtsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngtsd$argc02(state,a1,a2) code$vcmpngtsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngtsd$argc02$1(...) code$vcmpngtsd$argc02$2(__VA_ARGS__)
#		define code$vcmpngtsd$argc02$2(state,t1,t2,a1,a2) code$vcmpngtsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngtsd$argc03(state,a1,a2,a3) code$vcmpngtsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngtsd$argc03$1(...) code$vcmpngtsd$argc03$2(__VA_ARGS__)
#		define code$vcmpngtsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngtsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngtsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0a)
#		define code$vcmpngtsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0a)
#		define code$vcmpngtss(state,n,...) code$vcmpngtss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpngtss$argc02(state,a1,a2) code$vcmpngtss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpngtss$argc02$1(...) code$vcmpngtss$argc02$2(__VA_ARGS__)
#		define code$vcmpngtss$argc02$2(state,t1,t2,a1,a2) code$vcmpngtss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpngtss$argc03(state,a1,a2,a3) code$vcmpngtss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpngtss$argc03$1(...) code$vcmpngtss$argc03$2(__VA_ARGS__)
#		define code$vcmpngtss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpngtss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpngtss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0a)
#		define code$vcmpngtss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0a)
#		define code$vcmpngtss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0a)
#		define code$vcmpngtss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0a)
#		define code$vcmpnle_uqpd(state,n,...) code$vcmpnle_uqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnle_uqpd$argc02(state,a1,a2) code$vcmpnle_uqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnle_uqpd$argc02$1(...) code$vcmpnle_uqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpnle_uqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpnle_uqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnle_uqpd$argc03(state,a1,a2,a3) code$vcmpnle_uqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnle_uqpd$argc03$1(...) code$vcmpnle_uqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpnle_uqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnle_uqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnle_uqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 16)
#		define code$vcmpnle_uqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 16)
#		define code$vcmpnle_uqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 16)
#		define code$vcmpnle_uqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 16)
#		define code$vcmpnle_uqps(state,n,...) code$vcmpnle_uqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnle_uqps$argc02(state,a1,a2) code$vcmpnle_uqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnle_uqps$argc02$1(...) code$vcmpnle_uqps$argc02$2(__VA_ARGS__)
#		define code$vcmpnle_uqps$argc02$2(state,t1,t2,a1,a2) code$vcmpnle_uqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnle_uqps$argc03(state,a1,a2,a3) code$vcmpnle_uqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnle_uqps$argc03$1(...) code$vcmpnle_uqps$argc03$2(__VA_ARGS__)
#		define code$vcmpnle_uqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnle_uqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnle_uqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 16)
#		define code$vcmpnle_uqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 16)
#		define code$vcmpnle_uqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 16)
#		define code$vcmpnle_uqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 16)
#		define code$vcmpnle_uqsd(state,n,...) code$vcmpnle_uqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnle_uqsd$argc02(state,a1,a2) code$vcmpnle_uqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnle_uqsd$argc02$1(...) code$vcmpnle_uqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpnle_uqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpnle_uqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnle_uqsd$argc03(state,a1,a2,a3) code$vcmpnle_uqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnle_uqsd$argc03$1(...) code$vcmpnle_uqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpnle_uqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnle_uqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnle_uqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 16)
#		define code$vcmpnle_uqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 16)
#		define code$vcmpnle_uqss(state,n,...) code$vcmpnle_uqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnle_uqss$argc02(state,a1,a2) code$vcmpnle_uqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnle_uqss$argc02$1(...) code$vcmpnle_uqss$argc02$2(__VA_ARGS__)
#		define code$vcmpnle_uqss$argc02$2(state,t1,t2,a1,a2) code$vcmpnle_uqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnle_uqss$argc03(state,a1,a2,a3) code$vcmpnle_uqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnle_uqss$argc03$1(...) code$vcmpnle_uqss$argc03$2(__VA_ARGS__)
#		define code$vcmpnle_uqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnle_uqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnle_uqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 16)
#		define code$vcmpnle_uqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 16)
#		define code$vcmpnle_uqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 16)
#		define code$vcmpnle_uqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 16)
#		define code$vcmpnlepd(state,n,...) code$vcmpnlepd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnlepd$argc02(state,a1,a2) code$vcmpnlepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnlepd$argc02$1(...) code$vcmpnlepd$argc02$2(__VA_ARGS__)
#		define code$vcmpnlepd$argc02$2(state,t1,t2,a1,a2) code$vcmpnlepd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnlepd$argc03(state,a1,a2,a3) code$vcmpnlepd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnlepd$argc03$1(...) code$vcmpnlepd$argc03$2(__VA_ARGS__)
#		define code$vcmpnlepd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnlepd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnlepd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnlepd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnlepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 06)
#		define code$vcmpnlepd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnlepd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnlepd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 06)
#		define code$vcmpnlepd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnlepd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnlepd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 06)
#		define code$vcmpnlepd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnlepd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnlepd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 06)
#		define code$vcmpnleps(state,n,...) code$vcmpnleps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnleps$argc02(state,a1,a2) code$vcmpnleps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnleps$argc02$1(...) code$vcmpnleps$argc02$2(__VA_ARGS__)
#		define code$vcmpnleps$argc02$2(state,t1,t2,a1,a2) code$vcmpnleps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnleps$argc03(state,a1,a2,a3) code$vcmpnleps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnleps$argc03$1(...) code$vcmpnleps$argc03$2(__VA_ARGS__)
#		define code$vcmpnleps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnleps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnleps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnleps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnleps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 06)
#		define code$vcmpnleps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnleps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnleps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 06)
#		define code$vcmpnleps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnleps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnleps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 06)
#		define code$vcmpnleps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnleps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnleps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 06)
#		define code$vcmpnlesd(state,n,...) code$vcmpnlesd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnlesd$argc02(state,a1,a2) code$vcmpnlesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnlesd$argc02$1(...) code$vcmpnlesd$argc02$2(__VA_ARGS__)
#		define code$vcmpnlesd$argc02$2(state,t1,t2,a1,a2) code$vcmpnlesd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnlesd$argc03(state,a1,a2,a3) code$vcmpnlesd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnlesd$argc03$1(...) code$vcmpnlesd$argc03$2(__VA_ARGS__)
#		define code$vcmpnlesd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnlesd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnlesd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnlesd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnlesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 06)
#		define code$vcmpnlesd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnlesd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnlesd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 06)
#		define code$vcmpnless(state,n,...) code$vcmpnless$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnless$argc02(state,a1,a2) code$vcmpnless$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnless$argc02$1(...) code$vcmpnless$argc02$2(__VA_ARGS__)
#		define code$vcmpnless$argc02$2(state,t1,t2,a1,a2) code$vcmpnless$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnless$argc03(state,a1,a2,a3) code$vcmpnless$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnless$argc03$1(...) code$vcmpnless$argc03$2(__VA_ARGS__)
#		define code$vcmpnless$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnless$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnless$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnless$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 06)
#		define code$vcmpnless$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 06)
#		define code$vcmpnless$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnless$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 06)
#		define code$vcmpnless$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 06)
#		define code$vcmpnlt_uqpd(state,n,...) code$vcmpnlt_uqpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnlt_uqpd$argc02(state,a1,a2) code$vcmpnlt_uqpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnlt_uqpd$argc02$1(...) code$vcmpnlt_uqpd$argc02$2(__VA_ARGS__)
#		define code$vcmpnlt_uqpd$argc02$2(state,t1,t2,a1,a2) code$vcmpnlt_uqpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnlt_uqpd$argc03(state,a1,a2,a3) code$vcmpnlt_uqpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnlt_uqpd$argc03$1(...) code$vcmpnlt_uqpd$argc03$2(__VA_ARGS__)
#		define code$vcmpnlt_uqpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnlt_uqpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnlt_uqpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 15)
#		define code$vcmpnlt_uqps(state,n,...) code$vcmpnlt_uqps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnlt_uqps$argc02(state,a1,a2) code$vcmpnlt_uqps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnlt_uqps$argc02$1(...) code$vcmpnlt_uqps$argc02$2(__VA_ARGS__)
#		define code$vcmpnlt_uqps$argc02$2(state,t1,t2,a1,a2) code$vcmpnlt_uqps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnlt_uqps$argc03(state,a1,a2,a3) code$vcmpnlt_uqps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnlt_uqps$argc03$1(...) code$vcmpnlt_uqps$argc03$2(__VA_ARGS__)
#		define code$vcmpnlt_uqps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnlt_uqps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnlt_uqps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 15)
#		define code$vcmpnlt_uqps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 15)
#		define code$vcmpnlt_uqps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 15)
#		define code$vcmpnlt_uqps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 15)
#		define code$vcmpnlt_uqsd(state,n,...) code$vcmpnlt_uqsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnlt_uqsd$argc02(state,a1,a2) code$vcmpnlt_uqsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnlt_uqsd$argc02$1(...) code$vcmpnlt_uqsd$argc02$2(__VA_ARGS__)
#		define code$vcmpnlt_uqsd$argc02$2(state,t1,t2,a1,a2) code$vcmpnlt_uqsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnlt_uqsd$argc03(state,a1,a2,a3) code$vcmpnlt_uqsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnlt_uqsd$argc03$1(...) code$vcmpnlt_uqsd$argc03$2(__VA_ARGS__)
#		define code$vcmpnlt_uqsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnlt_uqsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnlt_uqsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 15)
#		define code$vcmpnlt_uqsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 15)
#		define code$vcmpnlt_uqss(state,n,...) code$vcmpnlt_uqss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnlt_uqss$argc02(state,a1,a2) code$vcmpnlt_uqss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnlt_uqss$argc02$1(...) code$vcmpnlt_uqss$argc02$2(__VA_ARGS__)
#		define code$vcmpnlt_uqss$argc02$2(state,t1,t2,a1,a2) code$vcmpnlt_uqss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnlt_uqss$argc03(state,a1,a2,a3) code$vcmpnlt_uqss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnlt_uqss$argc03$1(...) code$vcmpnlt_uqss$argc03$2(__VA_ARGS__)
#		define code$vcmpnlt_uqss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnlt_uqss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnlt_uqss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 15)
#		define code$vcmpnlt_uqss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 15)
#		define code$vcmpnlt_uqss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 15)
#		define code$vcmpnlt_uqss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 15)
#		define code$vcmpnltpd(state,n,...) code$vcmpnltpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnltpd$argc02(state,a1,a2) code$vcmpnltpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnltpd$argc02$1(...) code$vcmpnltpd$argc02$2(__VA_ARGS__)
#		define code$vcmpnltpd$argc02$2(state,t1,t2,a1,a2) code$vcmpnltpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnltpd$argc03(state,a1,a2,a3) code$vcmpnltpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnltpd$argc03$1(...) code$vcmpnltpd$argc03$2(__VA_ARGS__)
#		define code$vcmpnltpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnltpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnltpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 05)
#		define code$vcmpnltpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 05)
#		define code$vcmpnltpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 05)
#		define code$vcmpnltpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 05)
#		define code$vcmpnltps(state,n,...) code$vcmpnltps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnltps$argc02(state,a1,a2) code$vcmpnltps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnltps$argc02$1(...) code$vcmpnltps$argc02$2(__VA_ARGS__)
#		define code$vcmpnltps$argc02$2(state,t1,t2,a1,a2) code$vcmpnltps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnltps$argc03(state,a1,a2,a3) code$vcmpnltps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnltps$argc03$1(...) code$vcmpnltps$argc03$2(__VA_ARGS__)
#		define code$vcmpnltps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnltps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnltps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 05)
#		define code$vcmpnltps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 05)
#		define code$vcmpnltps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 05)
#		define code$vcmpnltps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 05)
#		define code$vcmpnltsd(state,n,...) code$vcmpnltsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnltsd$argc02(state,a1,a2) code$vcmpnltsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnltsd$argc02$1(...) code$vcmpnltsd$argc02$2(__VA_ARGS__)
#		define code$vcmpnltsd$argc02$2(state,t1,t2,a1,a2) code$vcmpnltsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnltsd$argc03(state,a1,a2,a3) code$vcmpnltsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnltsd$argc03$1(...) code$vcmpnltsd$argc03$2(__VA_ARGS__)
#		define code$vcmpnltsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnltsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnltsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 05)
#		define code$vcmpnltsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 05)
#		define code$vcmpnltss(state,n,...) code$vcmpnltss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpnltss$argc02(state,a1,a2) code$vcmpnltss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpnltss$argc02$1(...) code$vcmpnltss$argc02$2(__VA_ARGS__)
#		define code$vcmpnltss$argc02$2(state,t1,t2,a1,a2) code$vcmpnltss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpnltss$argc03(state,a1,a2,a3) code$vcmpnltss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpnltss$argc03$1(...) code$vcmpnltss$argc03$2(__VA_ARGS__)
#		define code$vcmpnltss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpnltss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpnltss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 05)
#		define code$vcmpnltss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 05)
#		define code$vcmpnltss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 05)
#		define code$vcmpnltss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 05)
#		define code$vcmpord_spd(state,n,...) code$vcmpord_spd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpord_spd$argc02(state,a1,a2) code$vcmpord_spd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpord_spd$argc02$1(...) code$vcmpord_spd$argc02$2(__VA_ARGS__)
#		define code$vcmpord_spd$argc02$2(state,t1,t2,a1,a2) code$vcmpord_spd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpord_spd$argc03(state,a1,a2,a3) code$vcmpord_spd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpord_spd$argc03$1(...) code$vcmpord_spd$argc03$2(__VA_ARGS__)
#		define code$vcmpord_spd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpord_spd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpord_spd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_spd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_spd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 17)
#		define code$vcmpord_spd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_spd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_spd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 17)
#		define code$vcmpord_spd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_spd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_spd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 17)
#		define code$vcmpord_spd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_spd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_spd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 17)
#		define code$vcmpord_sps(state,n,...) code$vcmpord_sps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpord_sps$argc02(state,a1,a2) code$vcmpord_sps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpord_sps$argc02$1(...) code$vcmpord_sps$argc02$2(__VA_ARGS__)
#		define code$vcmpord_sps$argc02$2(state,t1,t2,a1,a2) code$vcmpord_sps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpord_sps$argc03(state,a1,a2,a3) code$vcmpord_sps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpord_sps$argc03$1(...) code$vcmpord_sps$argc03$2(__VA_ARGS__)
#		define code$vcmpord_sps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpord_sps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpord_sps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_sps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_sps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 17)
#		define code$vcmpord_sps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_sps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_sps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 17)
#		define code$vcmpord_sps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_sps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_sps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 17)
#		define code$vcmpord_sps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_sps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_sps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 17)
#		define code$vcmpord_ssd(state,n,...) code$vcmpord_ssd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpord_ssd$argc02(state,a1,a2) code$vcmpord_ssd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpord_ssd$argc02$1(...) code$vcmpord_ssd$argc02$2(__VA_ARGS__)
#		define code$vcmpord_ssd$argc02$2(state,t1,t2,a1,a2) code$vcmpord_ssd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpord_ssd$argc03(state,a1,a2,a3) code$vcmpord_ssd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpord_ssd$argc03$1(...) code$vcmpord_ssd$argc03$2(__VA_ARGS__)
#		define code$vcmpord_ssd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpord_ssd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpord_ssd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_ssd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_ssd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 17)
#		define code$vcmpord_ssd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_ssd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_ssd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 17)
#		define code$vcmpord_sss(state,n,...) code$vcmpord_sss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpord_sss$argc02(state,a1,a2) code$vcmpord_sss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpord_sss$argc02$1(...) code$vcmpord_sss$argc02$2(__VA_ARGS__)
#		define code$vcmpord_sss$argc02$2(state,t1,t2,a1,a2) code$vcmpord_sss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpord_sss$argc03(state,a1,a2,a3) code$vcmpord_sss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpord_sss$argc03$1(...) code$vcmpord_sss$argc03$2(__VA_ARGS__)
#		define code$vcmpord_sss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpord_sss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpord_sss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_sss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 17)
#		define code$vcmpord_sss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 17)
#		define code$vcmpord_sss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_sss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 17)
#		define code$vcmpord_sss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 17)
#		define code$vcmpordpd(state,n,...) code$vcmpordpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpordpd$argc02(state,a1,a2) code$vcmpordpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpordpd$argc02$1(...) code$vcmpordpd$argc02$2(__VA_ARGS__)
#		define code$vcmpordpd$argc02$2(state,t1,t2,a1,a2) code$vcmpordpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpordpd$argc03(state,a1,a2,a3) code$vcmpordpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpordpd$argc03$1(...) code$vcmpordpd$argc03$2(__VA_ARGS__)
#		define code$vcmpordpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpordpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpordpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 07)
#		define code$vcmpordpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 07)
#		define code$vcmpordpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 07)
#		define code$vcmpordpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 07)
#		define code$vcmpordps(state,n,...) code$vcmpordps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpordps$argc02(state,a1,a2) code$vcmpordps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpordps$argc02$1(...) code$vcmpordps$argc02$2(__VA_ARGS__)
#		define code$vcmpordps$argc02$2(state,t1,t2,a1,a2) code$vcmpordps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpordps$argc03(state,a1,a2,a3) code$vcmpordps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpordps$argc03$1(...) code$vcmpordps$argc03$2(__VA_ARGS__)
#		define code$vcmpordps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpordps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpordps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 07)
#		define code$vcmpordps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 07)
#		define code$vcmpordps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 07)
#		define code$vcmpordps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 07)
#		define code$vcmpordsd(state,n,...) code$vcmpordsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpordsd$argc02(state,a1,a2) code$vcmpordsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpordsd$argc02$1(...) code$vcmpordsd$argc02$2(__VA_ARGS__)
#		define code$vcmpordsd$argc02$2(state,t1,t2,a1,a2) code$vcmpordsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpordsd$argc03(state,a1,a2,a3) code$vcmpordsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpordsd$argc03$1(...) code$vcmpordsd$argc03$2(__VA_ARGS__)
#		define code$vcmpordsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpordsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpordsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 07)
#		define code$vcmpordsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 07)
#		define code$vcmpordss(state,n,...) code$vcmpordss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpordss$argc02(state,a1,a2) code$vcmpordss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpordss$argc02$1(...) code$vcmpordss$argc02$2(__VA_ARGS__)
#		define code$vcmpordss$argc02$2(state,t1,t2,a1,a2) code$vcmpordss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpordss$argc03(state,a1,a2,a3) code$vcmpordss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpordss$argc03$1(...) code$vcmpordss$argc03$2(__VA_ARGS__)
#		define code$vcmpordss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpordss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpordss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 07)
#		define code$vcmpordss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 07)
#		define code$vcmpordss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 07)
#		define code$vcmpordss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 07)
#		define code$vcmppd(state,n,...) code$vcmppd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmppd$argc03(state,a1,a2,a3) code$vcmppd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmppd$argc03$1(...) code$vcmppd$argc03$2(__VA_ARGS__)
#		define code$vcmppd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmppd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmppd$argc04(state,a1,a2,a3,a4) code$vcmppd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vcmppd$argc04$1(...) code$vcmppd$argc04$2(__VA_ARGS__)
#		define code$vcmppd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vcmppd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vcmppd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmppd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmppd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmppd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmppd$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmppd$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmppd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmppd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmppd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmppd$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmppd$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmppd$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpps(state,n,...) code$vcmpps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpps$argc03(state,a1,a2,a3) code$vcmpps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpps$argc03$1(...) code$vcmpps$argc03$2(__VA_ARGS__)
#		define code$vcmpps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpps$argc04(state,a1,a2,a3,a4) code$vcmpps$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vcmpps$argc04$1(...) code$vcmpps$argc04$2(__VA_ARGS__)
#		define code$vcmpps$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vcmpps$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vcmpps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpps$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpps$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpps$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpps$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpps$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpps$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpps$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpps$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpps$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpsd(state,n,...) code$vcmpsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpsd$argc03(state,a1,a2,a3) code$vcmpsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpsd$argc03$1(...) code$vcmpsd$argc03$2(__VA_ARGS__)
#		define code$vcmpsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpsd$argc04(state,a1,a2,a3,a4) code$vcmpsd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vcmpsd$argc04$1(...) code$vcmpsd$argc04$2(__VA_ARGS__)
#		define code$vcmpsd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vcmpsd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vcmpsd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpsd$argt$mmreg128$mem64$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpsd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpsd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpsd$argt$mmreg128$mmreg128$mem64$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpsd$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpss(state,n,...) code$vcmpss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpss$argc03(state,a1,a2,a3) code$vcmpss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpss$argc03$1(...) code$vcmpss$argc03$2(__VA_ARGS__)
#		define code$vcmpss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpss$argc04(state,a1,a2,a3,a4) code$vcmpss$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vcmpss$argc04$1(...) code$vcmpss$argc04$2(__VA_ARGS__)
#		define code$vcmpss$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vcmpss$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vcmpss$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpss$argt$mmreg128$mem32$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpss$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcmpss$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpss$argt$mmreg128$mmreg128$mem32$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmpss$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vcmptrue_uspd(state,n,...) code$vcmptrue_uspd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptrue_uspd$argc02(state,a1,a2) code$vcmptrue_uspd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptrue_uspd$argc02$1(...) code$vcmptrue_uspd$argc02$2(__VA_ARGS__)
#		define code$vcmptrue_uspd$argc02$2(state,t1,t2,a1,a2) code$vcmptrue_uspd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptrue_uspd$argc03(state,a1,a2,a3) code$vcmptrue_uspd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptrue_uspd$argc03$1(...) code$vcmptrue_uspd$argc03$2(__VA_ARGS__)
#		define code$vcmptrue_uspd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptrue_uspd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptrue_uspd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_uspd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_uspd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1f)
#		define code$vcmptrue_uspd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_uspd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_uspd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1f)
#		define code$vcmptrue_uspd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_uspd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_uspd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1f)
#		define code$vcmptrue_uspd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_uspd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_uspd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1f)
#		define code$vcmptrue_usps(state,n,...) code$vcmptrue_usps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptrue_usps$argc02(state,a1,a2) code$vcmptrue_usps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptrue_usps$argc02$1(...) code$vcmptrue_usps$argc02$2(__VA_ARGS__)
#		define code$vcmptrue_usps$argc02$2(state,t1,t2,a1,a2) code$vcmptrue_usps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptrue_usps$argc03(state,a1,a2,a3) code$vcmptrue_usps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptrue_usps$argc03$1(...) code$vcmptrue_usps$argc03$2(__VA_ARGS__)
#		define code$vcmptrue_usps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptrue_usps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptrue_usps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_usps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_usps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1f)
#		define code$vcmptrue_usps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_usps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_usps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1f)
#		define code$vcmptrue_usps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_usps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_usps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1f)
#		define code$vcmptrue_usps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_usps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_usps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1f)
#		define code$vcmptrue_ussd(state,n,...) code$vcmptrue_ussd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptrue_ussd$argc02(state,a1,a2) code$vcmptrue_ussd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptrue_ussd$argc02$1(...) code$vcmptrue_ussd$argc02$2(__VA_ARGS__)
#		define code$vcmptrue_ussd$argc02$2(state,t1,t2,a1,a2) code$vcmptrue_ussd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptrue_ussd$argc03(state,a1,a2,a3) code$vcmptrue_ussd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptrue_ussd$argc03$1(...) code$vcmptrue_ussd$argc03$2(__VA_ARGS__)
#		define code$vcmptrue_ussd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptrue_ussd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptrue_ussd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_ussd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_ussd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1f)
#		define code$vcmptrue_ussd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_ussd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_ussd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1f)
#		define code$vcmptrue_usss(state,n,...) code$vcmptrue_usss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptrue_usss$argc02(state,a1,a2) code$vcmptrue_usss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptrue_usss$argc02$1(...) code$vcmptrue_usss$argc02$2(__VA_ARGS__)
#		define code$vcmptrue_usss$argc02$2(state,t1,t2,a1,a2) code$vcmptrue_usss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptrue_usss$argc03(state,a1,a2,a3) code$vcmptrue_usss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptrue_usss$argc03$1(...) code$vcmptrue_usss$argc03$2(__VA_ARGS__)
#		define code$vcmptrue_usss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptrue_usss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptrue_usss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_usss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 1f)
#		define code$vcmptrue_usss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 1f)
#		define code$vcmptrue_usss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_usss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 1f)
#		define code$vcmptrue_usss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 1f)
#		define code$vcmptruepd(state,n,...) code$vcmptruepd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptruepd$argc02(state,a1,a2) code$vcmptruepd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptruepd$argc02$1(...) code$vcmptruepd$argc02$2(__VA_ARGS__)
#		define code$vcmptruepd$argc02$2(state,t1,t2,a1,a2) code$vcmptruepd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptruepd$argc03(state,a1,a2,a3) code$vcmptruepd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptruepd$argc03$1(...) code$vcmptruepd$argc03$2(__VA_ARGS__)
#		define code$vcmptruepd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptruepd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptruepd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruepd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruepd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0f)
#		define code$vcmptruepd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruepd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruepd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0f)
#		define code$vcmptruepd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruepd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruepd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0f)
#		define code$vcmptruepd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruepd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruepd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0f)
#		define code$vcmptrueps(state,n,...) code$vcmptrueps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptrueps$argc02(state,a1,a2) code$vcmptrueps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptrueps$argc02$1(...) code$vcmptrueps$argc02$2(__VA_ARGS__)
#		define code$vcmptrueps$argc02$2(state,t1,t2,a1,a2) code$vcmptrueps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptrueps$argc03(state,a1,a2,a3) code$vcmptrueps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptrueps$argc03$1(...) code$vcmptrueps$argc03$2(__VA_ARGS__)
#		define code$vcmptrueps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptrueps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptrueps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptrueps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptrueps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0f)
#		define code$vcmptrueps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptrueps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptrueps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0f)
#		define code$vcmptrueps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptrueps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptrueps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0f)
#		define code$vcmptrueps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptrueps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptrueps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0f)
#		define code$vcmptruesd(state,n,...) code$vcmptruesd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptruesd$argc02(state,a1,a2) code$vcmptruesd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptruesd$argc02$1(...) code$vcmptruesd$argc02$2(__VA_ARGS__)
#		define code$vcmptruesd$argc02$2(state,t1,t2,a1,a2) code$vcmptruesd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptruesd$argc03(state,a1,a2,a3) code$vcmptruesd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptruesd$argc03$1(...) code$vcmptruesd$argc03$2(__VA_ARGS__)
#		define code$vcmptruesd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptruesd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptruesd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruesd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruesd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0f)
#		define code$vcmptruesd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruesd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruesd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0f)
#		define code$vcmptruess(state,n,...) code$vcmptruess$argc##n(state, ##__VA_ARGS__)
#		define code$vcmptruess$argc02(state,a1,a2) code$vcmptruess$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmptruess$argc02$1(...) code$vcmptruess$argc02$2(__VA_ARGS__)
#		define code$vcmptruess$argc02$2(state,t1,t2,a1,a2) code$vcmptruess$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmptruess$argc03(state,a1,a2,a3) code$vcmptruess$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmptruess$argc03$1(...) code$vcmptruess$argc03$2(__VA_ARGS__)
#		define code$vcmptruess$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmptruess$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmptruess$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruess$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 0f)
#		define code$vcmptruess$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 0f)
#		define code$vcmptruess$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruess$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 0f)
#		define code$vcmptruess$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 0f)
#		define code$vcmpunord_spd(state,n,...) code$vcmpunord_spd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunord_spd$argc02(state,a1,a2) code$vcmpunord_spd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunord_spd$argc02$1(...) code$vcmpunord_spd$argc02$2(__VA_ARGS__)
#		define code$vcmpunord_spd$argc02$2(state,t1,t2,a1,a2) code$vcmpunord_spd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunord_spd$argc03(state,a1,a2,a3) code$vcmpunord_spd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunord_spd$argc03$1(...) code$vcmpunord_spd$argc03$2(__VA_ARGS__)
#		define code$vcmpunord_spd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunord_spd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunord_spd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_spd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_spd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 13)
#		define code$vcmpunord_spd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_spd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_spd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 13)
#		define code$vcmpunord_spd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_spd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_spd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 13)
#		define code$vcmpunord_spd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_spd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_spd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 13)
#		define code$vcmpunord_sps(state,n,...) code$vcmpunord_sps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunord_sps$argc02(state,a1,a2) code$vcmpunord_sps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunord_sps$argc02$1(...) code$vcmpunord_sps$argc02$2(__VA_ARGS__)
#		define code$vcmpunord_sps$argc02$2(state,t1,t2,a1,a2) code$vcmpunord_sps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunord_sps$argc03(state,a1,a2,a3) code$vcmpunord_sps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunord_sps$argc03$1(...) code$vcmpunord_sps$argc03$2(__VA_ARGS__)
#		define code$vcmpunord_sps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunord_sps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunord_sps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_sps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_sps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 13)
#		define code$vcmpunord_sps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_sps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_sps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 13)
#		define code$vcmpunord_sps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_sps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_sps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 13)
#		define code$vcmpunord_sps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_sps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_sps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 13)
#		define code$vcmpunord_ssd(state,n,...) code$vcmpunord_ssd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunord_ssd$argc02(state,a1,a2) code$vcmpunord_ssd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunord_ssd$argc02$1(...) code$vcmpunord_ssd$argc02$2(__VA_ARGS__)
#		define code$vcmpunord_ssd$argc02$2(state,t1,t2,a1,a2) code$vcmpunord_ssd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunord_ssd$argc03(state,a1,a2,a3) code$vcmpunord_ssd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunord_ssd$argc03$1(...) code$vcmpunord_ssd$argc03$2(__VA_ARGS__)
#		define code$vcmpunord_ssd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunord_ssd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunord_ssd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_ssd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_ssd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 13)
#		define code$vcmpunord_ssd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_ssd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_ssd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 13)
#		define code$vcmpunord_sss(state,n,...) code$vcmpunord_sss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunord_sss$argc02(state,a1,a2) code$vcmpunord_sss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunord_sss$argc02$1(...) code$vcmpunord_sss$argc02$2(__VA_ARGS__)
#		define code$vcmpunord_sss$argc02$2(state,t1,t2,a1,a2) code$vcmpunord_sss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunord_sss$argc03(state,a1,a2,a3) code$vcmpunord_sss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunord_sss$argc03$1(...) code$vcmpunord_sss$argc03$2(__VA_ARGS__)
#		define code$vcmpunord_sss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunord_sss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunord_sss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_sss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 13)
#		define code$vcmpunord_sss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 13)
#		define code$vcmpunord_sss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_sss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 13)
#		define code$vcmpunord_sss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 13)
#		define code$vcmpunordpd(state,n,...) code$vcmpunordpd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunordpd$argc02(state,a1,a2) code$vcmpunordpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunordpd$argc02$1(...) code$vcmpunordpd$argc02$2(__VA_ARGS__)
#		define code$vcmpunordpd$argc02$2(state,t1,t2,a1,a2) code$vcmpunordpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunordpd$argc03(state,a1,a2,a3) code$vcmpunordpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunordpd$argc03$1(...) code$vcmpunordpd$argc03$2(__VA_ARGS__)
#		define code$vcmpunordpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunordpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunordpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 03)
#		define code$vcmpunordpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 03)
#		define code$vcmpunordpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 03)
#		define code$vcmpunordpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 03)
#		define code$vcmpunordps(state,n,...) code$vcmpunordps$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunordps$argc02(state,a1,a2) code$vcmpunordps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunordps$argc02$1(...) code$vcmpunordps$argc02$2(__VA_ARGS__)
#		define code$vcmpunordps$argc02$2(state,t1,t2,a1,a2) code$vcmpunordps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunordps$argc03(state,a1,a2,a3) code$vcmpunordps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunordps$argc03$1(...) code$vcmpunordps$argc03$2(__VA_ARGS__)
#		define code$vcmpunordps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunordps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunordps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 03)
#		define code$vcmpunordps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 03)
#		define code$vcmpunordps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 03)
#		define code$vcmpunordps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 03)
#		define code$vcmpunordsd(state,n,...) code$vcmpunordsd$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunordsd$argc02(state,a1,a2) code$vcmpunordsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunordsd$argc02$1(...) code$vcmpunordsd$argc02$2(__VA_ARGS__)
#		define code$vcmpunordsd$argc02$2(state,t1,t2,a1,a2) code$vcmpunordsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunordsd$argc03(state,a1,a2,a3) code$vcmpunordsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunordsd$argc03$1(...) code$vcmpunordsd$argc03$2(__VA_ARGS__)
#		define code$vcmpunordsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunordsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunordsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 03)
#		define code$vcmpunordsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 03)
#		define code$vcmpunordss(state,n,...) code$vcmpunordss$argc##n(state, ##__VA_ARGS__)
#		define code$vcmpunordss$argc02(state,a1,a2) code$vcmpunordss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcmpunordss$argc02$1(...) code$vcmpunordss$argc02$2(__VA_ARGS__)
#		define code$vcmpunordss$argc02$2(state,t1,t2,a1,a2) code$vcmpunordss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcmpunordss$argc03(state,a1,a2,a3) code$vcmpunordss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcmpunordss$argc03$1(...) code$vcmpunordss$argc03$2(__VA_ARGS__)
#		define code$vcmpunordss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcmpunordss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcmpunordss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rm(_0, _1), 03)
#		define code$vcmpunordss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), c2, modrm$rr(_0, _1), 03)
#		define code$vcmpunordss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rm(_0, _2), 03)
#		define code$vcmpunordss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), c2, modrm$rr(_0, _2), 03)
#		define code$vcomisd(state,n,...) code$vcomisd$argc##n(state, ##__VA_ARGS__)
#		define code$vcomisd$argc02(state,a1,a2) code$vcomisd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcomisd$argc02$1(...) code$vcomisd$argc02$2(__VA_ARGS__)
#		define code$vcomisd$argc02$2(state,t1,t2,a1,a2) code$vcomisd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcomisd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 2f, modrm$rm(_0, _1))
#		define code$vcomisd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 2f, modrm$rm(_0, _1))
#		define code$vcomisd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 2f, modrm$rr(_0, _1))
#		define code$vcomiss(state,n,...) code$vcomiss$argc##n(state, ##__VA_ARGS__)
#		define code$vcomiss$argc02(state,a1,a2) code$vcomiss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcomiss$argc02$1(...) code$vcomiss$argc02$2(__VA_ARGS__)
#		define code$vcomiss$argc02$2(state,t1,t2,a1,a2) code$vcomiss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcomiss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 2f, modrm$rm(_0, _1))
#		define code$vcomiss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 2f, modrm$rm(_0, _1))
#		define code$vcomiss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 2f, modrm$rr(_0, _1))
#		define code$vcvtdq2pd(state,n,...) code$vcvtdq2pd$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtdq2pd$argc02(state,a1,a2) code$vcvtdq2pd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtdq2pd$argc02$1(...) code$vcvtdq2pd$argc02$2(__VA_ARGS__)
#		define code$vcvtdq2pd$argc02$2(state,t1,t2,a1,a2) code$vcvtdq2pd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtdq2pd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvtdq2pd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvtdq2pd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rr(_0, _1))
#		define code$vcvtdq2pd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvtdq2pd$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvtdq2pd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rr(_0, _1))
#		define code$vcvtdq2ps(state,n,...) code$vcvtdq2ps$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtdq2ps$argc02(state,a1,a2) code$vcvtdq2ps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtdq2ps$argc02$1(...) code$vcvtdq2ps$argc02$2(__VA_ARGS__)
#		define code$vcvtdq2ps$argc02$2(state,t1,t2,a1,a2) code$vcvtdq2ps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtdq2ps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtdq2ps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtdq2ps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rr(_0, _1))
#		define code$vcvtdq2ps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtdq2ps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtdq2ps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rr(_0, _1))
#		define code$vcvtpd2dq(state,n,...) code$vcvtpd2dq$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtpd2dq$argc02(state,a1,a2) code$vcvtpd2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtpd2dq$argc02$1(...) code$vcvtpd2dq$argc02$2(__VA_ARGS__)
#		define code$vcvtpd2dq$argc02$2(state,t1,t2,a1,a2) code$vcvtpd2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtpd2dq$argt$mmreg128$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for vcvtpd2dq(mmreg128, mem)"))
#		define code$vcvtpd2dq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvtpd2dq$argt$mmreg128$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvtpd2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rr(_0, _1))
#		define code$vcvtpd2dq$argt$mmreg128$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rr(_0, _1))
#		define code$vcvtpd2ps(state,n,...) code$vcvtpd2ps$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtpd2ps$argc02(state,a1,a2) code$vcvtpd2ps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtpd2ps$argc02$1(...) code$vcvtpd2ps$argc02$2(__VA_ARGS__)
#		define code$vcvtpd2ps$argc02$2(state,t1,t2,a1,a2) code$vcvtpd2ps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtpd2ps$argt$mmreg128$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for vcvtpd2ps(mmreg128, mem)"))
#		define code$vcvtpd2ps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtpd2ps$argt$mmreg128$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtpd2ps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rr(_0, _1))
#		define code$vcvtpd2ps$argt$mmreg128$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rr(_0, _1))
#		define code$vcvtph2ps(state,n,...) code$vcvtph2ps$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtph2ps$argc02(state,a1,a2) code$vcvtph2ps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtph2ps$argc02$1(...) code$vcvtph2ps$argc02$2(__VA_ARGS__)
#		define code$vcvtph2ps$argc02$2(state,t1,t2,a1,a2) code$vcvtph2ps$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtph2ps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 13, modrm$rm(_0, _1))
#		define code$vcvtph2ps$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 13, modrm$rm(_0, _1))
#		define code$vcvtph2ps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 13, modrm$rr(_0, _1))
#		define code$vcvtph2ps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 13, modrm$rm(_0, _1))
#		define code$vcvtph2ps$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 13, modrm$rm(_0, _1))
#		define code$vcvtph2ps$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 13, modrm$rr(_0, _1))
#		define code$vcvtps2dq(state,n,...) code$vcvtps2dq$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtps2dq$argc02(state,a1,a2) code$vcvtps2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtps2dq$argc02$1(...) code$vcvtps2dq$argc02$2(__VA_ARGS__)
#		define code$vcvtps2dq$argc02$2(state,t1,t2,a1,a2) code$vcvtps2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtps2dq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtps2dq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtps2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rr(_0, _1))
#		define code$vcvtps2dq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtps2dq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvtps2dq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rr(_0, _1))
#		define code$vcvtps2pd(state,n,...) code$vcvtps2pd$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtps2pd$argc02(state,a1,a2) code$vcvtps2pd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtps2pd$argc02$1(...) code$vcvtps2pd$argc02$2(__VA_ARGS__)
#		define code$vcvtps2pd$argc02$2(state,t1,t2,a1,a2) code$vcvtps2pd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtps2pd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtps2pd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtps2pd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rr(_0, _1))
#		define code$vcvtps2pd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtps2pd$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtps2pd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 5a, modrm$rr(_0, _1))
#		define code$vcvtps2ph(state,n,...) code$vcvtps2ph$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtps2ph$argc03(state,a1,a2,a3) code$vcvtps2ph$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcvtps2ph$argc03$1(...) code$vcvtps2ph$argc03$2(__VA_ARGS__)
#		define code$vcvtps2ph$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcvtps2ph$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcvtps2ph$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 1d, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcvtps2ph$argt$mem$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 1d, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcvtps2ph$argt$mem128$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 1d, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcvtps2ph$argt$mem64$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 1d, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcvtps2ph$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 1d, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcvtps2ph$argt$mmreg128$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 1d, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vcvtsd2si(state,n,...) code$vcvtsd2si$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtsd2si$argc02(state,a1,a2) code$vcvtsd2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtsd2si$argc02$1(...) code$vcvtsd2si$argc02$2(__VA_ARGS__)
#		define code$vcvtsd2si$argc02$2(state,t1,t2,a1,a2) code$vcvtsd2si$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtsd2si$argt$reg32$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtsd2si$argt$reg32$mem64(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtsd2si$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1), 2d, modrm$rr(_0, _1))
#		define code$vcvtsd2si$argt$reg64$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtsd2si$argt$reg64$mem64(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtsd2si$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1), 2d, modrm$rr(_0, _1))
#		define code$vcvtsd2ss(state,n,...) code$vcvtsd2ss$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtsd2ss$argc02(state,a1,a2) code$vcvtsd2ss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtsd2ss$argc02$1(...) code$vcvtsd2ss$argc02$2(__VA_ARGS__)
#		define code$vcvtsd2ss$argc02$2(state,t1,t2,a1,a2) code$vcvtsd2ss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtsd2ss$argc03(state,a1,a2,a3) code$vcvtsd2ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcvtsd2ss$argc03$1(...) code$vcvtsd2ss$argc03$2(__VA_ARGS__)
#		define code$vcvtsd2ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcvtsd2ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcvtsd2ss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtsd2ss$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtsd2ss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5a, modrm$rr(_0, _1))
#		define code$vcvtsd2ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5a, modrm$rm(_0, _2))
#		define code$vcvtsd2ss$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5a, modrm$rm(_0, _2))
#		define code$vcvtsd2ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5a, modrm$rr(_0, _2))
#		define code$vcvtsi2sd(state,n,...) code$vcvtsi2sd$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtsi2sd$argc02(state,a1,a2) code$vcvtsi2sd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtsi2sd$argc02$1(...) code$vcvtsi2sd$argc02$2(__VA_ARGS__)
#		define code$vcvtsi2sd$argc02$2(state,t1,t2,a1,a2) code$vcvtsi2sd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtsi2sd$argc03(state,a1,a2,a3) code$vcvtsi2sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcvtsi2sd$argc03$1(...) code$vcvtsi2sd$argc03$2(__VA_ARGS__)
#		define code$vcvtsi2sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcvtsi2sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcvtsi2sd$argt$mmreg128$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for vcvtsi2sd(mmreg128, mem)"))
#		define code$vcvtsi2sd$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vcvtsi2sd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vcvtsi2sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(error$if(1, "ambigous memory operand size for vcvtsi2sd(mmreg128, mmreg128, mem)"))
#		define code$vcvtsi2sd$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1, _2), 2a, modrm$rm(_0, _2))
#		define code$vcvtsi2sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1, _2), 2a, modrm$rm(_0, _2))
#		define code$vcvtsi2sd$argt$mmreg128$mmreg128$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1, _2), 2a, modrm$rr(_0, _2))
#		define code$vcvtsi2sd$argt$mmreg128$mmreg128$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1, _2), 2a, modrm$rr(_0, _2))
#		define code$vcvtsi2sd$argt$mmreg128$reg32(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _0, _1), 2a, modrm$rr(_0, _1))
#		define code$vcvtsi2sd$argt$mmreg128$reg64(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _0, _1), 2a, modrm$rr(_0, _1))
#		define code$vcvtsi2ss(state,n,...) code$vcvtsi2ss$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtsi2ss$argc02(state,a1,a2) code$vcvtsi2ss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtsi2ss$argc02$1(...) code$vcvtsi2ss$argc02$2(__VA_ARGS__)
#		define code$vcvtsi2ss$argc02$2(state,t1,t2,a1,a2) code$vcvtsi2ss$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtsi2ss$argc03(state,a1,a2,a3) code$vcvtsi2ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcvtsi2ss$argc03$1(...) code$vcvtsi2ss$argc03$2(__VA_ARGS__)
#		define code$vcvtsi2ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcvtsi2ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcvtsi2ss$argt$mmreg128$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for vcvtsi2ss(mmreg128, mem)"))
#		define code$vcvtsi2ss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vcvtsi2ss$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vcvtsi2ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(error$if(1, "ambigous memory operand size for vcvtsi2ss(mmreg128, mmreg128, mem)"))
#		define code$vcvtsi2ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1, _2), 2a, modrm$rm(_0, _2))
#		define code$vcvtsi2ss$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1, _2), 2a, modrm$rm(_0, _2))
#		define code$vcvtsi2ss$argt$mmreg128$mmreg128$reg32(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1, _2), 2a, modrm$rr(_0, _2))
#		define code$vcvtsi2ss$argt$mmreg128$mmreg128$reg64(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1, _2), 2a, modrm$rr(_0, _2))
#		define code$vcvtsi2ss$argt$mmreg128$reg32(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _0, _1), 2a, modrm$rr(_0, _1))
#		define code$vcvtsi2ss$argt$mmreg128$reg64(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _0, _1), 2a, modrm$rr(_0, _1))
#		define code$vcvtss2sd(state,n,...) code$vcvtss2sd$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtss2sd$argc02(state,a1,a2) code$vcvtss2sd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtss2sd$argc02$1(...) code$vcvtss2sd$argc02$2(__VA_ARGS__)
#		define code$vcvtss2sd$argc02$2(state,t1,t2,a1,a2) code$vcvtss2sd$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtss2sd$argc03(state,a1,a2,a3) code$vcvtss2sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vcvtss2sd$argc03$1(...) code$vcvtss2sd$argc03$2(__VA_ARGS__)
#		define code$vcvtss2sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vcvtss2sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vcvtss2sd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtss2sd$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _0, _1), 5a, modrm$rm(_0, _1))
#		define code$vcvtss2sd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _0, _1), 5a, modrm$rr(_0, _1))
#		define code$vcvtss2sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1, _2), 5a, modrm$rm(_0, _2))
#		define code$vcvtss2sd$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1, _2), 5a, modrm$rm(_0, _2))
#		define code$vcvtss2sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1, _2), 5a, modrm$rr(_0, _2))
#		define code$vcvtss2si(state,n,...) code$vcvtss2si$argc##n(state, ##__VA_ARGS__)
#		define code$vcvtss2si$argc02(state,a1,a2) code$vcvtss2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvtss2si$argc02$1(...) code$vcvtss2si$argc02$2(__VA_ARGS__)
#		define code$vcvtss2si$argc02$2(state,t1,t2,a1,a2) code$vcvtss2si$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvtss2si$argt$reg32$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtss2si$argt$reg32$mem32(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtss2si$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1), 2d, modrm$rr(_0, _1))
#		define code$vcvtss2si$argt$reg64$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtss2si$argt$reg64$mem32(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1), 2d, modrm$rm(_0, _1))
#		define code$vcvtss2si$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1), 2d, modrm$rr(_0, _1))
#		define code$vcvttpd2dq(state,n,...) code$vcvttpd2dq$argc##n(state, ##__VA_ARGS__)
#		define code$vcvttpd2dq$argc02(state,a1,a2) code$vcvttpd2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvttpd2dq$argc02$1(...) code$vcvttpd2dq$argc02$2(__VA_ARGS__)
#		define code$vcvttpd2dq$argc02$2(state,t1,t2,a1,a2) code$vcvttpd2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvttpd2dq$argt$mmreg128$mem(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for vcvttpd2dq(mmreg128, mem)"))
#		define code$vcvttpd2dq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvttpd2dq$argt$mmreg128$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rm(_0, _1))
#		define code$vcvttpd2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rr(_0, _1))
#		define code$vcvttpd2dq$argt$mmreg128$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), e6, modrm$rr(_0, _1))
#		define code$vcvttps2dq(state,n,...) code$vcvttps2dq$argc##n(state, ##__VA_ARGS__)
#		define code$vcvttps2dq$argc02(state,a1,a2) code$vcvttps2dq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvttps2dq$argc02$1(...) code$vcvttps2dq$argc02$2(__VA_ARGS__)
#		define code$vcvttps2dq$argc02$2(state,t1,t2,a1,a2) code$vcvttps2dq$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvttps2dq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvttps2dq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvttps2dq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rr(_0, _1))
#		define code$vcvttps2dq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvttps2dq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rm(_0, _1))
#		define code$vcvttps2dq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 5b, modrm$rr(_0, _1))
#		define code$vcvttsd2si(state,n,...) code$vcvttsd2si$argc##n(state, ##__VA_ARGS__)
#		define code$vcvttsd2si$argc02(state,a1,a2) code$vcvttsd2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvttsd2si$argc02$1(...) code$vcvttsd2si$argc02$2(__VA_ARGS__)
#		define code$vcvttsd2si$argc02$2(state,t1,t2,a1,a2) code$vcvttsd2si$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvttsd2si$argt$reg32$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttsd2si$argt$reg32$mem64(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttsd2si$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w0, _0, _1), 2c, modrm$rr(_0, _1))
#		define code$vcvttsd2si$argt$reg64$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttsd2si$argt$reg64$mem64(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttsd2si$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$w1, _0, _1), 2c, modrm$rr(_0, _1))
#		define code$vcvttss2si(state,n,...) code$vcvttss2si$argc##n(state, ##__VA_ARGS__)
#		define code$vcvttss2si$argc02(state,a1,a2) code$vcvttss2si$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vcvttss2si$argc02$1(...) code$vcvttss2si$argc02$2(__VA_ARGS__)
#		define code$vcvttss2si$argc02$2(state,t1,t2,a1,a2) code$vcvttss2si$argt$##t1##$##t2(state, a1,a2)
#		define code$vcvttss2si$argt$reg32$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttss2si$argt$reg32$mem32(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttss2si$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w0, _0, _1), 2c, modrm$rr(_0, _1))
#		define code$vcvttss2si$argt$reg64$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttss2si$argt$reg64$mem32(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1), 2c, modrm$rm(_0, _1))
#		define code$vcvttss2si$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$w1, _0, _1), 2c, modrm$rr(_0, _1))
#		define code$vdivpd(state,n,...) code$vdivpd$argc##n(state, ##__VA_ARGS__)
#		define code$vdivpd$argc02(state,a1,a2) code$vdivpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vdivpd$argc02$1(...) code$vdivpd$argc02$2(__VA_ARGS__)
#		define code$vdivpd$argc02$2(state,t1,t2,a1,a2) code$vdivpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vdivpd$argc03(state,a1,a2,a3) code$vdivpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vdivpd$argc03$1(...) code$vdivpd$argc03$2(__VA_ARGS__)
#		define code$vdivpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vdivpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vdivpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rr(_0, _1))
#		define code$vdivpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rr(_0, _2))
#		define code$vdivpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rr(_0, _1))
#		define code$vdivpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rr(_0, _2))
#		define code$vdivps(state,n,...) code$vdivps$argc##n(state, ##__VA_ARGS__)
#		define code$vdivps$argc02(state,a1,a2) code$vdivps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vdivps$argc02$1(...) code$vdivps$argc02$2(__VA_ARGS__)
#		define code$vdivps$argc02$2(state,t1,t2,a1,a2) code$vdivps$argt$##t1##$##t2(state, a1,a2)
#		define code$vdivps$argc03(state,a1,a2,a3) code$vdivps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vdivps$argc03$1(...) code$vdivps$argc03$2(__VA_ARGS__)
#		define code$vdivps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vdivps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vdivps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rr(_0, _1))
#		define code$vdivps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rr(_0, _2))
#		define code$vdivps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rr(_0, _1))
#		define code$vdivps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rr(_0, _2))
#		define code$vdivsd(state,n,...) code$vdivsd$argc##n(state, ##__VA_ARGS__)
#		define code$vdivsd$argc02(state,a1,a2) code$vdivsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vdivsd$argc02$1(...) code$vdivsd$argc02$2(__VA_ARGS__)
#		define code$vdivsd$argc02$2(state,t1,t2,a1,a2) code$vdivsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vdivsd$argc03(state,a1,a2,a3) code$vdivsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vdivsd$argc03$1(...) code$vdivsd$argc03$2(__VA_ARGS__)
#		define code$vdivsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vdivsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vdivsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rr(_0, _1))
#		define code$vdivsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rr(_0, _2))
#		define code$vdivss(state,n,...) code$vdivss$argc##n(state, ##__VA_ARGS__)
#		define code$vdivss$argc02(state,a1,a2) code$vdivss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vdivss$argc02$1(...) code$vdivss$argc02$2(__VA_ARGS__)
#		define code$vdivss$argc02$2(state,t1,t2,a1,a2) code$vdivss$argt$##t1##$##t2(state, a1,a2)
#		define code$vdivss$argc03(state,a1,a2,a3) code$vdivss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vdivss$argc03$1(...) code$vdivss$argc03$2(__VA_ARGS__)
#		define code$vdivss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vdivss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vdivss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rm(_0, _1))
#		define code$vdivss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5e, modrm$rr(_0, _1))
#		define code$vdivss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rm(_0, _2))
#		define code$vdivss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5e, modrm$rr(_0, _2))
#		define code$vdppd(state,n,...) code$vdppd$argc##n(state, ##__VA_ARGS__)
#		define code$vdppd$argc03(state,a1,a2,a3) code$vdppd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vdppd$argc03$1(...) code$vdppd$argc03$2(__VA_ARGS__)
#		define code$vdppd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vdppd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vdppd$argc04(state,a1,a2,a3,a4) code$vdppd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vdppd$argc04$1(...) code$vdppd$argc04$2(__VA_ARGS__)
#		define code$vdppd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vdppd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vdppd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 41, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdppd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 41, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdppd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 41, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdppd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 41, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdppd$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 41, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdppd$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 41, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdpps(state,n,...) code$vdpps$argc##n(state, ##__VA_ARGS__)
#		define code$vdpps$argc03(state,a1,a2,a3) code$vdpps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vdpps$argc03$1(...) code$vdpps$argc03$2(__VA_ARGS__)
#		define code$vdpps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vdpps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vdpps$argc04(state,a1,a2,a3,a4) code$vdpps$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vdpps$argc04$1(...) code$vdpps$argc04$2(__VA_ARGS__)
#		define code$vdpps$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vdpps$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vdpps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdpps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdpps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 40, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdpps$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdpps$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdpps$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 40, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdpps$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdpps$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdpps$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 40, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vdpps$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdpps$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vdpps$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 40, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vextractf128(state,n,...) code$vextractf128$argc##n(state, ##__VA_ARGS__)
#		define code$vextractf128$argc03(state,a1,a2,a3) code$vextractf128$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vextractf128$argc03$1(...) code$vextractf128$argc03$2(__VA_ARGS__)
#		define code$vextractf128$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vextractf128$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vextractf128$argt$mem$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 19, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextractf128$argt$mem128$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 19, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextractf128$argt$mmreg128$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 19, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextracti128(state,n,...) code$vextracti128$argc##n(state, ##__VA_ARGS__)
#		define code$vextracti128$argc03(state,a1,a2,a3) code$vextracti128$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vextracti128$argc03$1(...) code$vextracti128$argc03$2(__VA_ARGS__)
#		define code$vextracti128$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vextracti128$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vextracti128$argt$mem$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 39, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextracti128$argt$mem128$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 39, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextracti128$argt$mmreg128$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 39, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextractps(state,n,...) code$vextractps$argc##n(state, ##__VA_ARGS__)
#		define code$vextractps$argc03(state,a1,a2,a3) code$vextractps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vextractps$argc03$1(...) code$vextractps$argc03$2(__VA_ARGS__)
#		define code$vextractps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vextractps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vextractps$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _1, _0), 17, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextractps$argt$mem32$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _1, _0), 17, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vextractps$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _1, _0), 17, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vfmadd132pd(state,n,...) code$vfmadd132pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd132pd$argc03(state,a1,a2,a3) code$vfmadd132pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd132pd$argc03$1(...) code$vfmadd132pd$argc03$2(__VA_ARGS__)
#		define code$vfmadd132pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd132pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd132pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 98, modrm$rr(_0, _2))
#		define code$vfmadd132pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 98, modrm$rr(_0, _2))
#		define code$vfmadd132ps(state,n,...) code$vfmadd132ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd132ps$argc03(state,a1,a2,a3) code$vfmadd132ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd132ps$argc03$1(...) code$vfmadd132ps$argc03$2(__VA_ARGS__)
#		define code$vfmadd132ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd132ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd132ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 98, modrm$rr(_0, _2))
#		define code$vfmadd132ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 98, modrm$rm(_0, _2))
#		define code$vfmadd132ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 98, modrm$rr(_0, _2))
#		define code$vfmadd132sd(state,n,...) code$vfmadd132sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd132sd$argc03(state,a1,a2,a3) code$vfmadd132sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd132sd$argc03$1(...) code$vfmadd132sd$argc03$2(__VA_ARGS__)
#		define code$vfmadd132sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd132sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd132sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 99, modrm$rm(_0, _2))
#		define code$vfmadd132sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 99, modrm$rm(_0, _2))
#		define code$vfmadd132sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 99, modrm$rr(_0, _2))
#		define code$vfmadd132ss(state,n,...) code$vfmadd132ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd132ss$argc03(state,a1,a2,a3) code$vfmadd132ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd132ss$argc03$1(...) code$vfmadd132ss$argc03$2(__VA_ARGS__)
#		define code$vfmadd132ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd132ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd132ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 99, modrm$rm(_0, _2))
#		define code$vfmadd132ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 99, modrm$rm(_0, _2))
#		define code$vfmadd132ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 99, modrm$rr(_0, _2))
#		define code$vfmadd213pd(state,n,...) code$vfmadd213pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd213pd$argc03(state,a1,a2,a3) code$vfmadd213pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd213pd$argc03$1(...) code$vfmadd213pd$argc03$2(__VA_ARGS__)
#		define code$vfmadd213pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd213pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd213pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a8, modrm$rr(_0, _2))
#		define code$vfmadd213pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a8, modrm$rr(_0, _2))
#		define code$vfmadd213ps(state,n,...) code$vfmadd213ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd213ps$argc03(state,a1,a2,a3) code$vfmadd213ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd213ps$argc03$1(...) code$vfmadd213ps$argc03$2(__VA_ARGS__)
#		define code$vfmadd213ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd213ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd213ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a8, modrm$rr(_0, _2))
#		define code$vfmadd213ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a8, modrm$rm(_0, _2))
#		define code$vfmadd213ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a8, modrm$rr(_0, _2))
#		define code$vfmadd213sd(state,n,...) code$vfmadd213sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd213sd$argc03(state,a1,a2,a3) code$vfmadd213sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd213sd$argc03$1(...) code$vfmadd213sd$argc03$2(__VA_ARGS__)
#		define code$vfmadd213sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd213sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd213sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a9, modrm$rm(_0, _2))
#		define code$vfmadd213sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a9, modrm$rm(_0, _2))
#		define code$vfmadd213sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a9, modrm$rr(_0, _2))
#		define code$vfmadd213ss(state,n,...) code$vfmadd213ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd213ss$argc03(state,a1,a2,a3) code$vfmadd213ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd213ss$argc03$1(...) code$vfmadd213ss$argc03$2(__VA_ARGS__)
#		define code$vfmadd213ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd213ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd213ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a9, modrm$rm(_0, _2))
#		define code$vfmadd213ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a9, modrm$rm(_0, _2))
#		define code$vfmadd213ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a9, modrm$rr(_0, _2))
#		define code$vfmadd231pd(state,n,...) code$vfmadd231pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd231pd$argc03(state,a1,a2,a3) code$vfmadd231pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd231pd$argc03$1(...) code$vfmadd231pd$argc03$2(__VA_ARGS__)
#		define code$vfmadd231pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd231pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd231pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b8, modrm$rr(_0, _2))
#		define code$vfmadd231pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b8, modrm$rr(_0, _2))
#		define code$vfmadd231ps(state,n,...) code$vfmadd231ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd231ps$argc03(state,a1,a2,a3) code$vfmadd231ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd231ps$argc03$1(...) code$vfmadd231ps$argc03$2(__VA_ARGS__)
#		define code$vfmadd231ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd231ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd231ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b8, modrm$rr(_0, _2))
#		define code$vfmadd231ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b8, modrm$rm(_0, _2))
#		define code$vfmadd231ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b8, modrm$rr(_0, _2))
#		define code$vfmadd231sd(state,n,...) code$vfmadd231sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd231sd$argc03(state,a1,a2,a3) code$vfmadd231sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd231sd$argc03$1(...) code$vfmadd231sd$argc03$2(__VA_ARGS__)
#		define code$vfmadd231sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd231sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd231sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b9, modrm$rm(_0, _2))
#		define code$vfmadd231sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b9, modrm$rm(_0, _2))
#		define code$vfmadd231sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b9, modrm$rr(_0, _2))
#		define code$vfmadd231ss(state,n,...) code$vfmadd231ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfmadd231ss$argc03(state,a1,a2,a3) code$vfmadd231ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmadd231ss$argc03$1(...) code$vfmadd231ss$argc03$2(__VA_ARGS__)
#		define code$vfmadd231ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmadd231ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmadd231ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b9, modrm$rm(_0, _2))
#		define code$vfmadd231ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b9, modrm$rm(_0, _2))
#		define code$vfmadd231ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b9, modrm$rr(_0, _2))
#		define code$vfmaddsub132pd(state,n,...) code$vfmaddsub132pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmaddsub132pd$argc03(state,a1,a2,a3) code$vfmaddsub132pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmaddsub132pd$argc03$1(...) code$vfmaddsub132pd$argc03$2(__VA_ARGS__)
#		define code$vfmaddsub132pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmaddsub132pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmaddsub132pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 96, modrm$rr(_0, _2))
#		define code$vfmaddsub132pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 96, modrm$rr(_0, _2))
#		define code$vfmaddsub132ps(state,n,...) code$vfmaddsub132ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmaddsub132ps$argc03(state,a1,a2,a3) code$vfmaddsub132ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmaddsub132ps$argc03$1(...) code$vfmaddsub132ps$argc03$2(__VA_ARGS__)
#		define code$vfmaddsub132ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmaddsub132ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmaddsub132ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 96, modrm$rr(_0, _2))
#		define code$vfmaddsub132ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 96, modrm$rm(_0, _2))
#		define code$vfmaddsub132ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 96, modrm$rr(_0, _2))
#		define code$vfmaddsub213pd(state,n,...) code$vfmaddsub213pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmaddsub213pd$argc03(state,a1,a2,a3) code$vfmaddsub213pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmaddsub213pd$argc03$1(...) code$vfmaddsub213pd$argc03$2(__VA_ARGS__)
#		define code$vfmaddsub213pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmaddsub213pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmaddsub213pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a6, modrm$rr(_0, _2))
#		define code$vfmaddsub213pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a6, modrm$rr(_0, _2))
#		define code$vfmaddsub213ps(state,n,...) code$vfmaddsub213ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmaddsub213ps$argc03(state,a1,a2,a3) code$vfmaddsub213ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmaddsub213ps$argc03$1(...) code$vfmaddsub213ps$argc03$2(__VA_ARGS__)
#		define code$vfmaddsub213ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmaddsub213ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmaddsub213ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a6, modrm$rr(_0, _2))
#		define code$vfmaddsub213ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a6, modrm$rm(_0, _2))
#		define code$vfmaddsub213ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a6, modrm$rr(_0, _2))
#		define code$vfmaddsub231pd(state,n,...) code$vfmaddsub231pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmaddsub231pd$argc03(state,a1,a2,a3) code$vfmaddsub231pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmaddsub231pd$argc03$1(...) code$vfmaddsub231pd$argc03$2(__VA_ARGS__)
#		define code$vfmaddsub231pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmaddsub231pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmaddsub231pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b6, modrm$rr(_0, _2))
#		define code$vfmaddsub231pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b6, modrm$rr(_0, _2))
#		define code$vfmaddsub231ps(state,n,...) code$vfmaddsub231ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmaddsub231ps$argc03(state,a1,a2,a3) code$vfmaddsub231ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmaddsub231ps$argc03$1(...) code$vfmaddsub231ps$argc03$2(__VA_ARGS__)
#		define code$vfmaddsub231ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmaddsub231ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmaddsub231ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b6, modrm$rr(_0, _2))
#		define code$vfmaddsub231ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b6, modrm$rm(_0, _2))
#		define code$vfmaddsub231ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b6, modrm$rr(_0, _2))
#		define code$vfmsub132pd(state,n,...) code$vfmsub132pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub132pd$argc03(state,a1,a2,a3) code$vfmsub132pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub132pd$argc03$1(...) code$vfmsub132pd$argc03$2(__VA_ARGS__)
#		define code$vfmsub132pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub132pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub132pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9a, modrm$rr(_0, _2))
#		define code$vfmsub132pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9a, modrm$rr(_0, _2))
#		define code$vfmsub132ps(state,n,...) code$vfmsub132ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub132ps$argc03(state,a1,a2,a3) code$vfmsub132ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub132ps$argc03$1(...) code$vfmsub132ps$argc03$2(__VA_ARGS__)
#		define code$vfmsub132ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub132ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub132ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9a, modrm$rr(_0, _2))
#		define code$vfmsub132ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9a, modrm$rm(_0, _2))
#		define code$vfmsub132ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9a, modrm$rr(_0, _2))
#		define code$vfmsub132sd(state,n,...) code$vfmsub132sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub132sd$argc03(state,a1,a2,a3) code$vfmsub132sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub132sd$argc03$1(...) code$vfmsub132sd$argc03$2(__VA_ARGS__)
#		define code$vfmsub132sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub132sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub132sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9b, modrm$rm(_0, _2))
#		define code$vfmsub132sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9b, modrm$rm(_0, _2))
#		define code$vfmsub132sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9b, modrm$rr(_0, _2))
#		define code$vfmsub132ss(state,n,...) code$vfmsub132ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub132ss$argc03(state,a1,a2,a3) code$vfmsub132ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub132ss$argc03$1(...) code$vfmsub132ss$argc03$2(__VA_ARGS__)
#		define code$vfmsub132ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub132ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub132ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9b, modrm$rm(_0, _2))
#		define code$vfmsub132ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9b, modrm$rm(_0, _2))
#		define code$vfmsub132ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9b, modrm$rr(_0, _2))
#		define code$vfmsub213pd(state,n,...) code$vfmsub213pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub213pd$argc03(state,a1,a2,a3) code$vfmsub213pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub213pd$argc03$1(...) code$vfmsub213pd$argc03$2(__VA_ARGS__)
#		define code$vfmsub213pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub213pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub213pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), aa, modrm$rr(_0, _2))
#		define code$vfmsub213pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), aa, modrm$rr(_0, _2))
#		define code$vfmsub213ps(state,n,...) code$vfmsub213ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub213ps$argc03(state,a1,a2,a3) code$vfmsub213ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub213ps$argc03$1(...) code$vfmsub213ps$argc03$2(__VA_ARGS__)
#		define code$vfmsub213ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub213ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub213ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), aa, modrm$rr(_0, _2))
#		define code$vfmsub213ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), aa, modrm$rm(_0, _2))
#		define code$vfmsub213ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), aa, modrm$rr(_0, _2))
#		define code$vfmsub213sd(state,n,...) code$vfmsub213sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub213sd$argc03(state,a1,a2,a3) code$vfmsub213sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub213sd$argc03$1(...) code$vfmsub213sd$argc03$2(__VA_ARGS__)
#		define code$vfmsub213sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub213sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub213sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ab, modrm$rm(_0, _2))
#		define code$vfmsub213sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ab, modrm$rm(_0, _2))
#		define code$vfmsub213sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ab, modrm$rr(_0, _2))
#		define code$vfmsub213ss(state,n,...) code$vfmsub213ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub213ss$argc03(state,a1,a2,a3) code$vfmsub213ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub213ss$argc03$1(...) code$vfmsub213ss$argc03$2(__VA_ARGS__)
#		define code$vfmsub213ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub213ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub213ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ab, modrm$rm(_0, _2))
#		define code$vfmsub213ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ab, modrm$rm(_0, _2))
#		define code$vfmsub213ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ab, modrm$rr(_0, _2))
#		define code$vfmsub231pd(state,n,...) code$vfmsub231pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub231pd$argc03(state,a1,a2,a3) code$vfmsub231pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub231pd$argc03$1(...) code$vfmsub231pd$argc03$2(__VA_ARGS__)
#		define code$vfmsub231pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub231pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub231pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ba, modrm$rr(_0, _2))
#		define code$vfmsub231pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ba, modrm$rr(_0, _2))
#		define code$vfmsub231ps(state,n,...) code$vfmsub231ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub231ps$argc03(state,a1,a2,a3) code$vfmsub231ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub231ps$argc03$1(...) code$vfmsub231ps$argc03$2(__VA_ARGS__)
#		define code$vfmsub231ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub231ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub231ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ba, modrm$rr(_0, _2))
#		define code$vfmsub231ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ba, modrm$rm(_0, _2))
#		define code$vfmsub231ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ba, modrm$rr(_0, _2))
#		define code$vfmsub231sd(state,n,...) code$vfmsub231sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub231sd$argc03(state,a1,a2,a3) code$vfmsub231sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub231sd$argc03$1(...) code$vfmsub231sd$argc03$2(__VA_ARGS__)
#		define code$vfmsub231sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub231sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub231sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bb, modrm$rm(_0, _2))
#		define code$vfmsub231sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bb, modrm$rm(_0, _2))
#		define code$vfmsub231sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bb, modrm$rr(_0, _2))
#		define code$vfmsub231ss(state,n,...) code$vfmsub231ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsub231ss$argc03(state,a1,a2,a3) code$vfmsub231ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsub231ss$argc03$1(...) code$vfmsub231ss$argc03$2(__VA_ARGS__)
#		define code$vfmsub231ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsub231ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsub231ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bb, modrm$rm(_0, _2))
#		define code$vfmsub231ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bb, modrm$rm(_0, _2))
#		define code$vfmsub231ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bb, modrm$rr(_0, _2))
#		define code$vfmsubadd132pd(state,n,...) code$vfmsubadd132pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsubadd132pd$argc03(state,a1,a2,a3) code$vfmsubadd132pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsubadd132pd$argc03$1(...) code$vfmsubadd132pd$argc03$2(__VA_ARGS__)
#		define code$vfmsubadd132pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsubadd132pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsubadd132pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 97, modrm$rr(_0, _2))
#		define code$vfmsubadd132pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 97, modrm$rr(_0, _2))
#		define code$vfmsubadd132ps(state,n,...) code$vfmsubadd132ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsubadd132ps$argc03(state,a1,a2,a3) code$vfmsubadd132ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsubadd132ps$argc03$1(...) code$vfmsubadd132ps$argc03$2(__VA_ARGS__)
#		define code$vfmsubadd132ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsubadd132ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsubadd132ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 97, modrm$rr(_0, _2))
#		define code$vfmsubadd132ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 97, modrm$rm(_0, _2))
#		define code$vfmsubadd132ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 97, modrm$rr(_0, _2))
#		define code$vfmsubadd213pd(state,n,...) code$vfmsubadd213pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsubadd213pd$argc03(state,a1,a2,a3) code$vfmsubadd213pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsubadd213pd$argc03$1(...) code$vfmsubadd213pd$argc03$2(__VA_ARGS__)
#		define code$vfmsubadd213pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsubadd213pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsubadd213pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a7, modrm$rr(_0, _2))
#		define code$vfmsubadd213pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), a7, modrm$rr(_0, _2))
#		define code$vfmsubadd213ps(state,n,...) code$vfmsubadd213ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsubadd213ps$argc03(state,a1,a2,a3) code$vfmsubadd213ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsubadd213ps$argc03$1(...) code$vfmsubadd213ps$argc03$2(__VA_ARGS__)
#		define code$vfmsubadd213ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsubadd213ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsubadd213ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a7, modrm$rr(_0, _2))
#		define code$vfmsubadd213ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a7, modrm$rm(_0, _2))
#		define code$vfmsubadd213ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), a7, modrm$rr(_0, _2))
#		define code$vfmsubadd231pd(state,n,...) code$vfmsubadd231pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsubadd231pd$argc03(state,a1,a2,a3) code$vfmsubadd231pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsubadd231pd$argc03$1(...) code$vfmsubadd231pd$argc03$2(__VA_ARGS__)
#		define code$vfmsubadd231pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsubadd231pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsubadd231pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b7, modrm$rr(_0, _2))
#		define code$vfmsubadd231pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), b7, modrm$rr(_0, _2))
#		define code$vfmsubadd231ps(state,n,...) code$vfmsubadd231ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfmsubadd231ps$argc03(state,a1,a2,a3) code$vfmsubadd231ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfmsubadd231ps$argc03$1(...) code$vfmsubadd231ps$argc03$2(__VA_ARGS__)
#		define code$vfmsubadd231ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfmsubadd231ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfmsubadd231ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b7, modrm$rr(_0, _2))
#		define code$vfmsubadd231ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b7, modrm$rm(_0, _2))
#		define code$vfmsubadd231ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), b7, modrm$rr(_0, _2))
#		define code$vfnmadd132pd(state,n,...) code$vfnmadd132pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd132pd$argc03(state,a1,a2,a3) code$vfnmadd132pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd132pd$argc03$1(...) code$vfnmadd132pd$argc03$2(__VA_ARGS__)
#		define code$vfnmadd132pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd132pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd132pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9c, modrm$rr(_0, _2))
#		define code$vfnmadd132pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9c, modrm$rr(_0, _2))
#		define code$vfnmadd132ps(state,n,...) code$vfnmadd132ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd132ps$argc03(state,a1,a2,a3) code$vfnmadd132ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd132ps$argc03$1(...) code$vfnmadd132ps$argc03$2(__VA_ARGS__)
#		define code$vfnmadd132ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd132ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd132ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9c, modrm$rr(_0, _2))
#		define code$vfnmadd132ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9c, modrm$rm(_0, _2))
#		define code$vfnmadd132ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9c, modrm$rr(_0, _2))
#		define code$vfnmadd132sd(state,n,...) code$vfnmadd132sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd132sd$argc03(state,a1,a2,a3) code$vfnmadd132sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd132sd$argc03$1(...) code$vfnmadd132sd$argc03$2(__VA_ARGS__)
#		define code$vfnmadd132sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd132sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd132sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9d, modrm$rm(_0, _2))
#		define code$vfnmadd132sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9d, modrm$rm(_0, _2))
#		define code$vfnmadd132sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9d, modrm$rr(_0, _2))
#		define code$vfnmadd132ss(state,n,...) code$vfnmadd132ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd132ss$argc03(state,a1,a2,a3) code$vfnmadd132ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd132ss$argc03$1(...) code$vfnmadd132ss$argc03$2(__VA_ARGS__)
#		define code$vfnmadd132ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd132ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd132ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9d, modrm$rm(_0, _2))
#		define code$vfnmadd132ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9d, modrm$rm(_0, _2))
#		define code$vfnmadd132ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9d, modrm$rr(_0, _2))
#		define code$vfnmadd213pd(state,n,...) code$vfnmadd213pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd213pd$argc03(state,a1,a2,a3) code$vfnmadd213pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd213pd$argc03$1(...) code$vfnmadd213pd$argc03$2(__VA_ARGS__)
#		define code$vfnmadd213pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd213pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd213pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ac, modrm$rr(_0, _2))
#		define code$vfnmadd213pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ac, modrm$rr(_0, _2))
#		define code$vfnmadd213ps(state,n,...) code$vfnmadd213ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd213ps$argc03(state,a1,a2,a3) code$vfnmadd213ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd213ps$argc03$1(...) code$vfnmadd213ps$argc03$2(__VA_ARGS__)
#		define code$vfnmadd213ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd213ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd213ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ac, modrm$rr(_0, _2))
#		define code$vfnmadd213ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ac, modrm$rm(_0, _2))
#		define code$vfnmadd213ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ac, modrm$rr(_0, _2))
#		define code$vfnmadd213sd(state,n,...) code$vfnmadd213sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd213sd$argc03(state,a1,a2,a3) code$vfnmadd213sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd213sd$argc03$1(...) code$vfnmadd213sd$argc03$2(__VA_ARGS__)
#		define code$vfnmadd213sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd213sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd213sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ad, modrm$rm(_0, _2))
#		define code$vfnmadd213sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ad, modrm$rm(_0, _2))
#		define code$vfnmadd213sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ad, modrm$rr(_0, _2))
#		define code$vfnmadd213ss(state,n,...) code$vfnmadd213ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd213ss$argc03(state,a1,a2,a3) code$vfnmadd213ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd213ss$argc03$1(...) code$vfnmadd213ss$argc03$2(__VA_ARGS__)
#		define code$vfnmadd213ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd213ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd213ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ad, modrm$rm(_0, _2))
#		define code$vfnmadd213ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ad, modrm$rm(_0, _2))
#		define code$vfnmadd213ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ad, modrm$rr(_0, _2))
#		define code$vfnmadd231pd(state,n,...) code$vfnmadd231pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd231pd$argc03(state,a1,a2,a3) code$vfnmadd231pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd231pd$argc03$1(...) code$vfnmadd231pd$argc03$2(__VA_ARGS__)
#		define code$vfnmadd231pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd231pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd231pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bc, modrm$rr(_0, _2))
#		define code$vfnmadd231pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bc, modrm$rr(_0, _2))
#		define code$vfnmadd231ps(state,n,...) code$vfnmadd231ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd231ps$argc03(state,a1,a2,a3) code$vfnmadd231ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd231ps$argc03$1(...) code$vfnmadd231ps$argc03$2(__VA_ARGS__)
#		define code$vfnmadd231ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd231ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd231ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bc, modrm$rr(_0, _2))
#		define code$vfnmadd231ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bc, modrm$rm(_0, _2))
#		define code$vfnmadd231ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bc, modrm$rr(_0, _2))
#		define code$vfnmadd231sd(state,n,...) code$vfnmadd231sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd231sd$argc03(state,a1,a2,a3) code$vfnmadd231sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd231sd$argc03$1(...) code$vfnmadd231sd$argc03$2(__VA_ARGS__)
#		define code$vfnmadd231sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd231sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd231sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bd, modrm$rm(_0, _2))
#		define code$vfnmadd231sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bd, modrm$rm(_0, _2))
#		define code$vfnmadd231sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bd, modrm$rr(_0, _2))
#		define code$vfnmadd231ss(state,n,...) code$vfnmadd231ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmadd231ss$argc03(state,a1,a2,a3) code$vfnmadd231ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmadd231ss$argc03$1(...) code$vfnmadd231ss$argc03$2(__VA_ARGS__)
#		define code$vfnmadd231ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmadd231ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmadd231ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bd, modrm$rm(_0, _2))
#		define code$vfnmadd231ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bd, modrm$rm(_0, _2))
#		define code$vfnmadd231ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bd, modrm$rr(_0, _2))
#		define code$vfnmsub132pd(state,n,...) code$vfnmsub132pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub132pd$argc03(state,a1,a2,a3) code$vfnmsub132pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub132pd$argc03$1(...) code$vfnmsub132pd$argc03$2(__VA_ARGS__)
#		define code$vfnmsub132pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub132pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub132pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9e, modrm$rr(_0, _2))
#		define code$vfnmsub132pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9e, modrm$rr(_0, _2))
#		define code$vfnmsub132ps(state,n,...) code$vfnmsub132ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub132ps$argc03(state,a1,a2,a3) code$vfnmsub132ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub132ps$argc03$1(...) code$vfnmsub132ps$argc03$2(__VA_ARGS__)
#		define code$vfnmsub132ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub132ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub132ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9e, modrm$rr(_0, _2))
#		define code$vfnmsub132ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9e, modrm$rm(_0, _2))
#		define code$vfnmsub132ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9e, modrm$rr(_0, _2))
#		define code$vfnmsub132sd(state,n,...) code$vfnmsub132sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub132sd$argc03(state,a1,a2,a3) code$vfnmsub132sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub132sd$argc03$1(...) code$vfnmsub132sd$argc03$2(__VA_ARGS__)
#		define code$vfnmsub132sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub132sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub132sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9f, modrm$rm(_0, _2))
#		define code$vfnmsub132sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9f, modrm$rm(_0, _2))
#		define code$vfnmsub132sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 9f, modrm$rr(_0, _2))
#		define code$vfnmsub132ss(state,n,...) code$vfnmsub132ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub132ss$argc03(state,a1,a2,a3) code$vfnmsub132ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub132ss$argc03$1(...) code$vfnmsub132ss$argc03$2(__VA_ARGS__)
#		define code$vfnmsub132ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub132ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub132ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9f, modrm$rm(_0, _2))
#		define code$vfnmsub132ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9f, modrm$rm(_0, _2))
#		define code$vfnmsub132ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 9f, modrm$rr(_0, _2))
#		define code$vfnmsub213pd(state,n,...) code$vfnmsub213pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub213pd$argc03(state,a1,a2,a3) code$vfnmsub213pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub213pd$argc03$1(...) code$vfnmsub213pd$argc03$2(__VA_ARGS__)
#		define code$vfnmsub213pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub213pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub213pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ae, modrm$rr(_0, _2))
#		define code$vfnmsub213pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), ae, modrm$rr(_0, _2))
#		define code$vfnmsub213ps(state,n,...) code$vfnmsub213ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub213ps$argc03(state,a1,a2,a3) code$vfnmsub213ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub213ps$argc03$1(...) code$vfnmsub213ps$argc03$2(__VA_ARGS__)
#		define code$vfnmsub213ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub213ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub213ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ae, modrm$rr(_0, _2))
#		define code$vfnmsub213ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ae, modrm$rm(_0, _2))
#		define code$vfnmsub213ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), ae, modrm$rr(_0, _2))
#		define code$vfnmsub213sd(state,n,...) code$vfnmsub213sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub213sd$argc03(state,a1,a2,a3) code$vfnmsub213sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub213sd$argc03$1(...) code$vfnmsub213sd$argc03$2(__VA_ARGS__)
#		define code$vfnmsub213sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub213sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub213sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), af, modrm$rm(_0, _2))
#		define code$vfnmsub213sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), af, modrm$rm(_0, _2))
#		define code$vfnmsub213sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), af, modrm$rr(_0, _2))
#		define code$vfnmsub213ss(state,n,...) code$vfnmsub213ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub213ss$argc03(state,a1,a2,a3) code$vfnmsub213ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub213ss$argc03$1(...) code$vfnmsub213ss$argc03$2(__VA_ARGS__)
#		define code$vfnmsub213ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub213ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub213ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), af, modrm$rm(_0, _2))
#		define code$vfnmsub213ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), af, modrm$rm(_0, _2))
#		define code$vfnmsub213ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), af, modrm$rr(_0, _2))
#		define code$vfnmsub231pd(state,n,...) code$vfnmsub231pd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub231pd$argc03(state,a1,a2,a3) code$vfnmsub231pd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub231pd$argc03$1(...) code$vfnmsub231pd$argc03$2(__VA_ARGS__)
#		define code$vfnmsub231pd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub231pd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub231pd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231pd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231pd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), be, modrm$rr(_0, _2))
#		define code$vfnmsub231pd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231pd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231pd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), be, modrm$rr(_0, _2))
#		define code$vfnmsub231ps(state,n,...) code$vfnmsub231ps$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub231ps$argc03(state,a1,a2,a3) code$vfnmsub231ps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub231ps$argc03$1(...) code$vfnmsub231ps$argc03$2(__VA_ARGS__)
#		define code$vfnmsub231ps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub231ps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub231ps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231ps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231ps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), be, modrm$rr(_0, _2))
#		define code$vfnmsub231ps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231ps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), be, modrm$rm(_0, _2))
#		define code$vfnmsub231ps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), be, modrm$rr(_0, _2))
#		define code$vfnmsub231sd(state,n,...) code$vfnmsub231sd$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub231sd$argc03(state,a1,a2,a3) code$vfnmsub231sd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub231sd$argc03$1(...) code$vfnmsub231sd$argc03$2(__VA_ARGS__)
#		define code$vfnmsub231sd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub231sd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub231sd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bf, modrm$rm(_0, _2))
#		define code$vfnmsub231sd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bf, modrm$rm(_0, _2))
#		define code$vfnmsub231sd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), bf, modrm$rr(_0, _2))
#		define code$vfnmsub231ss(state,n,...) code$vfnmsub231ss$argc##n(state, ##__VA_ARGS__)
#		define code$vfnmsub231ss$argc03(state,a1,a2,a3) code$vfnmsub231ss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vfnmsub231ss$argc03$1(...) code$vfnmsub231ss$argc03$2(__VA_ARGS__)
#		define code$vfnmsub231ss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vfnmsub231ss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vfnmsub231ss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bf, modrm$rm(_0, _2))
#		define code$vfnmsub231ss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bf, modrm$rm(_0, _2))
#		define code$vfnmsub231ss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), bf, modrm$rr(_0, _2))
#		define code$vgf2p8affineinvqb(state,n,...) code$vgf2p8affineinvqb$argc##n(state, ##__VA_ARGS__)
#		define code$vgf2p8affineinvqb$argc03(state,a1,a2,a3) code$vgf2p8affineinvqb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vgf2p8affineinvqb$argc03$1(...) code$vgf2p8affineinvqb$argc03$2(__VA_ARGS__)
#		define code$vgf2p8affineinvqb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vgf2p8affineinvqb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vgf2p8affineinvqb$argc04(state,a1,a2,a3,a4) code$vgf2p8affineinvqb$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vgf2p8affineinvqb$argc04$1(...) code$vgf2p8affineinvqb$argc04$2(__VA_ARGS__)
#		define code$vgf2p8affineinvqb$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vgf2p8affineinvqb$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vgf2p8affineinvqb$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineinvqb$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineinvqb$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), cf, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineinvqb$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineinvqb$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineinvqb$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), cf, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineinvqb$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineinvqb$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineinvqb$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), cf, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineinvqb$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineinvqb$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineinvqb$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), cf, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineqb(state,n,...) code$vgf2p8affineqb$argc##n(state, ##__VA_ARGS__)
#		define code$vgf2p8affineqb$argc03(state,a1,a2,a3) code$vgf2p8affineqb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vgf2p8affineqb$argc03$1(...) code$vgf2p8affineqb$argc03$2(__VA_ARGS__)
#		define code$vgf2p8affineqb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vgf2p8affineqb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vgf2p8affineqb$argc04(state,a1,a2,a3,a4) code$vgf2p8affineqb$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vgf2p8affineqb$argc04$1(...) code$vgf2p8affineqb$argc04$2(__VA_ARGS__)
#		define code$vgf2p8affineqb$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vgf2p8affineqb$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vgf2p8affineqb$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), ce, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineqb$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), ce, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineqb$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), ce, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineqb$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), ce, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineqb$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), ce, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineqb$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), ce, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineqb$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), ce, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineqb$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), ce, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineqb$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), ce, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vgf2p8affineqb$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), ce, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineqb$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), ce, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8affineqb$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), ce, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vgf2p8mulb(state,n,...) code$vgf2p8mulb$argc##n(state, ##__VA_ARGS__)
#		define code$vgf2p8mulb$argc02(state,a1,a2) code$vgf2p8mulb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vgf2p8mulb$argc02$1(...) code$vgf2p8mulb$argc02$2(__VA_ARGS__)
#		define code$vgf2p8mulb$argc02$2(state,t1,t2,a1,a2) code$vgf2p8mulb$argt$##t1##$##t2(state, a1,a2)
#		define code$vgf2p8mulb$argc03(state,a1,a2,a3) code$vgf2p8mulb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vgf2p8mulb$argc03$1(...) code$vgf2p8mulb$argc03$2(__VA_ARGS__)
#		define code$vgf2p8mulb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vgf2p8mulb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vgf2p8mulb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1))
#		define code$vgf2p8mulb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1))
#		define code$vgf2p8mulb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), cf, modrm$rr(_0, _1))
#		define code$vgf2p8mulb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2))
#		define code$vgf2p8mulb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2))
#		define code$vgf2p8mulb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), cf, modrm$rr(_0, _2))
#		define code$vgf2p8mulb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1))
#		define code$vgf2p8mulb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), cf, modrm$rm(_0, _1))
#		define code$vgf2p8mulb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), cf, modrm$rr(_0, _1))
#		define code$vgf2p8mulb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2))
#		define code$vgf2p8mulb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), cf, modrm$rm(_0, _2))
#		define code$vgf2p8mulb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), cf, modrm$rr(_0, _2))
#		define code$vhaddpd(state,n,...) code$vhaddpd$argc##n(state, ##__VA_ARGS__)
#		define code$vhaddpd$argc02(state,a1,a2) code$vhaddpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vhaddpd$argc02$1(...) code$vhaddpd$argc02$2(__VA_ARGS__)
#		define code$vhaddpd$argc02$2(state,t1,t2,a1,a2) code$vhaddpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vhaddpd$argc03(state,a1,a2,a3) code$vhaddpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vhaddpd$argc03$1(...) code$vhaddpd$argc03$2(__VA_ARGS__)
#		define code$vhaddpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vhaddpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vhaddpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rr(_0, _1))
#		define code$vhaddpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rr(_0, _2))
#		define code$vhaddpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rr(_0, _1))
#		define code$vhaddpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rr(_0, _2))
#		define code$vhaddps(state,n,...) code$vhaddps$argc##n(state, ##__VA_ARGS__)
#		define code$vhaddps$argc02(state,a1,a2) code$vhaddps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vhaddps$argc02$1(...) code$vhaddps$argc02$2(__VA_ARGS__)
#		define code$vhaddps$argc02$2(state,t1,t2,a1,a2) code$vhaddps$argt$##t1##$##t2(state, a1,a2)
#		define code$vhaddps$argc03(state,a1,a2,a3) code$vhaddps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vhaddps$argc03$1(...) code$vhaddps$argc03$2(__VA_ARGS__)
#		define code$vhaddps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vhaddps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vhaddps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rr(_0, _1))
#		define code$vhaddps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rr(_0, _2))
#		define code$vhaddps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rm(_0, _1))
#		define code$vhaddps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7c, modrm$rr(_0, _1))
#		define code$vhaddps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rm(_0, _2))
#		define code$vhaddps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7c, modrm$rr(_0, _2))
#		define code$vhsubpd(state,n,...) code$vhsubpd$argc##n(state, ##__VA_ARGS__)
#		define code$vhsubpd$argc02(state,a1,a2) code$vhsubpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vhsubpd$argc02$1(...) code$vhsubpd$argc02$2(__VA_ARGS__)
#		define code$vhsubpd$argc02$2(state,t1,t2,a1,a2) code$vhsubpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vhsubpd$argc03(state,a1,a2,a3) code$vhsubpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vhsubpd$argc03$1(...) code$vhsubpd$argc03$2(__VA_ARGS__)
#		define code$vhsubpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vhsubpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vhsubpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rr(_0, _1))
#		define code$vhsubpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rr(_0, _2))
#		define code$vhsubpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rr(_0, _1))
#		define code$vhsubpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rr(_0, _2))
#		define code$vhsubps(state,n,...) code$vhsubps$argc##n(state, ##__VA_ARGS__)
#		define code$vhsubps$argc02(state,a1,a2) code$vhsubps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vhsubps$argc02$1(...) code$vhsubps$argc02$2(__VA_ARGS__)
#		define code$vhsubps$argc02$2(state,t1,t2,a1,a2) code$vhsubps$argt$##t1##$##t2(state, a1,a2)
#		define code$vhsubps$argc03(state,a1,a2,a3) code$vhsubps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vhsubps$argc03$1(...) code$vhsubps$argc03$2(__VA_ARGS__)
#		define code$vhsubps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vhsubps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vhsubps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rr(_0, _1))
#		define code$vhsubps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rr(_0, _2))
#		define code$vhsubps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rm(_0, _1))
#		define code$vhsubps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 7d, modrm$rr(_0, _1))
#		define code$vhsubps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rm(_0, _2))
#		define code$vhsubps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 7d, modrm$rr(_0, _2))
#		define code$vinsertf128(state,n,...) code$vinsertf128$argc##n(state, ##__VA_ARGS__)
#		define code$vinsertf128$argc03(state,a1,a2,a3) code$vinsertf128$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vinsertf128$argc03$1(...) code$vinsertf128$argc03$2(__VA_ARGS__)
#		define code$vinsertf128$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vinsertf128$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vinsertf128$argc04(state,a1,a2,a3,a4) code$vinsertf128$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vinsertf128$argc04$1(...) code$vinsertf128$argc04$2(__VA_ARGS__)
#		define code$vinsertf128$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vinsertf128$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vinsertf128$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 18, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinsertf128$argt$mmreg256$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 18, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinsertf128$argt$mmreg256$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 18, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinsertf128$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 18, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinsertf128$argt$mmreg256$mmreg256$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 18, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinsertf128$argt$mmreg256$mmreg256$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 18, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinserti128(state,n,...) code$vinserti128$argc##n(state, ##__VA_ARGS__)
#		define code$vinserti128$argc03(state,a1,a2,a3) code$vinserti128$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vinserti128$argc03$1(...) code$vinserti128$argc03$2(__VA_ARGS__)
#		define code$vinserti128$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vinserti128$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vinserti128$argc04(state,a1,a2,a3,a4) code$vinserti128$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vinserti128$argc04$1(...) code$vinserti128$argc04$2(__VA_ARGS__)
#		define code$vinserti128$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vinserti128$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vinserti128$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 38, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinserti128$argt$mmreg256$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 38, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinserti128$argt$mmreg256$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 38, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinserti128$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 38, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinserti128$argt$mmreg256$mmreg256$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 38, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinserti128$argt$mmreg256$mmreg256$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 38, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinsertps(state,n,...) code$vinsertps$argc##n(state, ##__VA_ARGS__)
#		define code$vinsertps$argc03(state,a1,a2,a3) code$vinsertps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vinsertps$argc03$1(...) code$vinsertps$argc03$2(__VA_ARGS__)
#		define code$vinsertps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vinsertps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vinsertps$argc04(state,a1,a2,a3,a4) code$vinsertps$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vinsertps$argc04$1(...) code$vinsertps$argc04$2(__VA_ARGS__)
#		define code$vinsertps$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vinsertps$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vinsertps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 21, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinsertps$argt$mmreg128$mem32$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 21, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinsertps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 21, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vinsertps$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 21, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinsertps$argt$mmreg128$mmreg128$mem32$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 21, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vinsertps$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 21, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vlddqu(state,n,...) code$vlddqu$argc##n(state, ##__VA_ARGS__)
#		define code$vlddqu$argc02(state,a1,a2) code$vlddqu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vlddqu$argc02$1(...) code$vlddqu$argc02$2(__VA_ARGS__)
#		define code$vlddqu$argc02$2(state,t1,t2,a1,a2) code$vlddqu$argt$##t1##$##t2(state, a1,a2)
#		define code$vlddqu$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), f0, modrm$rm(_0, _1))
#		define code$vlddqu$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), f0, modrm$rm(_0, _1))
#		define code$vlddqu$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), f0, modrm$rm(_0, _1))
#		define code$vlddqu$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), f0, modrm$rm(_0, _1))
#		define code$vldmxcsr(state,n,...) code$vldmxcsr$argc##n(state, ##__VA_ARGS__)
#		define code$vldmxcsr$argc01(state,a1) code$vldmxcsr$argc01$1(state, operand$gettype(a1), a1)
#		define code$vldmxcsr$argc01$1(...) code$vldmxcsr$argc01$2(__VA_ARGS__)
#		define code$vldmxcsr$argc01$2(state,t1,a1) code$vldmxcsr$argt$##t1(state, a1)
#		define code$vldmxcsr$argt$mem(state,_0) bytes(vex$rm(vex$L$lz, vex$pp$none, vex$mmmmm$0f, vex$wig, eax, _0), ae, modrm$2m(_0))
#		define code$vldmxcsr$argt$mem32(state,_0) bytes(vex$rm(vex$L$lz, vex$pp$none, vex$mmmmm$0f, vex$wig, eax, _0), ae, modrm$2m(_0))
#		define code$vmaskmovdqu(state,n,...) code$vmaskmovdqu$argc##n(state, ##__VA_ARGS__)
#		define code$vmaskmovdqu$argc02(state,a1,a2) code$vmaskmovdqu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmaskmovdqu$argc02$1(...) code$vmaskmovdqu$argc02$2(__VA_ARGS__)
#		define code$vmaskmovdqu$argc02$2(state,t1,t2,a1,a2) code$vmaskmovdqu$argt$##t1##$##t2(state, a1,a2)
#		define code$vmaskmovdqu$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), f7, modrm$rr(_0, _1))
#		define code$vmaskmovpd(state,n,...) code$vmaskmovpd$argc##n(state, ##__VA_ARGS__)
#		define code$vmaskmovpd$argc03(state,a1,a2,a3) code$vmaskmovpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmaskmovpd$argc03$1(...) code$vmaskmovpd$argc03$2(__VA_ARGS__)
#		define code$vmaskmovpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmaskmovpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmaskmovpd$argt$mem$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2f, modrm$rm(_2, _0))
#		define code$vmaskmovpd$argt$mem$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2f, modrm$rm(_2, _0))
#		define code$vmaskmovpd$argt$mem128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2f, modrm$rm(_2, _0))
#		define code$vmaskmovpd$argt$mem256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2f, modrm$rm(_2, _0))
#		define code$vmaskmovpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2d, modrm$rm(_0, _2))
#		define code$vmaskmovpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2d, modrm$rm(_0, _2))
#		define code$vmaskmovpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2d, modrm$rm(_0, _2))
#		define code$vmaskmovpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2d, modrm$rm(_0, _2))
#		define code$vmaskmovps(state,n,...) code$vmaskmovps$argc##n(state, ##__VA_ARGS__)
#		define code$vmaskmovps$argc03(state,a1,a2,a3) code$vmaskmovps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmaskmovps$argc03$1(...) code$vmaskmovps$argc03$2(__VA_ARGS__)
#		define code$vmaskmovps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmaskmovps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmaskmovps$argt$mem$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2e, modrm$rm(_2, _0))
#		define code$vmaskmovps$argt$mem$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2e, modrm$rm(_2, _0))
#		define code$vmaskmovps$argt$mem128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2e, modrm$rm(_2, _0))
#		define code$vmaskmovps$argt$mem256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 2e, modrm$rm(_2, _0))
#		define code$vmaskmovps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2c, modrm$rm(_0, _2))
#		define code$vmaskmovps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2c, modrm$rm(_0, _2))
#		define code$vmaskmovps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2c, modrm$rm(_0, _2))
#		define code$vmaskmovps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 2c, modrm$rm(_0, _2))
#		define code$vmaxpd(state,n,...) code$vmaxpd$argc##n(state, ##__VA_ARGS__)
#		define code$vmaxpd$argc02(state,a1,a2) code$vmaxpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmaxpd$argc02$1(...) code$vmaxpd$argc02$2(__VA_ARGS__)
#		define code$vmaxpd$argc02$2(state,t1,t2,a1,a2) code$vmaxpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmaxpd$argc03(state,a1,a2,a3) code$vmaxpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmaxpd$argc03$1(...) code$vmaxpd$argc03$2(__VA_ARGS__)
#		define code$vmaxpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmaxpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmaxpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rr(_0, _1))
#		define code$vmaxpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rr(_0, _2))
#		define code$vmaxpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rr(_0, _1))
#		define code$vmaxpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rr(_0, _2))
#		define code$vmaxps(state,n,...) code$vmaxps$argc##n(state, ##__VA_ARGS__)
#		define code$vmaxps$argc02(state,a1,a2) code$vmaxps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmaxps$argc02$1(...) code$vmaxps$argc02$2(__VA_ARGS__)
#		define code$vmaxps$argc02$2(state,t1,t2,a1,a2) code$vmaxps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmaxps$argc03(state,a1,a2,a3) code$vmaxps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmaxps$argc03$1(...) code$vmaxps$argc03$2(__VA_ARGS__)
#		define code$vmaxps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmaxps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmaxps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rr(_0, _1))
#		define code$vmaxps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rr(_0, _2))
#		define code$vmaxps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rr(_0, _1))
#		define code$vmaxps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rr(_0, _2))
#		define code$vmaxsd(state,n,...) code$vmaxsd$argc##n(state, ##__VA_ARGS__)
#		define code$vmaxsd$argc02(state,a1,a2) code$vmaxsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmaxsd$argc02$1(...) code$vmaxsd$argc02$2(__VA_ARGS__)
#		define code$vmaxsd$argc02$2(state,t1,t2,a1,a2) code$vmaxsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmaxsd$argc03(state,a1,a2,a3) code$vmaxsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmaxsd$argc03$1(...) code$vmaxsd$argc03$2(__VA_ARGS__)
#		define code$vmaxsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmaxsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmaxsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rr(_0, _1))
#		define code$vmaxsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rr(_0, _2))
#		define code$vmaxss(state,n,...) code$vmaxss$argc##n(state, ##__VA_ARGS__)
#		define code$vmaxss$argc02(state,a1,a2) code$vmaxss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmaxss$argc02$1(...) code$vmaxss$argc02$2(__VA_ARGS__)
#		define code$vmaxss$argc02$2(state,t1,t2,a1,a2) code$vmaxss$argt$##t1##$##t2(state, a1,a2)
#		define code$vmaxss$argc03(state,a1,a2,a3) code$vmaxss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmaxss$argc03$1(...) code$vmaxss$argc03$2(__VA_ARGS__)
#		define code$vmaxss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmaxss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmaxss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rm(_0, _1))
#		define code$vmaxss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5f, modrm$rr(_0, _1))
#		define code$vmaxss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rm(_0, _2))
#		define code$vmaxss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5f, modrm$rr(_0, _2))
#		define code$vmcall(state,n,...) code$vmcall$argc##n(state, ##__VA_ARGS__)
#		define code$vmcall$argc00(state,_) code$vmcall$argt$(state)
#		define code$vmcall$argt$(state) bytes(0f, 01, c1)
#		define code$vmclear(state,n,...) code$vmclear$argc##n(state, ##__VA_ARGS__)
#		define code$vmclear$argc01(state,a1) code$vmclear$argc01$1(state, operand$gettype(a1), a1)
#		define code$vmclear$argc01$1(...) code$vmclear$argc01$2(__VA_ARGS__)
#		define code$vmclear$argc01$2(state,t1,a1) code$vmclear$argt$##t1(state, a1)
#		define code$vmclear$argt$mem(state,_0) bytes(rex16m(_0) 0f, c7, modrm$6m(_0))
#		define code$vmclear$argt$mem64(state,_0) bytes(rex16m(_0) 0f, c7, modrm$6m(_0))
#		define code$vmfunc(state,n,...) code$vmfunc$argc##n(state, ##__VA_ARGS__)
#		define code$vmfunc$argc00(state,_) code$vmfunc$argt$(state)
#		define code$vmfunc$argt$(state) bytes(0f, 01, d4)
#		define code$vminpd(state,n,...) code$vminpd$argc##n(state, ##__VA_ARGS__)
#		define code$vminpd$argc02(state,a1,a2) code$vminpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vminpd$argc02$1(...) code$vminpd$argc02$2(__VA_ARGS__)
#		define code$vminpd$argc02$2(state,t1,t2,a1,a2) code$vminpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vminpd$argc03(state,a1,a2,a3) code$vminpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vminpd$argc03$1(...) code$vminpd$argc03$2(__VA_ARGS__)
#		define code$vminpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vminpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vminpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rr(_0, _1))
#		define code$vminpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rr(_0, _2))
#		define code$vminpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rr(_0, _1))
#		define code$vminpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rr(_0, _2))
#		define code$vminps(state,n,...) code$vminps$argc##n(state, ##__VA_ARGS__)
#		define code$vminps$argc02(state,a1,a2) code$vminps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vminps$argc02$1(...) code$vminps$argc02$2(__VA_ARGS__)
#		define code$vminps$argc02$2(state,t1,t2,a1,a2) code$vminps$argt$##t1##$##t2(state, a1,a2)
#		define code$vminps$argc03(state,a1,a2,a3) code$vminps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vminps$argc03$1(...) code$vminps$argc03$2(__VA_ARGS__)
#		define code$vminps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vminps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vminps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rr(_0, _1))
#		define code$vminps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rr(_0, _2))
#		define code$vminps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rr(_0, _1))
#		define code$vminps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rr(_0, _2))
#		define code$vminsd(state,n,...) code$vminsd$argc##n(state, ##__VA_ARGS__)
#		define code$vminsd$argc02(state,a1,a2) code$vminsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vminsd$argc02$1(...) code$vminsd$argc02$2(__VA_ARGS__)
#		define code$vminsd$argc02$2(state,t1,t2,a1,a2) code$vminsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vminsd$argc03(state,a1,a2,a3) code$vminsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vminsd$argc03$1(...) code$vminsd$argc03$2(__VA_ARGS__)
#		define code$vminsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vminsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vminsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rr(_0, _1))
#		define code$vminsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rr(_0, _2))
#		define code$vminss(state,n,...) code$vminss$argc##n(state, ##__VA_ARGS__)
#		define code$vminss$argc02(state,a1,a2) code$vminss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vminss$argc02$1(...) code$vminss$argc02$2(__VA_ARGS__)
#		define code$vminss$argc02$2(state,t1,t2,a1,a2) code$vminss$argt$##t1##$##t2(state, a1,a2)
#		define code$vminss$argc03(state,a1,a2,a3) code$vminss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vminss$argc03$1(...) code$vminss$argc03$2(__VA_ARGS__)
#		define code$vminss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vminss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vminss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rm(_0, _1))
#		define code$vminss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5d, modrm$rr(_0, _1))
#		define code$vminss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rm(_0, _2))
#		define code$vminss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5d, modrm$rr(_0, _2))
#		define code$vmlaunch(state,n,...) code$vmlaunch$argc##n(state, ##__VA_ARGS__)
#		define code$vmlaunch$argc00(state,_) code$vmlaunch$argt$(state)
#		define code$vmlaunch$argt$(state) bytes(0f, 01, c2)
#		define code$vmovapd(state,n,...) code$vmovapd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovapd$argc02(state,a1,a2) code$vmovapd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovapd$argc02$1(...) code$vmovapd$argc02$2(__VA_ARGS__)
#		define code$vmovapd$argc02$2(state,t1,t2,a1,a2) code$vmovapd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovapd$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovapd$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovapd$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovapd$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovapd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovapd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovapd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rr(_0, _1))
#		define code$vmovapd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovapd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovapd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rr(_0, _1))
#		define code$vmovaps(state,n,...) code$vmovaps$argc##n(state, ##__VA_ARGS__)
#		define code$vmovaps$argc02(state,a1,a2) code$vmovaps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovaps$argc02$1(...) code$vmovaps$argc02$2(__VA_ARGS__)
#		define code$vmovaps$argc02$2(state,t1,t2,a1,a2) code$vmovaps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovaps$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovaps$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovaps$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovaps$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 29, modrm$rm(_1, _0))
#		define code$vmovaps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovaps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovaps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rr(_0, _1))
#		define code$vmovaps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovaps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vmovaps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 28, modrm$rr(_0, _1))
#		define code$vmovd(state,n,...) code$vmovd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovd$argc02(state,a1,a2) code$vmovd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovd$argc02$1(...) code$vmovd$argc02$2(__VA_ARGS__)
#		define code$vmovd$argc02$2(state,t1,t2,a1,a2) code$vmovd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovd$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _1, _0), 7e, modrm$rm(_1, _0))
#		define code$vmovd$argt$mem32$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _1, _0), 7e, modrm$rm(_1, _0))
#		define code$vmovd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1), 6e, modrm$rm(_0, _1))
#		define code$vmovd$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1), 6e, modrm$rm(_0, _1))
#		define code$vmovd$argt$mmreg128$reg32(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1), 6e, modrm$rr(_0, _1))
#		define code$vmovd$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _1, _0), 7e, modrm$rr(_1, _0))
#		define code$vmovddup(state,n,...) code$vmovddup$argc##n(state, ##__VA_ARGS__)
#		define code$vmovddup$argc02(state,a1,a2) code$vmovddup$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovddup$argc02$1(...) code$vmovddup$argc02$2(__VA_ARGS__)
#		define code$vmovddup$argc02$2(state,t1,t2,a1,a2) code$vmovddup$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovddup$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovddup$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovddup$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rr(_0, _1))
#		define code$vmovddup$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovddup$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovddup$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rr(_0, _1))
#		define code$vmovdqa(state,n,...) code$vmovdqa$argc##n(state, ##__VA_ARGS__)
#		define code$vmovdqa$argc02(state,a1,a2) code$vmovdqa$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovdqa$argc02$1(...) code$vmovdqa$argc02$2(__VA_ARGS__)
#		define code$vmovdqa$argc02$2(state,t1,t2,a1,a2) code$vmovdqa$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovdqa$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqa$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqa$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqa$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqa$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqa$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqa$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rr(_0, _1))
#		define code$vmovdqa$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqa$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqa$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rr(_0, _1))
#		define code$vmovdqu(state,n,...) code$vmovdqu$argc##n(state, ##__VA_ARGS__)
#		define code$vmovdqu$argc02(state,a1,a2) code$vmovdqu$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovdqu$argc02$1(...) code$vmovdqu$argc02$2(__VA_ARGS__)
#		define code$vmovdqu$argc02$2(state,t1,t2,a1,a2) code$vmovdqu$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovdqu$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqu$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqu$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqu$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _1, _0), 7f, modrm$rm(_1, _0))
#		define code$vmovdqu$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqu$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqu$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rr(_0, _1))
#		define code$vmovdqu$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqu$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rm(_0, _1))
#		define code$vmovdqu$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 6f, modrm$rr(_0, _1))
#		define code$vmovhlps(state,n,...) code$vmovhlps$argc##n(state, ##__VA_ARGS__)
#		define code$vmovhlps$argc02(state,a1,a2) code$vmovhlps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovhlps$argc02$1(...) code$vmovhlps$argc02$2(__VA_ARGS__)
#		define code$vmovhlps$argc02$2(state,t1,t2,a1,a2) code$vmovhlps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovhlps$argc03(state,a1,a2,a3) code$vmovhlps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovhlps$argc03$1(...) code$vmovhlps$argc03$2(__VA_ARGS__)
#		define code$vmovhlps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovhlps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovhlps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 12, modrm$rr(_0, _1))
#		define code$vmovhlps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 12, modrm$rr(_0, _2))
#		define code$vmovhpd(state,n,...) code$vmovhpd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovhpd$argc02(state,a1,a2) code$vmovhpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovhpd$argc02$1(...) code$vmovhpd$argc02$2(__VA_ARGS__)
#		define code$vmovhpd$argc02$2(state,t1,t2,a1,a2) code$vmovhpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovhpd$argc03(state,a1,a2,a3) code$vmovhpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovhpd$argc03$1(...) code$vmovhpd$argc03$2(__VA_ARGS__)
#		define code$vmovhpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovhpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovhpd$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 17, modrm$rm(_1, _0))
#		define code$vmovhpd$argt$mem64$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 17, modrm$rm(_1, _0))
#		define code$vmovhpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovhpd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovhpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 16, modrm$rm(_0, _2))
#		define code$vmovhpd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 16, modrm$rm(_0, _2))
#		define code$vmovhps(state,n,...) code$vmovhps$argc##n(state, ##__VA_ARGS__)
#		define code$vmovhps$argc02(state,a1,a2) code$vmovhps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovhps$argc02$1(...) code$vmovhps$argc02$2(__VA_ARGS__)
#		define code$vmovhps$argc02$2(state,t1,t2,a1,a2) code$vmovhps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovhps$argc03(state,a1,a2,a3) code$vmovhps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovhps$argc03$1(...) code$vmovhps$argc03$2(__VA_ARGS__)
#		define code$vmovhps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovhps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovhps$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 17, modrm$rm(_1, _0))
#		define code$vmovhps$argt$mem64$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 17, modrm$rm(_1, _0))
#		define code$vmovhps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovhps$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovhps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 16, modrm$rm(_0, _2))
#		define code$vmovhps$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 16, modrm$rm(_0, _2))
#		define code$vmovlhps(state,n,...) code$vmovlhps$argc##n(state, ##__VA_ARGS__)
#		define code$vmovlhps$argc02(state,a1,a2) code$vmovlhps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovlhps$argc02$1(...) code$vmovlhps$argc02$2(__VA_ARGS__)
#		define code$vmovlhps$argc02$2(state,t1,t2,a1,a2) code$vmovlhps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovlhps$argc03(state,a1,a2,a3) code$vmovlhps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovlhps$argc03$1(...) code$vmovlhps$argc03$2(__VA_ARGS__)
#		define code$vmovlhps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovlhps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovlhps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 16, modrm$rr(_0, _1))
#		define code$vmovlhps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 16, modrm$rr(_0, _2))
#		define code$vmovlpd(state,n,...) code$vmovlpd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovlpd$argc02(state,a1,a2) code$vmovlpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovlpd$argc02$1(...) code$vmovlpd$argc02$2(__VA_ARGS__)
#		define code$vmovlpd$argc02$2(state,t1,t2,a1,a2) code$vmovlpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovlpd$argc03(state,a1,a2,a3) code$vmovlpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovlpd$argc03$1(...) code$vmovlpd$argc03$2(__VA_ARGS__)
#		define code$vmovlpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovlpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovlpd$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 13, modrm$rm(_1, _0))
#		define code$vmovlpd$argt$mem64$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 13, modrm$rm(_1, _0))
#		define code$vmovlpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovlpd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovlpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 12, modrm$rm(_0, _2))
#		define code$vmovlpd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 12, modrm$rm(_0, _2))
#		define code$vmovlps(state,n,...) code$vmovlps$argc##n(state, ##__VA_ARGS__)
#		define code$vmovlps$argc02(state,a1,a2) code$vmovlps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovlps$argc02$1(...) code$vmovlps$argc02$2(__VA_ARGS__)
#		define code$vmovlps$argc02$2(state,t1,t2,a1,a2) code$vmovlps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovlps$argc03(state,a1,a2,a3) code$vmovlps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovlps$argc03$1(...) code$vmovlps$argc03$2(__VA_ARGS__)
#		define code$vmovlps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovlps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovlps$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 13, modrm$rm(_1, _0))
#		define code$vmovlps$argt$mem64$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 13, modrm$rm(_1, _0))
#		define code$vmovlps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovlps$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovlps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 12, modrm$rm(_0, _2))
#		define code$vmovlps$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 12, modrm$rm(_0, _2))
#		define code$vmovmskpd(state,n,...) code$vmovmskpd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovmskpd$argc02(state,a1,a2) code$vmovmskpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovmskpd$argc02$1(...) code$vmovmskpd$argc02$2(__VA_ARGS__)
#		define code$vmovmskpd$argc02$2(state,t1,t2,a1,a2) code$vmovmskpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovmskpd$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovmskpd$argt$reg32$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovmskpd$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovmskpd$argt$reg64$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovmskps(state,n,...) code$vmovmskps$argc##n(state, ##__VA_ARGS__)
#		define code$vmovmskps$argc02(state,a1,a2) code$vmovmskps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovmskps$argc02$1(...) code$vmovmskps$argc02$2(__VA_ARGS__)
#		define code$vmovmskps$argc02$2(state,t1,t2,a1,a2) code$vmovmskps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovmskps$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovmskps$argt$reg32$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovmskps$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovmskps$argt$reg64$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 50, modrm$rr(_0, _1))
#		define code$vmovntdq(state,n,...) code$vmovntdq$argc##n(state, ##__VA_ARGS__)
#		define code$vmovntdq$argc02(state,a1,a2) code$vmovntdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovntdq$argc02$1(...) code$vmovntdq$argc02$2(__VA_ARGS__)
#		define code$vmovntdq$argc02$2(state,t1,t2,a1,a2) code$vmovntdq$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovntdq$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), e7, modrm$rm(_1, _0))
#		define code$vmovntdq$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), e7, modrm$rm(_1, _0))
#		define code$vmovntdq$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), e7, modrm$rm(_1, _0))
#		define code$vmovntdq$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), e7, modrm$rm(_1, _0))
#		define code$vmovntdqa(state,n,...) code$vmovntdqa$argc##n(state, ##__VA_ARGS__)
#		define code$vmovntdqa$argc02(state,a1,a2) code$vmovntdqa$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovntdqa$argc02$1(...) code$vmovntdqa$argc02$2(__VA_ARGS__)
#		define code$vmovntdqa$argc02$2(state,t1,t2,a1,a2) code$vmovntdqa$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovntdqa$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vmovntdqa$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vmovntdqa$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vmovntdqa$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 2a, modrm$rm(_0, _1))
#		define code$vmovntpd(state,n,...) code$vmovntpd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovntpd$argc02(state,a1,a2) code$vmovntpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovntpd$argc02$1(...) code$vmovntpd$argc02$2(__VA_ARGS__)
#		define code$vmovntpd$argc02$2(state,t1,t2,a1,a2) code$vmovntpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovntpd$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovntpd$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovntpd$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovntpd$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovntps(state,n,...) code$vmovntps$argc##n(state, ##__VA_ARGS__)
#		define code$vmovntps$argc02(state,a1,a2) code$vmovntps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovntps$argc02$1(...) code$vmovntps$argc02$2(__VA_ARGS__)
#		define code$vmovntps$argc02$2(state,t1,t2,a1,a2) code$vmovntps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovntps$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovntps$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovntps$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovntps$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 2b, modrm$rm(_1, _0))
#		define code$vmovq(state,n,...) code$vmovq$argc##n(state, ##__VA_ARGS__)
#		define code$vmovq$argc02(state,a1,a2) code$vmovq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovq$argc02$1(...) code$vmovq$argc02$2(__VA_ARGS__)
#		define code$vmovq$argc02$2(state,t1,t2,a1,a2) code$vmovq$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovq$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), d6, modrm$rm(_1, _0))
#		define code$vmovq$argt$mem64$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), d6, modrm$rm(_1, _0))
#		define code$vmovq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 7e, modrm$rm(_0, _1))
#		define code$vmovq$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 7e, modrm$rm(_0, _1))
#		define code$vmovq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 7e, modrm$rr(_0, _1))
#		define code$vmovq$argt$mmreg128$reg64(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w1, _0, _1), 6e, modrm$rr(_0, _1))
#		define code$vmovq$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w1, _1, _0), 7e, modrm$rr(_1, _0))
#		define code$vmovsd(state,n,...) code$vmovsd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovsd$argc02(state,a1,a2) code$vmovsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovsd$argc02$1(...) code$vmovsd$argc02$2(__VA_ARGS__)
#		define code$vmovsd$argc02$2(state,t1,t2,a1,a2) code$vmovsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovsd$argc03(state,a1,a2,a3) code$vmovsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovsd$argc03$1(...) code$vmovsd$argc03$2(__VA_ARGS__)
#		define code$vmovsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovsd$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovsd$argt$mem64$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 10, modrm$rr(_0, _1))
#		define code$vmovsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 10, modrm$rr(_0, _2))
#		define code$vmovshdup(state,n,...) code$vmovshdup$argc##n(state, ##__VA_ARGS__)
#		define code$vmovshdup$argc02(state,a1,a2) code$vmovshdup$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovshdup$argc02$1(...) code$vmovshdup$argc02$2(__VA_ARGS__)
#		define code$vmovshdup$argc02$2(state,t1,t2,a1,a2) code$vmovshdup$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovshdup$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovshdup$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovshdup$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 16, modrm$rr(_0, _1))
#		define code$vmovshdup$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovshdup$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vmovshdup$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 16, modrm$rr(_0, _1))
#		define code$vmovsldup(state,n,...) code$vmovsldup$argc##n(state, ##__VA_ARGS__)
#		define code$vmovsldup$argc02(state,a1,a2) code$vmovsldup$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovsldup$argc02$1(...) code$vmovsldup$argc02$2(__VA_ARGS__)
#		define code$vmovsldup$argc02$2(state,t1,t2,a1,a2) code$vmovsldup$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovsldup$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovsldup$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovsldup$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rr(_0, _1))
#		define code$vmovsldup$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovsldup$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rm(_0, _1))
#		define code$vmovsldup$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 12, modrm$rr(_0, _1))
#		define code$vmovss(state,n,...) code$vmovss$argc##n(state, ##__VA_ARGS__)
#		define code$vmovss$argc02(state,a1,a2) code$vmovss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovss$argc02$1(...) code$vmovss$argc02$2(__VA_ARGS__)
#		define code$vmovss$argc02$2(state,t1,t2,a1,a2) code$vmovss$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovss$argc03(state,a1,a2,a3) code$vmovss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmovss$argc03$1(...) code$vmovss$argc03$2(__VA_ARGS__)
#		define code$vmovss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmovss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmovss$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovss$argt$mem32$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 10, modrm$rr(_0, _1))
#		define code$vmovss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 10, modrm$rr(_0, _2))
#		define code$vmovupd(state,n,...) code$vmovupd$argc##n(state, ##__VA_ARGS__)
#		define code$vmovupd$argc02(state,a1,a2) code$vmovupd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovupd$argc02$1(...) code$vmovupd$argc02$2(__VA_ARGS__)
#		define code$vmovupd$argc02$2(state,t1,t2,a1,a2) code$vmovupd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovupd$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovupd$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovupd$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovupd$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovupd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovupd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovupd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rr(_0, _1))
#		define code$vmovupd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovupd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovupd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rr(_0, _1))
#		define code$vmovups(state,n,...) code$vmovups$argc##n(state, ##__VA_ARGS__)
#		define code$vmovups$argc02(state,a1,a2) code$vmovups$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmovups$argc02$1(...) code$vmovups$argc02$2(__VA_ARGS__)
#		define code$vmovups$argc02$2(state,t1,t2,a1,a2) code$vmovups$argt$##t1##$##t2(state, a1,a2)
#		define code$vmovups$argt$mem$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovups$argt$mem$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovups$argt$mem128$mmreg128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovups$argt$mem256$mmreg256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _1, _0), 11, modrm$rm(_1, _0))
#		define code$vmovups$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovups$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovups$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rr(_0, _1))
#		define code$vmovups$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovups$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rm(_0, _1))
#		define code$vmovups$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 10, modrm$rr(_0, _1))
#		define code$vmpsadbw(state,n,...) code$vmpsadbw$argc##n(state, ##__VA_ARGS__)
#		define code$vmpsadbw$argc03(state,a1,a2,a3) code$vmpsadbw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmpsadbw$argc03$1(...) code$vmpsadbw$argc03$2(__VA_ARGS__)
#		define code$vmpsadbw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmpsadbw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmpsadbw$argc04(state,a1,a2,a3,a4) code$vmpsadbw$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vmpsadbw$argc04$1(...) code$vmpsadbw$argc04$2(__VA_ARGS__)
#		define code$vmpsadbw$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vmpsadbw$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vmpsadbw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 42, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vmpsadbw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 42, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vmpsadbw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 42, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vmpsadbw$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 42, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vmpsadbw$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 42, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vmpsadbw$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 42, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vmpsadbw$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 42, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vmpsadbw$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 42, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vmpsadbw$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 42, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vmpsadbw$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 42, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vmpsadbw$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 42, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vmpsadbw$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 42, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vmptrld(state,n,...) code$vmptrld$argc##n(state, ##__VA_ARGS__)
#		define code$vmptrld$argc01(state,a1) code$vmptrld$argc01$1(state, operand$gettype(a1), a1)
#		define code$vmptrld$argc01$1(...) code$vmptrld$argc01$2(__VA_ARGS__)
#		define code$vmptrld$argc01$2(state,t1,a1) code$vmptrld$argt$##t1(state, a1)
#		define code$vmptrld$argt$mem(state,_0) bytes(rex32m(_0) 0f, c7, modrm$6m(_0))
#		define code$vmptrld$argt$mem64(state,_0) bytes(rex32m(_0) 0f, c7, modrm$6m(_0))
#		define code$vmptrst(state,n,...) code$vmptrst$argc##n(state, ##__VA_ARGS__)
#		define code$vmptrst$argc01(state,a1) code$vmptrst$argc01$1(state, operand$gettype(a1), a1)
#		define code$vmptrst$argc01$1(...) code$vmptrst$argc01$2(__VA_ARGS__)
#		define code$vmptrst$argc01$2(state,t1,a1) code$vmptrst$argt$##t1(state, a1)
#		define code$vmptrst$argt$mem(state,_0) bytes(rex32m(_0) 0f, c7, modrm$7m(_0))
#		define code$vmptrst$argt$mem64(state,_0) bytes(rex32m(_0) 0f, c7, modrm$7m(_0))
#		define code$vmread(state,n,...) code$vmread$argc##n(state, ##__VA_ARGS__)
#		define code$vmread$argc02(state,a1,a2) code$vmread$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmread$argc02$1(...) code$vmread$argc02$2(__VA_ARGS__)
#		define code$vmread$argc02$2(state,t1,t2,a1,a2) code$vmread$argt$##t1##$##t2(state, a1,a2)
#		define code$vmread$argt$mem$reg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 78, modrm$rm(_1, _0))
#		define code$vmread$argt$mem64$reg64(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 78, modrm$rm(_1, _0))
#		define code$vmread$argt$reg64$reg64(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 78, modrm$rr(_1, _0))
#		define code$vmresume(state,n,...) code$vmresume$argc##n(state, ##__VA_ARGS__)
#		define code$vmresume$argc00(state,_) code$vmresume$argt$(state)
#		define code$vmresume$argt$(state) bytes(0f, 01, c3)
#		define code$vmulpd(state,n,...) code$vmulpd$argc##n(state, ##__VA_ARGS__)
#		define code$vmulpd$argc02(state,a1,a2) code$vmulpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmulpd$argc02$1(...) code$vmulpd$argc02$2(__VA_ARGS__)
#		define code$vmulpd$argc02$2(state,t1,t2,a1,a2) code$vmulpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmulpd$argc03(state,a1,a2,a3) code$vmulpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmulpd$argc03$1(...) code$vmulpd$argc03$2(__VA_ARGS__)
#		define code$vmulpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmulpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmulpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vmulpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rr(_0, _2))
#		define code$vmulpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vmulpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rr(_0, _2))
#		define code$vmulps(state,n,...) code$vmulps$argc##n(state, ##__VA_ARGS__)
#		define code$vmulps$argc02(state,a1,a2) code$vmulps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmulps$argc02$1(...) code$vmulps$argc02$2(__VA_ARGS__)
#		define code$vmulps$argc02$2(state,t1,t2,a1,a2) code$vmulps$argt$##t1##$##t2(state, a1,a2)
#		define code$vmulps$argc03(state,a1,a2,a3) code$vmulps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmulps$argc03$1(...) code$vmulps$argc03$2(__VA_ARGS__)
#		define code$vmulps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmulps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmulps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vmulps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rr(_0, _2))
#		define code$vmulps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vmulps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rr(_0, _2))
#		define code$vmulsd(state,n,...) code$vmulsd$argc##n(state, ##__VA_ARGS__)
#		define code$vmulsd$argc02(state,a1,a2) code$vmulsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmulsd$argc02$1(...) code$vmulsd$argc02$2(__VA_ARGS__)
#		define code$vmulsd$argc02$2(state,t1,t2,a1,a2) code$vmulsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vmulsd$argc03(state,a1,a2,a3) code$vmulsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmulsd$argc03$1(...) code$vmulsd$argc03$2(__VA_ARGS__)
#		define code$vmulsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmulsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmulsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vmulsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rr(_0, _2))
#		define code$vmulss(state,n,...) code$vmulss$argc##n(state, ##__VA_ARGS__)
#		define code$vmulss$argc02(state,a1,a2) code$vmulss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmulss$argc02$1(...) code$vmulss$argc02$2(__VA_ARGS__)
#		define code$vmulss$argc02$2(state,t1,t2,a1,a2) code$vmulss$argt$##t1##$##t2(state, a1,a2)
#		define code$vmulss$argc03(state,a1,a2,a3) code$vmulss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vmulss$argc03$1(...) code$vmulss$argc03$2(__VA_ARGS__)
#		define code$vmulss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vmulss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vmulss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vmulss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vmulss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rm(_0, _2))
#		define code$vmulss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 59, modrm$rr(_0, _2))
#		define code$vmwrite(state,n,...) code$vmwrite$argc##n(state, ##__VA_ARGS__)
#		define code$vmwrite$argc02(state,a1,a2) code$vmwrite$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vmwrite$argc02$1(...) code$vmwrite$argc02$2(__VA_ARGS__)
#		define code$vmwrite$argc02$2(state,t1,t2,a1,a2) code$vmwrite$argt$##t1##$##t2(state, a1,a2)
#		define code$vmwrite$argt$reg64$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 79, modrm$rm(_0, _1))
#		define code$vmwrite$argt$reg64$mem64(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 79, modrm$rm(_0, _1))
#		define code$vmwrite$argt$reg64$reg64(state,_0,_1) bytes(rex32rr(_0, _1) 0f, 79, modrm$rr(_0, _1))
#		define code$vmxoff(state,n,...) code$vmxoff$argc##n(state, ##__VA_ARGS__)
#		define code$vmxoff$argc00(state,_) code$vmxoff$argt$(state)
#		define code$vmxoff$argt$(state) bytes(0f, 01, c4)
#		define code$vmxon(state,n,...) code$vmxon$argc##n(state, ##__VA_ARGS__)
#		define code$vmxon$argc01(state,a1) code$vmxon$argc01$1(state, operand$gettype(a1), a1)
#		define code$vmxon$argc01$1(...) code$vmxon$argc01$2(__VA_ARGS__)
#		define code$vmxon$argc01$2(state,t1,a1) code$vmxon$argt$##t1(state, a1)
#		define code$vmxon$argt$mem(state,_0) bytes(f3, rex32m(_0) 0f, c7, modrm$6m(_0))
#		define code$vmxon$argt$mem64(state,_0) bytes(f3, rex32m(_0) 0f, c7, modrm$6m(_0))
#		define code$vorpd(state,n,...) code$vorpd$argc##n(state, ##__VA_ARGS__)
#		define code$vorpd$argc02(state,a1,a2) code$vorpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vorpd$argc02$1(...) code$vorpd$argc02$2(__VA_ARGS__)
#		define code$vorpd$argc02$2(state,t1,t2,a1,a2) code$vorpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vorpd$argc03(state,a1,a2,a3) code$vorpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vorpd$argc03$1(...) code$vorpd$argc03$2(__VA_ARGS__)
#		define code$vorpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vorpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vorpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rr(_0, _1))
#		define code$vorpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rr(_0, _2))
#		define code$vorpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rr(_0, _1))
#		define code$vorpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rr(_0, _2))
#		define code$vorps(state,n,...) code$vorps$argc##n(state, ##__VA_ARGS__)
#		define code$vorps$argc02(state,a1,a2) code$vorps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vorps$argc02$1(...) code$vorps$argc02$2(__VA_ARGS__)
#		define code$vorps$argc02$2(state,t1,t2,a1,a2) code$vorps$argt$##t1##$##t2(state, a1,a2)
#		define code$vorps$argc03(state,a1,a2,a3) code$vorps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vorps$argc03$1(...) code$vorps$argc03$2(__VA_ARGS__)
#		define code$vorps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vorps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vorps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rr(_0, _1))
#		define code$vorps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rr(_0, _2))
#		define code$vorps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rm(_0, _1))
#		define code$vorps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 56, modrm$rr(_0, _1))
#		define code$vorps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rm(_0, _2))
#		define code$vorps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 56, modrm$rr(_0, _2))
#		define code$vpabsb(state,n,...) code$vpabsb$argc##n(state, ##__VA_ARGS__)
#		define code$vpabsb$argc02(state,a1,a2) code$vpabsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpabsb$argc02$1(...) code$vpabsb$argc02$2(__VA_ARGS__)
#		define code$vpabsb$argc02$2(state,t1,t2,a1,a2) code$vpabsb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpabsb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1c, modrm$rm(_0, _1))
#		define code$vpabsb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1c, modrm$rm(_0, _1))
#		define code$vpabsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1c, modrm$rr(_0, _1))
#		define code$vpabsb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1c, modrm$rm(_0, _1))
#		define code$vpabsb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1c, modrm$rm(_0, _1))
#		define code$vpabsb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1c, modrm$rr(_0, _1))
#		define code$vpabsd(state,n,...) code$vpabsd$argc##n(state, ##__VA_ARGS__)
#		define code$vpabsd$argc02(state,a1,a2) code$vpabsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpabsd$argc02$1(...) code$vpabsd$argc02$2(__VA_ARGS__)
#		define code$vpabsd$argc02$2(state,t1,t2,a1,a2) code$vpabsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpabsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1e, modrm$rm(_0, _1))
#		define code$vpabsd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1e, modrm$rm(_0, _1))
#		define code$vpabsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1e, modrm$rr(_0, _1))
#		define code$vpabsd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1e, modrm$rm(_0, _1))
#		define code$vpabsd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1e, modrm$rm(_0, _1))
#		define code$vpabsd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1e, modrm$rr(_0, _1))
#		define code$vpabsw(state,n,...) code$vpabsw$argc##n(state, ##__VA_ARGS__)
#		define code$vpabsw$argc02(state,a1,a2) code$vpabsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpabsw$argc02$1(...) code$vpabsw$argc02$2(__VA_ARGS__)
#		define code$vpabsw$argc02$2(state,t1,t2,a1,a2) code$vpabsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpabsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1d, modrm$rm(_0, _1))
#		define code$vpabsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1d, modrm$rm(_0, _1))
#		define code$vpabsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1d, modrm$rr(_0, _1))
#		define code$vpabsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1d, modrm$rm(_0, _1))
#		define code$vpabsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1d, modrm$rm(_0, _1))
#		define code$vpabsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 1d, modrm$rr(_0, _1))
#		define code$vpackssdw(state,n,...) code$vpackssdw$argc##n(state, ##__VA_ARGS__)
#		define code$vpackssdw$argc02(state,a1,a2) code$vpackssdw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpackssdw$argc02$1(...) code$vpackssdw$argc02$2(__VA_ARGS__)
#		define code$vpackssdw$argc02$2(state,t1,t2,a1,a2) code$vpackssdw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpackssdw$argc03(state,a1,a2,a3) code$vpackssdw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpackssdw$argc03$1(...) code$vpackssdw$argc03$2(__VA_ARGS__)
#		define code$vpackssdw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpackssdw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpackssdw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6b, modrm$rm(_0, _1))
#		define code$vpackssdw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6b, modrm$rm(_0, _1))
#		define code$vpackssdw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6b, modrm$rr(_0, _1))
#		define code$vpackssdw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6b, modrm$rm(_0, _2))
#		define code$vpackssdw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6b, modrm$rm(_0, _2))
#		define code$vpackssdw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6b, modrm$rr(_0, _2))
#		define code$vpackssdw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6b, modrm$rm(_0, _1))
#		define code$vpackssdw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6b, modrm$rm(_0, _1))
#		define code$vpackssdw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6b, modrm$rr(_0, _1))
#		define code$vpackssdw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6b, modrm$rm(_0, _2))
#		define code$vpackssdw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6b, modrm$rm(_0, _2))
#		define code$vpackssdw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6b, modrm$rr(_0, _2))
#		define code$vpacksswb(state,n,...) code$vpacksswb$argc##n(state, ##__VA_ARGS__)
#		define code$vpacksswb$argc02(state,a1,a2) code$vpacksswb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpacksswb$argc02$1(...) code$vpacksswb$argc02$2(__VA_ARGS__)
#		define code$vpacksswb$argc02$2(state,t1,t2,a1,a2) code$vpacksswb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpacksswb$argc03(state,a1,a2,a3) code$vpacksswb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpacksswb$argc03$1(...) code$vpacksswb$argc03$2(__VA_ARGS__)
#		define code$vpacksswb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpacksswb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpacksswb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 63, modrm$rm(_0, _1))
#		define code$vpacksswb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 63, modrm$rm(_0, _1))
#		define code$vpacksswb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 63, modrm$rr(_0, _1))
#		define code$vpacksswb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 63, modrm$rm(_0, _2))
#		define code$vpacksswb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 63, modrm$rm(_0, _2))
#		define code$vpacksswb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 63, modrm$rr(_0, _2))
#		define code$vpacksswb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 63, modrm$rm(_0, _1))
#		define code$vpacksswb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 63, modrm$rm(_0, _1))
#		define code$vpacksswb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 63, modrm$rr(_0, _1))
#		define code$vpacksswb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 63, modrm$rm(_0, _2))
#		define code$vpacksswb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 63, modrm$rm(_0, _2))
#		define code$vpacksswb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 63, modrm$rr(_0, _2))
#		define code$vpackusdw(state,n,...) code$vpackusdw$argc##n(state, ##__VA_ARGS__)
#		define code$vpackusdw$argc02(state,a1,a2) code$vpackusdw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpackusdw$argc02$1(...) code$vpackusdw$argc02$2(__VA_ARGS__)
#		define code$vpackusdw$argc02$2(state,t1,t2,a1,a2) code$vpackusdw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpackusdw$argc03(state,a1,a2,a3) code$vpackusdw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpackusdw$argc03$1(...) code$vpackusdw$argc03$2(__VA_ARGS__)
#		define code$vpackusdw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpackusdw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpackusdw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 2b, modrm$rm(_0, _1))
#		define code$vpackusdw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 2b, modrm$rm(_0, _1))
#		define code$vpackusdw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 2b, modrm$rr(_0, _1))
#		define code$vpackusdw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 2b, modrm$rm(_0, _2))
#		define code$vpackusdw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 2b, modrm$rm(_0, _2))
#		define code$vpackusdw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 2b, modrm$rr(_0, _2))
#		define code$vpackusdw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 2b, modrm$rm(_0, _1))
#		define code$vpackusdw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 2b, modrm$rm(_0, _1))
#		define code$vpackusdw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 2b, modrm$rr(_0, _1))
#		define code$vpackusdw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 2b, modrm$rm(_0, _2))
#		define code$vpackusdw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 2b, modrm$rm(_0, _2))
#		define code$vpackusdw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 2b, modrm$rr(_0, _2))
#		define code$vpackuswb(state,n,...) code$vpackuswb$argc##n(state, ##__VA_ARGS__)
#		define code$vpackuswb$argc02(state,a1,a2) code$vpackuswb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpackuswb$argc02$1(...) code$vpackuswb$argc02$2(__VA_ARGS__)
#		define code$vpackuswb$argc02$2(state,t1,t2,a1,a2) code$vpackuswb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpackuswb$argc03(state,a1,a2,a3) code$vpackuswb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpackuswb$argc03$1(...) code$vpackuswb$argc03$2(__VA_ARGS__)
#		define code$vpackuswb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpackuswb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpackuswb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 67, modrm$rm(_0, _1))
#		define code$vpackuswb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 67, modrm$rm(_0, _1))
#		define code$vpackuswb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 67, modrm$rr(_0, _1))
#		define code$vpackuswb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 67, modrm$rm(_0, _2))
#		define code$vpackuswb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 67, modrm$rm(_0, _2))
#		define code$vpackuswb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 67, modrm$rr(_0, _2))
#		define code$vpackuswb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 67, modrm$rm(_0, _1))
#		define code$vpackuswb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 67, modrm$rm(_0, _1))
#		define code$vpackuswb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 67, modrm$rr(_0, _1))
#		define code$vpackuswb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 67, modrm$rm(_0, _2))
#		define code$vpackuswb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 67, modrm$rm(_0, _2))
#		define code$vpackuswb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 67, modrm$rr(_0, _2))
#		define code$vpaddb(state,n,...) code$vpaddb$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddb$argc02(state,a1,a2) code$vpaddb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddb$argc02$1(...) code$vpaddb$argc02$2(__VA_ARGS__)
#		define code$vpaddb$argc02$2(state,t1,t2,a1,a2) code$vpaddb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddb$argc03(state,a1,a2,a3) code$vpaddb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddb$argc03$1(...) code$vpaddb$argc03$2(__VA_ARGS__)
#		define code$vpaddb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fc, modrm$rm(_0, _1))
#		define code$vpaddb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fc, modrm$rm(_0, _1))
#		define code$vpaddb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fc, modrm$rr(_0, _1))
#		define code$vpaddb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fc, modrm$rm(_0, _2))
#		define code$vpaddb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fc, modrm$rm(_0, _2))
#		define code$vpaddb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fc, modrm$rr(_0, _2))
#		define code$vpaddb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fc, modrm$rm(_0, _1))
#		define code$vpaddb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fc, modrm$rm(_0, _1))
#		define code$vpaddb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fc, modrm$rr(_0, _1))
#		define code$vpaddb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fc, modrm$rm(_0, _2))
#		define code$vpaddb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fc, modrm$rm(_0, _2))
#		define code$vpaddb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fc, modrm$rr(_0, _2))
#		define code$vpaddd(state,n,...) code$vpaddd$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddd$argc02(state,a1,a2) code$vpaddd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddd$argc02$1(...) code$vpaddd$argc02$2(__VA_ARGS__)
#		define code$vpaddd$argc02$2(state,t1,t2,a1,a2) code$vpaddd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddd$argc03(state,a1,a2,a3) code$vpaddd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddd$argc03$1(...) code$vpaddd$argc03$2(__VA_ARGS__)
#		define code$vpaddd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fe, modrm$rm(_0, _1))
#		define code$vpaddd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fe, modrm$rm(_0, _1))
#		define code$vpaddd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fe, modrm$rr(_0, _1))
#		define code$vpaddd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fe, modrm$rm(_0, _2))
#		define code$vpaddd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fe, modrm$rm(_0, _2))
#		define code$vpaddd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fe, modrm$rr(_0, _2))
#		define code$vpaddd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fe, modrm$rm(_0, _1))
#		define code$vpaddd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fe, modrm$rm(_0, _1))
#		define code$vpaddd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fe, modrm$rr(_0, _1))
#		define code$vpaddd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fe, modrm$rm(_0, _2))
#		define code$vpaddd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fe, modrm$rm(_0, _2))
#		define code$vpaddd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fe, modrm$rr(_0, _2))
#		define code$vpaddq(state,n,...) code$vpaddq$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddq$argc02(state,a1,a2) code$vpaddq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddq$argc02$1(...) code$vpaddq$argc02$2(__VA_ARGS__)
#		define code$vpaddq$argc02$2(state,t1,t2,a1,a2) code$vpaddq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddq$argc03(state,a1,a2,a3) code$vpaddq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddq$argc03$1(...) code$vpaddq$argc03$2(__VA_ARGS__)
#		define code$vpaddq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d4, modrm$rm(_0, _1))
#		define code$vpaddq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d4, modrm$rm(_0, _1))
#		define code$vpaddq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d4, modrm$rr(_0, _1))
#		define code$vpaddq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d4, modrm$rm(_0, _2))
#		define code$vpaddq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d4, modrm$rm(_0, _2))
#		define code$vpaddq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d4, modrm$rr(_0, _2))
#		define code$vpaddq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d4, modrm$rm(_0, _1))
#		define code$vpaddq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d4, modrm$rm(_0, _1))
#		define code$vpaddq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d4, modrm$rr(_0, _1))
#		define code$vpaddq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d4, modrm$rm(_0, _2))
#		define code$vpaddq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d4, modrm$rm(_0, _2))
#		define code$vpaddq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d4, modrm$rr(_0, _2))
#		define code$vpaddsb(state,n,...) code$vpaddsb$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddsb$argc02(state,a1,a2) code$vpaddsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddsb$argc02$1(...) code$vpaddsb$argc02$2(__VA_ARGS__)
#		define code$vpaddsb$argc02$2(state,t1,t2,a1,a2) code$vpaddsb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddsb$argc03(state,a1,a2,a3) code$vpaddsb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddsb$argc03$1(...) code$vpaddsb$argc03$2(__VA_ARGS__)
#		define code$vpaddsb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddsb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddsb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ec, modrm$rm(_0, _1))
#		define code$vpaddsb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ec, modrm$rm(_0, _1))
#		define code$vpaddsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ec, modrm$rr(_0, _1))
#		define code$vpaddsb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ec, modrm$rm(_0, _2))
#		define code$vpaddsb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ec, modrm$rm(_0, _2))
#		define code$vpaddsb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ec, modrm$rr(_0, _2))
#		define code$vpaddsb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ec, modrm$rm(_0, _1))
#		define code$vpaddsb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ec, modrm$rm(_0, _1))
#		define code$vpaddsb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ec, modrm$rr(_0, _1))
#		define code$vpaddsb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ec, modrm$rm(_0, _2))
#		define code$vpaddsb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ec, modrm$rm(_0, _2))
#		define code$vpaddsb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ec, modrm$rr(_0, _2))
#		define code$vpaddsw(state,n,...) code$vpaddsw$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddsw$argc02(state,a1,a2) code$vpaddsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddsw$argc02$1(...) code$vpaddsw$argc02$2(__VA_ARGS__)
#		define code$vpaddsw$argc02$2(state,t1,t2,a1,a2) code$vpaddsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddsw$argc03(state,a1,a2,a3) code$vpaddsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddsw$argc03$1(...) code$vpaddsw$argc03$2(__VA_ARGS__)
#		define code$vpaddsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ed, modrm$rm(_0, _1))
#		define code$vpaddsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ed, modrm$rm(_0, _1))
#		define code$vpaddsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ed, modrm$rr(_0, _1))
#		define code$vpaddsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ed, modrm$rm(_0, _2))
#		define code$vpaddsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ed, modrm$rm(_0, _2))
#		define code$vpaddsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ed, modrm$rr(_0, _2))
#		define code$vpaddsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ed, modrm$rm(_0, _1))
#		define code$vpaddsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ed, modrm$rm(_0, _1))
#		define code$vpaddsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ed, modrm$rr(_0, _1))
#		define code$vpaddsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ed, modrm$rm(_0, _2))
#		define code$vpaddsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ed, modrm$rm(_0, _2))
#		define code$vpaddsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ed, modrm$rr(_0, _2))
#		define code$vpaddusb(state,n,...) code$vpaddusb$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddusb$argc02(state,a1,a2) code$vpaddusb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddusb$argc02$1(...) code$vpaddusb$argc02$2(__VA_ARGS__)
#		define code$vpaddusb$argc02$2(state,t1,t2,a1,a2) code$vpaddusb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddusb$argc03(state,a1,a2,a3) code$vpaddusb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddusb$argc03$1(...) code$vpaddusb$argc03$2(__VA_ARGS__)
#		define code$vpaddusb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddusb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddusb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dc, modrm$rm(_0, _1))
#		define code$vpaddusb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dc, modrm$rm(_0, _1))
#		define code$vpaddusb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dc, modrm$rr(_0, _1))
#		define code$vpaddusb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dc, modrm$rm(_0, _2))
#		define code$vpaddusb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dc, modrm$rm(_0, _2))
#		define code$vpaddusb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dc, modrm$rr(_0, _2))
#		define code$vpaddusb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dc, modrm$rm(_0, _1))
#		define code$vpaddusb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dc, modrm$rm(_0, _1))
#		define code$vpaddusb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dc, modrm$rr(_0, _1))
#		define code$vpaddusb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dc, modrm$rm(_0, _2))
#		define code$vpaddusb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dc, modrm$rm(_0, _2))
#		define code$vpaddusb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dc, modrm$rr(_0, _2))
#		define code$vpaddusw(state,n,...) code$vpaddusw$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddusw$argc02(state,a1,a2) code$vpaddusw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddusw$argc02$1(...) code$vpaddusw$argc02$2(__VA_ARGS__)
#		define code$vpaddusw$argc02$2(state,t1,t2,a1,a2) code$vpaddusw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddusw$argc03(state,a1,a2,a3) code$vpaddusw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddusw$argc03$1(...) code$vpaddusw$argc03$2(__VA_ARGS__)
#		define code$vpaddusw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddusw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddusw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dd, modrm$rm(_0, _1))
#		define code$vpaddusw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dd, modrm$rm(_0, _1))
#		define code$vpaddusw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dd, modrm$rr(_0, _1))
#		define code$vpaddusw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dd, modrm$rm(_0, _2))
#		define code$vpaddusw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dd, modrm$rm(_0, _2))
#		define code$vpaddusw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dd, modrm$rr(_0, _2))
#		define code$vpaddusw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dd, modrm$rm(_0, _1))
#		define code$vpaddusw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dd, modrm$rm(_0, _1))
#		define code$vpaddusw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), dd, modrm$rr(_0, _1))
#		define code$vpaddusw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dd, modrm$rm(_0, _2))
#		define code$vpaddusw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dd, modrm$rm(_0, _2))
#		define code$vpaddusw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), dd, modrm$rr(_0, _2))
#		define code$vpaddw(state,n,...) code$vpaddw$argc##n(state, ##__VA_ARGS__)
#		define code$vpaddw$argc02(state,a1,a2) code$vpaddw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpaddw$argc02$1(...) code$vpaddw$argc02$2(__VA_ARGS__)
#		define code$vpaddw$argc02$2(state,t1,t2,a1,a2) code$vpaddw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpaddw$argc03(state,a1,a2,a3) code$vpaddw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpaddw$argc03$1(...) code$vpaddw$argc03$2(__VA_ARGS__)
#		define code$vpaddw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpaddw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpaddw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fd, modrm$rm(_0, _1))
#		define code$vpaddw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fd, modrm$rm(_0, _1))
#		define code$vpaddw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fd, modrm$rr(_0, _1))
#		define code$vpaddw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fd, modrm$rm(_0, _2))
#		define code$vpaddw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fd, modrm$rm(_0, _2))
#		define code$vpaddw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fd, modrm$rr(_0, _2))
#		define code$vpaddw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fd, modrm$rm(_0, _1))
#		define code$vpaddw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fd, modrm$rm(_0, _1))
#		define code$vpaddw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fd, modrm$rr(_0, _1))
#		define code$vpaddw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fd, modrm$rm(_0, _2))
#		define code$vpaddw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fd, modrm$rm(_0, _2))
#		define code$vpaddw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fd, modrm$rr(_0, _2))
#		define code$vpalignr(state,n,...) code$vpalignr$argc##n(state, ##__VA_ARGS__)
#		define code$vpalignr$argc03(state,a1,a2,a3) code$vpalignr$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpalignr$argc03$1(...) code$vpalignr$argc03$2(__VA_ARGS__)
#		define code$vpalignr$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpalignr$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpalignr$argc04(state,a1,a2,a3,a4) code$vpalignr$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpalignr$argc04$1(...) code$vpalignr$argc04$2(__VA_ARGS__)
#		define code$vpalignr$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpalignr$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpalignr$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpalignr$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpalignr$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0f, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpalignr$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0f, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpalignr$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0f, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpalignr$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0f, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpalignr$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpalignr$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0f, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpalignr$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0f, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpalignr$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0f, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpalignr$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0f, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpalignr$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0f, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpand(state,n,...) code$vpand$argc##n(state, ##__VA_ARGS__)
#		define code$vpand$argc02(state,a1,a2) code$vpand$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpand$argc02$1(...) code$vpand$argc02$2(__VA_ARGS__)
#		define code$vpand$argc02$2(state,t1,t2,a1,a2) code$vpand$argt$##t1##$##t2(state, a1,a2)
#		define code$vpand$argc03(state,a1,a2,a3) code$vpand$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpand$argc03$1(...) code$vpand$argc03$2(__VA_ARGS__)
#		define code$vpand$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpand$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpand$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), db, modrm$rm(_0, _1))
#		define code$vpand$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), db, modrm$rm(_0, _1))
#		define code$vpand$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), db, modrm$rr(_0, _1))
#		define code$vpand$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), db, modrm$rm(_0, _2))
#		define code$vpand$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), db, modrm$rm(_0, _2))
#		define code$vpand$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), db, modrm$rr(_0, _2))
#		define code$vpand$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), db, modrm$rm(_0, _1))
#		define code$vpand$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), db, modrm$rm(_0, _1))
#		define code$vpand$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), db, modrm$rr(_0, _1))
#		define code$vpand$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), db, modrm$rm(_0, _2))
#		define code$vpand$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), db, modrm$rm(_0, _2))
#		define code$vpand$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), db, modrm$rr(_0, _2))
#		define code$vpandn(state,n,...) code$vpandn$argc##n(state, ##__VA_ARGS__)
#		define code$vpandn$argc02(state,a1,a2) code$vpandn$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpandn$argc02$1(...) code$vpandn$argc02$2(__VA_ARGS__)
#		define code$vpandn$argc02$2(state,t1,t2,a1,a2) code$vpandn$argt$##t1##$##t2(state, a1,a2)
#		define code$vpandn$argc03(state,a1,a2,a3) code$vpandn$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpandn$argc03$1(...) code$vpandn$argc03$2(__VA_ARGS__)
#		define code$vpandn$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpandn$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpandn$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), df, modrm$rm(_0, _1))
#		define code$vpandn$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), df, modrm$rm(_0, _1))
#		define code$vpandn$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), df, modrm$rr(_0, _1))
#		define code$vpandn$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), df, modrm$rm(_0, _2))
#		define code$vpandn$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), df, modrm$rm(_0, _2))
#		define code$vpandn$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), df, modrm$rr(_0, _2))
#		define code$vpandn$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), df, modrm$rm(_0, _1))
#		define code$vpandn$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), df, modrm$rm(_0, _1))
#		define code$vpandn$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), df, modrm$rr(_0, _1))
#		define code$vpandn$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), df, modrm$rm(_0, _2))
#		define code$vpandn$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), df, modrm$rm(_0, _2))
#		define code$vpandn$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), df, modrm$rr(_0, _2))
#		define code$vpavgb(state,n,...) code$vpavgb$argc##n(state, ##__VA_ARGS__)
#		define code$vpavgb$argc02(state,a1,a2) code$vpavgb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpavgb$argc02$1(...) code$vpavgb$argc02$2(__VA_ARGS__)
#		define code$vpavgb$argc02$2(state,t1,t2,a1,a2) code$vpavgb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpavgb$argc03(state,a1,a2,a3) code$vpavgb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpavgb$argc03$1(...) code$vpavgb$argc03$2(__VA_ARGS__)
#		define code$vpavgb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpavgb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpavgb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e0, modrm$rm(_0, _1))
#		define code$vpavgb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e0, modrm$rm(_0, _1))
#		define code$vpavgb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e0, modrm$rr(_0, _1))
#		define code$vpavgb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e0, modrm$rm(_0, _2))
#		define code$vpavgb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e0, modrm$rm(_0, _2))
#		define code$vpavgb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e0, modrm$rr(_0, _2))
#		define code$vpavgb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e0, modrm$rm(_0, _1))
#		define code$vpavgb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e0, modrm$rm(_0, _1))
#		define code$vpavgb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e0, modrm$rr(_0, _1))
#		define code$vpavgb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e0, modrm$rm(_0, _2))
#		define code$vpavgb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e0, modrm$rm(_0, _2))
#		define code$vpavgb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e0, modrm$rr(_0, _2))
#		define code$vpavgw(state,n,...) code$vpavgw$argc##n(state, ##__VA_ARGS__)
#		define code$vpavgw$argc02(state,a1,a2) code$vpavgw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpavgw$argc02$1(...) code$vpavgw$argc02$2(__VA_ARGS__)
#		define code$vpavgw$argc02$2(state,t1,t2,a1,a2) code$vpavgw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpavgw$argc03(state,a1,a2,a3) code$vpavgw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpavgw$argc03$1(...) code$vpavgw$argc03$2(__VA_ARGS__)
#		define code$vpavgw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpavgw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpavgw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e3, modrm$rm(_0, _1))
#		define code$vpavgw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e3, modrm$rm(_0, _1))
#		define code$vpavgw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e3, modrm$rr(_0, _1))
#		define code$vpavgw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e3, modrm$rm(_0, _2))
#		define code$vpavgw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e3, modrm$rm(_0, _2))
#		define code$vpavgw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e3, modrm$rr(_0, _2))
#		define code$vpavgw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e3, modrm$rm(_0, _1))
#		define code$vpavgw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e3, modrm$rm(_0, _1))
#		define code$vpavgw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e3, modrm$rr(_0, _1))
#		define code$vpavgw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e3, modrm$rm(_0, _2))
#		define code$vpavgw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e3, modrm$rm(_0, _2))
#		define code$vpavgw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e3, modrm$rr(_0, _2))
#		define code$vpblendd(state,n,...) code$vpblendd$argc##n(state, ##__VA_ARGS__)
#		define code$vpblendd$argc03(state,a1,a2,a3) code$vpblendd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpblendd$argc03$1(...) code$vpblendd$argc03$2(__VA_ARGS__)
#		define code$vpblendd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpblendd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpblendd$argc04(state,a1,a2,a3,a4) code$vpblendd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpblendd$argc04$1(...) code$vpblendd$argc04$2(__VA_ARGS__)
#		define code$vpblendd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpblendd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpblendd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 02, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 02, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 02, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 02, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendd$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 02, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendd$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 02, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 02, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 02, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 02, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendd$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 02, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendd$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 02, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendd$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 02, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendvb(state,n,...) code$vpblendvb$argc##n(state, ##__VA_ARGS__)
#		define code$vpblendvb$argc03(state,a1,a2,a3) code$vpblendvb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpblendvb$argc03$1(...) code$vpblendvb$argc03$2(__VA_ARGS__)
#		define code$vpblendvb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpblendvb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpblendvb$argc04(state,a1,a2,a3,a4) code$vpblendvb$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpblendvb$argc04$1(...) code$vpblendvb$argc04$2(__VA_ARGS__)
#		define code$vpblendvb$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpblendvb$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpblendvb$argt$mmreg128$mem$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4c, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vpblendvb$argt$mmreg128$mem128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4c, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vpblendvb$argt$mmreg128$mmreg128$mem$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4c, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vpblendvb$argt$mmreg128$mmreg128$mem128$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4c, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vpblendvb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4c, modrm$rr(_0, _1), modrm$is4(_2))
#		define code$vpblendvb$argt$mmreg128$mmreg128$mmreg128$mmreg128(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4c, modrm$rr(_0, _2), modrm$is4(_3))
#		define code$vpblendvb$argt$mmreg256$mem$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4c, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vpblendvb$argt$mmreg256$mem256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4c, modrm$rm(_0, _1), modrm$is4(_2))
#		define code$vpblendvb$argt$mmreg256$mmreg256$mem$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4c, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vpblendvb$argt$mmreg256$mmreg256$mem256$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4c, modrm$rm(_0, _2), modrm$is4(_3))
#		define code$vpblendvb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 4c, modrm$rr(_0, _1), modrm$is4(_2))
#		define code$vpblendvb$argt$mmreg256$mmreg256$mmreg256$mmreg256(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 4c, modrm$rr(_0, _2), modrm$is4(_3))
#		define code$vpblendw(state,n,...) code$vpblendw$argc##n(state, ##__VA_ARGS__)
#		define code$vpblendw$argc03(state,a1,a2,a3) code$vpblendw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpblendw$argc03$1(...) code$vpblendw$argc03$2(__VA_ARGS__)
#		define code$vpblendw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpblendw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpblendw$argc04(state,a1,a2,a3,a4) code$vpblendw$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpblendw$argc04$1(...) code$vpblendw$argc04$2(__VA_ARGS__)
#		define code$vpblendw$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpblendw$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpblendw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0e, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0e, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0e, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendw$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0e, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendw$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0e, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendw$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0e, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendw$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0e, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendw$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0e, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendw$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0e, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpblendw$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0e, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendw$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0e, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpblendw$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0e, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpbroadcastb(state,n,...) code$vpbroadcastb$argc##n(state, ##__VA_ARGS__)
#		define code$vpbroadcastb$argc02(state,a1,a2) code$vpbroadcastb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpbroadcastb$argc02$1(...) code$vpbroadcastb$argc02$2(__VA_ARGS__)
#		define code$vpbroadcastb$argc02$2(state,t1,t2,a1,a2) code$vpbroadcastb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpbroadcastb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 78, modrm$rm(_0, _1))
#		define code$vpbroadcastb$argt$mmreg128$mem08(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 78, modrm$rm(_0, _1))
#		define code$vpbroadcastb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 78, modrm$rr(_0, _1))
#		define code$vpbroadcastb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 78, modrm$rm(_0, _1))
#		define code$vpbroadcastb$argt$mmreg256$mem08(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 78, modrm$rm(_0, _1))
#		define code$vpbroadcastb$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 78, modrm$rr(_0, _1))
#		define code$vpbroadcastd(state,n,...) code$vpbroadcastd$argc##n(state, ##__VA_ARGS__)
#		define code$vpbroadcastd$argc02(state,a1,a2) code$vpbroadcastd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpbroadcastd$argc02$1(...) code$vpbroadcastd$argc02$2(__VA_ARGS__)
#		define code$vpbroadcastd$argc02$2(state,t1,t2,a1,a2) code$vpbroadcastd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpbroadcastd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vpbroadcastd$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vpbroadcastd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 58, modrm$rr(_0, _1))
#		define code$vpbroadcastd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vpbroadcastd$argt$mmreg256$mem32(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 58, modrm$rm(_0, _1))
#		define code$vpbroadcastd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 58, modrm$rr(_0, _1))
#		define code$vpbroadcastq(state,n,...) code$vpbroadcastq$argc##n(state, ##__VA_ARGS__)
#		define code$vpbroadcastq$argc02(state,a1,a2) code$vpbroadcastq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpbroadcastq$argc02$1(...) code$vpbroadcastq$argc02$2(__VA_ARGS__)
#		define code$vpbroadcastq$argc02$2(state,t1,t2,a1,a2) code$vpbroadcastq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpbroadcastq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vpbroadcastq$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vpbroadcastq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vpbroadcastq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vpbroadcastq$argt$mmreg256$mem64(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 59, modrm$rm(_0, _1))
#		define code$vpbroadcastq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 59, modrm$rr(_0, _1))
#		define code$vpbroadcastw(state,n,...) code$vpbroadcastw$argc##n(state, ##__VA_ARGS__)
#		define code$vpbroadcastw$argc02(state,a1,a2) code$vpbroadcastw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpbroadcastw$argc02$1(...) code$vpbroadcastw$argc02$2(__VA_ARGS__)
#		define code$vpbroadcastw$argc02$2(state,t1,t2,a1,a2) code$vpbroadcastw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpbroadcastw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 79, modrm$rm(_0, _1))
#		define code$vpbroadcastw$argt$mmreg128$mem16(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 79, modrm$rm(_0, _1))
#		define code$vpbroadcastw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 79, modrm$rr(_0, _1))
#		define code$vpbroadcastw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 79, modrm$rm(_0, _1))
#		define code$vpbroadcastw$argt$mmreg256$mem16(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 79, modrm$rm(_0, _1))
#		define code$vpbroadcastw$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 79, modrm$rr(_0, _1))
#		define code$vpclmulqdq(state,n,...) code$vpclmulqdq$argc##n(state, ##__VA_ARGS__)
#		define code$vpclmulqdq$argc03(state,a1,a2,a3) code$vpclmulqdq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpclmulqdq$argc03$1(...) code$vpclmulqdq$argc03$2(__VA_ARGS__)
#		define code$vpclmulqdq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpclmulqdq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpclmulqdq$argc04(state,a1,a2,a3,a4) code$vpclmulqdq$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpclmulqdq$argc04$1(...) code$vpclmulqdq$argc04$2(__VA_ARGS__)
#		define code$vpclmulqdq$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpclmulqdq$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpclmulqdq$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 44, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpclmulqdq$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 44, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpclmulqdq$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 44, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpclmulqdq$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 44, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpclmulqdq$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 44, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpclmulqdq$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 44, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpclmulqdq$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 44, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpclmulqdq$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 44, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpclmulqdq$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 44, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpclmulqdq$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 44, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpclmulqdq$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 44, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpclmulqdq$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 44, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpcmpeqb(state,n,...) code$vpcmpeqb$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpeqb$argc02(state,a1,a2) code$vpcmpeqb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpeqb$argc02$1(...) code$vpcmpeqb$argc02$2(__VA_ARGS__)
#		define code$vpcmpeqb$argc02$2(state,t1,t2,a1,a2) code$vpcmpeqb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpeqb$argc03(state,a1,a2,a3) code$vpcmpeqb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpeqb$argc03$1(...) code$vpcmpeqb$argc03$2(__VA_ARGS__)
#		define code$vpcmpeqb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpeqb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpeqb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 74, modrm$rm(_0, _1))
#		define code$vpcmpeqb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 74, modrm$rm(_0, _1))
#		define code$vpcmpeqb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 74, modrm$rr(_0, _1))
#		define code$vpcmpeqb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 74, modrm$rm(_0, _2))
#		define code$vpcmpeqb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 74, modrm$rm(_0, _2))
#		define code$vpcmpeqb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 74, modrm$rr(_0, _2))
#		define code$vpcmpeqb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 74, modrm$rm(_0, _1))
#		define code$vpcmpeqb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 74, modrm$rm(_0, _1))
#		define code$vpcmpeqb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 74, modrm$rr(_0, _1))
#		define code$vpcmpeqb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 74, modrm$rm(_0, _2))
#		define code$vpcmpeqb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 74, modrm$rm(_0, _2))
#		define code$vpcmpeqb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 74, modrm$rr(_0, _2))
#		define code$vpcmpeqd(state,n,...) code$vpcmpeqd$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpeqd$argc02(state,a1,a2) code$vpcmpeqd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpeqd$argc02$1(...) code$vpcmpeqd$argc02$2(__VA_ARGS__)
#		define code$vpcmpeqd$argc02$2(state,t1,t2,a1,a2) code$vpcmpeqd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpeqd$argc03(state,a1,a2,a3) code$vpcmpeqd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpeqd$argc03$1(...) code$vpcmpeqd$argc03$2(__VA_ARGS__)
#		define code$vpcmpeqd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpeqd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpeqd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 76, modrm$rm(_0, _1))
#		define code$vpcmpeqd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 76, modrm$rm(_0, _1))
#		define code$vpcmpeqd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 76, modrm$rr(_0, _1))
#		define code$vpcmpeqd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 76, modrm$rm(_0, _2))
#		define code$vpcmpeqd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 76, modrm$rm(_0, _2))
#		define code$vpcmpeqd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 76, modrm$rr(_0, _2))
#		define code$vpcmpeqd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 76, modrm$rm(_0, _1))
#		define code$vpcmpeqd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 76, modrm$rm(_0, _1))
#		define code$vpcmpeqd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 76, modrm$rr(_0, _1))
#		define code$vpcmpeqd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 76, modrm$rm(_0, _2))
#		define code$vpcmpeqd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 76, modrm$rm(_0, _2))
#		define code$vpcmpeqd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 76, modrm$rr(_0, _2))
#		define code$vpcmpeqq(state,n,...) code$vpcmpeqq$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpeqq$argc02(state,a1,a2) code$vpcmpeqq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpeqq$argc02$1(...) code$vpcmpeqq$argc02$2(__VA_ARGS__)
#		define code$vpcmpeqq$argc02$2(state,t1,t2,a1,a2) code$vpcmpeqq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpeqq$argc03(state,a1,a2,a3) code$vpcmpeqq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpeqq$argc03$1(...) code$vpcmpeqq$argc03$2(__VA_ARGS__)
#		define code$vpcmpeqq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpeqq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpeqq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 29, modrm$rm(_0, _1))
#		define code$vpcmpeqq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 29, modrm$rm(_0, _1))
#		define code$vpcmpeqq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 29, modrm$rr(_0, _1))
#		define code$vpcmpeqq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 29, modrm$rm(_0, _2))
#		define code$vpcmpeqq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 29, modrm$rm(_0, _2))
#		define code$vpcmpeqq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 29, modrm$rr(_0, _2))
#		define code$vpcmpeqq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 29, modrm$rm(_0, _1))
#		define code$vpcmpeqq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 29, modrm$rm(_0, _1))
#		define code$vpcmpeqq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 29, modrm$rr(_0, _1))
#		define code$vpcmpeqq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 29, modrm$rm(_0, _2))
#		define code$vpcmpeqq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 29, modrm$rm(_0, _2))
#		define code$vpcmpeqq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 29, modrm$rr(_0, _2))
#		define code$vpcmpeqw(state,n,...) code$vpcmpeqw$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpeqw$argc02(state,a1,a2) code$vpcmpeqw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpeqw$argc02$1(...) code$vpcmpeqw$argc02$2(__VA_ARGS__)
#		define code$vpcmpeqw$argc02$2(state,t1,t2,a1,a2) code$vpcmpeqw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpeqw$argc03(state,a1,a2,a3) code$vpcmpeqw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpeqw$argc03$1(...) code$vpcmpeqw$argc03$2(__VA_ARGS__)
#		define code$vpcmpeqw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpeqw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpeqw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 75, modrm$rm(_0, _1))
#		define code$vpcmpeqw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 75, modrm$rm(_0, _1))
#		define code$vpcmpeqw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 75, modrm$rr(_0, _1))
#		define code$vpcmpeqw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 75, modrm$rm(_0, _2))
#		define code$vpcmpeqw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 75, modrm$rm(_0, _2))
#		define code$vpcmpeqw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 75, modrm$rr(_0, _2))
#		define code$vpcmpeqw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 75, modrm$rm(_0, _1))
#		define code$vpcmpeqw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 75, modrm$rm(_0, _1))
#		define code$vpcmpeqw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 75, modrm$rr(_0, _1))
#		define code$vpcmpeqw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 75, modrm$rm(_0, _2))
#		define code$vpcmpeqw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 75, modrm$rm(_0, _2))
#		define code$vpcmpeqw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 75, modrm$rr(_0, _2))
#		define code$vpcmpestri(state,n,...) code$vpcmpestri$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpestri$argc03(state,a1,a2,a3) code$vpcmpestri$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpestri$argc03$1(...) code$vpcmpestri$argc03$2(__VA_ARGS__)
#		define code$vpcmpestri$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpestri$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpestri$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 61, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpestri$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 61, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpestri$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 61, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpestrm(state,n,...) code$vpcmpestrm$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpestrm$argc03(state,a1,a2,a3) code$vpcmpestrm$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpestrm$argc03$1(...) code$vpcmpestrm$argc03$2(__VA_ARGS__)
#		define code$vpcmpestrm$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpestrm$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpestrm$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 60, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpestrm$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 60, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpestrm$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 60, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpgtb(state,n,...) code$vpcmpgtb$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpgtb$argc02(state,a1,a2) code$vpcmpgtb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpgtb$argc02$1(...) code$vpcmpgtb$argc02$2(__VA_ARGS__)
#		define code$vpcmpgtb$argc02$2(state,t1,t2,a1,a2) code$vpcmpgtb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpgtb$argc03(state,a1,a2,a3) code$vpcmpgtb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpgtb$argc03$1(...) code$vpcmpgtb$argc03$2(__VA_ARGS__)
#		define code$vpcmpgtb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpgtb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpgtb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 64, modrm$rm(_0, _1))
#		define code$vpcmpgtb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 64, modrm$rm(_0, _1))
#		define code$vpcmpgtb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 64, modrm$rr(_0, _1))
#		define code$vpcmpgtb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 64, modrm$rm(_0, _2))
#		define code$vpcmpgtb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 64, modrm$rm(_0, _2))
#		define code$vpcmpgtb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 64, modrm$rr(_0, _2))
#		define code$vpcmpgtb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 64, modrm$rm(_0, _1))
#		define code$vpcmpgtb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 64, modrm$rm(_0, _1))
#		define code$vpcmpgtb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 64, modrm$rr(_0, _1))
#		define code$vpcmpgtb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 64, modrm$rm(_0, _2))
#		define code$vpcmpgtb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 64, modrm$rm(_0, _2))
#		define code$vpcmpgtb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 64, modrm$rr(_0, _2))
#		define code$vpcmpgtd(state,n,...) code$vpcmpgtd$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpgtd$argc02(state,a1,a2) code$vpcmpgtd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpgtd$argc02$1(...) code$vpcmpgtd$argc02$2(__VA_ARGS__)
#		define code$vpcmpgtd$argc02$2(state,t1,t2,a1,a2) code$vpcmpgtd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpgtd$argc03(state,a1,a2,a3) code$vpcmpgtd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpgtd$argc03$1(...) code$vpcmpgtd$argc03$2(__VA_ARGS__)
#		define code$vpcmpgtd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpgtd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpgtd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 66, modrm$rm(_0, _1))
#		define code$vpcmpgtd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 66, modrm$rm(_0, _1))
#		define code$vpcmpgtd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 66, modrm$rr(_0, _1))
#		define code$vpcmpgtd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 66, modrm$rm(_0, _2))
#		define code$vpcmpgtd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 66, modrm$rm(_0, _2))
#		define code$vpcmpgtd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 66, modrm$rr(_0, _2))
#		define code$vpcmpgtd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 66, modrm$rm(_0, _1))
#		define code$vpcmpgtd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 66, modrm$rm(_0, _1))
#		define code$vpcmpgtd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 66, modrm$rr(_0, _1))
#		define code$vpcmpgtd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 66, modrm$rm(_0, _2))
#		define code$vpcmpgtd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 66, modrm$rm(_0, _2))
#		define code$vpcmpgtd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 66, modrm$rr(_0, _2))
#		define code$vpcmpgtq(state,n,...) code$vpcmpgtq$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpgtq$argc02(state,a1,a2) code$vpcmpgtq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpgtq$argc02$1(...) code$vpcmpgtq$argc02$2(__VA_ARGS__)
#		define code$vpcmpgtq$argc02$2(state,t1,t2,a1,a2) code$vpcmpgtq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpgtq$argc03(state,a1,a2,a3) code$vpcmpgtq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpgtq$argc03$1(...) code$vpcmpgtq$argc03$2(__VA_ARGS__)
#		define code$vpcmpgtq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpgtq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpgtq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 37, modrm$rm(_0, _1))
#		define code$vpcmpgtq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 37, modrm$rm(_0, _1))
#		define code$vpcmpgtq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 37, modrm$rr(_0, _1))
#		define code$vpcmpgtq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 37, modrm$rm(_0, _2))
#		define code$vpcmpgtq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 37, modrm$rm(_0, _2))
#		define code$vpcmpgtq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 37, modrm$rr(_0, _2))
#		define code$vpcmpgtq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 37, modrm$rm(_0, _1))
#		define code$vpcmpgtq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 37, modrm$rm(_0, _1))
#		define code$vpcmpgtq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 37, modrm$rr(_0, _1))
#		define code$vpcmpgtq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 37, modrm$rm(_0, _2))
#		define code$vpcmpgtq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 37, modrm$rm(_0, _2))
#		define code$vpcmpgtq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 37, modrm$rr(_0, _2))
#		define code$vpcmpgtw(state,n,...) code$vpcmpgtw$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpgtw$argc02(state,a1,a2) code$vpcmpgtw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpcmpgtw$argc02$1(...) code$vpcmpgtw$argc02$2(__VA_ARGS__)
#		define code$vpcmpgtw$argc02$2(state,t1,t2,a1,a2) code$vpcmpgtw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpcmpgtw$argc03(state,a1,a2,a3) code$vpcmpgtw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpgtw$argc03$1(...) code$vpcmpgtw$argc03$2(__VA_ARGS__)
#		define code$vpcmpgtw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpgtw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpgtw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 65, modrm$rm(_0, _1))
#		define code$vpcmpgtw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 65, modrm$rm(_0, _1))
#		define code$vpcmpgtw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 65, modrm$rr(_0, _1))
#		define code$vpcmpgtw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 65, modrm$rm(_0, _2))
#		define code$vpcmpgtw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 65, modrm$rm(_0, _2))
#		define code$vpcmpgtw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 65, modrm$rr(_0, _2))
#		define code$vpcmpgtw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 65, modrm$rm(_0, _1))
#		define code$vpcmpgtw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 65, modrm$rm(_0, _1))
#		define code$vpcmpgtw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 65, modrm$rr(_0, _1))
#		define code$vpcmpgtw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 65, modrm$rm(_0, _2))
#		define code$vpcmpgtw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 65, modrm$rm(_0, _2))
#		define code$vpcmpgtw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 65, modrm$rr(_0, _2))
#		define code$vpcmpistri(state,n,...) code$vpcmpistri$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpistri$argc03(state,a1,a2,a3) code$vpcmpistri$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpistri$argc03$1(...) code$vpcmpistri$argc03$2(__VA_ARGS__)
#		define code$vpcmpistri$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpistri$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpistri$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 63, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpistri$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 63, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpistri$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 63, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpistrm(state,n,...) code$vpcmpistrm$argc##n(state, ##__VA_ARGS__)
#		define code$vpcmpistrm$argc03(state,a1,a2,a3) code$vpcmpistrm$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpcmpistrm$argc03$1(...) code$vpcmpistrm$argc03$2(__VA_ARGS__)
#		define code$vpcmpistrm$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpcmpistrm$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpcmpistrm$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 62, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpistrm$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 62, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpcmpistrm$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 62, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpdpbusd(state,n,...) code$vpdpbusd$argc##n(state, ##__VA_ARGS__)
#		define code$vpdpbusd$argc02(state,a1,a2) code$vpdpbusd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpdpbusd$argc02$1(...) code$vpdpbusd$argc02$2(__VA_ARGS__)
#		define code$vpdpbusd$argc02$2(state,t1,t2,a1,a2) code$vpdpbusd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpdpbusd$argc03(state,a1,a2,a3) code$vpdpbusd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpdpbusd$argc03$1(...) code$vpdpbusd$argc03$2(__VA_ARGS__)
#		define code$vpdpbusd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpdpbusd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpdpbusd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 50, modrm$rm(_0, _1))
#		define code$vpdpbusd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 50, modrm$rm(_0, _1))
#		define code$vpdpbusd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 50, modrm$rr(_0, _1))
#		define code$vpdpbusd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 50, modrm$rm(_0, _2))
#		define code$vpdpbusd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 50, modrm$rm(_0, _2))
#		define code$vpdpbusd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 50, modrm$rr(_0, _2))
#		define code$vpdpbusd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 50, modrm$rm(_0, _1))
#		define code$vpdpbusd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 50, modrm$rm(_0, _1))
#		define code$vpdpbusd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 50, modrm$rr(_0, _1))
#		define code$vpdpbusd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 50, modrm$rm(_0, _2))
#		define code$vpdpbusd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 50, modrm$rm(_0, _2))
#		define code$vpdpbusd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 50, modrm$rr(_0, _2))
#		define code$vpdpbusds(state,n,...) code$vpdpbusds$argc##n(state, ##__VA_ARGS__)
#		define code$vpdpbusds$argc02(state,a1,a2) code$vpdpbusds$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpdpbusds$argc02$1(...) code$vpdpbusds$argc02$2(__VA_ARGS__)
#		define code$vpdpbusds$argc02$2(state,t1,t2,a1,a2) code$vpdpbusds$argt$##t1##$##t2(state, a1,a2)
#		define code$vpdpbusds$argc03(state,a1,a2,a3) code$vpdpbusds$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpdpbusds$argc03$1(...) code$vpdpbusds$argc03$2(__VA_ARGS__)
#		define code$vpdpbusds$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpdpbusds$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpdpbusds$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vpdpbusds$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vpdpbusds$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vpdpbusds$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vpdpbusds$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vpdpbusds$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 51, modrm$rr(_0, _2))
#		define code$vpdpbusds$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vpdpbusds$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vpdpbusds$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vpdpbusds$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vpdpbusds$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vpdpbusds$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 51, modrm$rr(_0, _2))
#		define code$vpdpwssd(state,n,...) code$vpdpwssd$argc##n(state, ##__VA_ARGS__)
#		define code$vpdpwssd$argc02(state,a1,a2) code$vpdpwssd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpdpwssd$argc02$1(...) code$vpdpwssd$argc02$2(__VA_ARGS__)
#		define code$vpdpwssd$argc02$2(state,t1,t2,a1,a2) code$vpdpwssd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpdpwssd$argc03(state,a1,a2,a3) code$vpdpwssd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpdpwssd$argc03$1(...) code$vpdpwssd$argc03$2(__VA_ARGS__)
#		define code$vpdpwssd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpdpwssd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpdpwssd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vpdpwssd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vpdpwssd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 52, modrm$rr(_0, _1))
#		define code$vpdpwssd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 52, modrm$rm(_0, _2))
#		define code$vpdpwssd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 52, modrm$rm(_0, _2))
#		define code$vpdpwssd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 52, modrm$rr(_0, _2))
#		define code$vpdpwssd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vpdpwssd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vpdpwssd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 52, modrm$rr(_0, _1))
#		define code$vpdpwssd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 52, modrm$rm(_0, _2))
#		define code$vpdpwssd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 52, modrm$rm(_0, _2))
#		define code$vpdpwssd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 52, modrm$rr(_0, _2))
#		define code$vpdpwssds(state,n,...) code$vpdpwssds$argc##n(state, ##__VA_ARGS__)
#		define code$vpdpwssds$argc02(state,a1,a2) code$vpdpwssds$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpdpwssds$argc02$1(...) code$vpdpwssds$argc02$2(__VA_ARGS__)
#		define code$vpdpwssds$argc02$2(state,t1,t2,a1,a2) code$vpdpwssds$argt$##t1##$##t2(state, a1,a2)
#		define code$vpdpwssds$argc03(state,a1,a2,a3) code$vpdpwssds$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpdpwssds$argc03$1(...) code$vpdpwssds$argc03$2(__VA_ARGS__)
#		define code$vpdpwssds$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpdpwssds$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpdpwssds$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vpdpwssds$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vpdpwssds$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 53, modrm$rr(_0, _1))
#		define code$vpdpwssds$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 53, modrm$rm(_0, _2))
#		define code$vpdpwssds$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 53, modrm$rm(_0, _2))
#		define code$vpdpwssds$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 53, modrm$rr(_0, _2))
#		define code$vpdpwssds$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vpdpwssds$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vpdpwssds$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 53, modrm$rr(_0, _1))
#		define code$vpdpwssds$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 53, modrm$rm(_0, _2))
#		define code$vpdpwssds$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 53, modrm$rm(_0, _2))
#		define code$vpdpwssds$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 53, modrm$rr(_0, _2))
#		define code$vperm2f128(state,n,...) code$vperm2f128$argc##n(state, ##__VA_ARGS__)
#		define code$vperm2f128$argc03(state,a1,a2,a3) code$vperm2f128$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vperm2f128$argc03$1(...) code$vperm2f128$argc03$2(__VA_ARGS__)
#		define code$vperm2f128$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vperm2f128$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vperm2f128$argc04(state,a1,a2,a3,a4) code$vperm2f128$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vperm2f128$argc04$1(...) code$vperm2f128$argc04$2(__VA_ARGS__)
#		define code$vperm2f128$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vperm2f128$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vperm2f128$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 06, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vperm2f128$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 06, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vperm2f128$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 06, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vperm2f128$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 06, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vperm2f128$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 06, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vperm2f128$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 06, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vperm2i128(state,n,...) code$vperm2i128$argc##n(state, ##__VA_ARGS__)
#		define code$vperm2i128$argc03(state,a1,a2,a3) code$vperm2i128$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vperm2i128$argc03$1(...) code$vperm2i128$argc03$2(__VA_ARGS__)
#		define code$vperm2i128$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vperm2i128$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vperm2i128$argc04(state,a1,a2,a3,a4) code$vperm2i128$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vperm2i128$argc04$1(...) code$vperm2i128$argc04$2(__VA_ARGS__)
#		define code$vperm2i128$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vperm2i128$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vperm2i128$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 46, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vperm2i128$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 46, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vperm2i128$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 46, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vperm2i128$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 46, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vperm2i128$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 46, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vperm2i128$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 46, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpermd(state,n,...) code$vpermd$argc##n(state, ##__VA_ARGS__)
#		define code$vpermd$argc02(state,a1,a2) code$vpermd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpermd$argc02$1(...) code$vpermd$argc02$2(__VA_ARGS__)
#		define code$vpermd$argc02$2(state,t1,t2,a1,a2) code$vpermd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpermd$argc03(state,a1,a2,a3) code$vpermd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpermd$argc03$1(...) code$vpermd$argc03$2(__VA_ARGS__)
#		define code$vpermd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpermd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpermd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 36, modrm$rm(_0, _1))
#		define code$vpermd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 36, modrm$rm(_0, _1))
#		define code$vpermd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 36, modrm$rr(_0, _1))
#		define code$vpermd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 36, modrm$rm(_0, _2))
#		define code$vpermd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 36, modrm$rm(_0, _2))
#		define code$vpermd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 36, modrm$rr(_0, _2))
#		define code$vpermilpd(state,n,...) code$vpermilpd$argc##n(state, ##__VA_ARGS__)
#		define code$vpermilpd$argc02(state,a1,a2) code$vpermilpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpermilpd$argc02$1(...) code$vpermilpd$argc02$2(__VA_ARGS__)
#		define code$vpermilpd$argc02$2(state,t1,t2,a1,a2) code$vpermilpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpermilpd$argc03(state,a1,a2,a3) code$vpermilpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpermilpd$argc03$1(...) code$vpermilpd$argc03$2(__VA_ARGS__)
#		define code$vpermilpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpermilpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpermilpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0d, modrm$rm(_0, _1))
#		define code$vpermilpd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 05, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0d, modrm$rm(_0, _1))
#		define code$vpermilpd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 05, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0d, modrm$rr(_0, _1))
#		define code$vpermilpd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 05, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0d, modrm$rm(_0, _2))
#		define code$vpermilpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0d, modrm$rm(_0, _2))
#		define code$vpermilpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0d, modrm$rr(_0, _2))
#		define code$vpermilpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0d, modrm$rm(_0, _1))
#		define code$vpermilpd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 05, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0d, modrm$rm(_0, _1))
#		define code$vpermilpd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 05, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0d, modrm$rr(_0, _1))
#		define code$vpermilpd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 05, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0d, modrm$rm(_0, _2))
#		define code$vpermilpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0d, modrm$rm(_0, _2))
#		define code$vpermilpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0d, modrm$rr(_0, _2))
#		define code$vpermilps(state,n,...) code$vpermilps$argc##n(state, ##__VA_ARGS__)
#		define code$vpermilps$argc02(state,a1,a2) code$vpermilps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpermilps$argc02$1(...) code$vpermilps$argc02$2(__VA_ARGS__)
#		define code$vpermilps$argc02$2(state,t1,t2,a1,a2) code$vpermilps$argt$##t1##$##t2(state, a1,a2)
#		define code$vpermilps$argc03(state,a1,a2,a3) code$vpermilps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpermilps$argc03$1(...) code$vpermilps$argc03$2(__VA_ARGS__)
#		define code$vpermilps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpermilps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpermilps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0c, modrm$rm(_0, _1))
#		define code$vpermilps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 04, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0c, modrm$rm(_0, _1))
#		define code$vpermilps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 04, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0c, modrm$rr(_0, _1))
#		define code$vpermilps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 04, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0c, modrm$rm(_0, _2))
#		define code$vpermilps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0c, modrm$rm(_0, _2))
#		define code$vpermilps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0c, modrm$rr(_0, _2))
#		define code$vpermilps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0c, modrm$rm(_0, _1))
#		define code$vpermilps$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 04, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0c, modrm$rm(_0, _1))
#		define code$vpermilps$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 04, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 0c, modrm$rr(_0, _1))
#		define code$vpermilps$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1), 04, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermilps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0c, modrm$rm(_0, _2))
#		define code$vpermilps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0c, modrm$rm(_0, _2))
#		define code$vpermilps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 0c, modrm$rr(_0, _2))
#		define code$vpermpd(state,n,...) code$vpermpd$argc##n(state, ##__VA_ARGS__)
#		define code$vpermpd$argc03(state,a1,a2,a3) code$vpermpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpermpd$argc03$1(...) code$vpermpd$argc03$2(__VA_ARGS__)
#		define code$vpermpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpermpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpermpd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1), 01, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermpd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1), 01, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermpd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1), 01, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermps(state,n,...) code$vpermps$argc##n(state, ##__VA_ARGS__)
#		define code$vpermps$argc02(state,a1,a2) code$vpermps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpermps$argc02$1(...) code$vpermps$argc02$2(__VA_ARGS__)
#		define code$vpermps$argc02$2(state,t1,t2,a1,a2) code$vpermps$argt$##t1##$##t2(state, a1,a2)
#		define code$vpermps$argc03(state,a1,a2,a3) code$vpermps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpermps$argc03$1(...) code$vpermps$argc03$2(__VA_ARGS__)
#		define code$vpermps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpermps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpermps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vpermps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 16, modrm$rm(_0, _1))
#		define code$vpermps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 16, modrm$rr(_0, _1))
#		define code$vpermps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 16, modrm$rm(_0, _2))
#		define code$vpermps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 16, modrm$rm(_0, _2))
#		define code$vpermps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 16, modrm$rr(_0, _2))
#		define code$vpermq(state,n,...) code$vpermq$argc##n(state, ##__VA_ARGS__)
#		define code$vpermq$argc03(state,a1,a2,a3) code$vpermq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpermq$argc03$1(...) code$vpermq$argc03$2(__VA_ARGS__)
#		define code$vpermq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpermq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpermq$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1), 00, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermq$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1), 00, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpermq$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1), 00, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrb(state,n,...) code$vpextrb$argc##n(state, ##__VA_ARGS__)
#		define code$vpextrb$argc03(state,a1,a2,a3) code$vpextrb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpextrb$argc03$1(...) code$vpextrb$argc03$2(__VA_ARGS__)
#		define code$vpextrb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpextrb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpextrb$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 14, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrb$argt$mem08$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 14, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrb$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 14, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrb$argt$reg64$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 14, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrd(state,n,...) code$vpextrd$argc##n(state, ##__VA_ARGS__)
#		define code$vpextrd$argc03(state,a1,a2,a3) code$vpextrd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpextrd$argc03$1(...) code$vpextrd$argc03$2(__VA_ARGS__)
#		define code$vpextrd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpextrd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpextrd$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrd$argt$mem32$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrd$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 16, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrq(state,n,...) code$vpextrq$argc##n(state, ##__VA_ARGS__)
#		define code$vpextrq$argc03(state,a1,a2,a3) code$vpextrq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpextrq$argc03$1(...) code$vpextrq$argc03$2(__VA_ARGS__)
#		define code$vpextrq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpextrq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpextrq$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _1, _0), 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrq$argt$mem64$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _1, _0), 16, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrq$argt$reg64$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _1, _0), 16, modrm$rr(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrw(state,n,...) code$vpextrw$argc##n(state, ##__VA_ARGS__)
#		define code$vpextrw$argc03(state,a1,a2,a3) code$vpextrw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpextrw$argc03$1(...) code$vpextrw$argc03$2(__VA_ARGS__)
#		define code$vpextrw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpextrw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpextrw$argt$mem$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 15, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrw$argt$mem16$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _1, _0), 15, modrm$rm(_1, _0), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrw$argt$reg32$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1), c5, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpextrw$argt$reg64$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1), c5, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vphaddd(state,n,...) code$vphaddd$argc##n(state, ##__VA_ARGS__)
#		define code$vphaddd$argc02(state,a1,a2) code$vphaddd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vphaddd$argc02$1(...) code$vphaddd$argc02$2(__VA_ARGS__)
#		define code$vphaddd$argc02$2(state,t1,t2,a1,a2) code$vphaddd$argt$##t1##$##t2(state, a1,a2)
#		define code$vphaddd$argc03(state,a1,a2,a3) code$vphaddd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vphaddd$argc03$1(...) code$vphaddd$argc03$2(__VA_ARGS__)
#		define code$vphaddd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vphaddd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vphaddd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 02, modrm$rm(_0, _1))
#		define code$vphaddd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 02, modrm$rm(_0, _1))
#		define code$vphaddd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 02, modrm$rr(_0, _1))
#		define code$vphaddd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 02, modrm$rm(_0, _2))
#		define code$vphaddd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 02, modrm$rm(_0, _2))
#		define code$vphaddd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 02, modrm$rr(_0, _2))
#		define code$vphaddd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 02, modrm$rm(_0, _1))
#		define code$vphaddd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 02, modrm$rm(_0, _1))
#		define code$vphaddd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 02, modrm$rr(_0, _1))
#		define code$vphaddd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 02, modrm$rm(_0, _2))
#		define code$vphaddd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 02, modrm$rm(_0, _2))
#		define code$vphaddd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 02, modrm$rr(_0, _2))
#		define code$vphaddsw(state,n,...) code$vphaddsw$argc##n(state, ##__VA_ARGS__)
#		define code$vphaddsw$argc02(state,a1,a2) code$vphaddsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vphaddsw$argc02$1(...) code$vphaddsw$argc02$2(__VA_ARGS__)
#		define code$vphaddsw$argc02$2(state,t1,t2,a1,a2) code$vphaddsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vphaddsw$argc03(state,a1,a2,a3) code$vphaddsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vphaddsw$argc03$1(...) code$vphaddsw$argc03$2(__VA_ARGS__)
#		define code$vphaddsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vphaddsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vphaddsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 03, modrm$rm(_0, _1))
#		define code$vphaddsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 03, modrm$rm(_0, _1))
#		define code$vphaddsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 03, modrm$rr(_0, _1))
#		define code$vphaddsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 03, modrm$rm(_0, _2))
#		define code$vphaddsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 03, modrm$rm(_0, _2))
#		define code$vphaddsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 03, modrm$rr(_0, _2))
#		define code$vphaddsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 03, modrm$rm(_0, _1))
#		define code$vphaddsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 03, modrm$rm(_0, _1))
#		define code$vphaddsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 03, modrm$rr(_0, _1))
#		define code$vphaddsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 03, modrm$rm(_0, _2))
#		define code$vphaddsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 03, modrm$rm(_0, _2))
#		define code$vphaddsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 03, modrm$rr(_0, _2))
#		define code$vphaddw(state,n,...) code$vphaddw$argc##n(state, ##__VA_ARGS__)
#		define code$vphaddw$argc02(state,a1,a2) code$vphaddw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vphaddw$argc02$1(...) code$vphaddw$argc02$2(__VA_ARGS__)
#		define code$vphaddw$argc02$2(state,t1,t2,a1,a2) code$vphaddw$argt$##t1##$##t2(state, a1,a2)
#		define code$vphaddw$argc03(state,a1,a2,a3) code$vphaddw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vphaddw$argc03$1(...) code$vphaddw$argc03$2(__VA_ARGS__)
#		define code$vphaddw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vphaddw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vphaddw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 01, modrm$rm(_0, _1))
#		define code$vphaddw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 01, modrm$rm(_0, _1))
#		define code$vphaddw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 01, modrm$rr(_0, _1))
#		define code$vphaddw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 01, modrm$rm(_0, _2))
#		define code$vphaddw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 01, modrm$rm(_0, _2))
#		define code$vphaddw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 01, modrm$rr(_0, _2))
#		define code$vphaddw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 01, modrm$rm(_0, _1))
#		define code$vphaddw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 01, modrm$rm(_0, _1))
#		define code$vphaddw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 01, modrm$rr(_0, _1))
#		define code$vphaddw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 01, modrm$rm(_0, _2))
#		define code$vphaddw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 01, modrm$rm(_0, _2))
#		define code$vphaddw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 01, modrm$rr(_0, _2))
#		define code$vphminposuw(state,n,...) code$vphminposuw$argc##n(state, ##__VA_ARGS__)
#		define code$vphminposuw$argc02(state,a1,a2) code$vphminposuw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vphminposuw$argc02$1(...) code$vphminposuw$argc02$2(__VA_ARGS__)
#		define code$vphminposuw$argc02$2(state,t1,t2,a1,a2) code$vphminposuw$argt$##t1##$##t2(state, a1,a2)
#		define code$vphminposuw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 41, modrm$rm(_0, _1))
#		define code$vphminposuw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 41, modrm$rm(_0, _1))
#		define code$vphminposuw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 41, modrm$rr(_0, _1))
#		define code$vphsubd(state,n,...) code$vphsubd$argc##n(state, ##__VA_ARGS__)
#		define code$vphsubd$argc02(state,a1,a2) code$vphsubd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vphsubd$argc02$1(...) code$vphsubd$argc02$2(__VA_ARGS__)
#		define code$vphsubd$argc02$2(state,t1,t2,a1,a2) code$vphsubd$argt$##t1##$##t2(state, a1,a2)
#		define code$vphsubd$argc03(state,a1,a2,a3) code$vphsubd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vphsubd$argc03$1(...) code$vphsubd$argc03$2(__VA_ARGS__)
#		define code$vphsubd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vphsubd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vphsubd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 06, modrm$rm(_0, _1))
#		define code$vphsubd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 06, modrm$rm(_0, _1))
#		define code$vphsubd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 06, modrm$rr(_0, _1))
#		define code$vphsubd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 06, modrm$rm(_0, _2))
#		define code$vphsubd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 06, modrm$rm(_0, _2))
#		define code$vphsubd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 06, modrm$rr(_0, _2))
#		define code$vphsubd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 06, modrm$rm(_0, _1))
#		define code$vphsubd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 06, modrm$rm(_0, _1))
#		define code$vphsubd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 06, modrm$rr(_0, _1))
#		define code$vphsubd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 06, modrm$rm(_0, _2))
#		define code$vphsubd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 06, modrm$rm(_0, _2))
#		define code$vphsubd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 06, modrm$rr(_0, _2))
#		define code$vphsubsw(state,n,...) code$vphsubsw$argc##n(state, ##__VA_ARGS__)
#		define code$vphsubsw$argc02(state,a1,a2) code$vphsubsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vphsubsw$argc02$1(...) code$vphsubsw$argc02$2(__VA_ARGS__)
#		define code$vphsubsw$argc02$2(state,t1,t2,a1,a2) code$vphsubsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vphsubsw$argc03(state,a1,a2,a3) code$vphsubsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vphsubsw$argc03$1(...) code$vphsubsw$argc03$2(__VA_ARGS__)
#		define code$vphsubsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vphsubsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vphsubsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 07, modrm$rm(_0, _1))
#		define code$vphsubsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 07, modrm$rm(_0, _1))
#		define code$vphsubsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 07, modrm$rr(_0, _1))
#		define code$vphsubsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 07, modrm$rm(_0, _2))
#		define code$vphsubsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 07, modrm$rm(_0, _2))
#		define code$vphsubsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 07, modrm$rr(_0, _2))
#		define code$vphsubsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 07, modrm$rm(_0, _1))
#		define code$vphsubsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 07, modrm$rm(_0, _1))
#		define code$vphsubsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 07, modrm$rr(_0, _1))
#		define code$vphsubsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 07, modrm$rm(_0, _2))
#		define code$vphsubsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 07, modrm$rm(_0, _2))
#		define code$vphsubsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 07, modrm$rr(_0, _2))
#		define code$vphsubw(state,n,...) code$vphsubw$argc##n(state, ##__VA_ARGS__)
#		define code$vphsubw$argc02(state,a1,a2) code$vphsubw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vphsubw$argc02$1(...) code$vphsubw$argc02$2(__VA_ARGS__)
#		define code$vphsubw$argc02$2(state,t1,t2,a1,a2) code$vphsubw$argt$##t1##$##t2(state, a1,a2)
#		define code$vphsubw$argc03(state,a1,a2,a3) code$vphsubw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vphsubw$argc03$1(...) code$vphsubw$argc03$2(__VA_ARGS__)
#		define code$vphsubw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vphsubw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vphsubw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 05, modrm$rm(_0, _1))
#		define code$vphsubw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 05, modrm$rm(_0, _1))
#		define code$vphsubw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 05, modrm$rr(_0, _1))
#		define code$vphsubw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 05, modrm$rm(_0, _2))
#		define code$vphsubw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 05, modrm$rm(_0, _2))
#		define code$vphsubw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 05, modrm$rr(_0, _2))
#		define code$vphsubw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 05, modrm$rm(_0, _1))
#		define code$vphsubw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 05, modrm$rm(_0, _1))
#		define code$vphsubw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 05, modrm$rr(_0, _1))
#		define code$vphsubw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 05, modrm$rm(_0, _2))
#		define code$vphsubw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 05, modrm$rm(_0, _2))
#		define code$vphsubw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 05, modrm$rr(_0, _2))
#		define code$vpinsrb(state,n,...) code$vpinsrb$argc##n(state, ##__VA_ARGS__)
#		define code$vpinsrb$argc03(state,a1,a2,a3) code$vpinsrb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpinsrb$argc03$1(...) code$vpinsrb$argc03$2(__VA_ARGS__)
#		define code$vpinsrb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpinsrb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpinsrb$argc04(state,a1,a2,a3,a4) code$vpinsrb$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpinsrb$argc04$1(...) code$vpinsrb$argc04$2(__VA_ARGS__)
#		define code$vpinsrb$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpinsrb$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpinsrb$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 20, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrb$argt$mmreg128$mem08$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 20, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrb$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 20, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrb$argt$mmreg128$mmreg128$mem08$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 20, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrb$argt$mmreg128$mmreg128$reg32$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 20, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrb$argt$mmreg128$reg32$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 20, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrd(state,n,...) code$vpinsrd$argc##n(state, ##__VA_ARGS__)
#		define code$vpinsrd$argc03(state,a1,a2,a3) code$vpinsrd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpinsrd$argc03$1(...) code$vpinsrd$argc03$2(__VA_ARGS__)
#		define code$vpinsrd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpinsrd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpinsrd$argc04(state,a1,a2,a3,a4) code$vpinsrd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpinsrd$argc04$1(...) code$vpinsrd$argc04$2(__VA_ARGS__)
#		define code$vpinsrd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpinsrd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpinsrd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrd$argt$mmreg128$mem32$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 22, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrd$argt$mmreg128$mmreg128$mem32$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 22, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrd$argt$mmreg128$mmreg128$reg32$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _1, _2), 22, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrd$argt$mmreg128$reg32$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w0, _0, _0, _1), 22, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrq(state,n,...) code$vpinsrq$argc##n(state, ##__VA_ARGS__)
#		define code$vpinsrq$argc03(state,a1,a2,a3) code$vpinsrq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpinsrq$argc03$1(...) code$vpinsrq$argc03$2(__VA_ARGS__)
#		define code$vpinsrq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpinsrq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpinsrq$argc04(state,a1,a2,a3,a4) code$vpinsrq$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpinsrq$argc04$1(...) code$vpinsrq$argc04$2(__VA_ARGS__)
#		define code$vpinsrq$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpinsrq$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpinsrq$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrq$argt$mmreg128$mem64$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), 22, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrq$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), 22, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrq$argt$mmreg128$mmreg128$mem64$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), 22, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrq$argt$mmreg128$mmreg128$reg64$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _1, _2), 22, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrq$argt$mmreg128$reg64$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$w1, _0, _0, _1), 22, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrw(state,n,...) code$vpinsrw$argc##n(state, ##__VA_ARGS__)
#		define code$vpinsrw$argc03(state,a1,a2,a3) code$vpinsrw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpinsrw$argc03$1(...) code$vpinsrw$argc03$2(__VA_ARGS__)
#		define code$vpinsrw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpinsrw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpinsrw$argc04(state,a1,a2,a3,a4) code$vpinsrw$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vpinsrw$argc04$1(...) code$vpinsrw$argc04$2(__VA_ARGS__)
#		define code$vpinsrw$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vpinsrw$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vpinsrw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _0, _1), c4, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrw$argt$mmreg128$mem16$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _0, _1), c4, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpinsrw$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1, _2), c4, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrw$argt$mmreg128$mmreg128$mem16$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1, _2), c4, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrw$argt$mmreg128$mmreg128$reg32$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _1, _2), c4, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vpinsrw$argt$mmreg128$reg32$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$w0, _0, _0, _1), c4, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpmaddubsw(state,n,...) code$vpmaddubsw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaddubsw$argc02(state,a1,a2) code$vpmaddubsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaddubsw$argc02$1(...) code$vpmaddubsw$argc02$2(__VA_ARGS__)
#		define code$vpmaddubsw$argc02$2(state,t1,t2,a1,a2) code$vpmaddubsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaddubsw$argc03(state,a1,a2,a3) code$vpmaddubsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaddubsw$argc03$1(...) code$vpmaddubsw$argc03$2(__VA_ARGS__)
#		define code$vpmaddubsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaddubsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaddubsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 04, modrm$rm(_0, _1))
#		define code$vpmaddubsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 04, modrm$rm(_0, _1))
#		define code$vpmaddubsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 04, modrm$rr(_0, _1))
#		define code$vpmaddubsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 04, modrm$rm(_0, _2))
#		define code$vpmaddubsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 04, modrm$rm(_0, _2))
#		define code$vpmaddubsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 04, modrm$rr(_0, _2))
#		define code$vpmaddubsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 04, modrm$rm(_0, _1))
#		define code$vpmaddubsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 04, modrm$rm(_0, _1))
#		define code$vpmaddubsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 04, modrm$rr(_0, _1))
#		define code$vpmaddubsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 04, modrm$rm(_0, _2))
#		define code$vpmaddubsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 04, modrm$rm(_0, _2))
#		define code$vpmaddubsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 04, modrm$rr(_0, _2))
#		define code$vpmaddwd(state,n,...) code$vpmaddwd$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaddwd$argc02(state,a1,a2) code$vpmaddwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaddwd$argc02$1(...) code$vpmaddwd$argc02$2(__VA_ARGS__)
#		define code$vpmaddwd$argc02$2(state,t1,t2,a1,a2) code$vpmaddwd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaddwd$argc03(state,a1,a2,a3) code$vpmaddwd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaddwd$argc03$1(...) code$vpmaddwd$argc03$2(__VA_ARGS__)
#		define code$vpmaddwd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaddwd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaddwd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), f5, modrm$rm(_0, _1))
#		define code$vpmaddwd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), f5, modrm$rm(_0, _1))
#		define code$vpmaddwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), f5, modrm$rr(_0, _1))
#		define code$vpmaddwd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$vpmaddwd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$vpmaddwd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), f5, modrm$rr(_0, _2))
#		define code$vpmaddwd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), f5, modrm$rm(_0, _1))
#		define code$vpmaddwd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), f5, modrm$rm(_0, _1))
#		define code$vpmaddwd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), f5, modrm$rr(_0, _1))
#		define code$vpmaddwd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$vpmaddwd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), f5, modrm$rm(_0, _2))
#		define code$vpmaddwd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), f5, modrm$rr(_0, _2))
#		define code$vpmaskmovd(state,n,...) code$vpmaskmovd$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaskmovd$argc02(state,a1,a2) code$vpmaskmovd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaskmovd$argc02$1(...) code$vpmaskmovd$argc02$2(__VA_ARGS__)
#		define code$vpmaskmovd$argc02$2(state,t1,t2,a1,a2) code$vpmaskmovd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaskmovd$argc03(state,a1,a2,a3) code$vpmaskmovd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaskmovd$argc03$1(...) code$vpmaskmovd$argc03$2(__VA_ARGS__)
#		define code$vpmaskmovd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaskmovd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaskmovd$argt$mem$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovd$argt$mem$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovd$argt$mem128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovd$argt$mem256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaskmovd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaskmovd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaskmovd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaskmovq(state,n,...) code$vpmaskmovq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaskmovq$argc02(state,a1,a2) code$vpmaskmovq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaskmovq$argc02$1(...) code$vpmaskmovq$argc02$2(__VA_ARGS__)
#		define code$vpmaskmovq$argc02$2(state,t1,t2,a1,a2) code$vpmaskmovq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaskmovq$argc03(state,a1,a2,a3) code$vpmaskmovq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaskmovq$argc03$1(...) code$vpmaskmovq$argc03$2(__VA_ARGS__)
#		define code$vpmaskmovq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaskmovq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaskmovq$argt$mem$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovq$argt$mem$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovq$argt$mem128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovq$argt$mem256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _2, _1, _0), 8e, modrm$rm(_2, _0))
#		define code$vpmaskmovq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaskmovq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaskmovq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 8c, modrm$rm(_0, _1))
#		define code$vpmaskmovq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaskmovq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 8c, modrm$rm(_0, _2))
#		define code$vpmaxsb(state,n,...) code$vpmaxsb$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaxsb$argc02(state,a1,a2) code$vpmaxsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaxsb$argc02$1(...) code$vpmaxsb$argc02$2(__VA_ARGS__)
#		define code$vpmaxsb$argc02$2(state,t1,t2,a1,a2) code$vpmaxsb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaxsb$argc03(state,a1,a2,a3) code$vpmaxsb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaxsb$argc03$1(...) code$vpmaxsb$argc03$2(__VA_ARGS__)
#		define code$vpmaxsb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaxsb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaxsb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3c, modrm$rm(_0, _1))
#		define code$vpmaxsb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3c, modrm$rm(_0, _1))
#		define code$vpmaxsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3c, modrm$rr(_0, _1))
#		define code$vpmaxsb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3c, modrm$rm(_0, _2))
#		define code$vpmaxsb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3c, modrm$rm(_0, _2))
#		define code$vpmaxsb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3c, modrm$rr(_0, _2))
#		define code$vpmaxsb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3c, modrm$rm(_0, _1))
#		define code$vpmaxsb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3c, modrm$rm(_0, _1))
#		define code$vpmaxsb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3c, modrm$rr(_0, _1))
#		define code$vpmaxsb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3c, modrm$rm(_0, _2))
#		define code$vpmaxsb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3c, modrm$rm(_0, _2))
#		define code$vpmaxsb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3c, modrm$rr(_0, _2))
#		define code$vpmaxsd(state,n,...) code$vpmaxsd$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaxsd$argc02(state,a1,a2) code$vpmaxsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaxsd$argc02$1(...) code$vpmaxsd$argc02$2(__VA_ARGS__)
#		define code$vpmaxsd$argc02$2(state,t1,t2,a1,a2) code$vpmaxsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaxsd$argc03(state,a1,a2,a3) code$vpmaxsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaxsd$argc03$1(...) code$vpmaxsd$argc03$2(__VA_ARGS__)
#		define code$vpmaxsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaxsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaxsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3d, modrm$rm(_0, _1))
#		define code$vpmaxsd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3d, modrm$rm(_0, _1))
#		define code$vpmaxsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3d, modrm$rr(_0, _1))
#		define code$vpmaxsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3d, modrm$rm(_0, _2))
#		define code$vpmaxsd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3d, modrm$rm(_0, _2))
#		define code$vpmaxsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3d, modrm$rr(_0, _2))
#		define code$vpmaxsd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3d, modrm$rm(_0, _1))
#		define code$vpmaxsd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3d, modrm$rm(_0, _1))
#		define code$vpmaxsd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3d, modrm$rr(_0, _1))
#		define code$vpmaxsd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3d, modrm$rm(_0, _2))
#		define code$vpmaxsd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3d, modrm$rm(_0, _2))
#		define code$vpmaxsd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3d, modrm$rr(_0, _2))
#		define code$vpmaxsw(state,n,...) code$vpmaxsw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaxsw$argc02(state,a1,a2) code$vpmaxsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaxsw$argc02$1(...) code$vpmaxsw$argc02$2(__VA_ARGS__)
#		define code$vpmaxsw$argc02$2(state,t1,t2,a1,a2) code$vpmaxsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaxsw$argc03(state,a1,a2,a3) code$vpmaxsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaxsw$argc03$1(...) code$vpmaxsw$argc03$2(__VA_ARGS__)
#		define code$vpmaxsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaxsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaxsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ee, modrm$rm(_0, _1))
#		define code$vpmaxsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ee, modrm$rm(_0, _1))
#		define code$vpmaxsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ee, modrm$rr(_0, _1))
#		define code$vpmaxsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ee, modrm$rm(_0, _2))
#		define code$vpmaxsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ee, modrm$rm(_0, _2))
#		define code$vpmaxsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ee, modrm$rr(_0, _2))
#		define code$vpmaxsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ee, modrm$rm(_0, _1))
#		define code$vpmaxsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ee, modrm$rm(_0, _1))
#		define code$vpmaxsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ee, modrm$rr(_0, _1))
#		define code$vpmaxsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ee, modrm$rm(_0, _2))
#		define code$vpmaxsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ee, modrm$rm(_0, _2))
#		define code$vpmaxsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ee, modrm$rr(_0, _2))
#		define code$vpmaxub(state,n,...) code$vpmaxub$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaxub$argc02(state,a1,a2) code$vpmaxub$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaxub$argc02$1(...) code$vpmaxub$argc02$2(__VA_ARGS__)
#		define code$vpmaxub$argc02$2(state,t1,t2,a1,a2) code$vpmaxub$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaxub$argc03(state,a1,a2,a3) code$vpmaxub$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaxub$argc03$1(...) code$vpmaxub$argc03$2(__VA_ARGS__)
#		define code$vpmaxub$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaxub$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaxub$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), de, modrm$rm(_0, _1))
#		define code$vpmaxub$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), de, modrm$rm(_0, _1))
#		define code$vpmaxub$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), de, modrm$rr(_0, _1))
#		define code$vpmaxub$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), de, modrm$rm(_0, _2))
#		define code$vpmaxub$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), de, modrm$rm(_0, _2))
#		define code$vpmaxub$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), de, modrm$rr(_0, _2))
#		define code$vpmaxub$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), de, modrm$rm(_0, _1))
#		define code$vpmaxub$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), de, modrm$rm(_0, _1))
#		define code$vpmaxub$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), de, modrm$rr(_0, _1))
#		define code$vpmaxub$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), de, modrm$rm(_0, _2))
#		define code$vpmaxub$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), de, modrm$rm(_0, _2))
#		define code$vpmaxub$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), de, modrm$rr(_0, _2))
#		define code$vpmaxud(state,n,...) code$vpmaxud$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaxud$argc02(state,a1,a2) code$vpmaxud$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaxud$argc02$1(...) code$vpmaxud$argc02$2(__VA_ARGS__)
#		define code$vpmaxud$argc02$2(state,t1,t2,a1,a2) code$vpmaxud$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaxud$argc03(state,a1,a2,a3) code$vpmaxud$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaxud$argc03$1(...) code$vpmaxud$argc03$2(__VA_ARGS__)
#		define code$vpmaxud$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaxud$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaxud$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3f, modrm$rm(_0, _1))
#		define code$vpmaxud$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3f, modrm$rm(_0, _1))
#		define code$vpmaxud$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3f, modrm$rr(_0, _1))
#		define code$vpmaxud$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3f, modrm$rm(_0, _2))
#		define code$vpmaxud$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3f, modrm$rm(_0, _2))
#		define code$vpmaxud$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3f, modrm$rr(_0, _2))
#		define code$vpmaxud$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3f, modrm$rm(_0, _1))
#		define code$vpmaxud$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3f, modrm$rm(_0, _1))
#		define code$vpmaxud$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3f, modrm$rr(_0, _1))
#		define code$vpmaxud$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3f, modrm$rm(_0, _2))
#		define code$vpmaxud$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3f, modrm$rm(_0, _2))
#		define code$vpmaxud$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3f, modrm$rr(_0, _2))
#		define code$vpmaxuw(state,n,...) code$vpmaxuw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmaxuw$argc02(state,a1,a2) code$vpmaxuw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmaxuw$argc02$1(...) code$vpmaxuw$argc02$2(__VA_ARGS__)
#		define code$vpmaxuw$argc02$2(state,t1,t2,a1,a2) code$vpmaxuw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmaxuw$argc03(state,a1,a2,a3) code$vpmaxuw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmaxuw$argc03$1(...) code$vpmaxuw$argc03$2(__VA_ARGS__)
#		define code$vpmaxuw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmaxuw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmaxuw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3e, modrm$rm(_0, _1))
#		define code$vpmaxuw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3e, modrm$rm(_0, _1))
#		define code$vpmaxuw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3e, modrm$rr(_0, _1))
#		define code$vpmaxuw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3e, modrm$rm(_0, _2))
#		define code$vpmaxuw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3e, modrm$rm(_0, _2))
#		define code$vpmaxuw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3e, modrm$rr(_0, _2))
#		define code$vpmaxuw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3e, modrm$rm(_0, _1))
#		define code$vpmaxuw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3e, modrm$rm(_0, _1))
#		define code$vpmaxuw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3e, modrm$rr(_0, _1))
#		define code$vpmaxuw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3e, modrm$rm(_0, _2))
#		define code$vpmaxuw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3e, modrm$rm(_0, _2))
#		define code$vpmaxuw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3e, modrm$rr(_0, _2))
#		define code$vpminsb(state,n,...) code$vpminsb$argc##n(state, ##__VA_ARGS__)
#		define code$vpminsb$argc02(state,a1,a2) code$vpminsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpminsb$argc02$1(...) code$vpminsb$argc02$2(__VA_ARGS__)
#		define code$vpminsb$argc02$2(state,t1,t2,a1,a2) code$vpminsb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpminsb$argc03(state,a1,a2,a3) code$vpminsb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpminsb$argc03$1(...) code$vpminsb$argc03$2(__VA_ARGS__)
#		define code$vpminsb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpminsb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpminsb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 38, modrm$rm(_0, _1))
#		define code$vpminsb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 38, modrm$rm(_0, _1))
#		define code$vpminsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 38, modrm$rr(_0, _1))
#		define code$vpminsb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 38, modrm$rm(_0, _2))
#		define code$vpminsb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 38, modrm$rm(_0, _2))
#		define code$vpminsb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 38, modrm$rr(_0, _2))
#		define code$vpminsb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 38, modrm$rm(_0, _1))
#		define code$vpminsb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 38, modrm$rm(_0, _1))
#		define code$vpminsb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 38, modrm$rr(_0, _1))
#		define code$vpminsb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 38, modrm$rm(_0, _2))
#		define code$vpminsb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 38, modrm$rm(_0, _2))
#		define code$vpminsb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 38, modrm$rr(_0, _2))
#		define code$vpminsd(state,n,...) code$vpminsd$argc##n(state, ##__VA_ARGS__)
#		define code$vpminsd$argc02(state,a1,a2) code$vpminsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpminsd$argc02$1(...) code$vpminsd$argc02$2(__VA_ARGS__)
#		define code$vpminsd$argc02$2(state,t1,t2,a1,a2) code$vpminsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpminsd$argc03(state,a1,a2,a3) code$vpminsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpminsd$argc03$1(...) code$vpminsd$argc03$2(__VA_ARGS__)
#		define code$vpminsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpminsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpminsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 39, modrm$rm(_0, _1))
#		define code$vpminsd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 39, modrm$rm(_0, _1))
#		define code$vpminsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 39, modrm$rr(_0, _1))
#		define code$vpminsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 39, modrm$rm(_0, _2))
#		define code$vpminsd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 39, modrm$rm(_0, _2))
#		define code$vpminsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 39, modrm$rr(_0, _2))
#		define code$vpminsd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 39, modrm$rm(_0, _1))
#		define code$vpminsd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 39, modrm$rm(_0, _1))
#		define code$vpminsd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 39, modrm$rr(_0, _1))
#		define code$vpminsd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 39, modrm$rm(_0, _2))
#		define code$vpminsd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 39, modrm$rm(_0, _2))
#		define code$vpminsd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 39, modrm$rr(_0, _2))
#		define code$vpminsw(state,n,...) code$vpminsw$argc##n(state, ##__VA_ARGS__)
#		define code$vpminsw$argc02(state,a1,a2) code$vpminsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpminsw$argc02$1(...) code$vpminsw$argc02$2(__VA_ARGS__)
#		define code$vpminsw$argc02$2(state,t1,t2,a1,a2) code$vpminsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpminsw$argc03(state,a1,a2,a3) code$vpminsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpminsw$argc03$1(...) code$vpminsw$argc03$2(__VA_ARGS__)
#		define code$vpminsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpminsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpminsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ea, modrm$rm(_0, _1))
#		define code$vpminsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ea, modrm$rm(_0, _1))
#		define code$vpminsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ea, modrm$rr(_0, _1))
#		define code$vpminsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ea, modrm$rm(_0, _2))
#		define code$vpminsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ea, modrm$rm(_0, _2))
#		define code$vpminsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ea, modrm$rr(_0, _2))
#		define code$vpminsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ea, modrm$rm(_0, _1))
#		define code$vpminsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ea, modrm$rm(_0, _1))
#		define code$vpminsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ea, modrm$rr(_0, _1))
#		define code$vpminsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ea, modrm$rm(_0, _2))
#		define code$vpminsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ea, modrm$rm(_0, _2))
#		define code$vpminsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ea, modrm$rr(_0, _2))
#		define code$vpminub(state,n,...) code$vpminub$argc##n(state, ##__VA_ARGS__)
#		define code$vpminub$argc02(state,a1,a2) code$vpminub$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpminub$argc02$1(...) code$vpminub$argc02$2(__VA_ARGS__)
#		define code$vpminub$argc02$2(state,t1,t2,a1,a2) code$vpminub$argt$##t1##$##t2(state, a1,a2)
#		define code$vpminub$argc03(state,a1,a2,a3) code$vpminub$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpminub$argc03$1(...) code$vpminub$argc03$2(__VA_ARGS__)
#		define code$vpminub$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpminub$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpminub$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), da, modrm$rm(_0, _1))
#		define code$vpminub$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), da, modrm$rm(_0, _1))
#		define code$vpminub$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), da, modrm$rr(_0, _1))
#		define code$vpminub$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), da, modrm$rm(_0, _2))
#		define code$vpminub$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), da, modrm$rm(_0, _2))
#		define code$vpminub$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), da, modrm$rr(_0, _2))
#		define code$vpminub$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), da, modrm$rm(_0, _1))
#		define code$vpminub$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), da, modrm$rm(_0, _1))
#		define code$vpminub$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), da, modrm$rr(_0, _1))
#		define code$vpminub$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), da, modrm$rm(_0, _2))
#		define code$vpminub$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), da, modrm$rm(_0, _2))
#		define code$vpminub$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), da, modrm$rr(_0, _2))
#		define code$vpminud(state,n,...) code$vpminud$argc##n(state, ##__VA_ARGS__)
#		define code$vpminud$argc02(state,a1,a2) code$vpminud$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpminud$argc02$1(...) code$vpminud$argc02$2(__VA_ARGS__)
#		define code$vpminud$argc02$2(state,t1,t2,a1,a2) code$vpminud$argt$##t1##$##t2(state, a1,a2)
#		define code$vpminud$argc03(state,a1,a2,a3) code$vpminud$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpminud$argc03$1(...) code$vpminud$argc03$2(__VA_ARGS__)
#		define code$vpminud$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpminud$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpminud$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3b, modrm$rm(_0, _1))
#		define code$vpminud$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3b, modrm$rm(_0, _1))
#		define code$vpminud$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3b, modrm$rr(_0, _1))
#		define code$vpminud$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3b, modrm$rm(_0, _2))
#		define code$vpminud$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3b, modrm$rm(_0, _2))
#		define code$vpminud$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3b, modrm$rr(_0, _2))
#		define code$vpminud$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3b, modrm$rm(_0, _1))
#		define code$vpminud$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3b, modrm$rm(_0, _1))
#		define code$vpminud$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3b, modrm$rr(_0, _1))
#		define code$vpminud$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3b, modrm$rm(_0, _2))
#		define code$vpminud$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3b, modrm$rm(_0, _2))
#		define code$vpminud$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3b, modrm$rr(_0, _2))
#		define code$vpminuw(state,n,...) code$vpminuw$argc##n(state, ##__VA_ARGS__)
#		define code$vpminuw$argc02(state,a1,a2) code$vpminuw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpminuw$argc02$1(...) code$vpminuw$argc02$2(__VA_ARGS__)
#		define code$vpminuw$argc02$2(state,t1,t2,a1,a2) code$vpminuw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpminuw$argc03(state,a1,a2,a3) code$vpminuw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpminuw$argc03$1(...) code$vpminuw$argc03$2(__VA_ARGS__)
#		define code$vpminuw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpminuw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpminuw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3a, modrm$rm(_0, _1))
#		define code$vpminuw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3a, modrm$rm(_0, _1))
#		define code$vpminuw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3a, modrm$rr(_0, _1))
#		define code$vpminuw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3a, modrm$rm(_0, _2))
#		define code$vpminuw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3a, modrm$rm(_0, _2))
#		define code$vpminuw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3a, modrm$rr(_0, _2))
#		define code$vpminuw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3a, modrm$rm(_0, _1))
#		define code$vpminuw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3a, modrm$rm(_0, _1))
#		define code$vpminuw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 3a, modrm$rr(_0, _1))
#		define code$vpminuw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3a, modrm$rm(_0, _2))
#		define code$vpminuw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3a, modrm$rm(_0, _2))
#		define code$vpminuw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 3a, modrm$rr(_0, _2))
#		define code$vpmovmskb(state,n,...) code$vpmovmskb$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovmskb$argc02(state,a1,a2) code$vpmovmskb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovmskb$argc02$1(...) code$vpmovmskb$argc02$2(__VA_ARGS__)
#		define code$vpmovmskb$argc02$2(state,t1,t2,a1,a2) code$vpmovmskb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovmskb$argt$reg32$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), d7, modrm$rr(_0, _1))
#		define code$vpmovmskb$argt$reg32$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), d7, modrm$rr(_0, _1))
#		define code$vpmovmskb$argt$reg64$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), d7, modrm$rr(_0, _1))
#		define code$vpmovmskb$argt$reg64$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), d7, modrm$rr(_0, _1))
#		define code$vpmovsxbd(state,n,...) code$vpmovsxbd$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovsxbd$argc02(state,a1,a2) code$vpmovsxbd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovsxbd$argc02$1(...) code$vpmovsxbd$argc02$2(__VA_ARGS__)
#		define code$vpmovsxbd$argc02$2(state,t1,t2,a1,a2) code$vpmovsxbd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovsxbd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 21, modrm$rm(_0, _1))
#		define code$vpmovsxbd$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 21, modrm$rm(_0, _1))
#		define code$vpmovsxbd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 21, modrm$rr(_0, _1))
#		define code$vpmovsxbd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 21, modrm$rm(_0, _1))
#		define code$vpmovsxbd$argt$mmreg256$mem64(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 21, modrm$rm(_0, _1))
#		define code$vpmovsxbd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 21, modrm$rr(_0, _1))
#		define code$vpmovsxbq(state,n,...) code$vpmovsxbq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovsxbq$argc02(state,a1,a2) code$vpmovsxbq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovsxbq$argc02$1(...) code$vpmovsxbq$argc02$2(__VA_ARGS__)
#		define code$vpmovsxbq$argc02$2(state,t1,t2,a1,a2) code$vpmovsxbq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovsxbq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 22, modrm$rm(_0, _1))
#		define code$vpmovsxbq$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 22, modrm$rm(_0, _1))
#		define code$vpmovsxbq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 22, modrm$rr(_0, _1))
#		define code$vpmovsxbq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 22, modrm$rm(_0, _1))
#		define code$vpmovsxbq$argt$mmreg256$mem32(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 22, modrm$rm(_0, _1))
#		define code$vpmovsxbq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 22, modrm$rr(_0, _1))
#		define code$vpmovsxbw(state,n,...) code$vpmovsxbw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovsxbw$argc02(state,a1,a2) code$vpmovsxbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovsxbw$argc02$1(...) code$vpmovsxbw$argc02$2(__VA_ARGS__)
#		define code$vpmovsxbw$argc02$2(state,t1,t2,a1,a2) code$vpmovsxbw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovsxbw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 20, modrm$rm(_0, _1))
#		define code$vpmovsxbw$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 20, modrm$rm(_0, _1))
#		define code$vpmovsxbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 20, modrm$rr(_0, _1))
#		define code$vpmovsxbw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 20, modrm$rm(_0, _1))
#		define code$vpmovsxbw$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 20, modrm$rm(_0, _1))
#		define code$vpmovsxbw$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 20, modrm$rr(_0, _1))
#		define code$vpmovsxdq(state,n,...) code$vpmovsxdq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovsxdq$argc02(state,a1,a2) code$vpmovsxdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovsxdq$argc02$1(...) code$vpmovsxdq$argc02$2(__VA_ARGS__)
#		define code$vpmovsxdq$argc02$2(state,t1,t2,a1,a2) code$vpmovsxdq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovsxdq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 25, modrm$rm(_0, _1))
#		define code$vpmovsxdq$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 25, modrm$rm(_0, _1))
#		define code$vpmovsxdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 25, modrm$rr(_0, _1))
#		define code$vpmovsxdq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 25, modrm$rm(_0, _1))
#		define code$vpmovsxdq$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 25, modrm$rm(_0, _1))
#		define code$vpmovsxdq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 25, modrm$rr(_0, _1))
#		define code$vpmovsxwd(state,n,...) code$vpmovsxwd$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovsxwd$argc02(state,a1,a2) code$vpmovsxwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovsxwd$argc02$1(...) code$vpmovsxwd$argc02$2(__VA_ARGS__)
#		define code$vpmovsxwd$argc02$2(state,t1,t2,a1,a2) code$vpmovsxwd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovsxwd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 23, modrm$rm(_0, _1))
#		define code$vpmovsxwd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 23, modrm$rm(_0, _1))
#		define code$vpmovsxwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 23, modrm$rr(_0, _1))
#		define code$vpmovsxwd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 23, modrm$rm(_0, _1))
#		define code$vpmovsxwd$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 23, modrm$rm(_0, _1))
#		define code$vpmovsxwd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 23, modrm$rr(_0, _1))
#		define code$vpmovsxwq(state,n,...) code$vpmovsxwq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovsxwq$argc02(state,a1,a2) code$vpmovsxwq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovsxwq$argc02$1(...) code$vpmovsxwq$argc02$2(__VA_ARGS__)
#		define code$vpmovsxwq$argc02$2(state,t1,t2,a1,a2) code$vpmovsxwq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovsxwq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 24, modrm$rm(_0, _1))
#		define code$vpmovsxwq$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 24, modrm$rm(_0, _1))
#		define code$vpmovsxwq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 24, modrm$rr(_0, _1))
#		define code$vpmovsxwq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 24, modrm$rm(_0, _1))
#		define code$vpmovsxwq$argt$mmreg256$mem64(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 24, modrm$rm(_0, _1))
#		define code$vpmovsxwq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 24, modrm$rr(_0, _1))
#		define code$vpmovzxbd(state,n,...) code$vpmovzxbd$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovzxbd$argc02(state,a1,a2) code$vpmovzxbd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovzxbd$argc02$1(...) code$vpmovzxbd$argc02$2(__VA_ARGS__)
#		define code$vpmovzxbd$argc02$2(state,t1,t2,a1,a2) code$vpmovzxbd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovzxbd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 31, modrm$rm(_0, _1))
#		define code$vpmovzxbd$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 31, modrm$rm(_0, _1))
#		define code$vpmovzxbd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 31, modrm$rr(_0, _1))
#		define code$vpmovzxbd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 31, modrm$rm(_0, _1))
#		define code$vpmovzxbd$argt$mmreg256$mem64(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 31, modrm$rm(_0, _1))
#		define code$vpmovzxbd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 31, modrm$rr(_0, _1))
#		define code$vpmovzxbq(state,n,...) code$vpmovzxbq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovzxbq$argc02(state,a1,a2) code$vpmovzxbq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovzxbq$argc02$1(...) code$vpmovzxbq$argc02$2(__VA_ARGS__)
#		define code$vpmovzxbq$argc02$2(state,t1,t2,a1,a2) code$vpmovzxbq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovzxbq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 32, modrm$rm(_0, _1))
#		define code$vpmovzxbq$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 32, modrm$rm(_0, _1))
#		define code$vpmovzxbq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 32, modrm$rr(_0, _1))
#		define code$vpmovzxbq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 32, modrm$rm(_0, _1))
#		define code$vpmovzxbq$argt$mmreg256$mem32(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 32, modrm$rm(_0, _1))
#		define code$vpmovzxbq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 32, modrm$rr(_0, _1))
#		define code$vpmovzxbw(state,n,...) code$vpmovzxbw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovzxbw$argc02(state,a1,a2) code$vpmovzxbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovzxbw$argc02$1(...) code$vpmovzxbw$argc02$2(__VA_ARGS__)
#		define code$vpmovzxbw$argc02$2(state,t1,t2,a1,a2) code$vpmovzxbw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovzxbw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 30, modrm$rm(_0, _1))
#		define code$vpmovzxbw$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 30, modrm$rm(_0, _1))
#		define code$vpmovzxbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 30, modrm$rr(_0, _1))
#		define code$vpmovzxbw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 30, modrm$rm(_0, _1))
#		define code$vpmovzxbw$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 30, modrm$rm(_0, _1))
#		define code$vpmovzxbw$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 30, modrm$rr(_0, _1))
#		define code$vpmovzxdq(state,n,...) code$vpmovzxdq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovzxdq$argc02(state,a1,a2) code$vpmovzxdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovzxdq$argc02$1(...) code$vpmovzxdq$argc02$2(__VA_ARGS__)
#		define code$vpmovzxdq$argc02$2(state,t1,t2,a1,a2) code$vpmovzxdq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovzxdq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 35, modrm$rm(_0, _1))
#		define code$vpmovzxdq$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 35, modrm$rm(_0, _1))
#		define code$vpmovzxdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 35, modrm$rr(_0, _1))
#		define code$vpmovzxdq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 35, modrm$rm(_0, _1))
#		define code$vpmovzxdq$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 35, modrm$rm(_0, _1))
#		define code$vpmovzxdq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 35, modrm$rr(_0, _1))
#		define code$vpmovzxwd(state,n,...) code$vpmovzxwd$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovzxwd$argc02(state,a1,a2) code$vpmovzxwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovzxwd$argc02$1(...) code$vpmovzxwd$argc02$2(__VA_ARGS__)
#		define code$vpmovzxwd$argc02$2(state,t1,t2,a1,a2) code$vpmovzxwd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovzxwd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 33, modrm$rm(_0, _1))
#		define code$vpmovzxwd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 33, modrm$rm(_0, _1))
#		define code$vpmovzxwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 33, modrm$rr(_0, _1))
#		define code$vpmovzxwd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 33, modrm$rm(_0, _1))
#		define code$vpmovzxwd$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 33, modrm$rm(_0, _1))
#		define code$vpmovzxwd$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 33, modrm$rr(_0, _1))
#		define code$vpmovzxwq(state,n,...) code$vpmovzxwq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmovzxwq$argc02(state,a1,a2) code$vpmovzxwq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmovzxwq$argc02$1(...) code$vpmovzxwq$argc02$2(__VA_ARGS__)
#		define code$vpmovzxwq$argc02$2(state,t1,t2,a1,a2) code$vpmovzxwq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmovzxwq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 34, modrm$rm(_0, _1))
#		define code$vpmovzxwq$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 34, modrm$rm(_0, _1))
#		define code$vpmovzxwq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 34, modrm$rr(_0, _1))
#		define code$vpmovzxwq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 34, modrm$rm(_0, _1))
#		define code$vpmovzxwq$argt$mmreg256$mem64(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 34, modrm$rm(_0, _1))
#		define code$vpmovzxwq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 34, modrm$rr(_0, _1))
#		define code$vpmuldq(state,n,...) code$vpmuldq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmuldq$argc02(state,a1,a2) code$vpmuldq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmuldq$argc02$1(...) code$vpmuldq$argc02$2(__VA_ARGS__)
#		define code$vpmuldq$argc02$2(state,t1,t2,a1,a2) code$vpmuldq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmuldq$argc03(state,a1,a2,a3) code$vpmuldq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmuldq$argc03$1(...) code$vpmuldq$argc03$2(__VA_ARGS__)
#		define code$vpmuldq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmuldq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmuldq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vpmuldq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vpmuldq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 28, modrm$rr(_0, _1))
#		define code$vpmuldq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 28, modrm$rm(_0, _2))
#		define code$vpmuldq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 28, modrm$rm(_0, _2))
#		define code$vpmuldq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 28, modrm$rr(_0, _2))
#		define code$vpmuldq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vpmuldq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 28, modrm$rm(_0, _1))
#		define code$vpmuldq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 28, modrm$rr(_0, _1))
#		define code$vpmuldq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 28, modrm$rm(_0, _2))
#		define code$vpmuldq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 28, modrm$rm(_0, _2))
#		define code$vpmuldq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 28, modrm$rr(_0, _2))
#		define code$vpmulhrsw(state,n,...) code$vpmulhrsw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmulhrsw$argc02(state,a1,a2) code$vpmulhrsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmulhrsw$argc02$1(...) code$vpmulhrsw$argc02$2(__VA_ARGS__)
#		define code$vpmulhrsw$argc02$2(state,t1,t2,a1,a2) code$vpmulhrsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmulhrsw$argc03(state,a1,a2,a3) code$vpmulhrsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmulhrsw$argc03$1(...) code$vpmulhrsw$argc03$2(__VA_ARGS__)
#		define code$vpmulhrsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmulhrsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmulhrsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0b, modrm$rm(_0, _1))
#		define code$vpmulhrsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0b, modrm$rm(_0, _1))
#		define code$vpmulhrsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0b, modrm$rr(_0, _1))
#		define code$vpmulhrsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0b, modrm$rm(_0, _2))
#		define code$vpmulhrsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0b, modrm$rm(_0, _2))
#		define code$vpmulhrsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0b, modrm$rr(_0, _2))
#		define code$vpmulhrsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0b, modrm$rm(_0, _1))
#		define code$vpmulhrsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0b, modrm$rm(_0, _1))
#		define code$vpmulhrsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0b, modrm$rr(_0, _1))
#		define code$vpmulhrsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0b, modrm$rm(_0, _2))
#		define code$vpmulhrsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0b, modrm$rm(_0, _2))
#		define code$vpmulhrsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0b, modrm$rr(_0, _2))
#		define code$vpmulhuw(state,n,...) code$vpmulhuw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmulhuw$argc02(state,a1,a2) code$vpmulhuw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmulhuw$argc02$1(...) code$vpmulhuw$argc02$2(__VA_ARGS__)
#		define code$vpmulhuw$argc02$2(state,t1,t2,a1,a2) code$vpmulhuw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmulhuw$argc03(state,a1,a2,a3) code$vpmulhuw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmulhuw$argc03$1(...) code$vpmulhuw$argc03$2(__VA_ARGS__)
#		define code$vpmulhuw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmulhuw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmulhuw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e4, modrm$rm(_0, _1))
#		define code$vpmulhuw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e4, modrm$rm(_0, _1))
#		define code$vpmulhuw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e4, modrm$rr(_0, _1))
#		define code$vpmulhuw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e4, modrm$rm(_0, _2))
#		define code$vpmulhuw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e4, modrm$rm(_0, _2))
#		define code$vpmulhuw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e4, modrm$rr(_0, _2))
#		define code$vpmulhuw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e4, modrm$rm(_0, _1))
#		define code$vpmulhuw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e4, modrm$rm(_0, _1))
#		define code$vpmulhuw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e4, modrm$rr(_0, _1))
#		define code$vpmulhuw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e4, modrm$rm(_0, _2))
#		define code$vpmulhuw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e4, modrm$rm(_0, _2))
#		define code$vpmulhuw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e4, modrm$rr(_0, _2))
#		define code$vpmulhw(state,n,...) code$vpmulhw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmulhw$argc02(state,a1,a2) code$vpmulhw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmulhw$argc02$1(...) code$vpmulhw$argc02$2(__VA_ARGS__)
#		define code$vpmulhw$argc02$2(state,t1,t2,a1,a2) code$vpmulhw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmulhw$argc03(state,a1,a2,a3) code$vpmulhw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmulhw$argc03$1(...) code$vpmulhw$argc03$2(__VA_ARGS__)
#		define code$vpmulhw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmulhw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmulhw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e5, modrm$rm(_0, _1))
#		define code$vpmulhw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e5, modrm$rm(_0, _1))
#		define code$vpmulhw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e5, modrm$rr(_0, _1))
#		define code$vpmulhw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e5, modrm$rm(_0, _2))
#		define code$vpmulhw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e5, modrm$rm(_0, _2))
#		define code$vpmulhw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e5, modrm$rr(_0, _2))
#		define code$vpmulhw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e5, modrm$rm(_0, _1))
#		define code$vpmulhw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e5, modrm$rm(_0, _1))
#		define code$vpmulhw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e5, modrm$rr(_0, _1))
#		define code$vpmulhw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e5, modrm$rm(_0, _2))
#		define code$vpmulhw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e5, modrm$rm(_0, _2))
#		define code$vpmulhw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e5, modrm$rr(_0, _2))
#		define code$vpmulld(state,n,...) code$vpmulld$argc##n(state, ##__VA_ARGS__)
#		define code$vpmulld$argc02(state,a1,a2) code$vpmulld$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmulld$argc02$1(...) code$vpmulld$argc02$2(__VA_ARGS__)
#		define code$vpmulld$argc02$2(state,t1,t2,a1,a2) code$vpmulld$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmulld$argc03(state,a1,a2,a3) code$vpmulld$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmulld$argc03$1(...) code$vpmulld$argc03$2(__VA_ARGS__)
#		define code$vpmulld$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmulld$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmulld$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1))
#		define code$vpmulld$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1))
#		define code$vpmulld$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 40, modrm$rr(_0, _1))
#		define code$vpmulld$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2))
#		define code$vpmulld$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2))
#		define code$vpmulld$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 40, modrm$rr(_0, _2))
#		define code$vpmulld$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1))
#		define code$vpmulld$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 40, modrm$rm(_0, _1))
#		define code$vpmulld$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 40, modrm$rr(_0, _1))
#		define code$vpmulld$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2))
#		define code$vpmulld$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 40, modrm$rm(_0, _2))
#		define code$vpmulld$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 40, modrm$rr(_0, _2))
#		define code$vpmullw(state,n,...) code$vpmullw$argc##n(state, ##__VA_ARGS__)
#		define code$vpmullw$argc02(state,a1,a2) code$vpmullw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmullw$argc02$1(...) code$vpmullw$argc02$2(__VA_ARGS__)
#		define code$vpmullw$argc02$2(state,t1,t2,a1,a2) code$vpmullw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmullw$argc03(state,a1,a2,a3) code$vpmullw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmullw$argc03$1(...) code$vpmullw$argc03$2(__VA_ARGS__)
#		define code$vpmullw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmullw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmullw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d5, modrm$rm(_0, _1))
#		define code$vpmullw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d5, modrm$rm(_0, _1))
#		define code$vpmullw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d5, modrm$rr(_0, _1))
#		define code$vpmullw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d5, modrm$rm(_0, _2))
#		define code$vpmullw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d5, modrm$rm(_0, _2))
#		define code$vpmullw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d5, modrm$rr(_0, _2))
#		define code$vpmullw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d5, modrm$rm(_0, _1))
#		define code$vpmullw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d5, modrm$rm(_0, _1))
#		define code$vpmullw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d5, modrm$rr(_0, _1))
#		define code$vpmullw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d5, modrm$rm(_0, _2))
#		define code$vpmullw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d5, modrm$rm(_0, _2))
#		define code$vpmullw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d5, modrm$rr(_0, _2))
#		define code$vpmuludq(state,n,...) code$vpmuludq$argc##n(state, ##__VA_ARGS__)
#		define code$vpmuludq$argc02(state,a1,a2) code$vpmuludq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpmuludq$argc02$1(...) code$vpmuludq$argc02$2(__VA_ARGS__)
#		define code$vpmuludq$argc02$2(state,t1,t2,a1,a2) code$vpmuludq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpmuludq$argc03(state,a1,a2,a3) code$vpmuludq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpmuludq$argc03$1(...) code$vpmuludq$argc03$2(__VA_ARGS__)
#		define code$vpmuludq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpmuludq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpmuludq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f4, modrm$rm(_0, _1))
#		define code$vpmuludq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f4, modrm$rm(_0, _1))
#		define code$vpmuludq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f4, modrm$rr(_0, _1))
#		define code$vpmuludq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f4, modrm$rm(_0, _2))
#		define code$vpmuludq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f4, modrm$rm(_0, _2))
#		define code$vpmuludq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f4, modrm$rr(_0, _2))
#		define code$vpmuludq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f4, modrm$rm(_0, _1))
#		define code$vpmuludq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f4, modrm$rm(_0, _1))
#		define code$vpmuludq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f4, modrm$rr(_0, _1))
#		define code$vpmuludq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f4, modrm$rm(_0, _2))
#		define code$vpmuludq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f4, modrm$rm(_0, _2))
#		define code$vpmuludq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f4, modrm$rr(_0, _2))
#		define code$vpor(state,n,...) code$vpor$argc##n(state, ##__VA_ARGS__)
#		define code$vpor$argc02(state,a1,a2) code$vpor$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpor$argc02$1(...) code$vpor$argc02$2(__VA_ARGS__)
#		define code$vpor$argc02$2(state,t1,t2,a1,a2) code$vpor$argt$##t1##$##t2(state, a1,a2)
#		define code$vpor$argc03(state,a1,a2,a3) code$vpor$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpor$argc03$1(...) code$vpor$argc03$2(__VA_ARGS__)
#		define code$vpor$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpor$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpor$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), eb, modrm$rm(_0, _1))
#		define code$vpor$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), eb, modrm$rm(_0, _1))
#		define code$vpor$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), eb, modrm$rr(_0, _1))
#		define code$vpor$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), eb, modrm$rm(_0, _2))
#		define code$vpor$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), eb, modrm$rm(_0, _2))
#		define code$vpor$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), eb, modrm$rr(_0, _2))
#		define code$vpor$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), eb, modrm$rm(_0, _1))
#		define code$vpor$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), eb, modrm$rm(_0, _1))
#		define code$vpor$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), eb, modrm$rr(_0, _1))
#		define code$vpor$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), eb, modrm$rm(_0, _2))
#		define code$vpor$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), eb, modrm$rm(_0, _2))
#		define code$vpor$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), eb, modrm$rr(_0, _2))
#		define code$vpsadbw(state,n,...) code$vpsadbw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsadbw$argc02(state,a1,a2) code$vpsadbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsadbw$argc02$1(...) code$vpsadbw$argc02$2(__VA_ARGS__)
#		define code$vpsadbw$argc02$2(state,t1,t2,a1,a2) code$vpsadbw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsadbw$argc03(state,a1,a2,a3) code$vpsadbw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsadbw$argc03$1(...) code$vpsadbw$argc03$2(__VA_ARGS__)
#		define code$vpsadbw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsadbw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsadbw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f6, modrm$rm(_0, _1))
#		define code$vpsadbw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f6, modrm$rm(_0, _1))
#		define code$vpsadbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f6, modrm$rr(_0, _1))
#		define code$vpsadbw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$vpsadbw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$vpsadbw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f6, modrm$rr(_0, _2))
#		define code$vpsadbw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f6, modrm$rm(_0, _1))
#		define code$vpsadbw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f6, modrm$rm(_0, _1))
#		define code$vpsadbw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f6, modrm$rr(_0, _1))
#		define code$vpsadbw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$vpsadbw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f6, modrm$rm(_0, _2))
#		define code$vpsadbw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f6, modrm$rr(_0, _2))
#		define code$vpshufb(state,n,...) code$vpshufb$argc##n(state, ##__VA_ARGS__)
#		define code$vpshufb$argc02(state,a1,a2) code$vpshufb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpshufb$argc02$1(...) code$vpshufb$argc02$2(__VA_ARGS__)
#		define code$vpshufb$argc02$2(state,t1,t2,a1,a2) code$vpshufb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpshufb$argc03(state,a1,a2,a3) code$vpshufb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpshufb$argc03$1(...) code$vpshufb$argc03$2(__VA_ARGS__)
#		define code$vpshufb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpshufb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpshufb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 00, modrm$rm(_0, _1))
#		define code$vpshufb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 00, modrm$rm(_0, _1))
#		define code$vpshufb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 00, modrm$rr(_0, _1))
#		define code$vpshufb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 00, modrm$rm(_0, _2))
#		define code$vpshufb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 00, modrm$rm(_0, _2))
#		define code$vpshufb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 00, modrm$rr(_0, _2))
#		define code$vpshufb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 00, modrm$rm(_0, _1))
#		define code$vpshufb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 00, modrm$rm(_0, _1))
#		define code$vpshufb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 00, modrm$rr(_0, _1))
#		define code$vpshufb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 00, modrm$rm(_0, _2))
#		define code$vpshufb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 00, modrm$rm(_0, _2))
#		define code$vpshufb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 00, modrm$rr(_0, _2))
#		define code$vpshufd(state,n,...) code$vpshufd$argc##n(state, ##__VA_ARGS__)
#		define code$vpshufd$argc03(state,a1,a2,a3) code$vpshufd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpshufd$argc03$1(...) code$vpshufd$argc03$2(__VA_ARGS__)
#		define code$vpshufd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpshufd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpshufd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufhw(state,n,...) code$vpshufhw$argc##n(state, ##__VA_ARGS__)
#		define code$vpshufhw$argc03(state,a1,a2,a3) code$vpshufhw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpshufhw$argc03$1(...) code$vpshufhw$argc03$2(__VA_ARGS__)
#		define code$vpshufhw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpshufhw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpshufhw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufhw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufhw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufhw$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufhw$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshufhw$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshuflw(state,n,...) code$vpshuflw$argc##n(state, ##__VA_ARGS__)
#		define code$vpshuflw$argc03(state,a1,a2,a3) code$vpshuflw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpshuflw$argc03$1(...) code$vpshuflw$argc03$2(__VA_ARGS__)
#		define code$vpshuflw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpshuflw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpshuflw$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshuflw$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshuflw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshuflw$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshuflw$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpshuflw$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1), 70, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsignb(state,n,...) code$vpsignb$argc##n(state, ##__VA_ARGS__)
#		define code$vpsignb$argc02(state,a1,a2) code$vpsignb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsignb$argc02$1(...) code$vpsignb$argc02$2(__VA_ARGS__)
#		define code$vpsignb$argc02$2(state,t1,t2,a1,a2) code$vpsignb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsignb$argc03(state,a1,a2,a3) code$vpsignb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsignb$argc03$1(...) code$vpsignb$argc03$2(__VA_ARGS__)
#		define code$vpsignb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsignb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsignb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 08, modrm$rm(_0, _1))
#		define code$vpsignb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 08, modrm$rm(_0, _1))
#		define code$vpsignb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 08, modrm$rr(_0, _1))
#		define code$vpsignb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 08, modrm$rm(_0, _2))
#		define code$vpsignb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 08, modrm$rm(_0, _2))
#		define code$vpsignb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 08, modrm$rr(_0, _2))
#		define code$vpsignb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 08, modrm$rm(_0, _1))
#		define code$vpsignb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 08, modrm$rm(_0, _1))
#		define code$vpsignb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 08, modrm$rr(_0, _1))
#		define code$vpsignb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 08, modrm$rm(_0, _2))
#		define code$vpsignb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 08, modrm$rm(_0, _2))
#		define code$vpsignb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 08, modrm$rr(_0, _2))
#		define code$vpsignd(state,n,...) code$vpsignd$argc##n(state, ##__VA_ARGS__)
#		define code$vpsignd$argc02(state,a1,a2) code$vpsignd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsignd$argc02$1(...) code$vpsignd$argc02$2(__VA_ARGS__)
#		define code$vpsignd$argc02$2(state,t1,t2,a1,a2) code$vpsignd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsignd$argc03(state,a1,a2,a3) code$vpsignd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsignd$argc03$1(...) code$vpsignd$argc03$2(__VA_ARGS__)
#		define code$vpsignd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsignd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsignd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0a, modrm$rm(_0, _1))
#		define code$vpsignd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0a, modrm$rm(_0, _1))
#		define code$vpsignd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0a, modrm$rr(_0, _1))
#		define code$vpsignd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0a, modrm$rm(_0, _2))
#		define code$vpsignd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0a, modrm$rm(_0, _2))
#		define code$vpsignd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0a, modrm$rr(_0, _2))
#		define code$vpsignd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0a, modrm$rm(_0, _1))
#		define code$vpsignd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0a, modrm$rm(_0, _1))
#		define code$vpsignd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 0a, modrm$rr(_0, _1))
#		define code$vpsignd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0a, modrm$rm(_0, _2))
#		define code$vpsignd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0a, modrm$rm(_0, _2))
#		define code$vpsignd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 0a, modrm$rr(_0, _2))
#		define code$vpsignw(state,n,...) code$vpsignw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsignw$argc02(state,a1,a2) code$vpsignw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsignw$argc02$1(...) code$vpsignw$argc02$2(__VA_ARGS__)
#		define code$vpsignw$argc02$2(state,t1,t2,a1,a2) code$vpsignw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsignw$argc03(state,a1,a2,a3) code$vpsignw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsignw$argc03$1(...) code$vpsignw$argc03$2(__VA_ARGS__)
#		define code$vpsignw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsignw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsignw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 09, modrm$rm(_0, _1))
#		define code$vpsignw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 09, modrm$rm(_0, _1))
#		define code$vpsignw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 09, modrm$rr(_0, _1))
#		define code$vpsignw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 09, modrm$rm(_0, _2))
#		define code$vpsignw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 09, modrm$rm(_0, _2))
#		define code$vpsignw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 09, modrm$rr(_0, _2))
#		define code$vpsignw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 09, modrm$rm(_0, _1))
#		define code$vpsignw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 09, modrm$rm(_0, _1))
#		define code$vpsignw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _0, _1), 09, modrm$rr(_0, _1))
#		define code$vpsignw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 09, modrm$rm(_0, _2))
#		define code$vpsignw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 09, modrm$rm(_0, _2))
#		define code$vpsignw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1, _2), 09, modrm$rr(_0, _2))
#		define code$vpslld(state,n,...) code$vpslld$argc##n(state, ##__VA_ARGS__)
#		define code$vpslld$argc02(state,a1,a2) code$vpslld$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpslld$argc02$1(...) code$vpslld$argc02$2(__VA_ARGS__)
#		define code$vpslld$argc02$2(state,t1,t2,a1,a2) code$vpslld$argt$##t1##$##t2(state, a1,a2)
#		define code$vpslld$argc03(state,a1,a2,a3) code$vpslld$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpslld$argc03$1(...) code$vpslld$argc03$2(__VA_ARGS__)
#		define code$vpslld$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpslld$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpslld$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 72, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpslld$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f2, modrm$rm(_0, _1))
#		define code$vpslld$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f2, modrm$rm(_0, _1))
#		define code$vpslld$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f2, modrm$rr(_0, _1))
#		define code$vpslld$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 72, modrm$6r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpslld$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$vpslld$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$vpslld$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f2, modrm$rr(_0, _2))
#		define code$vpslld$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 72, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpslld$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f2, modrm$rm(_0, _1))
#		define code$vpslld$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f2, modrm$rm(_0, _1))
#		define code$vpslld$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f2, modrm$rr(_0, _1))
#		define code$vpslld$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 72, modrm$6r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpslld$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$vpslld$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f2, modrm$rm(_0, _2))
#		define code$vpslld$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f2, modrm$rr(_0, _2))
#		define code$vpslldq(state,n,...) code$vpslldq$argc##n(state, ##__VA_ARGS__)
#		define code$vpslldq$argc03(state,a1,a2,a3) code$vpslldq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpslldq$argc03$1(...) code$vpslldq$argc03$2(__VA_ARGS__)
#		define code$vpslldq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpslldq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpslldq$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$7r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpslldq$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$7r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsllq(state,n,...) code$vpsllq$argc##n(state, ##__VA_ARGS__)
#		define code$vpsllq$argc02(state,a1,a2) code$vpsllq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsllq$argc02$1(...) code$vpsllq$argc02$2(__VA_ARGS__)
#		define code$vpsllq$argc02$2(state,t1,t2,a1,a2) code$vpsllq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsllq$argc03(state,a1,a2,a3) code$vpsllq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsllq$argc03$1(...) code$vpsllq$argc03$2(__VA_ARGS__)
#		define code$vpsllq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsllq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsllq$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 73, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsllq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f3, modrm$rm(_0, _1))
#		define code$vpsllq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f3, modrm$rm(_0, _1))
#		define code$vpsllq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f3, modrm$rr(_0, _1))
#		define code$vpsllq$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$6r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsllq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f3, modrm$rm(_0, _2))
#		define code$vpsllq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f3, modrm$rm(_0, _2))
#		define code$vpsllq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f3, modrm$rr(_0, _2))
#		define code$vpsllq$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 73, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsllq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f3, modrm$rm(_0, _1))
#		define code$vpsllq$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f3, modrm$rm(_0, _1))
#		define code$vpsllq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f3, modrm$rr(_0, _1))
#		define code$vpsllq$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$6r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsllq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f3, modrm$rm(_0, _2))
#		define code$vpsllq$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f3, modrm$rm(_0, _2))
#		define code$vpsllq$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f3, modrm$rr(_0, _2))
#		define code$vpsllvd(state,n,...) code$vpsllvd$argc##n(state, ##__VA_ARGS__)
#		define code$vpsllvd$argc02(state,a1,a2) code$vpsllvd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsllvd$argc02$1(...) code$vpsllvd$argc02$2(__VA_ARGS__)
#		define code$vpsllvd$argc02$2(state,t1,t2,a1,a2) code$vpsllvd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsllvd$argc03(state,a1,a2,a3) code$vpsllvd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsllvd$argc03$1(...) code$vpsllvd$argc03$2(__VA_ARGS__)
#		define code$vpsllvd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsllvd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsllvd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 47, modrm$rr(_0, _1))
#		define code$vpsllvd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 47, modrm$rr(_0, _2))
#		define code$vpsllvd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 47, modrm$rr(_0, _1))
#		define code$vpsllvd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 47, modrm$rr(_0, _2))
#		define code$vpsllvq(state,n,...) code$vpsllvq$argc##n(state, ##__VA_ARGS__)
#		define code$vpsllvq$argc02(state,a1,a2) code$vpsllvq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsllvq$argc02$1(...) code$vpsllvq$argc02$2(__VA_ARGS__)
#		define code$vpsllvq$argc02$2(state,t1,t2,a1,a2) code$vpsllvq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsllvq$argc03(state,a1,a2,a3) code$vpsllvq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsllvq$argc03$1(...) code$vpsllvq$argc03$2(__VA_ARGS__)
#		define code$vpsllvq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsllvq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsllvq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 47, modrm$rr(_0, _1))
#		define code$vpsllvq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 47, modrm$rr(_0, _2))
#		define code$vpsllvq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 47, modrm$rm(_0, _1))
#		define code$vpsllvq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 47, modrm$rr(_0, _1))
#		define code$vpsllvq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 47, modrm$rm(_0, _2))
#		define code$vpsllvq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 47, modrm$rr(_0, _2))
#		define code$vpsllw(state,n,...) code$vpsllw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsllw$argc02(state,a1,a2) code$vpsllw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsllw$argc02$1(...) code$vpsllw$argc02$2(__VA_ARGS__)
#		define code$vpsllw$argc02$2(state,t1,t2,a1,a2) code$vpsllw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsllw$argc03(state,a1,a2,a3) code$vpsllw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsllw$argc03$1(...) code$vpsllw$argc03$2(__VA_ARGS__)
#		define code$vpsllw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsllw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsllw$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 71, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsllw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f1, modrm$rm(_0, _1))
#		define code$vpsllw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f1, modrm$rm(_0, _1))
#		define code$vpsllw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f1, modrm$rr(_0, _1))
#		define code$vpsllw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 71, modrm$6r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsllw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f1, modrm$rm(_0, _2))
#		define code$vpsllw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f1, modrm$rm(_0, _2))
#		define code$vpsllw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f1, modrm$rr(_0, _2))
#		define code$vpsllw$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 71, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsllw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f1, modrm$rm(_0, _1))
#		define code$vpsllw$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f1, modrm$rm(_0, _1))
#		define code$vpsllw$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f1, modrm$rr(_0, _1))
#		define code$vpsllw$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 71, modrm$6r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsllw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f1, modrm$rm(_0, _2))
#		define code$vpsllw$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f1, modrm$rm(_0, _2))
#		define code$vpsllw$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f1, modrm$rr(_0, _2))
#		define code$vpsrad(state,n,...) code$vpsrad$argc##n(state, ##__VA_ARGS__)
#		define code$vpsrad$argc02(state,a1,a2) code$vpsrad$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsrad$argc02$1(...) code$vpsrad$argc02$2(__VA_ARGS__)
#		define code$vpsrad$argc02$2(state,t1,t2,a1,a2) code$vpsrad$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsrad$argc03(state,a1,a2,a3) code$vpsrad$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsrad$argc03$1(...) code$vpsrad$argc03$2(__VA_ARGS__)
#		define code$vpsrad$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsrad$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsrad$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 72, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrad$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e2, modrm$rm(_0, _1))
#		define code$vpsrad$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e2, modrm$rm(_0, _1))
#		define code$vpsrad$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e2, modrm$rr(_0, _1))
#		define code$vpsrad$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 72, modrm$4r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrad$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e2, modrm$rm(_0, _2))
#		define code$vpsrad$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e2, modrm$rm(_0, _2))
#		define code$vpsrad$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e2, modrm$rr(_0, _2))
#		define code$vpsrad$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 72, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrad$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e2, modrm$rm(_0, _1))
#		define code$vpsrad$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e2, modrm$rm(_0, _1))
#		define code$vpsrad$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e2, modrm$rr(_0, _1))
#		define code$vpsrad$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 72, modrm$4r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrad$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e2, modrm$rm(_0, _2))
#		define code$vpsrad$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e2, modrm$rm(_0, _2))
#		define code$vpsrad$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e2, modrm$rr(_0, _2))
#		define code$vpsravd(state,n,...) code$vpsravd$argc##n(state, ##__VA_ARGS__)
#		define code$vpsravd$argc02(state,a1,a2) code$vpsravd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsravd$argc02$1(...) code$vpsravd$argc02$2(__VA_ARGS__)
#		define code$vpsravd$argc02$2(state,t1,t2,a1,a2) code$vpsravd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsravd$argc03(state,a1,a2,a3) code$vpsravd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsravd$argc03$1(...) code$vpsravd$argc03$2(__VA_ARGS__)
#		define code$vpsravd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsravd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsravd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 46, modrm$rm(_0, _1))
#		define code$vpsravd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 46, modrm$rm(_0, _1))
#		define code$vpsravd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 46, modrm$rr(_0, _1))
#		define code$vpsravd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 46, modrm$rm(_0, _2))
#		define code$vpsravd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 46, modrm$rm(_0, _2))
#		define code$vpsravd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 46, modrm$rr(_0, _2))
#		define code$vpsravd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 46, modrm$rm(_0, _1))
#		define code$vpsravd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 46, modrm$rm(_0, _1))
#		define code$vpsravd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 46, modrm$rr(_0, _1))
#		define code$vpsravd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 46, modrm$rm(_0, _2))
#		define code$vpsravd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 46, modrm$rm(_0, _2))
#		define code$vpsravd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 46, modrm$rr(_0, _2))
#		define code$vpsraw(state,n,...) code$vpsraw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsraw$argc02(state,a1,a2) code$vpsraw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsraw$argc02$1(...) code$vpsraw$argc02$2(__VA_ARGS__)
#		define code$vpsraw$argc02$2(state,t1,t2,a1,a2) code$vpsraw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsraw$argc03(state,a1,a2,a3) code$vpsraw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsraw$argc03$1(...) code$vpsraw$argc03$2(__VA_ARGS__)
#		define code$vpsraw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsraw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsraw$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 71, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsraw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e1, modrm$rm(_0, _1))
#		define code$vpsraw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e1, modrm$rm(_0, _1))
#		define code$vpsraw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e1, modrm$rr(_0, _1))
#		define code$vpsraw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 71, modrm$4r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsraw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e1, modrm$rm(_0, _2))
#		define code$vpsraw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e1, modrm$rm(_0, _2))
#		define code$vpsraw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e1, modrm$rr(_0, _2))
#		define code$vpsraw$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 71, modrm$4r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsraw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e1, modrm$rm(_0, _1))
#		define code$vpsraw$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e1, modrm$rm(_0, _1))
#		define code$vpsraw$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e1, modrm$rr(_0, _1))
#		define code$vpsraw$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 71, modrm$4r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsraw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e1, modrm$rm(_0, _2))
#		define code$vpsraw$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e1, modrm$rm(_0, _2))
#		define code$vpsraw$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e1, modrm$rr(_0, _2))
#		define code$vpsrld(state,n,...) code$vpsrld$argc##n(state, ##__VA_ARGS__)
#		define code$vpsrld$argc02(state,a1,a2) code$vpsrld$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsrld$argc02$1(...) code$vpsrld$argc02$2(__VA_ARGS__)
#		define code$vpsrld$argc02$2(state,t1,t2,a1,a2) code$vpsrld$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsrld$argc03(state,a1,a2,a3) code$vpsrld$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsrld$argc03$1(...) code$vpsrld$argc03$2(__VA_ARGS__)
#		define code$vpsrld$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsrld$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsrld$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 72, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrld$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d2, modrm$rm(_0, _1))
#		define code$vpsrld$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d2, modrm$rm(_0, _1))
#		define code$vpsrld$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d2, modrm$rr(_0, _1))
#		define code$vpsrld$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 72, modrm$2r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrld$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d2, modrm$rm(_0, _2))
#		define code$vpsrld$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d2, modrm$rm(_0, _2))
#		define code$vpsrld$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d2, modrm$rr(_0, _2))
#		define code$vpsrld$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 72, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrld$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d2, modrm$rm(_0, _1))
#		define code$vpsrld$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d2, modrm$rm(_0, _1))
#		define code$vpsrld$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d2, modrm$rr(_0, _1))
#		define code$vpsrld$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 72, modrm$2r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrld$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d2, modrm$rm(_0, _2))
#		define code$vpsrld$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d2, modrm$rm(_0, _2))
#		define code$vpsrld$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d2, modrm$rr(_0, _2))
#		define code$vpsrldq(state,n,...) code$vpsrldq$argc##n(state, ##__VA_ARGS__)
#		define code$vpsrldq$argc02(state,a1,a2) code$vpsrldq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsrldq$argc02$1(...) code$vpsrldq$argc02$2(__VA_ARGS__)
#		define code$vpsrldq$argc02$2(state,t1,t2,a1,a2) code$vpsrldq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsrldq$argc03(state,a1,a2,a3) code$vpsrldq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsrldq$argc03$1(...) code$vpsrldq$argc03$2(__VA_ARGS__)
#		define code$vpsrldq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsrldq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsrldq$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 73, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrldq$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$3r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrldq$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 73, modrm$3r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrldq$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$3r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrlq(state,n,...) code$vpsrlq$argc##n(state, ##__VA_ARGS__)
#		define code$vpsrlq$argc02(state,a1,a2) code$vpsrlq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsrlq$argc02$1(...) code$vpsrlq$argc02$2(__VA_ARGS__)
#		define code$vpsrlq$argc02$2(state,t1,t2,a1,a2) code$vpsrlq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsrlq$argc03(state,a1,a2,a3) code$vpsrlq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsrlq$argc03$1(...) code$vpsrlq$argc03$2(__VA_ARGS__)
#		define code$vpsrlq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsrlq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsrlq$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 73, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrlq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d3, modrm$rm(_0, _1))
#		define code$vpsrlq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d3, modrm$rm(_0, _1))
#		define code$vpsrlq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d3, modrm$rr(_0, _1))
#		define code$vpsrlq$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$2r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrlq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d3, modrm$rm(_0, _2))
#		define code$vpsrlq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d3, modrm$rm(_0, _2))
#		define code$vpsrlq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d3, modrm$rr(_0, _2))
#		define code$vpsrlq$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 73, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrlq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d3, modrm$rm(_0, _1))
#		define code$vpsrlq$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d3, modrm$rm(_0, _1))
#		define code$vpsrlq$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d3, modrm$rr(_0, _1))
#		define code$vpsrlq$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 73, modrm$2r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrlq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d3, modrm$rm(_0, _2))
#		define code$vpsrlq$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d3, modrm$rm(_0, _2))
#		define code$vpsrlq$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d3, modrm$rr(_0, _2))
#		define code$vpsrlvd(state,n,...) code$vpsrlvd$argc##n(state, ##__VA_ARGS__)
#		define code$vpsrlvd$argc02(state,a1,a2) code$vpsrlvd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsrlvd$argc02$1(...) code$vpsrlvd$argc02$2(__VA_ARGS__)
#		define code$vpsrlvd$argc02$2(state,t1,t2,a1,a2) code$vpsrlvd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsrlvd$argc03(state,a1,a2,a3) code$vpsrlvd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsrlvd$argc03$1(...) code$vpsrlvd$argc03$2(__VA_ARGS__)
#		define code$vpsrlvd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsrlvd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsrlvd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 45, modrm$rr(_0, _1))
#		define code$vpsrlvd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 45, modrm$rr(_0, _2))
#		define code$vpsrlvd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _0, _1), 45, modrm$rr(_0, _1))
#		define code$vpsrlvd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1, _2), 45, modrm$rr(_0, _2))
#		define code$vpsrlvq(state,n,...) code$vpsrlvq$argc##n(state, ##__VA_ARGS__)
#		define code$vpsrlvq$argc02(state,a1,a2) code$vpsrlvq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsrlvq$argc02$1(...) code$vpsrlvq$argc02$2(__VA_ARGS__)
#		define code$vpsrlvq$argc02$2(state,t1,t2,a1,a2) code$vpsrlvq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsrlvq$argc03(state,a1,a2,a3) code$vpsrlvq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsrlvq$argc03$1(...) code$vpsrlvq$argc03$2(__VA_ARGS__)
#		define code$vpsrlvq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsrlvq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsrlvq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 45, modrm$rr(_0, _1))
#		define code$vpsrlvq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 45, modrm$rr(_0, _2))
#		define code$vpsrlvq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 45, modrm$rm(_0, _1))
#		define code$vpsrlvq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _0, _1), 45, modrm$rr(_0, _1))
#		define code$vpsrlvq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 45, modrm$rm(_0, _2))
#		define code$vpsrlvq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w1, _0, _1, _2), 45, modrm$rr(_0, _2))
#		define code$vpsrlw(state,n,...) code$vpsrlw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsrlw$argc02(state,a1,a2) code$vpsrlw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsrlw$argc02$1(...) code$vpsrlw$argc02$2(__VA_ARGS__)
#		define code$vpsrlw$argc02$2(state,t1,t2,a1,a2) code$vpsrlw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsrlw$argc03(state,a1,a2,a3) code$vpsrlw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsrlw$argc03$1(...) code$vpsrlw$argc03$2(__VA_ARGS__)
#		define code$vpsrlw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsrlw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsrlw$argt$mmreg128$imm08(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 71, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrlw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d1, modrm$rm(_0, _1))
#		define code$vpsrlw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d1, modrm$rm(_0, _1))
#		define code$vpsrlw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d1, modrm$rr(_0, _1))
#		define code$vpsrlw$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 71, modrm$2r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrlw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d1, modrm$rm(_0, _2))
#		define code$vpsrlw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d1, modrm$rm(_0, _2))
#		define code$vpsrlw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d1, modrm$rr(_0, _2))
#		define code$vpsrlw$argt$mmreg256$imm08(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _0), 71, modrm$2r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$vpsrlw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d1, modrm$rm(_0, _1))
#		define code$vpsrlw$argt$mmreg256$mem128(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d1, modrm$rm(_0, _1))
#		define code$vpsrlw$argt$mmreg256$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d1, modrm$rr(_0, _1))
#		define code$vpsrlw$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, rax, _0, _1), 71, modrm$2r(_1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vpsrlw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d1, modrm$rm(_0, _2))
#		define code$vpsrlw$argt$mmreg256$mmreg256$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d1, modrm$rm(_0, _2))
#		define code$vpsrlw$argt$mmreg256$mmreg256$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d1, modrm$rr(_0, _2))
#		define code$vpsubb(state,n,...) code$vpsubb$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubb$argc02(state,a1,a2) code$vpsubb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubb$argc02$1(...) code$vpsubb$argc02$2(__VA_ARGS__)
#		define code$vpsubb$argc02$2(state,t1,t2,a1,a2) code$vpsubb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubb$argc03(state,a1,a2,a3) code$vpsubb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubb$argc03$1(...) code$vpsubb$argc03$2(__VA_ARGS__)
#		define code$vpsubb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f8, modrm$rm(_0, _1))
#		define code$vpsubb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f8, modrm$rm(_0, _1))
#		define code$vpsubb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f8, modrm$rr(_0, _1))
#		define code$vpsubb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f8, modrm$rm(_0, _2))
#		define code$vpsubb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f8, modrm$rm(_0, _2))
#		define code$vpsubb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f8, modrm$rr(_0, _2))
#		define code$vpsubb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f8, modrm$rm(_0, _1))
#		define code$vpsubb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f8, modrm$rm(_0, _1))
#		define code$vpsubb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f8, modrm$rr(_0, _1))
#		define code$vpsubb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f8, modrm$rm(_0, _2))
#		define code$vpsubb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f8, modrm$rm(_0, _2))
#		define code$vpsubb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f8, modrm$rr(_0, _2))
#		define code$vpsubd(state,n,...) code$vpsubd$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubd$argc02(state,a1,a2) code$vpsubd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubd$argc02$1(...) code$vpsubd$argc02$2(__VA_ARGS__)
#		define code$vpsubd$argc02$2(state,t1,t2,a1,a2) code$vpsubd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubd$argc03(state,a1,a2,a3) code$vpsubd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubd$argc03$1(...) code$vpsubd$argc03$2(__VA_ARGS__)
#		define code$vpsubd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fa, modrm$rm(_0, _1))
#		define code$vpsubd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fa, modrm$rm(_0, _1))
#		define code$vpsubd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fa, modrm$rr(_0, _1))
#		define code$vpsubd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fa, modrm$rm(_0, _2))
#		define code$vpsubd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fa, modrm$rm(_0, _2))
#		define code$vpsubd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fa, modrm$rr(_0, _2))
#		define code$vpsubd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fa, modrm$rm(_0, _1))
#		define code$vpsubd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fa, modrm$rm(_0, _1))
#		define code$vpsubd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fa, modrm$rr(_0, _1))
#		define code$vpsubd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fa, modrm$rm(_0, _2))
#		define code$vpsubd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fa, modrm$rm(_0, _2))
#		define code$vpsubd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fa, modrm$rr(_0, _2))
#		define code$vpsubq(state,n,...) code$vpsubq$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubq$argc02(state,a1,a2) code$vpsubq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubq$argc02$1(...) code$vpsubq$argc02$2(__VA_ARGS__)
#		define code$vpsubq$argc02$2(state,t1,t2,a1,a2) code$vpsubq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubq$argc03(state,a1,a2,a3) code$vpsubq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubq$argc03$1(...) code$vpsubq$argc03$2(__VA_ARGS__)
#		define code$vpsubq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fb, modrm$rm(_0, _1))
#		define code$vpsubq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fb, modrm$rm(_0, _1))
#		define code$vpsubq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fb, modrm$rr(_0, _1))
#		define code$vpsubq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fb, modrm$rm(_0, _2))
#		define code$vpsubq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fb, modrm$rm(_0, _2))
#		define code$vpsubq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fb, modrm$rr(_0, _2))
#		define code$vpsubq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fb, modrm$rm(_0, _1))
#		define code$vpsubq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fb, modrm$rm(_0, _1))
#		define code$vpsubq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), fb, modrm$rr(_0, _1))
#		define code$vpsubq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fb, modrm$rm(_0, _2))
#		define code$vpsubq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fb, modrm$rm(_0, _2))
#		define code$vpsubq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), fb, modrm$rr(_0, _2))
#		define code$vpsubsb(state,n,...) code$vpsubsb$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubsb$argc02(state,a1,a2) code$vpsubsb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubsb$argc02$1(...) code$vpsubsb$argc02$2(__VA_ARGS__)
#		define code$vpsubsb$argc02$2(state,t1,t2,a1,a2) code$vpsubsb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubsb$argc03(state,a1,a2,a3) code$vpsubsb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubsb$argc03$1(...) code$vpsubsb$argc03$2(__VA_ARGS__)
#		define code$vpsubsb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubsb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubsb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e8, modrm$rm(_0, _1))
#		define code$vpsubsb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e8, modrm$rm(_0, _1))
#		define code$vpsubsb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e8, modrm$rr(_0, _1))
#		define code$vpsubsb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e8, modrm$rm(_0, _2))
#		define code$vpsubsb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e8, modrm$rm(_0, _2))
#		define code$vpsubsb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e8, modrm$rr(_0, _2))
#		define code$vpsubsb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e8, modrm$rm(_0, _1))
#		define code$vpsubsb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e8, modrm$rm(_0, _1))
#		define code$vpsubsb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e8, modrm$rr(_0, _1))
#		define code$vpsubsb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e8, modrm$rm(_0, _2))
#		define code$vpsubsb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e8, modrm$rm(_0, _2))
#		define code$vpsubsb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e8, modrm$rr(_0, _2))
#		define code$vpsubsw(state,n,...) code$vpsubsw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubsw$argc02(state,a1,a2) code$vpsubsw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubsw$argc02$1(...) code$vpsubsw$argc02$2(__VA_ARGS__)
#		define code$vpsubsw$argc02$2(state,t1,t2,a1,a2) code$vpsubsw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubsw$argc03(state,a1,a2,a3) code$vpsubsw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubsw$argc03$1(...) code$vpsubsw$argc03$2(__VA_ARGS__)
#		define code$vpsubsw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubsw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubsw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e9, modrm$rm(_0, _1))
#		define code$vpsubsw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e9, modrm$rm(_0, _1))
#		define code$vpsubsw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e9, modrm$rr(_0, _1))
#		define code$vpsubsw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e9, modrm$rm(_0, _2))
#		define code$vpsubsw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e9, modrm$rm(_0, _2))
#		define code$vpsubsw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e9, modrm$rr(_0, _2))
#		define code$vpsubsw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e9, modrm$rm(_0, _1))
#		define code$vpsubsw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e9, modrm$rm(_0, _1))
#		define code$vpsubsw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), e9, modrm$rr(_0, _1))
#		define code$vpsubsw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e9, modrm$rm(_0, _2))
#		define code$vpsubsw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e9, modrm$rm(_0, _2))
#		define code$vpsubsw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), e9, modrm$rr(_0, _2))
#		define code$vpsubusb(state,n,...) code$vpsubusb$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubusb$argc02(state,a1,a2) code$vpsubusb$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubusb$argc02$1(...) code$vpsubusb$argc02$2(__VA_ARGS__)
#		define code$vpsubusb$argc02$2(state,t1,t2,a1,a2) code$vpsubusb$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubusb$argc03(state,a1,a2,a3) code$vpsubusb$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubusb$argc03$1(...) code$vpsubusb$argc03$2(__VA_ARGS__)
#		define code$vpsubusb$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubusb$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubusb$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d8, modrm$rm(_0, _1))
#		define code$vpsubusb$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d8, modrm$rm(_0, _1))
#		define code$vpsubusb$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d8, modrm$rr(_0, _1))
#		define code$vpsubusb$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d8, modrm$rm(_0, _2))
#		define code$vpsubusb$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d8, modrm$rm(_0, _2))
#		define code$vpsubusb$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d8, modrm$rr(_0, _2))
#		define code$vpsubusb$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d8, modrm$rm(_0, _1))
#		define code$vpsubusb$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d8, modrm$rm(_0, _1))
#		define code$vpsubusb$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d8, modrm$rr(_0, _1))
#		define code$vpsubusb$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d8, modrm$rm(_0, _2))
#		define code$vpsubusb$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d8, modrm$rm(_0, _2))
#		define code$vpsubusb$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d8, modrm$rr(_0, _2))
#		define code$vpsubusw(state,n,...) code$vpsubusw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubusw$argc02(state,a1,a2) code$vpsubusw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubusw$argc02$1(...) code$vpsubusw$argc02$2(__VA_ARGS__)
#		define code$vpsubusw$argc02$2(state,t1,t2,a1,a2) code$vpsubusw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubusw$argc03(state,a1,a2,a3) code$vpsubusw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubusw$argc03$1(...) code$vpsubusw$argc03$2(__VA_ARGS__)
#		define code$vpsubusw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubusw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubusw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d9, modrm$rm(_0, _1))
#		define code$vpsubusw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d9, modrm$rm(_0, _1))
#		define code$vpsubusw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d9, modrm$rr(_0, _1))
#		define code$vpsubusw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d9, modrm$rm(_0, _2))
#		define code$vpsubusw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d9, modrm$rm(_0, _2))
#		define code$vpsubusw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d9, modrm$rr(_0, _2))
#		define code$vpsubusw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d9, modrm$rm(_0, _1))
#		define code$vpsubusw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d9, modrm$rm(_0, _1))
#		define code$vpsubusw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), d9, modrm$rr(_0, _1))
#		define code$vpsubusw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d9, modrm$rm(_0, _2))
#		define code$vpsubusw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d9, modrm$rm(_0, _2))
#		define code$vpsubusw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), d9, modrm$rr(_0, _2))
#		define code$vpsubw(state,n,...) code$vpsubw$argc##n(state, ##__VA_ARGS__)
#		define code$vpsubw$argc02(state,a1,a2) code$vpsubw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpsubw$argc02$1(...) code$vpsubw$argc02$2(__VA_ARGS__)
#		define code$vpsubw$argc02$2(state,t1,t2,a1,a2) code$vpsubw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpsubw$argc03(state,a1,a2,a3) code$vpsubw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpsubw$argc03$1(...) code$vpsubw$argc03$2(__VA_ARGS__)
#		define code$vpsubw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpsubw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpsubw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f9, modrm$rm(_0, _1))
#		define code$vpsubw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f9, modrm$rm(_0, _1))
#		define code$vpsubw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f9, modrm$rr(_0, _1))
#		define code$vpsubw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f9, modrm$rm(_0, _2))
#		define code$vpsubw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f9, modrm$rm(_0, _2))
#		define code$vpsubw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f9, modrm$rr(_0, _2))
#		define code$vpsubw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f9, modrm$rm(_0, _1))
#		define code$vpsubw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f9, modrm$rm(_0, _1))
#		define code$vpsubw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), f9, modrm$rr(_0, _1))
#		define code$vpsubw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f9, modrm$rm(_0, _2))
#		define code$vpsubw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f9, modrm$rm(_0, _2))
#		define code$vpsubw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), f9, modrm$rr(_0, _2))
#		define code$vptest(state,n,...) code$vptest$argc##n(state, ##__VA_ARGS__)
#		define code$vptest$argc02(state,a1,a2) code$vptest$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vptest$argc02$1(...) code$vptest$argc02$2(__VA_ARGS__)
#		define code$vptest$argc02$2(state,t1,t2,a1,a2) code$vptest$argt$##t1##$##t2(state, a1,a2)
#		define code$vptest$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 17, modrm$rm(_0, _1))
#		define code$vptest$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 17, modrm$rm(_0, _1))
#		define code$vptest$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 17, modrm$rr(_0, _1))
#		define code$vptest$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 17, modrm$rm(_0, _1))
#		define code$vptest$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 17, modrm$rm(_0, _1))
#		define code$vptest$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$wig, _0, _1), 17, modrm$rr(_0, _1))
#		define code$vpunpckhbw(state,n,...) code$vpunpckhbw$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpckhbw$argc02(state,a1,a2) code$vpunpckhbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpckhbw$argc02$1(...) code$vpunpckhbw$argc02$2(__VA_ARGS__)
#		define code$vpunpckhbw$argc02$2(state,t1,t2,a1,a2) code$vpunpckhbw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpckhbw$argc03(state,a1,a2,a3) code$vpunpckhbw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpckhbw$argc03$1(...) code$vpunpckhbw$argc03$2(__VA_ARGS__)
#		define code$vpunpckhbw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpckhbw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpckhbw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 68, modrm$rm(_0, _1))
#		define code$vpunpckhbw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 68, modrm$rm(_0, _1))
#		define code$vpunpckhbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 68, modrm$rr(_0, _1))
#		define code$vpunpckhbw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 68, modrm$rm(_0, _2))
#		define code$vpunpckhbw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 68, modrm$rm(_0, _2))
#		define code$vpunpckhbw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 68, modrm$rr(_0, _2))
#		define code$vpunpckhbw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 68, modrm$rm(_0, _1))
#		define code$vpunpckhbw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 68, modrm$rm(_0, _1))
#		define code$vpunpckhbw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 68, modrm$rr(_0, _1))
#		define code$vpunpckhbw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 68, modrm$rm(_0, _2))
#		define code$vpunpckhbw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 68, modrm$rm(_0, _2))
#		define code$vpunpckhbw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 68, modrm$rr(_0, _2))
#		define code$vpunpckhdq(state,n,...) code$vpunpckhdq$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpckhdq$argc02(state,a1,a2) code$vpunpckhdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpckhdq$argc02$1(...) code$vpunpckhdq$argc02$2(__VA_ARGS__)
#		define code$vpunpckhdq$argc02$2(state,t1,t2,a1,a2) code$vpunpckhdq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpckhdq$argc03(state,a1,a2,a3) code$vpunpckhdq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpckhdq$argc03$1(...) code$vpunpckhdq$argc03$2(__VA_ARGS__)
#		define code$vpunpckhdq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpckhdq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpckhdq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6a, modrm$rm(_0, _1))
#		define code$vpunpckhdq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6a, modrm$rm(_0, _1))
#		define code$vpunpckhdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6a, modrm$rr(_0, _1))
#		define code$vpunpckhdq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6a, modrm$rm(_0, _2))
#		define code$vpunpckhdq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6a, modrm$rm(_0, _2))
#		define code$vpunpckhdq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6a, modrm$rr(_0, _2))
#		define code$vpunpckhdq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6a, modrm$rm(_0, _1))
#		define code$vpunpckhdq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6a, modrm$rm(_0, _1))
#		define code$vpunpckhdq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6a, modrm$rr(_0, _1))
#		define code$vpunpckhdq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6a, modrm$rm(_0, _2))
#		define code$vpunpckhdq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6a, modrm$rm(_0, _2))
#		define code$vpunpckhdq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6a, modrm$rr(_0, _2))
#		define code$vpunpckhqdq(state,n,...) code$vpunpckhqdq$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpckhqdq$argc02(state,a1,a2) code$vpunpckhqdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpckhqdq$argc02$1(...) code$vpunpckhqdq$argc02$2(__VA_ARGS__)
#		define code$vpunpckhqdq$argc02$2(state,t1,t2,a1,a2) code$vpunpckhqdq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpckhqdq$argc03(state,a1,a2,a3) code$vpunpckhqdq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpckhqdq$argc03$1(...) code$vpunpckhqdq$argc03$2(__VA_ARGS__)
#		define code$vpunpckhqdq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpckhqdq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpckhqdq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6d, modrm$rm(_0, _1))
#		define code$vpunpckhqdq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6d, modrm$rm(_0, _1))
#		define code$vpunpckhqdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6d, modrm$rr(_0, _1))
#		define code$vpunpckhqdq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6d, modrm$rm(_0, _2))
#		define code$vpunpckhqdq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6d, modrm$rm(_0, _2))
#		define code$vpunpckhqdq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6d, modrm$rr(_0, _2))
#		define code$vpunpckhqdq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6d, modrm$rm(_0, _1))
#		define code$vpunpckhqdq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6d, modrm$rm(_0, _1))
#		define code$vpunpckhqdq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6d, modrm$rr(_0, _1))
#		define code$vpunpckhqdq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6d, modrm$rm(_0, _2))
#		define code$vpunpckhqdq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6d, modrm$rm(_0, _2))
#		define code$vpunpckhqdq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6d, modrm$rr(_0, _2))
#		define code$vpunpckhwd(state,n,...) code$vpunpckhwd$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpckhwd$argc02(state,a1,a2) code$vpunpckhwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpckhwd$argc02$1(...) code$vpunpckhwd$argc02$2(__VA_ARGS__)
#		define code$vpunpckhwd$argc02$2(state,t1,t2,a1,a2) code$vpunpckhwd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpckhwd$argc03(state,a1,a2,a3) code$vpunpckhwd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpckhwd$argc03$1(...) code$vpunpckhwd$argc03$2(__VA_ARGS__)
#		define code$vpunpckhwd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpckhwd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpckhwd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 69, modrm$rm(_0, _1))
#		define code$vpunpckhwd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 69, modrm$rm(_0, _1))
#		define code$vpunpckhwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 69, modrm$rr(_0, _1))
#		define code$vpunpckhwd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 69, modrm$rm(_0, _2))
#		define code$vpunpckhwd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 69, modrm$rm(_0, _2))
#		define code$vpunpckhwd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 69, modrm$rr(_0, _2))
#		define code$vpunpckhwd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 69, modrm$rm(_0, _1))
#		define code$vpunpckhwd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 69, modrm$rm(_0, _1))
#		define code$vpunpckhwd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 69, modrm$rr(_0, _1))
#		define code$vpunpckhwd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 69, modrm$rm(_0, _2))
#		define code$vpunpckhwd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 69, modrm$rm(_0, _2))
#		define code$vpunpckhwd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 69, modrm$rr(_0, _2))
#		define code$vpunpcklbw(state,n,...) code$vpunpcklbw$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpcklbw$argc02(state,a1,a2) code$vpunpcklbw$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpcklbw$argc02$1(...) code$vpunpcklbw$argc02$2(__VA_ARGS__)
#		define code$vpunpcklbw$argc02$2(state,t1,t2,a1,a2) code$vpunpcklbw$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpcklbw$argc03(state,a1,a2,a3) code$vpunpcklbw$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpcklbw$argc03$1(...) code$vpunpcklbw$argc03$2(__VA_ARGS__)
#		define code$vpunpcklbw$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpcklbw$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpcklbw$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 60, modrm$rm(_0, _1))
#		define code$vpunpcklbw$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 60, modrm$rm(_0, _1))
#		define code$vpunpcklbw$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 60, modrm$rr(_0, _1))
#		define code$vpunpcklbw$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 60, modrm$rm(_0, _2))
#		define code$vpunpcklbw$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 60, modrm$rm(_0, _2))
#		define code$vpunpcklbw$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 60, modrm$rr(_0, _2))
#		define code$vpunpcklbw$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 60, modrm$rm(_0, _1))
#		define code$vpunpcklbw$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 60, modrm$rm(_0, _1))
#		define code$vpunpcklbw$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 60, modrm$rr(_0, _1))
#		define code$vpunpcklbw$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 60, modrm$rm(_0, _2))
#		define code$vpunpcklbw$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 60, modrm$rm(_0, _2))
#		define code$vpunpcklbw$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 60, modrm$rr(_0, _2))
#		define code$vpunpckldq(state,n,...) code$vpunpckldq$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpckldq$argc02(state,a1,a2) code$vpunpckldq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpckldq$argc02$1(...) code$vpunpckldq$argc02$2(__VA_ARGS__)
#		define code$vpunpckldq$argc02$2(state,t1,t2,a1,a2) code$vpunpckldq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpckldq$argc03(state,a1,a2,a3) code$vpunpckldq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpckldq$argc03$1(...) code$vpunpckldq$argc03$2(__VA_ARGS__)
#		define code$vpunpckldq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpckldq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpckldq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 62, modrm$rm(_0, _1))
#		define code$vpunpckldq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 62, modrm$rm(_0, _1))
#		define code$vpunpckldq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 62, modrm$rr(_0, _1))
#		define code$vpunpckldq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 62, modrm$rm(_0, _2))
#		define code$vpunpckldq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 62, modrm$rm(_0, _2))
#		define code$vpunpckldq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 62, modrm$rr(_0, _2))
#		define code$vpunpckldq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 62, modrm$rm(_0, _1))
#		define code$vpunpckldq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 62, modrm$rm(_0, _1))
#		define code$vpunpckldq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 62, modrm$rr(_0, _1))
#		define code$vpunpckldq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 62, modrm$rm(_0, _2))
#		define code$vpunpckldq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 62, modrm$rm(_0, _2))
#		define code$vpunpckldq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 62, modrm$rr(_0, _2))
#		define code$vpunpcklqdq(state,n,...) code$vpunpcklqdq$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpcklqdq$argc02(state,a1,a2) code$vpunpcklqdq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpcklqdq$argc02$1(...) code$vpunpcklqdq$argc02$2(__VA_ARGS__)
#		define code$vpunpcklqdq$argc02$2(state,t1,t2,a1,a2) code$vpunpcklqdq$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpcklqdq$argc03(state,a1,a2,a3) code$vpunpcklqdq$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpcklqdq$argc03$1(...) code$vpunpcklqdq$argc03$2(__VA_ARGS__)
#		define code$vpunpcklqdq$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpcklqdq$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpcklqdq$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6c, modrm$rm(_0, _1))
#		define code$vpunpcklqdq$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6c, modrm$rm(_0, _1))
#		define code$vpunpcklqdq$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6c, modrm$rr(_0, _1))
#		define code$vpunpcklqdq$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6c, modrm$rm(_0, _2))
#		define code$vpunpcklqdq$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6c, modrm$rm(_0, _2))
#		define code$vpunpcklqdq$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6c, modrm$rr(_0, _2))
#		define code$vpunpcklqdq$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6c, modrm$rm(_0, _1))
#		define code$vpunpcklqdq$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6c, modrm$rm(_0, _1))
#		define code$vpunpcklqdq$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 6c, modrm$rr(_0, _1))
#		define code$vpunpcklqdq$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6c, modrm$rm(_0, _2))
#		define code$vpunpcklqdq$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6c, modrm$rm(_0, _2))
#		define code$vpunpcklqdq$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 6c, modrm$rr(_0, _2))
#		define code$vpunpcklwd(state,n,...) code$vpunpcklwd$argc##n(state, ##__VA_ARGS__)
#		define code$vpunpcklwd$argc02(state,a1,a2) code$vpunpcklwd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpunpcklwd$argc02$1(...) code$vpunpcklwd$argc02$2(__VA_ARGS__)
#		define code$vpunpcklwd$argc02$2(state,t1,t2,a1,a2) code$vpunpcklwd$argt$##t1##$##t2(state, a1,a2)
#		define code$vpunpcklwd$argc03(state,a1,a2,a3) code$vpunpcklwd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpunpcklwd$argc03$1(...) code$vpunpcklwd$argc03$2(__VA_ARGS__)
#		define code$vpunpcklwd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpunpcklwd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpunpcklwd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 61, modrm$rm(_0, _1))
#		define code$vpunpcklwd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 61, modrm$rm(_0, _1))
#		define code$vpunpcklwd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 61, modrm$rr(_0, _1))
#		define code$vpunpcklwd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 61, modrm$rm(_0, _2))
#		define code$vpunpcklwd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 61, modrm$rm(_0, _2))
#		define code$vpunpcklwd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 61, modrm$rr(_0, _2))
#		define code$vpunpcklwd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 61, modrm$rm(_0, _1))
#		define code$vpunpcklwd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 61, modrm$rm(_0, _1))
#		define code$vpunpcklwd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 61, modrm$rr(_0, _1))
#		define code$vpunpcklwd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 61, modrm$rm(_0, _2))
#		define code$vpunpcklwd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 61, modrm$rm(_0, _2))
#		define code$vpunpcklwd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 61, modrm$rr(_0, _2))
#		define code$vpxor(state,n,...) code$vpxor$argc##n(state, ##__VA_ARGS__)
#		define code$vpxor$argc02(state,a1,a2) code$vpxor$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vpxor$argc02$1(...) code$vpxor$argc02$2(__VA_ARGS__)
#		define code$vpxor$argc02$2(state,t1,t2,a1,a2) code$vpxor$argt$##t1##$##t2(state, a1,a2)
#		define code$vpxor$argc03(state,a1,a2,a3) code$vpxor$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vpxor$argc03$1(...) code$vpxor$argc03$2(__VA_ARGS__)
#		define code$vpxor$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vpxor$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vpxor$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ef, modrm$rm(_0, _1))
#		define code$vpxor$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ef, modrm$rm(_0, _1))
#		define code$vpxor$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ef, modrm$rr(_0, _1))
#		define code$vpxor$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ef, modrm$rm(_0, _2))
#		define code$vpxor$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ef, modrm$rm(_0, _2))
#		define code$vpxor$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ef, modrm$rr(_0, _2))
#		define code$vpxor$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ef, modrm$rm(_0, _1))
#		define code$vpxor$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ef, modrm$rm(_0, _1))
#		define code$vpxor$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), ef, modrm$rr(_0, _1))
#		define code$vpxor$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ef, modrm$rm(_0, _2))
#		define code$vpxor$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ef, modrm$rm(_0, _2))
#		define code$vpxor$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), ef, modrm$rr(_0, _2))
#		define code$vrcpps(state,n,...) code$vrcpps$argc##n(state, ##__VA_ARGS__)
#		define code$vrcpps$argc02(state,a1,a2) code$vrcpps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vrcpps$argc02$1(...) code$vrcpps$argc02$2(__VA_ARGS__)
#		define code$vrcpps$argc02$2(state,t1,t2,a1,a2) code$vrcpps$argt$##t1##$##t2(state, a1,a2)
#		define code$vrcpps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vrcpps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vrcpps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 53, modrm$rr(_0, _1))
#		define code$vrcpps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vrcpps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vrcpps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 53, modrm$rr(_0, _1))
#		define code$vrcpss(state,n,...) code$vrcpss$argc##n(state, ##__VA_ARGS__)
#		define code$vrcpss$argc02(state,a1,a2) code$vrcpss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vrcpss$argc02$1(...) code$vrcpss$argc02$2(__VA_ARGS__)
#		define code$vrcpss$argc02$2(state,t1,t2,a1,a2) code$vrcpss$argt$##t1##$##t2(state, a1,a2)
#		define code$vrcpss$argc03(state,a1,a2,a3) code$vrcpss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vrcpss$argc03$1(...) code$vrcpss$argc03$2(__VA_ARGS__)
#		define code$vrcpss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vrcpss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vrcpss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vrcpss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 53, modrm$rm(_0, _1))
#		define code$vrcpss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 53, modrm$rr(_0, _1))
#		define code$vrcpss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 53, modrm$rm(_0, _2))
#		define code$vrcpss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 53, modrm$rm(_0, _2))
#		define code$vrcpss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 53, modrm$rr(_0, _2))
#		define code$vroundpd(state,n,...) code$vroundpd$argc##n(state, ##__VA_ARGS__)
#		define code$vroundpd$argc03(state,a1,a2,a3) code$vroundpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vroundpd$argc03$1(...) code$vroundpd$argc03$2(__VA_ARGS__)
#		define code$vroundpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vroundpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vroundpd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 09, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundpd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 09, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundpd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 09, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundpd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 09, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundpd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 09, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundpd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 09, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundps(state,n,...) code$vroundps$argc##n(state, ##__VA_ARGS__)
#		define code$vroundps$argc03(state,a1,a2,a3) code$vroundps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vroundps$argc03$1(...) code$vroundps$argc03$2(__VA_ARGS__)
#		define code$vroundps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vroundps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vroundps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 08, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 08, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 08, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundps$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 08, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundps$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 08, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundps$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1), 08, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundsd(state,n,...) code$vroundsd$argc##n(state, ##__VA_ARGS__)
#		define code$vroundsd$argc03(state,a1,a2,a3) code$vroundsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vroundsd$argc03$1(...) code$vroundsd$argc03$2(__VA_ARGS__)
#		define code$vroundsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vroundsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vroundsd$argc04(state,a1,a2,a3,a4) code$vroundsd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vroundsd$argc04$1(...) code$vroundsd$argc04$2(__VA_ARGS__)
#		define code$vroundsd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vroundsd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vroundsd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundsd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0b, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundsd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0b, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundsd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0b, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vroundsd$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0b, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vroundsd$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0b, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vroundss(state,n,...) code$vroundss$argc##n(state, ##__VA_ARGS__)
#		define code$vroundss$argc03(state,a1,a2,a3) code$vroundss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vroundss$argc03$1(...) code$vroundss$argc03$2(__VA_ARGS__)
#		define code$vroundss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vroundss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vroundss$argc04(state,a1,a2,a3,a4) code$vroundss$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vroundss$argc04$1(...) code$vroundss$argc04$2(__VA_ARGS__)
#		define code$vroundss$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vroundss$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vroundss$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0a, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundss$argt$mmreg128$mem32$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0a, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundss$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _0, _1), 0a, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vroundss$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0a, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vroundss$argt$mmreg128$mmreg128$mem32$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0a, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vroundss$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$lig, vex$pp$66, vex$mmmmm$0f3a, vex$wig, _0, _1, _2), 0a, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vrsqrtps(state,n,...) code$vrsqrtps$argc##n(state, ##__VA_ARGS__)
#		define code$vrsqrtps$argc02(state,a1,a2) code$vrsqrtps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vrsqrtps$argc02$1(...) code$vrsqrtps$argc02$2(__VA_ARGS__)
#		define code$vrsqrtps$argc02$2(state,t1,t2,a1,a2) code$vrsqrtps$argt$##t1##$##t2(state, a1,a2)
#		define code$vrsqrtps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vrsqrtps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vrsqrtps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 52, modrm$rr(_0, _1))
#		define code$vrsqrtps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vrsqrtps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vrsqrtps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 52, modrm$rr(_0, _1))
#		define code$vrsqrtss(state,n,...) code$vrsqrtss$argc##n(state, ##__VA_ARGS__)
#		define code$vrsqrtss$argc02(state,a1,a2) code$vrsqrtss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vrsqrtss$argc02$1(...) code$vrsqrtss$argc02$2(__VA_ARGS__)
#		define code$vrsqrtss$argc02$2(state,t1,t2,a1,a2) code$vrsqrtss$argt$##t1##$##t2(state, a1,a2)
#		define code$vrsqrtss$argc03(state,a1,a2,a3) code$vrsqrtss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vrsqrtss$argc03$1(...) code$vrsqrtss$argc03$2(__VA_ARGS__)
#		define code$vrsqrtss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vrsqrtss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vrsqrtss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vrsqrtss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 52, modrm$rm(_0, _1))
#		define code$vrsqrtss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 52, modrm$rr(_0, _1))
#		define code$vrsqrtss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 52, modrm$rm(_0, _2))
#		define code$vrsqrtss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 52, modrm$rm(_0, _2))
#		define code$vrsqrtss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 52, modrm$rr(_0, _2))
#		define code$vshufpd(state,n,...) code$vshufpd$argc##n(state, ##__VA_ARGS__)
#		define code$vshufpd$argc03(state,a1,a2,a3) code$vshufpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vshufpd$argc03$1(...) code$vshufpd$argc03$2(__VA_ARGS__)
#		define code$vshufpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vshufpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vshufpd$argc04(state,a1,a2,a3,a4) code$vshufpd$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vshufpd$argc04$1(...) code$vshufpd$argc04$2(__VA_ARGS__)
#		define code$vshufpd$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vshufpd$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vshufpd$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufpd$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufpd$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufpd$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufpd$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufpd$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufpd$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufpd$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufpd$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufpd$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufpd$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufpd$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufps(state,n,...) code$vshufps$argc##n(state, ##__VA_ARGS__)
#		define code$vshufps$argc03(state,a1,a2,a3) code$vshufps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vshufps$argc03$1(...) code$vshufps$argc03$2(__VA_ARGS__)
#		define code$vshufps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vshufps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vshufps$argc04(state,a1,a2,a3,a4) code$vshufps$argc04$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3),operand$gettype(a4), a1,a2,a3,a4)
#		define code$vshufps$argc04$1(...) code$vshufps$argc04$2(__VA_ARGS__)
#		define code$vshufps$argc04$2(state,t1,t2,t3,t4,a1,a2,a3,a4) code$vshufps$argt$##t1##$##t2##$##t3##$##t4(state, a1,a2,a3,a4)
#		define code$vshufps$argt$mmreg128$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufps$argt$mmreg128$mem128$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufps$argt$mmreg128$mmreg128$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufps$argt$mmreg128$mmreg128$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufps$argt$mmreg128$mmreg128$mem128$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufps$argt$mmreg128$mmreg128$mmreg128$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufps$argt$mmreg256$mem$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufps$argt$mmreg256$mem256$imm08(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rm(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufps$argt$mmreg256$mmreg256$imm08(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), c6, modrm$rr(_0, _1), i08$bytes$le(which$imm08(state, _2)))
#		define code$vshufps$argt$mmreg256$mmreg256$mem$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufps$argt$mmreg256$mmreg256$mem256$imm08(state,_0,_1,_2,_3) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rm(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vshufps$argt$mmreg256$mmreg256$mmreg256$imm08(state,_0,_1,_2,_3) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), c6, modrm$rr(_0, _2), i08$bytes$le(which$imm08(state, _3)))
#		define code$vsqrtpd(state,n,...) code$vsqrtpd$argc##n(state, ##__VA_ARGS__)
#		define code$vsqrtpd$argc02(state,a1,a2) code$vsqrtpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsqrtpd$argc02$1(...) code$vsqrtpd$argc02$2(__VA_ARGS__)
#		define code$vsqrtpd$argc02$2(state,t1,t2,a1,a2) code$vsqrtpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vsqrtpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vsqrtpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vsqrtps(state,n,...) code$vsqrtps$argc##n(state, ##__VA_ARGS__)
#		define code$vsqrtps$argc02(state,a1,a2) code$vsqrtps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsqrtps$argc02$1(...) code$vsqrtps$argc02$2(__VA_ARGS__)
#		define code$vsqrtps$argc02$2(state,t1,t2,a1,a2) code$vsqrtps$argt$##t1##$##t2(state, a1,a2)
#		define code$vsqrtps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vsqrtps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vsqrtsd(state,n,...) code$vsqrtsd$argc##n(state, ##__VA_ARGS__)
#		define code$vsqrtsd$argc02(state,a1,a2) code$vsqrtsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsqrtsd$argc02$1(...) code$vsqrtsd$argc02$2(__VA_ARGS__)
#		define code$vsqrtsd$argc02$2(state,t1,t2,a1,a2) code$vsqrtsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vsqrtsd$argc03(state,a1,a2,a3) code$vsqrtsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vsqrtsd$argc03$1(...) code$vsqrtsd$argc03$2(__VA_ARGS__)
#		define code$vsqrtsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vsqrtsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vsqrtsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vsqrtsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vsqrtsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vsqrtsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 51, modrm$rr(_0, _2))
#		define code$vsqrtss(state,n,...) code$vsqrtss$argc##n(state, ##__VA_ARGS__)
#		define code$vsqrtss$argc02(state,a1,a2) code$vsqrtss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsqrtss$argc02$1(...) code$vsqrtss$argc02$2(__VA_ARGS__)
#		define code$vsqrtss$argc02$2(state,t1,t2,a1,a2) code$vsqrtss$argt$##t1##$##t2(state, a1,a2)
#		define code$vsqrtss$argc03(state,a1,a2,a3) code$vsqrtss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vsqrtss$argc03$1(...) code$vsqrtss$argc03$2(__VA_ARGS__)
#		define code$vsqrtss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vsqrtss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vsqrtss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 51, modrm$rm(_0, _1))
#		define code$vsqrtss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 51, modrm$rr(_0, _1))
#		define code$vsqrtss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vsqrtss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 51, modrm$rm(_0, _2))
#		define code$vsqrtss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 51, modrm$rr(_0, _2))
#		define code$vstmxcsr(state,n,...) code$vstmxcsr$argc##n(state, ##__VA_ARGS__)
#		define code$vstmxcsr$argc01(state,a1) code$vstmxcsr$argc01$1(state, operand$gettype(a1), a1)
#		define code$vstmxcsr$argc01$1(...) code$vstmxcsr$argc01$2(__VA_ARGS__)
#		define code$vstmxcsr$argc01$2(state,t1,a1) code$vstmxcsr$argt$##t1(state, a1)
#		define code$vstmxcsr$argt$mem(state,_0) bytes(vex$rm(vex$L$lz, vex$pp$none, vex$mmmmm$0f, vex$wig, rax, _0), ae, modrm$3m(_0))
#		define code$vstmxcsr$argt$mem32(state,_0) bytes(vex$rm(vex$L$lz, vex$pp$none, vex$mmmmm$0f, vex$wig, rax, _0), ae, modrm$3m(_0))
#		define code$vsubpd(state,n,...) code$vsubpd$argc##n(state, ##__VA_ARGS__)
#		define code$vsubpd$argc02(state,a1,a2) code$vsubpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsubpd$argc02$1(...) code$vsubpd$argc02$2(__VA_ARGS__)
#		define code$vsubpd$argc02$2(state,t1,t2,a1,a2) code$vsubpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vsubpd$argc03(state,a1,a2,a3) code$vsubpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vsubpd$argc03$1(...) code$vsubpd$argc03$2(__VA_ARGS__)
#		define code$vsubpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vsubpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vsubpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rr(_0, _1))
#		define code$vsubpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rr(_0, _2))
#		define code$vsubpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rr(_0, _1))
#		define code$vsubpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rr(_0, _2))
#		define code$vsubps(state,n,...) code$vsubps$argc##n(state, ##__VA_ARGS__)
#		define code$vsubps$argc02(state,a1,a2) code$vsubps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsubps$argc02$1(...) code$vsubps$argc02$2(__VA_ARGS__)
#		define code$vsubps$argc02$2(state,t1,t2,a1,a2) code$vsubps$argt$##t1##$##t2(state, a1,a2)
#		define code$vsubps$argc03(state,a1,a2,a3) code$vsubps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vsubps$argc03$1(...) code$vsubps$argc03$2(__VA_ARGS__)
#		define code$vsubps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vsubps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vsubps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rr(_0, _1))
#		define code$vsubps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rr(_0, _2))
#		define code$vsubps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rr(_0, _1))
#		define code$vsubps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rr(_0, _2))
#		define code$vsubsd(state,n,...) code$vsubsd$argc##n(state, ##__VA_ARGS__)
#		define code$vsubsd$argc02(state,a1,a2) code$vsubsd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsubsd$argc02$1(...) code$vsubsd$argc02$2(__VA_ARGS__)
#		define code$vsubsd$argc02$2(state,t1,t2,a1,a2) code$vsubsd$argt$##t1##$##t2(state, a1,a2)
#		define code$vsubsd$argc03(state,a1,a2,a3) code$vsubsd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vsubsd$argc03$1(...) code$vsubsd$argc03$2(__VA_ARGS__)
#		define code$vsubsd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vsubsd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vsubsd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubsd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubsd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rr(_0, _1))
#		define code$vsubsd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubsd$argt$mmreg128$mmreg128$mem64(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubsd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f2, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rr(_0, _2))
#		define code$vsubss(state,n,...) code$vsubss$argc##n(state, ##__VA_ARGS__)
#		define code$vsubss$argc02(state,a1,a2) code$vsubss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vsubss$argc02$1(...) code$vsubss$argc02$2(__VA_ARGS__)
#		define code$vsubss$argc02$2(state,t1,t2,a1,a2) code$vsubss$argt$##t1##$##t2(state, a1,a2)
#		define code$vsubss$argc03(state,a1,a2,a3) code$vsubss$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vsubss$argc03$1(...) code$vsubss$argc03$2(__VA_ARGS__)
#		define code$vsubss$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vsubss$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vsubss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rm(_0, _1))
#		define code$vsubss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _0, _1), 5c, modrm$rr(_0, _1))
#		define code$vsubss$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubss$argt$mmreg128$mmreg128$mem32(state,_0,_1,_2) bytes(vex$rrm(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rm(_0, _2))
#		define code$vsubss$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$lig, vex$pp$f3, vex$mmmmm$0f, vex$wig, _0, _1, _2), 5c, modrm$rr(_0, _2))
#		define code$vtestpd(state,n,...) code$vtestpd$argc##n(state, ##__VA_ARGS__)
#		define code$vtestpd$argc02(state,a1,a2) code$vtestpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vtestpd$argc02$1(...) code$vtestpd$argc02$2(__VA_ARGS__)
#		define code$vtestpd$argc02$2(state,t1,t2,a1,a2) code$vtestpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vtestpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0f, modrm$rm(_0, _1))
#		define code$vtestpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0f, modrm$rm(_0, _1))
#		define code$vtestpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0f, modrm$rr(_0, _1))
#		define code$vtestpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0f, modrm$rm(_0, _1))
#		define code$vtestpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0f, modrm$rm(_0, _1))
#		define code$vtestpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0f, modrm$rr(_0, _1))
#		define code$vtestps(state,n,...) code$vtestps$argc##n(state, ##__VA_ARGS__)
#		define code$vtestps$argc02(state,a1,a2) code$vtestps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vtestps$argc02$1(...) code$vtestps$argc02$2(__VA_ARGS__)
#		define code$vtestps$argc02$2(state,t1,t2,a1,a2) code$vtestps$argt$##t1##$##t2(state, a1,a2)
#		define code$vtestps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0e, modrm$rm(_0, _1))
#		define code$vtestps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rm(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0e, modrm$rm(_0, _1))
#		define code$vtestps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$128, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0e, modrm$rr(_0, _1))
#		define code$vtestps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0e, modrm$rm(_0, _1))
#		define code$vtestps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rm(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0e, modrm$rm(_0, _1))
#		define code$vtestps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rr(vex$L$256, vex$pp$66, vex$mmmmm$0f38, vex$w0, _0, _1), 0e, modrm$rr(_0, _1))
#		define code$vucomisd(state,n,...) code$vucomisd$argc##n(state, ##__VA_ARGS__)
#		define code$vucomisd$argc02(state,a1,a2) code$vucomisd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vucomisd$argc02$1(...) code$vucomisd$argc02$2(__VA_ARGS__)
#		define code$vucomisd$argc02$2(state,t1,t2,a1,a2) code$vucomisd$argt$##t1##$##t2(state, a1,a2)
#		define code$vucomisd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 2e, modrm$rm(_0, _1))
#		define code$vucomisd$argt$mmreg128$mem64(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 2e, modrm$rm(_0, _1))
#		define code$vucomisd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1), 2e, modrm$rr(_0, _1))
#		define code$vucomiss(state,n,...) code$vucomiss$argc##n(state, ##__VA_ARGS__)
#		define code$vucomiss$argc02(state,a1,a2) code$vucomiss$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vucomiss$argc02$1(...) code$vucomiss$argc02$2(__VA_ARGS__)
#		define code$vucomiss$argc02$2(state,t1,t2,a1,a2) code$vucomiss$argt$##t1##$##t2(state, a1,a2)
#		define code$vucomiss$argt$mmreg128$mem(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 2e, modrm$rm(_0, _1))
#		define code$vucomiss$argt$mmreg128$mem32(state,_0,_1) bytes(vex$rm(vex$L$lig, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 2e, modrm$rm(_0, _1))
#		define code$vucomiss$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rr(vex$L$lig, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1), 2e, modrm$rr(_0, _1))
#		define code$vunpckhpd(state,n,...) code$vunpckhpd$argc##n(state, ##__VA_ARGS__)
#		define code$vunpckhpd$argc02(state,a1,a2) code$vunpckhpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vunpckhpd$argc02$1(...) code$vunpckhpd$argc02$2(__VA_ARGS__)
#		define code$vunpckhpd$argc02$2(state,t1,t2,a1,a2) code$vunpckhpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vunpckhpd$argc03(state,a1,a2,a3) code$vunpckhpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vunpckhpd$argc03$1(...) code$vunpckhpd$argc03$2(__VA_ARGS__)
#		define code$vunpckhpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vunpckhpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vunpckhpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rr(_0, _1))
#		define code$vunpckhpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rr(_0, _2))
#		define code$vunpckhpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rr(_0, _1))
#		define code$vunpckhpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rr(_0, _2))
#		define code$vunpckhps(state,n,...) code$vunpckhps$argc##n(state, ##__VA_ARGS__)
#		define code$vunpckhps$argc02(state,a1,a2) code$vunpckhps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vunpckhps$argc02$1(...) code$vunpckhps$argc02$2(__VA_ARGS__)
#		define code$vunpckhps$argc02$2(state,t1,t2,a1,a2) code$vunpckhps$argt$##t1##$##t2(state, a1,a2)
#		define code$vunpckhps$argc03(state,a1,a2,a3) code$vunpckhps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vunpckhps$argc03$1(...) code$vunpckhps$argc03$2(__VA_ARGS__)
#		define code$vunpckhps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vunpckhps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vunpckhps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rr(_0, _1))
#		define code$vunpckhps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rr(_0, _2))
#		define code$vunpckhps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rm(_0, _1))
#		define code$vunpckhps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 15, modrm$rr(_0, _1))
#		define code$vunpckhps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rm(_0, _2))
#		define code$vunpckhps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 15, modrm$rr(_0, _2))
#		define code$vunpcklpd(state,n,...) code$vunpcklpd$argc##n(state, ##__VA_ARGS__)
#		define code$vunpcklpd$argc02(state,a1,a2) code$vunpcklpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vunpcklpd$argc02$1(...) code$vunpcklpd$argc02$2(__VA_ARGS__)
#		define code$vunpcklpd$argc02$2(state,t1,t2,a1,a2) code$vunpcklpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vunpcklpd$argc03(state,a1,a2,a3) code$vunpcklpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vunpcklpd$argc03$1(...) code$vunpcklpd$argc03$2(__VA_ARGS__)
#		define code$vunpcklpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vunpcklpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vunpcklpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rr(_0, _1))
#		define code$vunpcklpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rr(_0, _2))
#		define code$vunpcklpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rr(_0, _1))
#		define code$vunpcklpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rr(_0, _2))
#		define code$vunpcklps(state,n,...) code$vunpcklps$argc##n(state, ##__VA_ARGS__)
#		define code$vunpcklps$argc02(state,a1,a2) code$vunpcklps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vunpcklps$argc02$1(...) code$vunpcklps$argc02$2(__VA_ARGS__)
#		define code$vunpcklps$argc02$2(state,t1,t2,a1,a2) code$vunpcklps$argt$##t1##$##t2(state, a1,a2)
#		define code$vunpcklps$argc03(state,a1,a2,a3) code$vunpcklps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vunpcklps$argc03$1(...) code$vunpcklps$argc03$2(__VA_ARGS__)
#		define code$vunpcklps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vunpcklps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vunpcklps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rr(_0, _1))
#		define code$vunpcklps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rr(_0, _2))
#		define code$vunpcklps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rm(_0, _1))
#		define code$vunpcklps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 14, modrm$rr(_0, _1))
#		define code$vunpcklps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rm(_0, _2))
#		define code$vunpcklps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 14, modrm$rr(_0, _2))
#		define code$vxorpd(state,n,...) code$vxorpd$argc##n(state, ##__VA_ARGS__)
#		define code$vxorpd$argc02(state,a1,a2) code$vxorpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vxorpd$argc02$1(...) code$vxorpd$argc02$2(__VA_ARGS__)
#		define code$vxorpd$argc02$2(state,t1,t2,a1,a2) code$vxorpd$argt$##t1##$##t2(state, a1,a2)
#		define code$vxorpd$argc03(state,a1,a2,a3) code$vxorpd$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vxorpd$argc03$1(...) code$vxorpd$argc03$2(__VA_ARGS__)
#		define code$vxorpd$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vxorpd$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vxorpd$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorpd$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rr(_0, _1))
#		define code$vxorpd$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorpd$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorpd$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rr(_0, _2))
#		define code$vxorpd$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorpd$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorpd$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rr(_0, _1))
#		define code$vxorpd$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorpd$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorpd$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$66, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rr(_0, _2))
#		define code$vxorps(state,n,...) code$vxorps$argc##n(state, ##__VA_ARGS__)
#		define code$vxorps$argc02(state,a1,a2) code$vxorps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$vxorps$argc02$1(...) code$vxorps$argc02$2(__VA_ARGS__)
#		define code$vxorps$argc02$2(state,t1,t2,a1,a2) code$vxorps$argt$##t1##$##t2(state, a1,a2)
#		define code$vxorps$argc03(state,a1,a2,a3) code$vxorps$argc03$1(state, operand$gettype(a1),operand$gettype(a2),operand$gettype(a3), a1,a2,a3)
#		define code$vxorps$argc03$1(...) code$vxorps$argc03$2(__VA_ARGS__)
#		define code$vxorps$argc03$2(state,t1,t2,t3,a1,a2,a3) code$vxorps$argt$##t1##$##t2##$##t3(state, a1,a2,a3)
#		define code$vxorps$argt$mmreg128$mem(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorps$argt$mmreg128$mem128(state,_0,_1) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorps$argt$mmreg128$mmreg128(state,_0,_1) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rr(_0, _1))
#		define code$vxorps$argt$mmreg128$mmreg128$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorps$argt$mmreg128$mmreg128$mem128(state,_0,_1,_2) bytes(vex$rrm(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorps$argt$mmreg128$mmreg128$mmreg128(state,_0,_1,_2) bytes(vex$rrr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rr(_0, _2))
#		define code$vxorps$argt$mmreg256$mem(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorps$argt$mmreg256$mem256(state,_0,_1) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rm(_0, _1))
#		define code$vxorps$argt$mmreg256$mmreg256(state,_0,_1) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _0, _1), 57, modrm$rr(_0, _1))
#		define code$vxorps$argt$mmreg256$mmreg256$mem(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorps$argt$mmreg256$mmreg256$mem256(state,_0,_1,_2) bytes(vex$rrm(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rm(_0, _2))
#		define code$vxorps$argt$mmreg256$mmreg256$mmreg256(state,_0,_1,_2) bytes(vex$rrr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, _0, _1, _2), 57, modrm$rr(_0, _2))
#		define code$vzeroall(state,n,...) code$vzeroall$argc##n(state, ##__VA_ARGS__)
#		define code$vzeroall$argc00(state,_) code$vzeroall$argt$(state)
#		define code$vzeroall$argt$(state) bytes(/*vex$rr(vex$L$256, vex$pp$none, vex$mmmmm$0f, vex$wig, rax, rax)*/c5, fc, 77)
#		define code$vzeroupper(state,n,...) code$vzeroupper$argc##n(state, ##__VA_ARGS__)
#		define code$vzeroupper$argc00(state,_) code$vzeroupper$argt$(state)
#		define code$vzeroupper$argt$(state) bytes(/*vex$rr(vex$L$128, vex$pp$none, vex$mmmmm$0f, vex$wig, rax, rax)*/c5, f8, 77)
#		define code$wait(state,n,...) code$wait$argc##n(state, ##__VA_ARGS__)
#		define code$wait$argc00(state,_) code$wait$argt$(state)
#		define code$wait$argt$(state) bytes(9b)
#		define code$wbinvd(state,n,...) code$wbinvd$argc##n(state, ##__VA_ARGS__)
#		define code$wbinvd$argc00(state,_) code$wbinvd$argt$(state)
#		define code$wbinvd$argt$(state) bytes(0f, 09)
#		define code$wbnoinvd(state,n,...) code$wbnoinvd$argc##n(state, ##__VA_ARGS__)
#		define code$wbnoinvd$argc00(state,_) code$wbnoinvd$argt$(state)
#		define code$wbnoinvd$argt$(state) bytes(f3, 0f, 09)
#		define code$wrfsbase(state,n,...) code$wrfsbase$argc##n(state, ##__VA_ARGS__)
#		define code$wrfsbase$argc01(state,a1) code$wrfsbase$argc01$1(state, operand$gettype(a1), a1)
#		define code$wrfsbase$argc01$1(...) code$wrfsbase$argc01$2(__VA_ARGS__)
#		define code$wrfsbase$argc01$2(state,t1,a1) code$wrfsbase$argt$##t1(state, a1)
#		define code$wrfsbase$argt$reg32(state,_0) bytes(f3, rex32r(_0) 0f, ae, modrm$2r(_0))
#		define code$wrfsbase$argt$reg64(state,_0) bytes(f3, rex64r(_0) 0f, ae, modrm$2r(_0))
#		define code$wrgsbase(state,n,...) code$wrgsbase$argc##n(state, ##__VA_ARGS__)
#		define code$wrgsbase$argc01(state,a1) code$wrgsbase$argc01$1(state, operand$gettype(a1), a1)
#		define code$wrgsbase$argc01$1(...) code$wrgsbase$argc01$2(__VA_ARGS__)
#		define code$wrgsbase$argc01$2(state,t1,a1) code$wrgsbase$argt$##t1(state, a1)
#		define code$wrgsbase$argt$reg32(state,_0) bytes(f3, rex32r(_0) 0f, ae, modrm$3r(_0))
#		define code$wrgsbase$argt$reg64(state,_0) bytes(f3, rex64r(_0) 0f, ae, modrm$3r(_0))
#		define code$wrmsr(state,n,...) code$wrmsr$argc##n(state, ##__VA_ARGS__)
#		define code$wrmsr$argc00(state,_) code$wrmsr$argt$(state)
#		define code$wrmsr$argt$(state) bytes(0f, 30)
#		define code$wrpkru(state,n,...) code$wrpkru$argc##n(state, ##__VA_ARGS__)
#		define code$wrpkru$argc00(state,_) code$wrpkru$argt$(state)
#		define code$wrpkru$argt$(state) bytes(0f, 01, ef)
#		define code$wrssd(state,n,...) code$wrssd$argc##n(state, ##__VA_ARGS__)
#		define code$wrssd$argc02(state,a1,a2) code$wrssd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$wrssd$argc02$1(...) code$wrssd$argc02$2(__VA_ARGS__)
#		define code$wrssd$argc02$2(state,t1,t2,a1,a2) code$wrssd$argt$##t1##$##t2(state, a1,a2)
#		define code$wrssd$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 38, f6, modrm$rm(_1, _0))
#		define code$wrssd$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, 38, f6, modrm$rm(_1, _0))
#		define code$wrssq(state,n,...) code$wrssq$argc##n(state, ##__VA_ARGS__)
#		define code$wrssq$argc02(state,a1,a2) code$wrssq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$wrssq$argc02$1(...) code$wrssq$argc02$2(__VA_ARGS__)
#		define code$wrssq$argc02$2(state,t1,t2,a1,a2) code$wrssq$argt$##t1##$##t2(state, a1,a2)
#		define code$wrssq$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, 38, f6, modrm$rm(_1, _0))
#		define code$wrssq$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, 38, f6, modrm$rm(_1, _0))
#		define code$wrussd(state,n,...) code$wrussd$argc##n(state, ##__VA_ARGS__)
#		define code$wrussd$argc02(state,a1,a2) code$wrussd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$wrussd$argc02$1(...) code$wrussd$argc02$2(__VA_ARGS__)
#		define code$wrussd$argc02$2(state,t1,t2,a1,a2) code$wrussd$argt$##t1##$##t2(state, a1,a2)
#		define code$wrussd$argt$mem$reg32(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 38, f5, modrm$rm(_1, _0))
#		define code$wrussd$argt$mem32$reg32(state,_0,_1) bytes(66, rex32rm(_1, _0) 0f, 38, f5, modrm$rm(_1, _0))
#		define code$wrussq(state,n,...) code$wrussq$argc##n(state, ##__VA_ARGS__)
#		define code$wrussq$argc02(state,a1,a2) code$wrussq$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$wrussq$argc02$1(...) code$wrussq$argc02$2(__VA_ARGS__)
#		define code$wrussq$argc02$2(state,t1,t2,a1,a2) code$wrussq$argt$##t1##$##t2(state, a1,a2)
#		define code$wrussq$argt$mem$reg64(state,_0,_1) bytes(66, rex64rm(_1, _0) 0f, 38, f5, modrm$rm(_1, _0))
#		define code$wrussq$argt$mem64$reg64(state,_0,_1) bytes(66, rex64rm(_1, _0) 0f, 38, f5, modrm$rm(_1, _0))
#		define code$xabort(state,n,...) code$xabort$argc##n(state, ##__VA_ARGS__)
#		define code$xabort$argc01(state,a1) code$xabort$argc01$1(state, operand$gettype(a1), a1)
#		define code$xabort$argc01$1(...) code$xabort$argc01$2(__VA_ARGS__)
#		define code$xabort$argc01$2(state,t1,a1) code$xabort$argt$##t1(state, a1)
#		define code$xabort$argt$imm08(state,_0) bytes(c6, f8, i08$bytes$le(which$imm08(state, _0)))
#		define code$xacquire(state,n,...) code$xacquire$argc##n(state, ##__VA_ARGS__)
#		define code$xacquire$argc00(state,_) code$xacquire$argt$(state)
#		define code$xacquire$argt$(state) bytes(f2)
#		define code$xadd(state,n,...) code$xadd$argc##n(state, ##__VA_ARGS__)
#		define code$xadd$argc02(state,a1,a2) code$xadd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$xadd$argc02$1(...) code$xadd$argc02$2(__VA_ARGS__)
#		define code$xadd$argc02$2(state,t1,t2,a1,a2) code$xadd$argt$##t1##$##t2(state, a1,a2)
#		define code$xadd$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 0f, c0, modrm$rm(_1, _0))
#		define code$xadd$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, c1, modrm$rm(_1, _0))
#		define code$xadd$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, c1, modrm$rm(_1, _0))
#		define code$xadd$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, c1, modrm$rm(_1, _0))
#		define code$xadd$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 0f, c0, modrm$rm(_1, _0))
#		define code$xadd$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 0f, c1, modrm$rm(_1, _0))
#		define code$xadd$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 0f, c1, modrm$rm(_1, _0))
#		define code$xadd$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 0f, c1, modrm$rm(_1, _0))
#		define code$xadd$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 0f, c0, modrm$rr(_1, _0))
#		define code$xadd$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 0f, c1, modrm$rr(_1, _0))
#		define code$xadd$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 0f, c1, modrm$rr(_1, _0))
#		define code$xadd$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 0f, c1, modrm$rr(_1, _0))
#		define code$xbegin(state,n,...) code$xbegin$argc##n(state, ##__VA_ARGS__)
#		define code$xbegin$argc01(state,a1) code$xbegin$argc01$1(state, operand$gettype(a1), a1)
#		define code$xbegin$argc01$1(...) code$xbegin$argc01$2(__VA_ARGS__)
#		define code$xbegin$argc01$2(state,t1,a1) code$xbegin$argt$##t1(state, a1)
#		define code$xbegin$argt$rel32(state,_0) bytes(c8, f8, i32$bytes$le(which$rel32(state, _0)))
#		define code$xchg(state,n,...) code$xchg$argc##n(state, ##__VA_ARGS__)
#		define code$xchg$argc02(state,a1,a2) code$xchg$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$xchg$argc02$1(...) code$xchg$argc02$2(__VA_ARGS__)
#		define code$xchg$argc02$2(state,t1,t2,a1,a2) code$xchg$argt$##t1##$##t2(state, a1,a2)
#		define code$xchg$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 86, modrm$rm(_1, _0))
#		define code$xchg$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 87, modrm$rm(_1, _0))
#		define code$xchg$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 87, modrm$rm(_1, _0))
#		define code$xchg$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 87, modrm$rm(_1, _0))
#		define code$xchg$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 86, modrm$rm(_1, _0))
#		define code$xchg$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 87, modrm$rm(_1, _0))
#		define code$xchg$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 87, modrm$rm(_1, _0))
#		define code$xchg$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 87, modrm$rm(_1, _0))
#		define code$xchg$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 86, modrm$rm(_0, _1))
#		define code$xchg$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 86, modrm$rm(_0, _1))
#		define code$xchg$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_1, _0) 86, modrm$rr(_0, _1))
#		define code$xchg$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 87, modrm$rm(_0, _1))
#		define code$xchg$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 87, modrm$rm(_0, _1))
#		define code$xchg$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_1, _0) 87, modrm$rr(_0, _1))
#		define code$xchg$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 87, modrm$rm(_0, _1))
#		define code$xchg$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 87, modrm$rm(_0, _1))
#		define code$xchg$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_1, _0) 87, modrm$rr(_0, _1))
#		define code$xchg$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 87, modrm$rm(_0, _1))
#		define code$xchg$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 87, modrm$rm(_0, _1))
#		define code$xchg$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_1, _0) 87, modrm$rr(_0, _1))
#		define code$xend(state,n,...) code$xend$argc##n(state, ##__VA_ARGS__)
#		define code$xend$argc00(state,_) code$xend$argt$(state)
#		define code$xend$argt$(state) bytes(0f, 01, d5)
#		define code$xgetbv(state,n,...) code$xgetbv$argc##n(state, ##__VA_ARGS__)
#		define code$xgetbv$argc00(state,_) code$xgetbv$argt$(state)
#		define code$xgetbv$argt$(state) bytes(0f, 01, d0)
#		define code$xlatb(state,n,...) code$xlatb$argc##n(state, ##__VA_ARGS__)
#		define code$xlatb$argc00(state,_) code$xlatb$argt$(state)
#		define code$xlatb$argt$(state) bytes(d7)
#		define code$xor(state,n,...) code$xor$argc##n(state, ##__VA_ARGS__)
#		define code$xor$argc02(state,a1,a2) code$xor$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$xor$argc02$1(...) code$xor$argc02$2(__VA_ARGS__)
#		define code$xor$argc02$2(state,t1,t2,a1,a2) code$xor$argt$##t1##$##t2(state, a1,a2)
#		define code$xor$argt$mem$imm08(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for xor(mem, imm08)"))
#		define code$xor$argt$mem$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$6m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$xor$argt$mem$imm32(state,_0,_1) bytes(error$if(1, "ambigous memory operand size for xor(mem, imm32)"))
#		define code$xor$argt$mem$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 30, modrm$rm(_1, _0))
#		define code$xor$argt$mem$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 31, modrm$rm(_1, _0))
#		define code$xor$argt$mem$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 31, modrm$rm(_1, _0))
#		define code$xor$argt$mem$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 31, modrm$rm(_1, _0))
#		define code$xor$argt$mem08$imm08(state,_0,_1) bytes(rex08m(_0) 80, modrm$6m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$mem08$reg08(state,_0,_1) bytes(rex08rm(_1, _0) 30, modrm$rm(_1, _0))
#		define code$xor$argt$mem16$imm08(state,_0,_1) bytes(rex16m(_0) 83, modrm$6m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$mem16$imm16(state,_0,_1) bytes(rex16m(_0) 81, modrm$6m(_0), i16$bytes$le(which$imm16(state, _1)))
#		define code$xor$argt$mem16$reg16(state,_0,_1) bytes(rex16rm(_1, _0) 31, modrm$rm(_1, _0))
#		define code$xor$argt$mem32$imm08(state,_0,_1) bytes(rex32m(_0) 83, modrm$6m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$mem32$imm32(state,_0,_1) bytes(rex32m(_0) 81, modrm$6m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$xor$argt$mem32$reg32(state,_0,_1) bytes(rex32rm(_1, _0) 31, modrm$rm(_1, _0))
#		define code$xor$argt$mem64$imm08(state,_0,_1) bytes(rex64m(_0) 83, modrm$6m(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$mem64$imm32(state,_0,_1) bytes(rex64m(_0) 81, modrm$6m(_0), i32$bytes$le(which$imm32(state, _1)))
#		define code$xor$argt$mem64$reg64(state,_0,_1) bytes(rex64rm(_1, _0) 31, modrm$rm(_1, _0))
#		define code$xor$argt$reg08$imm08(state,_0,_1) bytes(unpack(ppif(reg08$is$al(_0), (34), (rex08r(_0) 80, modrm$6r(_0)))), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$reg08$mem(state,_0,_1) bytes(rex08rm(_0, _1) 32, modrm$rm(_0, _1))
#		define code$xor$argt$reg08$mem08(state,_0,_1) bytes(rex08rm(_0, _1) 32, modrm$rm(_0, _1))
#		define code$xor$argt$reg08$reg08(state,_0,_1) bytes(rex08rr(_0, _1) 30, modrm$rr(_1, _0))
#		define code$xor$argt$reg16$imm08(state,_0,_1) bytes(rex16r(_0) 83, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$reg16$imm16(state,_0,_1) bytes(unpack(ppif(reg16$is$ax(_0), (66, 35), (rex16r(_0) 81, modrm$6r(_0)))), i16$bytes$le(which$imm16(state, _1)))
#		define code$xor$argt$reg16$mem(state,_0,_1) bytes(rex16rm(_0, _1) 33, modrm$rm(_0, _1))
#		define code$xor$argt$reg16$mem16(state,_0,_1) bytes(rex16rm(_0, _1) 33, modrm$rm(_0, _1))
#		define code$xor$argt$reg16$reg16(state,_0,_1) bytes(rex16rr(_0, _1) 31, modrm$rr(_1, _0))
#		define code$xor$argt$reg32$imm08(state,_0,_1) bytes(rex32r(_0) 83, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$reg32$imm32(state,_0,_1) bytes(unpack(ppif(reg32$is$eax(_0), (35), (rex32r(_0) 81, modrm$6r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$xor$argt$reg32$mem(state,_0,_1) bytes(rex32rm(_0, _1) 33, modrm$rm(_0, _1))
#		define code$xor$argt$reg32$mem32(state,_0,_1) bytes(rex32rm(_0, _1) 33, modrm$rm(_0, _1))
#		define code$xor$argt$reg32$reg32(state,_0,_1) bytes(rex32rr(_0, _1) 31, modrm$rr(_1, _0))
#		define code$xor$argt$reg64$imm08(state,_0,_1) bytes(rex64r(_0) 83, modrm$6r(_0), i08$bytes$le(which$imm08(state, _1)))
#		define code$xor$argt$reg64$imm32(state,_0,_1) bytes(unpack(ppif(reg64$is$rax(_0), (48, 35), (rex64r(_0) 81, modrm$6r(_0)))), i32$bytes$le(which$imm32(state, _1)))
#		define code$xor$argt$reg64$mem(state,_0,_1) bytes(rex64rm(_0, _1) 33, modrm$rm(_0, _1))
#		define code$xor$argt$reg64$mem64(state,_0,_1) bytes(rex64rm(_0, _1) 33, modrm$rm(_0, _1))
#		define code$xor$argt$reg64$reg64(state,_0,_1) bytes(rex64rr(_0, _1) 31, modrm$rr(_1, _0))
#		define code$xorpd(state,n,...) code$xorpd$argc##n(state, ##__VA_ARGS__)
#		define code$xorpd$argc02(state,a1,a2) code$xorpd$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$xorpd$argc02$1(...) code$xorpd$argc02$2(__VA_ARGS__)
#		define code$xorpd$argc02$2(state,t1,t2,a1,a2) code$xorpd$argt$##t1##$##t2(state, a1,a2)
#		define code$xorpd$argt$mmreg128$mem(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 57, modrm$rm(_0, _1))
#		define code$xorpd$argt$mmreg128$mem128(state,_0,_1) bytes(66, rex32rm(_0, _1) 0f, 57, modrm$rm(_0, _1))
#		define code$xorpd$argt$mmreg128$mmreg128(state,_0,_1) bytes(66, rex32rr(_1, _0) 0f, 57, modrm$rr(_0, _1))
#		define code$xorps(state,n,...) code$xorps$argc##n(state, ##__VA_ARGS__)
#		define code$xorps$argc02(state,a1,a2) code$xorps$argc02$1(state, operand$gettype(a1),operand$gettype(a2), a1,a2)
#		define code$xorps$argc02$1(...) code$xorps$argc02$2(__VA_ARGS__)
#		define code$xorps$argc02$2(state,t1,t2,a1,a2) code$xorps$argt$##t1##$##t2(state, a1,a2)
#		define code$xorps$argt$mmreg128$mem(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 57, modrm$rm(_0, _1))
#		define code$xorps$argt$mmreg128$mem128(state,_0,_1) bytes(rex32rm(_0, _1) 0f, 57, modrm$rm(_0, _1))
#		define code$xorps$argt$mmreg128$mmreg128(state,_0,_1) bytes(rex32rr(_1, _0) 0f, 57, modrm$rr(_0, _1))
#		define code$xrelease(state,n,...) code$xrelease$argc##n(state, ##__VA_ARGS__)
#		define code$xrelease$argc00(state,_) code$xrelease$argt$(state)
#		define code$xrelease$argt$(state) bytes(f3)
#		define code$xrstor(state,n,...) code$xrstor$argc##n(state, ##__VA_ARGS__)
#		define code$xrstor$argc01(state,a1) code$xrstor$argc01$1(state, operand$gettype(a1), a1)
#		define code$xrstor$argc01$1(...) code$xrstor$argc01$2(__VA_ARGS__)
#		define code$xrstor$argc01$2(state,t1,a1) code$xrstor$argt$##t1(state, a1)
#		define code$xrstor$argt$mem(state,_0) bytes(rex32m(_0) 0f, ae, modrm$5m(_0))
#		define code$xrstor64(state,n,...) code$xrstor64$argc##n(state, ##__VA_ARGS__)
#		define code$xrstor64$argc01(state,a1) code$xrstor64$argc01$1(state, operand$gettype(a1), a1)
#		define code$xrstor64$argc01$1(...) code$xrstor64$argc01$2(__VA_ARGS__)
#		define code$xrstor64$argc01$2(state,t1,a1) code$xrstor64$argt$##t1(state, a1)
#		define code$xrstor64$argt$mem(state,_0) bytes(rex64m(_0) 0f, ae, modrm$5m(_0))
#		define code$xrstors(state,n,...) code$xrstors$argc##n(state, ##__VA_ARGS__)
#		define code$xrstors$argc01(state,a1) code$xrstors$argc01$1(state, operand$gettype(a1), a1)
#		define code$xrstors$argc01$1(...) code$xrstors$argc01$2(__VA_ARGS__)
#		define code$xrstors$argc01$2(state,t1,a1) code$xrstors$argt$##t1(state, a1)
#		define code$xrstors$argt$mem(state,_0) bytes(rex32m(_0) 0f, c7, modrm$3m(_0))
#		define code$xrstors64(state,n,...) code$xrstors64$argc##n(state, ##__VA_ARGS__)
#		define code$xrstors64$argc01(state,a1) code$xrstors64$argc01$1(state, operand$gettype(a1), a1)
#		define code$xrstors64$argc01$1(...) code$xrstors64$argc01$2(__VA_ARGS__)
#		define code$xrstors64$argc01$2(state,t1,a1) code$xrstors64$argt$##t1(state, a1)
#		define code$xrstors64$argt$mem(state,_0) bytes(rex64m(_0) 0f, c7, modrm$3m(_0))
#		define code$xsave(state,n,...) code$xsave$argc##n(state, ##__VA_ARGS__)
#		define code$xsave$argc01(state,a1) code$xsave$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsave$argc01$1(...) code$xsave$argc01$2(__VA_ARGS__)
#		define code$xsave$argc01$2(state,t1,a1) code$xsave$argt$##t1(state, a1)
#		define code$xsave$argt$mem(state,_0) bytes(rex32m(_0) 0f, ae, modrm$4m(_0))
#		define code$xsave64(state,n,...) code$xsave64$argc##n(state, ##__VA_ARGS__)
#		define code$xsave64$argc01(state,a1) code$xsave64$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsave64$argc01$1(...) code$xsave64$argc01$2(__VA_ARGS__)
#		define code$xsave64$argc01$2(state,t1,a1) code$xsave64$argt$##t1(state, a1)
#		define code$xsave64$argt$mem(state,_0) bytes(rex64m(_0) 0f, ae, modrm$4m(_0))
#		define code$xsavec(state,n,...) code$xsavec$argc##n(state, ##__VA_ARGS__)
#		define code$xsavec$argc01(state,a1) code$xsavec$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsavec$argc01$1(...) code$xsavec$argc01$2(__VA_ARGS__)
#		define code$xsavec$argc01$2(state,t1,a1) code$xsavec$argt$##t1(state, a1)
#		define code$xsavec$argt$mem(state,_0) bytes(rex32m(_0) 0f, c7, modrm$4m(_0))
#		define code$xsavec64(state,n,...) code$xsavec64$argc##n(state, ##__VA_ARGS__)
#		define code$xsavec64$argc01(state,a1) code$xsavec64$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsavec64$argc01$1(...) code$xsavec64$argc01$2(__VA_ARGS__)
#		define code$xsavec64$argc01$2(state,t1,a1) code$xsavec64$argt$##t1(state, a1)
#		define code$xsavec64$argt$mem(state,_0) bytes(rex64m(_0) 0f, c7, modrm$4m(_0))
#		define code$xsaveopt(state,n,...) code$xsaveopt$argc##n(state, ##__VA_ARGS__)
#		define code$xsaveopt$argc01(state,a1) code$xsaveopt$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsaveopt$argc01$1(...) code$xsaveopt$argc01$2(__VA_ARGS__)
#		define code$xsaveopt$argc01$2(state,t1,a1) code$xsaveopt$argt$##t1(state, a1)
#		define code$xsaveopt$argt$mem(state,_0) bytes(rex32m(_0) 0f, ae, modrm$6m(_0))
#		define code$xsaveopt64(state,n,...) code$xsaveopt64$argc##n(state, ##__VA_ARGS__)
#		define code$xsaveopt64$argc01(state,a1) code$xsaveopt64$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsaveopt64$argc01$1(...) code$xsaveopt64$argc01$2(__VA_ARGS__)
#		define code$xsaveopt64$argc01$2(state,t1,a1) code$xsaveopt64$argt$##t1(state, a1)
#		define code$xsaveopt64$argt$mem(state,_0) bytes(rex64m(_0) 0f, ae, modrm$6m(_0))
#		define code$xsaves(state,n,...) code$xsaves$argc##n(state, ##__VA_ARGS__)
#		define code$xsaves$argc01(state,a1) code$xsaves$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsaves$argc01$1(...) code$xsaves$argc01$2(__VA_ARGS__)
#		define code$xsaves$argc01$2(state,t1,a1) code$xsaves$argt$##t1(state, a1)
#		define code$xsaves$argt$mem(state,_0) bytes(rex32m(_0) 0f, c7, modrm$5m(_0))
#		define code$xsaves64(state,n,...) code$xsaves64$argc##n(state, ##__VA_ARGS__)
#		define code$xsaves64$argc01(state,a1) code$xsaves64$argc01$1(state, operand$gettype(a1), a1)
#		define code$xsaves64$argc01$1(...) code$xsaves64$argc01$2(__VA_ARGS__)
#		define code$xsaves64$argc01$2(state,t1,a1) code$xsaves64$argt$##t1(state, a1)
#		define code$xsaves64$argt$mem(state,_0) bytes(rex64m(_0) 0f, c7, modrm$5m(_0))
#		define code$xsetbv(state,n,...) code$xsetbv$argc##n(state, ##__VA_ARGS__)
#		define code$xsetbv$argc00(state,_) code$xsetbv$argt$(state)
#		define code$xsetbv$argt$(state) bytes(0f, 01, d1)
#		define code$xtest(state,n,...) code$xtest$argc##n(state, ##__VA_ARGS__)
#		define code$xtest$argc00(state,_) code$xtest$argt$(state)
#		define code$xtest$argt$(state) bytes(0f, 01, d6)
#		define comma$if(...) comma$if$1(__VA_ARGS__)
#		define comma$if$1(...) comma$if$2(__VA_ARGS__)
#		define comma$if$2(c) comma$if$cond##c
#		define comma$if$cond0
#		define comma$if$cond1 ,
#		define comma$if$isbytes(...) comma$if$isbytes$1(__VA_ARGS__)
#		define comma$if$isbytes$1(...) comma$if$isbytes$2(__VA_ARGS__)
#		define comma$if$isbytes$2(b) comma$if$isbytes$with$##b
#		define comma$if$isbytes$with$bytes(...) ,
#		define comma$if$operator$is$supported$of$adc(...) ,
#		define comma$if$operator$is$supported$of$adcx(...) ,
#		define comma$if$operator$is$supported$of$add(...) ,
#		define comma$if$operator$is$supported$of$addpd(...) ,
#		define comma$if$operator$is$supported$of$addps(...) ,
#		define comma$if$operator$is$supported$of$addsd(...) ,
#		define comma$if$operator$is$supported$of$addss(...) ,
#		define comma$if$operator$is$supported$of$addsubpd(...) ,
#		define comma$if$operator$is$supported$of$addsubps(...) ,
#		define comma$if$operator$is$supported$of$adox(...) ,
#		define comma$if$operator$is$supported$of$aesdec(...) ,
#		define comma$if$operator$is$supported$of$aesdeclast(...) ,
#		define comma$if$operator$is$supported$of$aesenc(...) ,
#		define comma$if$operator$is$supported$of$aesenclast(...) ,
#		define comma$if$operator$is$supported$of$aesimc(...) ,
#		define comma$if$operator$is$supported$of$aeskeygenassist(...) ,
#		define comma$if$operator$is$supported$of$and(...) ,
#		define comma$if$operator$is$supported$of$andn(...) ,
#		define comma$if$operator$is$supported$of$andnpd(...) ,
#		define comma$if$operator$is$supported$of$andnps(...) ,
#		define comma$if$operator$is$supported$of$andpd(...) ,
#		define comma$if$operator$is$supported$of$andps(...) ,
#		define comma$if$operator$is$supported$of$bextr(...) ,
#		define comma$if$operator$is$supported$of$blendpd(...) ,
#		define comma$if$operator$is$supported$of$blendps(...) ,
#		define comma$if$operator$is$supported$of$blendvpd(...) ,
#		define comma$if$operator$is$supported$of$blendvps(...) ,
#		define comma$if$operator$is$supported$of$blsi(...) ,
#		define comma$if$operator$is$supported$of$blsmsk(...) ,
#		define comma$if$operator$is$supported$of$blsr(...) ,
#		define comma$if$operator$is$supported$of$bsf(...) ,
#		define comma$if$operator$is$supported$of$bsr(...) ,
#		define comma$if$operator$is$supported$of$bswap(...) ,
#		define comma$if$operator$is$supported$of$bt(...) ,
#		define comma$if$operator$is$supported$of$btc(...) ,
#		define comma$if$operator$is$supported$of$btr(...) ,
#		define comma$if$operator$is$supported$of$bts(...) ,
#		define comma$if$operator$is$supported$of$bzhi(...) ,
#		define comma$if$operator$is$supported$of$call(...) ,
#		define comma$if$operator$is$supported$of$cdq(...) ,
#		define comma$if$operator$is$supported$of$clac(...) ,
#		define comma$if$operator$is$supported$of$clc(...) ,
#		define comma$if$operator$is$supported$of$cld(...) ,
#		define comma$if$operator$is$supported$of$cldemote(...) ,
#		define comma$if$operator$is$supported$of$clflush(...) ,
#		define comma$if$operator$is$supported$of$clflushopt(...) ,
#		define comma$if$operator$is$supported$of$cli(...) ,
#		define comma$if$operator$is$supported$of$clrssbsy(...) ,
#		define comma$if$operator$is$supported$of$clts(...) ,
#		define comma$if$operator$is$supported$of$clwb(...) ,
#		define comma$if$operator$is$supported$of$cmc(...) ,
#		define comma$if$operator$is$supported$of$cmova(...) ,
#		define comma$if$operator$is$supported$of$cmovae(...) ,
#		define comma$if$operator$is$supported$of$cmovb(...) ,
#		define comma$if$operator$is$supported$of$cmovbe(...) ,
#		define comma$if$operator$is$supported$of$cmovc(...) ,
#		define comma$if$operator$is$supported$of$cmove(...) ,
#		define comma$if$operator$is$supported$of$cmovg(...) ,
#		define comma$if$operator$is$supported$of$cmovge(...) ,
#		define comma$if$operator$is$supported$of$cmovl(...) ,
#		define comma$if$operator$is$supported$of$cmovle(...) ,
#		define comma$if$operator$is$supported$of$cmovna(...) ,
#		define comma$if$operator$is$supported$of$cmovnae(...) ,
#		define comma$if$operator$is$supported$of$cmovnb(...) ,
#		define comma$if$operator$is$supported$of$cmovnbe(...) ,
#		define comma$if$operator$is$supported$of$cmovnc(...) ,
#		define comma$if$operator$is$supported$of$cmovne(...) ,
#		define comma$if$operator$is$supported$of$cmovng(...) ,
#		define comma$if$operator$is$supported$of$cmovnge(...) ,
#		define comma$if$operator$is$supported$of$cmovnl(...) ,
#		define comma$if$operator$is$supported$of$cmovnle(...) ,
#		define comma$if$operator$is$supported$of$cmovno(...) ,
#		define comma$if$operator$is$supported$of$cmovnp(...) ,
#		define comma$if$operator$is$supported$of$cmovns(...) ,
#		define comma$if$operator$is$supported$of$cmovnz(...) ,
#		define comma$if$operator$is$supported$of$cmovo(...) ,
#		define comma$if$operator$is$supported$of$cmovp(...) ,
#		define comma$if$operator$is$supported$of$cmovpe(...) ,
#		define comma$if$operator$is$supported$of$cmovpo(...) ,
#		define comma$if$operator$is$supported$of$cmovs(...) ,
#		define comma$if$operator$is$supported$of$cmovz(...) ,
#		define comma$if$operator$is$supported$of$cmp(...) ,
#		define comma$if$operator$is$supported$of$cmpeqpd(...) ,
#		define comma$if$operator$is$supported$of$cmpeqps(...) ,
#		define comma$if$operator$is$supported$of$cmpeqsd(...) ,
#		define comma$if$operator$is$supported$of$cmpeqss(...) ,
#		define comma$if$operator$is$supported$of$cmplepd(...) ,
#		define comma$if$operator$is$supported$of$cmpleps(...) ,
#		define comma$if$operator$is$supported$of$cmplesd(...) ,
#		define comma$if$operator$is$supported$of$cmpless(...) ,
#		define comma$if$operator$is$supported$of$cmpltpd(...) ,
#		define comma$if$operator$is$supported$of$cmpltps(...) ,
#		define comma$if$operator$is$supported$of$cmpltsd(...) ,
#		define comma$if$operator$is$supported$of$cmpltss(...) ,
#		define comma$if$operator$is$supported$of$cmpneqpd(...) ,
#		define comma$if$operator$is$supported$of$cmpneqps(...) ,
#		define comma$if$operator$is$supported$of$cmpneqsd(...) ,
#		define comma$if$operator$is$supported$of$cmpneqss(...) ,
#		define comma$if$operator$is$supported$of$cmpnlepd(...) ,
#		define comma$if$operator$is$supported$of$cmpnleps(...) ,
#		define comma$if$operator$is$supported$of$cmpnlesd(...) ,
#		define comma$if$operator$is$supported$of$cmpnless(...) ,
#		define comma$if$operator$is$supported$of$cmpnltpd(...) ,
#		define comma$if$operator$is$supported$of$cmpnltps(...) ,
#		define comma$if$operator$is$supported$of$cmpnltsd(...) ,
#		define comma$if$operator$is$supported$of$cmpnltss(...) ,
#		define comma$if$operator$is$supported$of$cmpordpd(...) ,
#		define comma$if$operator$is$supported$of$cmpordps(...) ,
#		define comma$if$operator$is$supported$of$cmpordsd(...) ,
#		define comma$if$operator$is$supported$of$cmpordss(...) ,
#		define comma$if$operator$is$supported$of$cmppd(...) ,
#		define comma$if$operator$is$supported$of$cmpps(...) ,
#		define comma$if$operator$is$supported$of$cmpsb(...) ,
#		define comma$if$operator$is$supported$of$cmpsd(...) ,
#		define comma$if$operator$is$supported$of$cmpsq(...) ,
#		define comma$if$operator$is$supported$of$cmpss(...) ,
#		define comma$if$operator$is$supported$of$cmpsw(...) ,
#		define comma$if$operator$is$supported$of$cmpunordpd(...) ,
#		define comma$if$operator$is$supported$of$cmpunordps(...) ,
#		define comma$if$operator$is$supported$of$cmpunordsd(...) ,
#		define comma$if$operator$is$supported$of$cmpunordss(...) ,
#		define comma$if$operator$is$supported$of$cmpxchg(...) ,
#		define comma$if$operator$is$supported$of$cmpxchg8b(...) ,
#		define comma$if$operator$is$supported$of$comisd(...) ,
#		define comma$if$operator$is$supported$of$comiss(...) ,
#		define comma$if$operator$is$supported$of$cpuid(...) ,
#		define comma$if$operator$is$supported$of$cqo(...) ,
#		define comma$if$operator$is$supported$of$crc32(...) ,
#		define comma$if$operator$is$supported$of$cvtdq2pd(...) ,
#		define comma$if$operator$is$supported$of$cvtdq2ps(...) ,
#		define comma$if$operator$is$supported$of$cvtpd2dq(...) ,
#		define comma$if$operator$is$supported$of$cvtpd2pi(...) ,
#		define comma$if$operator$is$supported$of$cvtpd2ps(...) ,
#		define comma$if$operator$is$supported$of$cvtpi2pd(...) ,
#		define comma$if$operator$is$supported$of$cvtpi2ps(...) ,
#		define comma$if$operator$is$supported$of$cvtps2dq(...) ,
#		define comma$if$operator$is$supported$of$cvtps2pd(...) ,
#		define comma$if$operator$is$supported$of$cvtps2pi(...) ,
#		define comma$if$operator$is$supported$of$cvtsd2si(...) ,
#		define comma$if$operator$is$supported$of$cvtsd2ss(...) ,
#		define comma$if$operator$is$supported$of$cvtsi2sd(...) ,
#		define comma$if$operator$is$supported$of$cvtsi2ss(...) ,
#		define comma$if$operator$is$supported$of$cvtss2sd(...) ,
#		define comma$if$operator$is$supported$of$cvtss2si(...) ,
#		define comma$if$operator$is$supported$of$cvttpd2dq(...) ,
#		define comma$if$operator$is$supported$of$cvttpd2pi(...) ,
#		define comma$if$operator$is$supported$of$cvttps2dq(...) ,
#		define comma$if$operator$is$supported$of$cvttps2pi(...) ,
#		define comma$if$operator$is$supported$of$cvttsd2si(...) ,
#		define comma$if$operator$is$supported$of$cvttss2si(...) ,
#		define comma$if$operator$is$supported$of$cwd(...) ,
#		define comma$if$operator$is$supported$of$dec(...) ,
#		define comma$if$operator$is$supported$of$div(...) ,
#		define comma$if$operator$is$supported$of$divpd(...) ,
#		define comma$if$operator$is$supported$of$divps(...) ,
#		define comma$if$operator$is$supported$of$divsd(...) ,
#		define comma$if$operator$is$supported$of$divss(...) ,
#		define comma$if$operator$is$supported$of$dppd(...) ,
#		define comma$if$operator$is$supported$of$dpps(...) ,
#		define comma$if$operator$is$supported$of$emms(...) ,
#		define comma$if$operator$is$supported$of$encls(...) ,
#		define comma$if$operator$is$supported$of$enclu(...) ,
#		define comma$if$operator$is$supported$of$enclv(...) ,
#		define comma$if$operator$is$supported$of$endbr32(...) ,
#		define comma$if$operator$is$supported$of$endbr64(...) ,
#		define comma$if$operator$is$supported$of$enter(...) ,
#		define comma$if$operator$is$supported$of$extractps(...) ,
#		define comma$if$operator$is$supported$of$f2xm1(...) ,
#		define comma$if$operator$is$supported$of$fabs(...) ,
#		define comma$if$operator$is$supported$of$fadd(...) ,
#		define comma$if$operator$is$supported$of$faddp(...) ,
#		define comma$if$operator$is$supported$of$fbld(...) ,
#		define comma$if$operator$is$supported$of$fbstp(...) ,
#		define comma$if$operator$is$supported$of$fchs(...) ,
#		define comma$if$operator$is$supported$of$fclex(...) ,
#		define comma$if$operator$is$supported$of$fcmovb(...) ,
#		define comma$if$operator$is$supported$of$fcmovbe(...) ,
#		define comma$if$operator$is$supported$of$fcmove(...) ,
#		define comma$if$operator$is$supported$of$fcmovnb(...) ,
#		define comma$if$operator$is$supported$of$fcmovnbe(...) ,
#		define comma$if$operator$is$supported$of$fcmovne(...) ,
#		define comma$if$operator$is$supported$of$fcmovnu(...) ,
#		define comma$if$operator$is$supported$of$fcmovu(...) ,
#		define comma$if$operator$is$supported$of$fcom(...) ,
#		define comma$if$operator$is$supported$of$fcomi(...) ,
#		define comma$if$operator$is$supported$of$fcomip(...) ,
#		define comma$if$operator$is$supported$of$fcomp(...) ,
#		define comma$if$operator$is$supported$of$fcompp(...) ,
#		define comma$if$operator$is$supported$of$fcos(...) ,
#		define comma$if$operator$is$supported$of$fdecstp(...) ,
#		define comma$if$operator$is$supported$of$fdiv(...) ,
#		define comma$if$operator$is$supported$of$fdivp(...) ,
#		define comma$if$operator$is$supported$of$fdivr(...) ,
#		define comma$if$operator$is$supported$of$fdivrp(...) ,
#		define comma$if$operator$is$supported$of$ffree(...) ,
#		define comma$if$operator$is$supported$of$fiadd(...) ,
#		define comma$if$operator$is$supported$of$ficom(...) ,
#		define comma$if$operator$is$supported$of$ficomp(...) ,
#		define comma$if$operator$is$supported$of$fidiv(...) ,
#		define comma$if$operator$is$supported$of$fidivr(...) ,
#		define comma$if$operator$is$supported$of$fild(...) ,
#		define comma$if$operator$is$supported$of$fimul(...) ,
#		define comma$if$operator$is$supported$of$fincstp(...) ,
#		define comma$if$operator$is$supported$of$finit(...) ,
#		define comma$if$operator$is$supported$of$fist(...) ,
#		define comma$if$operator$is$supported$of$fistp(...) ,
#		define comma$if$operator$is$supported$of$fisttp(...) ,
#		define comma$if$operator$is$supported$of$fisub(...) ,
#		define comma$if$operator$is$supported$of$fisubr(...) ,
#		define comma$if$operator$is$supported$of$fld(...) ,
#		define comma$if$operator$is$supported$of$fld1(...) ,
#		define comma$if$operator$is$supported$of$fldcw(...) ,
#		define comma$if$operator$is$supported$of$fldenv(...) ,
#		define comma$if$operator$is$supported$of$fldl2e(...) ,
#		define comma$if$operator$is$supported$of$fldl2t(...) ,
#		define comma$if$operator$is$supported$of$fldlg2(...) ,
#		define comma$if$operator$is$supported$of$fldln2(...) ,
#		define comma$if$operator$is$supported$of$fldpi(...) ,
#		define comma$if$operator$is$supported$of$fldz(...) ,
#		define comma$if$operator$is$supported$of$fmul(...) ,
#		define comma$if$operator$is$supported$of$fmulp(...) ,
#		define comma$if$operator$is$supported$of$fnclex(...) ,
#		define comma$if$operator$is$supported$of$fninit(...) ,
#		define comma$if$operator$is$supported$of$fnop(...) ,
#		define comma$if$operator$is$supported$of$fnsave(...) ,
#		define comma$if$operator$is$supported$of$fnstcw(...) ,
#		define comma$if$operator$is$supported$of$fnstenv(...) ,
#		define comma$if$operator$is$supported$of$fnstsw(...) ,
#		define comma$if$operator$is$supported$of$fpatan(...) ,
#		define comma$if$operator$is$supported$of$fprem(...) ,
#		define comma$if$operator$is$supported$of$fprem1(...) ,
#		define comma$if$operator$is$supported$of$fptan(...) ,
#		define comma$if$operator$is$supported$of$frndint(...) ,
#		define comma$if$operator$is$supported$of$frstor(...) ,
#		define comma$if$operator$is$supported$of$fsave(...) ,
#		define comma$if$operator$is$supported$of$fscale(...) ,
#		define comma$if$operator$is$supported$of$fsin(...) ,
#		define comma$if$operator$is$supported$of$fsincos(...) ,
#		define comma$if$operator$is$supported$of$fsqrt(...) ,
#		define comma$if$operator$is$supported$of$fst(...) ,
#		define comma$if$operator$is$supported$of$fstcw(...) ,
#		define comma$if$operator$is$supported$of$fstenv(...) ,
#		define comma$if$operator$is$supported$of$fstp(...) ,
#		define comma$if$operator$is$supported$of$fstsw(...) ,
#		define comma$if$operator$is$supported$of$fsub(...) ,
#		define comma$if$operator$is$supported$of$fsubp(...) ,
#		define comma$if$operator$is$supported$of$fsubr(...) ,
#		define comma$if$operator$is$supported$of$fsubrp(...) ,
#		define comma$if$operator$is$supported$of$ftst(...) ,
#		define comma$if$operator$is$supported$of$fucom(...) ,
#		define comma$if$operator$is$supported$of$fucomi(...) ,
#		define comma$if$operator$is$supported$of$fucomip(...) ,
#		define comma$if$operator$is$supported$of$fucomp(...) ,
#		define comma$if$operator$is$supported$of$fucompp(...) ,
#		define comma$if$operator$is$supported$of$fwait(...) ,
#		define comma$if$operator$is$supported$of$fxam(...) ,
#		define comma$if$operator$is$supported$of$fxch(...) ,
#		define comma$if$operator$is$supported$of$fxrstor(...) ,
#		define comma$if$operator$is$supported$of$fxrstor64(...) ,
#		define comma$if$operator$is$supported$of$fxsave(...) ,
#		define comma$if$operator$is$supported$of$fxsave64(...) ,
#		define comma$if$operator$is$supported$of$fxtract(...) ,
#		define comma$if$operator$is$supported$of$fyl2x(...) ,
#		define comma$if$operator$is$supported$of$fyl2xp1(...) ,
#		define comma$if$operator$is$supported$of$gf2p8affineinvqb(...) ,
#		define comma$if$operator$is$supported$of$gf2p8affineqb(...) ,
#		define comma$if$operator$is$supported$of$gf2p8mulb(...) ,
#		define comma$if$operator$is$supported$of$haddpd(...) ,
#		define comma$if$operator$is$supported$of$haddps(...) ,
#		define comma$if$operator$is$supported$of$hlt(...) ,
#		define comma$if$operator$is$supported$of$hreset(...) ,
#		define comma$if$operator$is$supported$of$hsubpd(...) ,
#		define comma$if$operator$is$supported$of$hsubps(...) ,
#		define comma$if$operator$is$supported$of$idiv(...) ,
#		define comma$if$operator$is$supported$of$imul(...) ,
#		define comma$if$operator$is$supported$of$in(...) ,
#		define comma$if$operator$is$supported$of$inc(...) ,
#		define comma$if$operator$is$supported$of$incsspd(...) ,
#		define comma$if$operator$is$supported$of$incsspq(...) ,
#		define comma$if$operator$is$supported$of$insb(...) ,
#		define comma$if$operator$is$supported$of$insd(...) ,
#		define comma$if$operator$is$supported$of$insertps(...) ,
#		define comma$if$operator$is$supported$of$insw(...) ,
#		define comma$if$operator$is$supported$of$int0(...) ,
#		define comma$if$operator$is$supported$of$int1(...) ,
#		define comma$if$operator$is$supported$of$int3(...) ,
#		define comma$if$operator$is$supported$of$invd(...) ,
#		define comma$if$operator$is$supported$of$invept(...) ,
#		define comma$if$operator$is$supported$of$invlpg(...) ,
#		define comma$if$operator$is$supported$of$invpcid(...) ,
#		define comma$if$operator$is$supported$of$invvpid(...) ,
#		define comma$if$operator$is$supported$of$iret(...) ,
#		define comma$if$operator$is$supported$of$iretd(...) ,
#		define comma$if$operator$is$supported$of$iretq(...) ,
#		define comma$if$operator$is$supported$of$ja(...) ,
#		define comma$if$operator$is$supported$of$jae(...) ,
#		define comma$if$operator$is$supported$of$jb(...) ,
#		define comma$if$operator$is$supported$of$jbe(...) ,
#		define comma$if$operator$is$supported$of$jc(...) ,
#		define comma$if$operator$is$supported$of$je(...) ,
#		define comma$if$operator$is$supported$of$jg(...) ,
#		define comma$if$operator$is$supported$of$jge(...) ,
#		define comma$if$operator$is$supported$of$jl(...) ,
#		define comma$if$operator$is$supported$of$jle(...) ,
#		define comma$if$operator$is$supported$of$jmp(...) ,
#		define comma$if$operator$is$supported$of$jna(...) ,
#		define comma$if$operator$is$supported$of$jnae(...) ,
#		define comma$if$operator$is$supported$of$jnb(...) ,
#		define comma$if$operator$is$supported$of$jnbe(...) ,
#		define comma$if$operator$is$supported$of$jnc(...) ,
#		define comma$if$operator$is$supported$of$jne(...) ,
#		define comma$if$operator$is$supported$of$jng(...) ,
#		define comma$if$operator$is$supported$of$jnge(...) ,
#		define comma$if$operator$is$supported$of$jnl(...) ,
#		define comma$if$operator$is$supported$of$jnle(...) ,
#		define comma$if$operator$is$supported$of$jno(...) ,
#		define comma$if$operator$is$supported$of$jnp(...) ,
#		define comma$if$operator$is$supported$of$jns(...) ,
#		define comma$if$operator$is$supported$of$jnz(...) ,
#		define comma$if$operator$is$supported$of$jo(...) ,
#		define comma$if$operator$is$supported$of$jp(...) ,
#		define comma$if$operator$is$supported$of$jpe(...) ,
#		define comma$if$operator$is$supported$of$jpo(...) ,
#		define comma$if$operator$is$supported$of$js(...) ,
#		define comma$if$operator$is$supported$of$jz(...) ,
#		define comma$if$operator$is$supported$of$label(...) ,
#		define comma$if$operator$is$supported$of$lar(...) ,
#		define comma$if$operator$is$supported$of$lddqu(...) ,
#		define comma$if$operator$is$supported$of$ldmxcsr(...) ,
#		define comma$if$operator$is$supported$of$lea(...) ,
#		define comma$if$operator$is$supported$of$leave(...) ,
#		define comma$if$operator$is$supported$of$lfence(...) ,
#		define comma$if$operator$is$supported$of$lldt(...) ,
#		define comma$if$operator$is$supported$of$lmsw(...) ,
#		define comma$if$operator$is$supported$of$lods(...) ,
#		define comma$if$operator$is$supported$of$lodsb(...) ,
#		define comma$if$operator$is$supported$of$lodsd(...) ,
#		define comma$if$operator$is$supported$of$lodsq(...) ,
#		define comma$if$operator$is$supported$of$lodsw(...) ,
#		define comma$if$operator$is$supported$of$loop(...) ,
#		define comma$if$operator$is$supported$of$loope(...) ,
#		define comma$if$operator$is$supported$of$loopne(...) ,
#		define comma$if$operator$is$supported$of$lsl(...) ,
#		define comma$if$operator$is$supported$of$ltr(...) ,
#		define comma$if$operator$is$supported$of$lzcnt(...) ,
#		define comma$if$operator$is$supported$of$maskmovdqu(...) ,
#		define comma$if$operator$is$supported$of$maskmovq(...) ,
#		define comma$if$operator$is$supported$of$maxpd(...) ,
#		define comma$if$operator$is$supported$of$maxps(...) ,
#		define comma$if$operator$is$supported$of$maxsd(...) ,
#		define comma$if$operator$is$supported$of$maxss(...) ,
#		define comma$if$operator$is$supported$of$mfence(...) ,
#		define comma$if$operator$is$supported$of$minpd(...) ,
#		define comma$if$operator$is$supported$of$minps(...) ,
#		define comma$if$operator$is$supported$of$minsd(...) ,
#		define comma$if$operator$is$supported$of$minss(...) ,
#		define comma$if$operator$is$supported$of$monitor(...) ,
#		define comma$if$operator$is$supported$of$mov(...) ,
#		define comma$if$operator$is$supported$of$movapd(...) ,
#		define comma$if$operator$is$supported$of$movaps(...) ,
#		define comma$if$operator$is$supported$of$movbe(...) ,
#		define comma$if$operator$is$supported$of$movd(...) ,
#		define comma$if$operator$is$supported$of$movddup(...) ,
#		define comma$if$operator$is$supported$of$movdir64b(...) ,
#		define comma$if$operator$is$supported$of$movdiri(...) ,
#		define comma$if$operator$is$supported$of$movdq2q(...) ,
#		define comma$if$operator$is$supported$of$movdqa(...) ,
#		define comma$if$operator$is$supported$of$movdqu(...) ,
#		define comma$if$operator$is$supported$of$movhlps(...) ,
#		define comma$if$operator$is$supported$of$movhpd(...) ,
#		define comma$if$operator$is$supported$of$movhps(...) ,
#		define comma$if$operator$is$supported$of$movlhps(...) ,
#		define comma$if$operator$is$supported$of$movlpd(...) ,
#		define comma$if$operator$is$supported$of$movlps(...) ,
#		define comma$if$operator$is$supported$of$movmskpd(...) ,
#		define comma$if$operator$is$supported$of$movmskps(...) ,
#		define comma$if$operator$is$supported$of$movntdq(...) ,
#		define comma$if$operator$is$supported$of$movntdqa(...) ,
#		define comma$if$operator$is$supported$of$movnti(...) ,
#		define comma$if$operator$is$supported$of$movntpd(...) ,
#		define comma$if$operator$is$supported$of$movntps(...) ,
#		define comma$if$operator$is$supported$of$movntq(...) ,
#		define comma$if$operator$is$supported$of$movq(...) ,
#		define comma$if$operator$is$supported$of$movq2dq(...) ,
#		define comma$if$operator$is$supported$of$movsb(...) ,
#		define comma$if$operator$is$supported$of$movsd(...) ,
#		define comma$if$operator$is$supported$of$movshdup(...) ,
#		define comma$if$operator$is$supported$of$movshlup(...) ,
#		define comma$if$operator$is$supported$of$movsq(...) ,
#		define comma$if$operator$is$supported$of$movss(...) ,
#		define comma$if$operator$is$supported$of$movsw(...) ,
#		define comma$if$operator$is$supported$of$movsx(...) ,
#		define comma$if$operator$is$supported$of$movsxd(...) ,
#		define comma$if$operator$is$supported$of$movupd(...) ,
#		define comma$if$operator$is$supported$of$movups(...) ,
#		define comma$if$operator$is$supported$of$movzx(...) ,
#		define comma$if$operator$is$supported$of$mpsadbw(...) ,
#		define comma$if$operator$is$supported$of$mul(...) ,
#		define comma$if$operator$is$supported$of$mulpd(...) ,
#		define comma$if$operator$is$supported$of$mulps(...) ,
#		define comma$if$operator$is$supported$of$mulsd(...) ,
#		define comma$if$operator$is$supported$of$mulss(...) ,
#		define comma$if$operator$is$supported$of$mulx(...) ,
#		define comma$if$operator$is$supported$of$mwait(...) ,
#		define comma$if$operator$is$supported$of$neg(...) ,
#		define comma$if$operator$is$supported$of$nop(...) ,
#		define comma$if$operator$is$supported$of$nop2(...) ,
#		define comma$if$operator$is$supported$of$nop3(...) ,
#		define comma$if$operator$is$supported$of$nop4(...) ,
#		define comma$if$operator$is$supported$of$nop5(...) ,
#		define comma$if$operator$is$supported$of$nop6(...) ,
#		define comma$if$operator$is$supported$of$nop7(...) ,
#		define comma$if$operator$is$supported$of$nop8(...) ,
#		define comma$if$operator$is$supported$of$nop9(...) ,
#		define comma$if$operator$is$supported$of$not(...) ,
#		define comma$if$operator$is$supported$of$or(...) ,
#		define comma$if$operator$is$supported$of$orpd(...) ,
#		define comma$if$operator$is$supported$of$orps(...) ,
#		define comma$if$operator$is$supported$of$out(...) ,
#		define comma$if$operator$is$supported$of$outsb(...) ,
#		define comma$if$operator$is$supported$of$outsd(...) ,
#		define comma$if$operator$is$supported$of$outsw(...) ,
#		define comma$if$operator$is$supported$of$pabsb(...) ,
#		define comma$if$operator$is$supported$of$pabsd(...) ,
#		define comma$if$operator$is$supported$of$pabsw(...) ,
#		define comma$if$operator$is$supported$of$packssdw(...) ,
#		define comma$if$operator$is$supported$of$packsswb(...) ,
#		define comma$if$operator$is$supported$of$packusdw(...) ,
#		define comma$if$operator$is$supported$of$packuswb(...) ,
#		define comma$if$operator$is$supported$of$paddb(...) ,
#		define comma$if$operator$is$supported$of$paddd(...) ,
#		define comma$if$operator$is$supported$of$paddq(...) ,
#		define comma$if$operator$is$supported$of$paddsb(...) ,
#		define comma$if$operator$is$supported$of$paddsw(...) ,
#		define comma$if$operator$is$supported$of$paddusb(...) ,
#		define comma$if$operator$is$supported$of$paddusw(...) ,
#		define comma$if$operator$is$supported$of$paddw(...) ,
#		define comma$if$operator$is$supported$of$palignr(...) ,
#		define comma$if$operator$is$supported$of$pand(...) ,
#		define comma$if$operator$is$supported$of$pandn(...) ,
#		define comma$if$operator$is$supported$of$pause(...) ,
#		define comma$if$operator$is$supported$of$pavgb(...) ,
#		define comma$if$operator$is$supported$of$pavgw(...) ,
#		define comma$if$operator$is$supported$of$pblendvb(...) ,
#		define comma$if$operator$is$supported$of$pblendw(...) ,
#		define comma$if$operator$is$supported$of$pclmulqdq(...) ,
#		define comma$if$operator$is$supported$of$pcmpeqb(...) ,
#		define comma$if$operator$is$supported$of$pcmpeqd(...) ,
#		define comma$if$operator$is$supported$of$pcmpeqq(...) ,
#		define comma$if$operator$is$supported$of$pcmpeqw(...) ,
#		define comma$if$operator$is$supported$of$pcmpestri(...) ,
#		define comma$if$operator$is$supported$of$pcmpestrm(...) ,
#		define comma$if$operator$is$supported$of$pcmpgtb(...) ,
#		define comma$if$operator$is$supported$of$pcmpgtd(...) ,
#		define comma$if$operator$is$supported$of$pcmpgtq(...) ,
#		define comma$if$operator$is$supported$of$pcmpgtw(...) ,
#		define comma$if$operator$is$supported$of$pcmpistri(...) ,
#		define comma$if$operator$is$supported$of$pcmpistrm(...) ,
#		define comma$if$operator$is$supported$of$pconfig(...) ,
#		define comma$if$operator$is$supported$of$pdep(...) ,
#		define comma$if$operator$is$supported$of$pext(...) ,
#		define comma$if$operator$is$supported$of$pextrb(...) ,
#		define comma$if$operator$is$supported$of$pextrd(...) ,
#		define comma$if$operator$is$supported$of$pextrq(...) ,
#		define comma$if$operator$is$supported$of$pextrw(...) ,
#		define comma$if$operator$is$supported$of$phaddd(...) ,
#		define comma$if$operator$is$supported$of$phaddsw(...) ,
#		define comma$if$operator$is$supported$of$phaddw(...) ,
#		define comma$if$operator$is$supported$of$phminposuw(...) ,
#		define comma$if$operator$is$supported$of$phsubd(...) ,
#		define comma$if$operator$is$supported$of$phsubsw(...) ,
#		define comma$if$operator$is$supported$of$phsubw(...) ,
#		define comma$if$operator$is$supported$of$pinsrb(...) ,
#		define comma$if$operator$is$supported$of$pinsrd(...) ,
#		define comma$if$operator$is$supported$of$pinsrq(...) ,
#		define comma$if$operator$is$supported$of$pinsrw(...) ,
#		define comma$if$operator$is$supported$of$pmaddubsw(...) ,
#		define comma$if$operator$is$supported$of$pmaddwd(...) ,
#		define comma$if$operator$is$supported$of$pmaxsb(...) ,
#		define comma$if$operator$is$supported$of$pmaxsd(...) ,
#		define comma$if$operator$is$supported$of$pmaxsw(...) ,
#		define comma$if$operator$is$supported$of$pmaxub(...) ,
#		define comma$if$operator$is$supported$of$pmaxud(...) ,
#		define comma$if$operator$is$supported$of$pmaxuw(...) ,
#		define comma$if$operator$is$supported$of$pminsb(...) ,
#		define comma$if$operator$is$supported$of$pminsd(...) ,
#		define comma$if$operator$is$supported$of$pminsw(...) ,
#		define comma$if$operator$is$supported$of$pminub(...) ,
#		define comma$if$operator$is$supported$of$pminud(...) ,
#		define comma$if$operator$is$supported$of$pminuw(...) ,
#		define comma$if$operator$is$supported$of$pmovmskb(...) ,
#		define comma$if$operator$is$supported$of$pmovsxbd(...) ,
#		define comma$if$operator$is$supported$of$pmovsxbq(...) ,
#		define comma$if$operator$is$supported$of$pmovsxbw(...) ,
#		define comma$if$operator$is$supported$of$pmovsxdq(...) ,
#		define comma$if$operator$is$supported$of$pmovsxwd(...) ,
#		define comma$if$operator$is$supported$of$pmovsxwq(...) ,
#		define comma$if$operator$is$supported$of$pmovzxbd(...) ,
#		define comma$if$operator$is$supported$of$pmovzxbq(...) ,
#		define comma$if$operator$is$supported$of$pmovzxbw(...) ,
#		define comma$if$operator$is$supported$of$pmovzxdq(...) ,
#		define comma$if$operator$is$supported$of$pmovzxwd(...) ,
#		define comma$if$operator$is$supported$of$pmovzxwq(...) ,
#		define comma$if$operator$is$supported$of$pmuldq(...) ,
#		define comma$if$operator$is$supported$of$pmulhrsw(...) ,
#		define comma$if$operator$is$supported$of$pmulhw(...) ,
#		define comma$if$operator$is$supported$of$pmulld(...) ,
#		define comma$if$operator$is$supported$of$pmullw(...) ,
#		define comma$if$operator$is$supported$of$pmuludq(...) ,
#		define comma$if$operator$is$supported$of$pmuluw(...) ,
#		define comma$if$operator$is$supported$of$pop(...) ,
#		define comma$if$operator$is$supported$of$popcnt(...) ,
#		define comma$if$operator$is$supported$of$popf(...) ,
#		define comma$if$operator$is$supported$of$popfq(...) ,
#		define comma$if$operator$is$supported$of$por(...) ,
#		define comma$if$operator$is$supported$of$prefetchnta(...) ,
#		define comma$if$operator$is$supported$of$prefetcht0(...) ,
#		define comma$if$operator$is$supported$of$prefetcht1(...) ,
#		define comma$if$operator$is$supported$of$prefetcht2(...) ,
#		define comma$if$operator$is$supported$of$prefetchw(...) ,
#		define comma$if$operator$is$supported$of$prefix$bhnottaken(...) ,
#		define comma$if$operator$is$supported$of$prefix$bhtaken(...) ,
#		define comma$if$operator$is$supported$of$prefix$lock(...) ,
#		define comma$if$operator$is$supported$of$prefix$rep(...) ,
#		define comma$if$operator$is$supported$of$prefix$repe(...) ,
#		define comma$if$operator$is$supported$of$prefix$repne(...) ,
#		define comma$if$operator$is$supported$of$prefix$repnz(...) ,
#		define comma$if$operator$is$supported$of$prefix$repz(...) ,
#		define comma$if$operator$is$supported$of$psadbw(...) ,
#		define comma$if$operator$is$supported$of$pshufb(...) ,
#		define comma$if$operator$is$supported$of$pshufd(...) ,
#		define comma$if$operator$is$supported$of$pshuflw(...) ,
#		define comma$if$operator$is$supported$of$pshufw(...) ,
#		define comma$if$operator$is$supported$of$psignb(...) ,
#		define comma$if$operator$is$supported$of$psignd(...) ,
#		define comma$if$operator$is$supported$of$psignw(...) ,
#		define comma$if$operator$is$supported$of$pslld(...) ,
#		define comma$if$operator$is$supported$of$pslldq(...) ,
#		define comma$if$operator$is$supported$of$psllq(...) ,
#		define comma$if$operator$is$supported$of$psllw(...) ,
#		define comma$if$operator$is$supported$of$psrad(...) ,
#		define comma$if$operator$is$supported$of$psraw(...) ,
#		define comma$if$operator$is$supported$of$psrld(...) ,
#		define comma$if$operator$is$supported$of$psrldq(...) ,
#		define comma$if$operator$is$supported$of$psrlq(...) ,
#		define comma$if$operator$is$supported$of$psrlw(...) ,
#		define comma$if$operator$is$supported$of$psubb(...) ,
#		define comma$if$operator$is$supported$of$psubd(...) ,
#		define comma$if$operator$is$supported$of$psubq(...) ,
#		define comma$if$operator$is$supported$of$psubsb(...) ,
#		define comma$if$operator$is$supported$of$psubsw(...) ,
#		define comma$if$operator$is$supported$of$psubusb(...) ,
#		define comma$if$operator$is$supported$of$psubusw(...) ,
#		define comma$if$operator$is$supported$of$psubw(...) ,
#		define comma$if$operator$is$supported$of$ptest(...) ,
#		define comma$if$operator$is$supported$of$ptwrite(...) ,
#		define comma$if$operator$is$supported$of$punpckhbw(...) ,
#		define comma$if$operator$is$supported$of$punpckhdq(...) ,
#		define comma$if$operator$is$supported$of$punpckhqdq(...) ,
#		define comma$if$operator$is$supported$of$punpckhwd(...) ,
#		define comma$if$operator$is$supported$of$punpcklbw(...) ,
#		define comma$if$operator$is$supported$of$punpckldq(...) ,
#		define comma$if$operator$is$supported$of$punpcklqdq(...) ,
#		define comma$if$operator$is$supported$of$punpcklwd(...) ,
#		define comma$if$operator$is$supported$of$push(...) ,
#		define comma$if$operator$is$supported$of$pushf(...) ,
#		define comma$if$operator$is$supported$of$pushfq(...) ,
#		define comma$if$operator$is$supported$of$pxor(...) ,
#		define comma$if$operator$is$supported$of$rawbyte(...) ,
#		define comma$if$operator$is$supported$of$rawint(...) ,
#		define comma$if$operator$is$supported$of$rcl(...) ,
#		define comma$if$operator$is$supported$of$rcpps(...) ,
#		define comma$if$operator$is$supported$of$rcpss(...) ,
#		define comma$if$operator$is$supported$of$rcr(...) ,
#		define comma$if$operator$is$supported$of$rdfsbase(...) ,
#		define comma$if$operator$is$supported$of$rdgsbase(...) ,
#		define comma$if$operator$is$supported$of$rdmsr(...) ,
#		define comma$if$operator$is$supported$of$rdpid(...) ,
#		define comma$if$operator$is$supported$of$rdpkru(...) ,
#		define comma$if$operator$is$supported$of$rdpmc(...) ,
#		define comma$if$operator$is$supported$of$rdrand(...) ,
#		define comma$if$operator$is$supported$of$rdseed(...) ,
#		define comma$if$operator$is$supported$of$rdsspd(...) ,
#		define comma$if$operator$is$supported$of$rdsspq(...) ,
#		define comma$if$operator$is$supported$of$rdtsc(...) ,
#		define comma$if$operator$is$supported$of$rdtscp(...) ,
#		define comma$if$operator$is$supported$of$ret(...) ,
#		define comma$if$operator$is$supported$of$rol(...) ,
#		define comma$if$operator$is$supported$of$ror(...) ,
#		define comma$if$operator$is$supported$of$rorx(...) ,
#		define comma$if$operator$is$supported$of$roundpd(...) ,
#		define comma$if$operator$is$supported$of$roundps(...) ,
#		define comma$if$operator$is$supported$of$roundsd(...) ,
#		define comma$if$operator$is$supported$of$roundss(...) ,
#		define comma$if$operator$is$supported$of$rsm(...) ,
#		define comma$if$operator$is$supported$of$rsqrtps(...) ,
#		define comma$if$operator$is$supported$of$rsqrtss(...) ,
#		define comma$if$operator$is$supported$of$rstorssp(...) ,
#		define comma$if$operator$is$supported$of$sal(...) ,
#		define comma$if$operator$is$supported$of$sar(...) ,
#		define comma$if$operator$is$supported$of$sarx(...) ,
#		define comma$if$operator$is$supported$of$saveprevssp(...) ,
#		define comma$if$operator$is$supported$of$sbb(...) ,
#		define comma$if$operator$is$supported$of$scasb(...) ,
#		define comma$if$operator$is$supported$of$scasd(...) ,
#		define comma$if$operator$is$supported$of$scasq(...) ,
#		define comma$if$operator$is$supported$of$scasw(...) ,
#		define comma$if$operator$is$supported$of$serialize(...) ,
#		define comma$if$operator$is$supported$of$seta(...) ,
#		define comma$if$operator$is$supported$of$setae(...) ,
#		define comma$if$operator$is$supported$of$setb(...) ,
#		define comma$if$operator$is$supported$of$setbe(...) ,
#		define comma$if$operator$is$supported$of$setc(...) ,
#		define comma$if$operator$is$supported$of$sete(...) ,
#		define comma$if$operator$is$supported$of$setg(...) ,
#		define comma$if$operator$is$supported$of$setge(...) ,
#		define comma$if$operator$is$supported$of$setl(...) ,
#		define comma$if$operator$is$supported$of$setle(...) ,
#		define comma$if$operator$is$supported$of$setna(...) ,
#		define comma$if$operator$is$supported$of$setnae(...) ,
#		define comma$if$operator$is$supported$of$setnb(...) ,
#		define comma$if$operator$is$supported$of$setnbe(...) ,
#		define comma$if$operator$is$supported$of$setnc(...) ,
#		define comma$if$operator$is$supported$of$setne(...) ,
#		define comma$if$operator$is$supported$of$setng(...) ,
#		define comma$if$operator$is$supported$of$setnge(...) ,
#		define comma$if$operator$is$supported$of$setnl(...) ,
#		define comma$if$operator$is$supported$of$setnle(...) ,
#		define comma$if$operator$is$supported$of$setno(...) ,
#		define comma$if$operator$is$supported$of$setnp(...) ,
#		define comma$if$operator$is$supported$of$setns(...) ,
#		define comma$if$operator$is$supported$of$setnz(...) ,
#		define comma$if$operator$is$supported$of$seto(...) ,
#		define comma$if$operator$is$supported$of$setp(...) ,
#		define comma$if$operator$is$supported$of$setpe(...) ,
#		define comma$if$operator$is$supported$of$setpo(...) ,
#		define comma$if$operator$is$supported$of$sets(...) ,
#		define comma$if$operator$is$supported$of$setssbsy(...) ,
#		define comma$if$operator$is$supported$of$setz(...) ,
#		define comma$if$operator$is$supported$of$sfence(...) ,
#		define comma$if$operator$is$supported$of$sgdt(...) ,
#		define comma$if$operator$is$supported$of$sha1msg1(...) ,
#		define comma$if$operator$is$supported$of$sha1msg2(...) ,
#		define comma$if$operator$is$supported$of$sha1nexte(...) ,
#		define comma$if$operator$is$supported$of$sha1rnds4(...) ,
#		define comma$if$operator$is$supported$of$sha256msg1(...) ,
#		define comma$if$operator$is$supported$of$sha256msg2(...) ,
#		define comma$if$operator$is$supported$of$sha256rnds2(...) ,
#		define comma$if$operator$is$supported$of$shl(...) ,
#		define comma$if$operator$is$supported$of$shld(...) ,
#		define comma$if$operator$is$supported$of$shlx(...) ,
#		define comma$if$operator$is$supported$of$shr(...) ,
#		define comma$if$operator$is$supported$of$shrd(...) ,
#		define comma$if$operator$is$supported$of$shrx(...) ,
#		define comma$if$operator$is$supported$of$shufpd(...) ,
#		define comma$if$operator$is$supported$of$shufps(...) ,
#		define comma$if$operator$is$supported$of$sidt(...) ,
#		define comma$if$operator$is$supported$of$sldt(...) ,
#		define comma$if$operator$is$supported$of$smsw(...) ,
#		define comma$if$operator$is$supported$of$sqrtpd(...) ,
#		define comma$if$operator$is$supported$of$sqrtps(...) ,
#		define comma$if$operator$is$supported$of$sqrtsd(...) ,
#		define comma$if$operator$is$supported$of$sqrtss(...) ,
#		define comma$if$operator$is$supported$of$stac(...) ,
#		define comma$if$operator$is$supported$of$stc(...) ,
#		define comma$if$operator$is$supported$of$std(...) ,
#		define comma$if$operator$is$supported$of$sti(...) ,
#		define comma$if$operator$is$supported$of$stmxcsr(...) ,
#		define comma$if$operator$is$supported$of$stosb(...) ,
#		define comma$if$operator$is$supported$of$stosd(...) ,
#		define comma$if$operator$is$supported$of$stosq(...) ,
#		define comma$if$operator$is$supported$of$stosw(...) ,
#		define comma$if$operator$is$supported$of$str(...) ,
#		define comma$if$operator$is$supported$of$sub(...) ,
#		define comma$if$operator$is$supported$of$subpd(...) ,
#		define comma$if$operator$is$supported$of$subps(...) ,
#		define comma$if$operator$is$supported$of$subsd(...) ,
#		define comma$if$operator$is$supported$of$subss(...) ,
#		define comma$if$operator$is$supported$of$swapgs(...) ,
#		define comma$if$operator$is$supported$of$syscall(...) ,
#		define comma$if$operator$is$supported$of$sysenter(...) ,
#		define comma$if$operator$is$supported$of$sysexit(...) ,
#		define comma$if$operator$is$supported$of$sysexit64(...) ,
#		define comma$if$operator$is$supported$of$sysret(...) ,
#		define comma$if$operator$is$supported$of$sysret64(...) ,
#		define comma$if$operator$is$supported$of$test(...) ,
#		define comma$if$operator$is$supported$of$tpause(...) ,
#		define comma$if$operator$is$supported$of$tzcnt(...) ,
#		define comma$if$operator$is$supported$of$ucomisd(...) ,
#		define comma$if$operator$is$supported$of$ucomiss(...) ,
#		define comma$if$operator$is$supported$of$ud1(...) ,
#		define comma$if$operator$is$supported$of$ud2(...) ,
#		define comma$if$operator$is$supported$of$umonitor(...) ,
#		define comma$if$operator$is$supported$of$umwait(...) ,
#		define comma$if$operator$is$supported$of$unpckhpd(...) ,
#		define comma$if$operator$is$supported$of$unpckhps(...) ,
#		define comma$if$operator$is$supported$of$unpcklpd(...) ,
#		define comma$if$operator$is$supported$of$unpcklps(...) ,
#		define comma$if$operator$is$supported$of$vaddpd(...) ,
#		define comma$if$operator$is$supported$of$vaddps(...) ,
#		define comma$if$operator$is$supported$of$vaddss(...) ,
#		define comma$if$operator$is$supported$of$vaddsubpd(...) ,
#		define comma$if$operator$is$supported$of$vaddsubps(...) ,
#		define comma$if$operator$is$supported$of$vaesdec(...) ,
#		define comma$if$operator$is$supported$of$vaesdeclast(...) ,
#		define comma$if$operator$is$supported$of$vaesenc(...) ,
#		define comma$if$operator$is$supported$of$vaesenclast(...) ,
#		define comma$if$operator$is$supported$of$vaesimc(...) ,
#		define comma$if$operator$is$supported$of$vaeskeygenassist(...) ,
#		define comma$if$operator$is$supported$of$vandnpd(...) ,
#		define comma$if$operator$is$supported$of$vandnps(...) ,
#		define comma$if$operator$is$supported$of$vandpd(...) ,
#		define comma$if$operator$is$supported$of$vandps(...) ,
#		define comma$if$operator$is$supported$of$vblendpd(...) ,
#		define comma$if$operator$is$supported$of$vblendps(...) ,
#		define comma$if$operator$is$supported$of$vblendvpd(...) ,
#		define comma$if$operator$is$supported$of$vblendvps(...) ,
#		define comma$if$operator$is$supported$of$vbroadcastf128(...) ,
#		define comma$if$operator$is$supported$of$vbroadcasti128(...) ,
#		define comma$if$operator$is$supported$of$vbroadcastsd(...) ,
#		define comma$if$operator$is$supported$of$vbroadcastss(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_ospd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_osps(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_ossd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_osss(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_uqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_uqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_uqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_uqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_uspd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_usps(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_ussd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeq_usss(...) ,
#		define comma$if$operator$is$supported$of$vcmpeqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpeqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpeqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalse_ospd(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalse_osps(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalse_ossd(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalse_osss(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalsepd(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalseps(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalsesd(...) ,
#		define comma$if$operator$is$supported$of$vcmpfalsess(...) ,
#		define comma$if$operator$is$supported$of$vcmpge_oqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpge_oqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpge_oqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpge_oqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpgepd(...) ,
#		define comma$if$operator$is$supported$of$vcmpgeps(...) ,
#		define comma$if$operator$is$supported$of$vcmpgesd(...) ,
#		define comma$if$operator$is$supported$of$vcmpgess(...) ,
#		define comma$if$operator$is$supported$of$vcmpgt_oqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpgt_oqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpgt_oqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpgt_oqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpgtpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpgtps(...) ,
#		define comma$if$operator$is$supported$of$vcmpgtsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpgtss(...) ,
#		define comma$if$operator$is$supported$of$vcmple_oqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmple_oqps(...) ,
#		define comma$if$operator$is$supported$of$vcmple_oqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmple_oqss(...) ,
#		define comma$if$operator$is$supported$of$vcmplepd(...) ,
#		define comma$if$operator$is$supported$of$vcmpleps(...) ,
#		define comma$if$operator$is$supported$of$vcmplesd(...) ,
#		define comma$if$operator$is$supported$of$vcmpless(...) ,
#		define comma$if$operator$is$supported$of$vcmplt_oqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmplt_oqps(...) ,
#		define comma$if$operator$is$supported$of$vcmplt_oqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmplt_oqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpltpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpltps(...) ,
#		define comma$if$operator$is$supported$of$vcmpltsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpltss(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_oqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_oqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_oqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_oqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_ospd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_osps(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_ossd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_osss(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_uspd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_usps(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_ussd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneq_usss(...) ,
#		define comma$if$operator$is$supported$of$vcmpneqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpneqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpneqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpnge_uqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnge_uqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpnge_uqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnge_uqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpngepd(...) ,
#		define comma$if$operator$is$supported$of$vcmpngeps(...) ,
#		define comma$if$operator$is$supported$of$vcmpngesd(...) ,
#		define comma$if$operator$is$supported$of$vcmpngess(...) ,
#		define comma$if$operator$is$supported$of$vcmpngt_uqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpngt_uqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpngt_uqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpngt_uqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpngtpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpngtps(...) ,
#		define comma$if$operator$is$supported$of$vcmpngtsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpngtss(...) ,
#		define comma$if$operator$is$supported$of$vcmpnle_uqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnle_uqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpnle_uqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnle_uqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpnlepd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnleps(...) ,
#		define comma$if$operator$is$supported$of$vcmpnlesd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnless(...) ,
#		define comma$if$operator$is$supported$of$vcmpnlt_uqpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnlt_uqps(...) ,
#		define comma$if$operator$is$supported$of$vcmpnlt_uqsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnlt_uqss(...) ,
#		define comma$if$operator$is$supported$of$vcmpnltpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnltps(...) ,
#		define comma$if$operator$is$supported$of$vcmpnltsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpnltss(...) ,
#		define comma$if$operator$is$supported$of$vcmpord_spd(...) ,
#		define comma$if$operator$is$supported$of$vcmpord_sps(...) ,
#		define comma$if$operator$is$supported$of$vcmpord_ssd(...) ,
#		define comma$if$operator$is$supported$of$vcmpord_sss(...) ,
#		define comma$if$operator$is$supported$of$vcmpordpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpordps(...) ,
#		define comma$if$operator$is$supported$of$vcmpordsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpordss(...) ,
#		define comma$if$operator$is$supported$of$vcmppd(...) ,
#		define comma$if$operator$is$supported$of$vcmpps(...) ,
#		define comma$if$operator$is$supported$of$vcmpsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpss(...) ,
#		define comma$if$operator$is$supported$of$vcmptrue_uspd(...) ,
#		define comma$if$operator$is$supported$of$vcmptrue_usps(...) ,
#		define comma$if$operator$is$supported$of$vcmptrue_ussd(...) ,
#		define comma$if$operator$is$supported$of$vcmptrue_usss(...) ,
#		define comma$if$operator$is$supported$of$vcmptruepd(...) ,
#		define comma$if$operator$is$supported$of$vcmptrueps(...) ,
#		define comma$if$operator$is$supported$of$vcmptruesd(...) ,
#		define comma$if$operator$is$supported$of$vcmptruess(...) ,
#		define comma$if$operator$is$supported$of$vcmpunord_spd(...) ,
#		define comma$if$operator$is$supported$of$vcmpunord_sps(...) ,
#		define comma$if$operator$is$supported$of$vcmpunord_ssd(...) ,
#		define comma$if$operator$is$supported$of$vcmpunord_sss(...) ,
#		define comma$if$operator$is$supported$of$vcmpunordpd(...) ,
#		define comma$if$operator$is$supported$of$vcmpunordps(...) ,
#		define comma$if$operator$is$supported$of$vcmpunordsd(...) ,
#		define comma$if$operator$is$supported$of$vcmpunordss(...) ,
#		define comma$if$operator$is$supported$of$vcomisd(...) ,
#		define comma$if$operator$is$supported$of$vcomiss(...) ,
#		define comma$if$operator$is$supported$of$vcvtdq2pd(...) ,
#		define comma$if$operator$is$supported$of$vcvtdq2ps(...) ,
#		define comma$if$operator$is$supported$of$vcvtpd2dq(...) ,
#		define comma$if$operator$is$supported$of$vcvtpd2ps(...) ,
#		define comma$if$operator$is$supported$of$vcvtph2ps(...) ,
#		define comma$if$operator$is$supported$of$vcvtps2dq(...) ,
#		define comma$if$operator$is$supported$of$vcvtps2pd(...) ,
#		define comma$if$operator$is$supported$of$vcvtps2ph(...) ,
#		define comma$if$operator$is$supported$of$vcvtsd2si(...) ,
#		define comma$if$operator$is$supported$of$vcvtsd2ss(...) ,
#		define comma$if$operator$is$supported$of$vcvtsi2sd(...) ,
#		define comma$if$operator$is$supported$of$vcvtsi2ss(...) ,
#		define comma$if$operator$is$supported$of$vcvtss2sd(...) ,
#		define comma$if$operator$is$supported$of$vcvtss2si(...) ,
#		define comma$if$operator$is$supported$of$vcvttpd2dq(...) ,
#		define comma$if$operator$is$supported$of$vcvttps2dq(...) ,
#		define comma$if$operator$is$supported$of$vcvttsd2si(...) ,
#		define comma$if$operator$is$supported$of$vcvttss2si(...) ,
#		define comma$if$operator$is$supported$of$vdivpd(...) ,
#		define comma$if$operator$is$supported$of$vdivps(...) ,
#		define comma$if$operator$is$supported$of$vdivsd(...) ,
#		define comma$if$operator$is$supported$of$vdivss(...) ,
#		define comma$if$operator$is$supported$of$vdppd(...) ,
#		define comma$if$operator$is$supported$of$vdpps(...) ,
#		define comma$if$operator$is$supported$of$vextractf128(...) ,
#		define comma$if$operator$is$supported$of$vextracti128(...) ,
#		define comma$if$operator$is$supported$of$vextractps(...) ,
#		define comma$if$operator$is$supported$of$vfmadd132pd(...) ,
#		define comma$if$operator$is$supported$of$vfmadd132ps(...) ,
#		define comma$if$operator$is$supported$of$vfmadd132sd(...) ,
#		define comma$if$operator$is$supported$of$vfmadd132ss(...) ,
#		define comma$if$operator$is$supported$of$vfmadd213pd(...) ,
#		define comma$if$operator$is$supported$of$vfmadd213ps(...) ,
#		define comma$if$operator$is$supported$of$vfmadd213sd(...) ,
#		define comma$if$operator$is$supported$of$vfmadd213ss(...) ,
#		define comma$if$operator$is$supported$of$vfmadd231pd(...) ,
#		define comma$if$operator$is$supported$of$vfmadd231ps(...) ,
#		define comma$if$operator$is$supported$of$vfmadd231sd(...) ,
#		define comma$if$operator$is$supported$of$vfmadd231ss(...) ,
#		define comma$if$operator$is$supported$of$vfmaddsub132pd(...) ,
#		define comma$if$operator$is$supported$of$vfmaddsub132ps(...) ,
#		define comma$if$operator$is$supported$of$vfmaddsub213pd(...) ,
#		define comma$if$operator$is$supported$of$vfmaddsub213ps(...) ,
#		define comma$if$operator$is$supported$of$vfmaddsub231pd(...) ,
#		define comma$if$operator$is$supported$of$vfmaddsub231ps(...) ,
#		define comma$if$operator$is$supported$of$vfmsub132pd(...) ,
#		define comma$if$operator$is$supported$of$vfmsub132ps(...) ,
#		define comma$if$operator$is$supported$of$vfmsub132sd(...) ,
#		define comma$if$operator$is$supported$of$vfmsub132ss(...) ,
#		define comma$if$operator$is$supported$of$vfmsub213pd(...) ,
#		define comma$if$operator$is$supported$of$vfmsub213ps(...) ,
#		define comma$if$operator$is$supported$of$vfmsub213sd(...) ,
#		define comma$if$operator$is$supported$of$vfmsub213ss(...) ,
#		define comma$if$operator$is$supported$of$vfmsub231pd(...) ,
#		define comma$if$operator$is$supported$of$vfmsub231ps(...) ,
#		define comma$if$operator$is$supported$of$vfmsub231sd(...) ,
#		define comma$if$operator$is$supported$of$vfmsub231ss(...) ,
#		define comma$if$operator$is$supported$of$vfmsubadd132pd(...) ,
#		define comma$if$operator$is$supported$of$vfmsubadd132ps(...) ,
#		define comma$if$operator$is$supported$of$vfmsubadd213pd(...) ,
#		define comma$if$operator$is$supported$of$vfmsubadd213ps(...) ,
#		define comma$if$operator$is$supported$of$vfmsubadd231pd(...) ,
#		define comma$if$operator$is$supported$of$vfmsubadd231ps(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd132pd(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd132ps(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd132sd(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd132ss(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd213pd(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd213ps(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd213sd(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd213ss(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd231pd(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd231ps(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd231sd(...) ,
#		define comma$if$operator$is$supported$of$vfnmadd231ss(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub132pd(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub132ps(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub132sd(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub132ss(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub213pd(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub213ps(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub213sd(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub213ss(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub231pd(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub231ps(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub231sd(...) ,
#		define comma$if$operator$is$supported$of$vfnmsub231ss(...) ,
#		define comma$if$operator$is$supported$of$vgf2p8affineinvqb(...) ,
#		define comma$if$operator$is$supported$of$vgf2p8affineqb(...) ,
#		define comma$if$operator$is$supported$of$vgf2p8mulb(...) ,
#		define comma$if$operator$is$supported$of$vhaddpd(...) ,
#		define comma$if$operator$is$supported$of$vhaddps(...) ,
#		define comma$if$operator$is$supported$of$vhsubpd(...) ,
#		define comma$if$operator$is$supported$of$vhsubps(...) ,
#		define comma$if$operator$is$supported$of$vinsertf128(...) ,
#		define comma$if$operator$is$supported$of$vinserti128(...) ,
#		define comma$if$operator$is$supported$of$vinsertps(...) ,
#		define comma$if$operator$is$supported$of$vlddqu(...) ,
#		define comma$if$operator$is$supported$of$vldmxcsr(...) ,
#		define comma$if$operator$is$supported$of$vmaskmovdqu(...) ,
#		define comma$if$operator$is$supported$of$vmaskmovpd(...) ,
#		define comma$if$operator$is$supported$of$vmaskmovps(...) ,
#		define comma$if$operator$is$supported$of$vmaxpd(...) ,
#		define comma$if$operator$is$supported$of$vmaxps(...) ,
#		define comma$if$operator$is$supported$of$vmaxsd(...) ,
#		define comma$if$operator$is$supported$of$vmaxss(...) ,
#		define comma$if$operator$is$supported$of$vmcall(...) ,
#		define comma$if$operator$is$supported$of$vmclear(...) ,
#		define comma$if$operator$is$supported$of$vmfunc(...) ,
#		define comma$if$operator$is$supported$of$vminpd(...) ,
#		define comma$if$operator$is$supported$of$vminps(...) ,
#		define comma$if$operator$is$supported$of$vminsd(...) ,
#		define comma$if$operator$is$supported$of$vminss(...) ,
#		define comma$if$operator$is$supported$of$vmlaunch(...) ,
#		define comma$if$operator$is$supported$of$vmovapd(...) ,
#		define comma$if$operator$is$supported$of$vmovaps(...) ,
#		define comma$if$operator$is$supported$of$vmovd(...) ,
#		define comma$if$operator$is$supported$of$vmovddup(...) ,
#		define comma$if$operator$is$supported$of$vmovdqa(...) ,
#		define comma$if$operator$is$supported$of$vmovdqu(...) ,
#		define comma$if$operator$is$supported$of$vmovhlps(...) ,
#		define comma$if$operator$is$supported$of$vmovhpd(...) ,
#		define comma$if$operator$is$supported$of$vmovhps(...) ,
#		define comma$if$operator$is$supported$of$vmovlhps(...) ,
#		define comma$if$operator$is$supported$of$vmovlpd(...) ,
#		define comma$if$operator$is$supported$of$vmovlps(...) ,
#		define comma$if$operator$is$supported$of$vmovmskpd(...) ,
#		define comma$if$operator$is$supported$of$vmovmskps(...) ,
#		define comma$if$operator$is$supported$of$vmovntdq(...) ,
#		define comma$if$operator$is$supported$of$vmovntdqa(...) ,
#		define comma$if$operator$is$supported$of$vmovntpd(...) ,
#		define comma$if$operator$is$supported$of$vmovntps(...) ,
#		define comma$if$operator$is$supported$of$vmovq(...) ,
#		define comma$if$operator$is$supported$of$vmovsd(...) ,
#		define comma$if$operator$is$supported$of$vmovshdup(...) ,
#		define comma$if$operator$is$supported$of$vmovsldup(...) ,
#		define comma$if$operator$is$supported$of$vmovss(...) ,
#		define comma$if$operator$is$supported$of$vmovupd(...) ,
#		define comma$if$operator$is$supported$of$vmovups(...) ,
#		define comma$if$operator$is$supported$of$vmpsadbw(...) ,
#		define comma$if$operator$is$supported$of$vmptrld(...) ,
#		define comma$if$operator$is$supported$of$vmptrst(...) ,
#		define comma$if$operator$is$supported$of$vmread(...) ,
#		define comma$if$operator$is$supported$of$vmresume(...) ,
#		define comma$if$operator$is$supported$of$vmulpd(...) ,
#		define comma$if$operator$is$supported$of$vmulps(...) ,
#		define comma$if$operator$is$supported$of$vmulsd(...) ,
#		define comma$if$operator$is$supported$of$vmulss(...) ,
#		define comma$if$operator$is$supported$of$vmwrite(...) ,
#		define comma$if$operator$is$supported$of$vmxoff(...) ,
#		define comma$if$operator$is$supported$of$vmxon(...) ,
#		define comma$if$operator$is$supported$of$vorpd(...) ,
#		define comma$if$operator$is$supported$of$vorps(...) ,
#		define comma$if$operator$is$supported$of$vpabsb(...) ,
#		define comma$if$operator$is$supported$of$vpabsd(...) ,
#		define comma$if$operator$is$supported$of$vpabsw(...) ,
#		define comma$if$operator$is$supported$of$vpackssdw(...) ,
#		define comma$if$operator$is$supported$of$vpacksswb(...) ,
#		define comma$if$operator$is$supported$of$vpackusdw(...) ,
#		define comma$if$operator$is$supported$of$vpackuswb(...) ,
#		define comma$if$operator$is$supported$of$vpaddb(...) ,
#		define comma$if$operator$is$supported$of$vpaddd(...) ,
#		define comma$if$operator$is$supported$of$vpaddq(...) ,
#		define comma$if$operator$is$supported$of$vpaddsb(...) ,
#		define comma$if$operator$is$supported$of$vpaddsw(...) ,
#		define comma$if$operator$is$supported$of$vpaddusb(...) ,
#		define comma$if$operator$is$supported$of$vpaddusw(...) ,
#		define comma$if$operator$is$supported$of$vpaddw(...) ,
#		define comma$if$operator$is$supported$of$vpalignr(...) ,
#		define comma$if$operator$is$supported$of$vpand(...) ,
#		define comma$if$operator$is$supported$of$vpandn(...) ,
#		define comma$if$operator$is$supported$of$vpavgb(...) ,
#		define comma$if$operator$is$supported$of$vpavgw(...) ,
#		define comma$if$operator$is$supported$of$vpblendd(...) ,
#		define comma$if$operator$is$supported$of$vpblendvb(...) ,
#		define comma$if$operator$is$supported$of$vpblendw(...) ,
#		define comma$if$operator$is$supported$of$vpbroadcastb(...) ,
#		define comma$if$operator$is$supported$of$vpbroadcastd(...) ,
#		define comma$if$operator$is$supported$of$vpbroadcastq(...) ,
#		define comma$if$operator$is$supported$of$vpbroadcastw(...) ,
#		define comma$if$operator$is$supported$of$vpclmulqdq(...) ,
#		define comma$if$operator$is$supported$of$vpcmpeqb(...) ,
#		define comma$if$operator$is$supported$of$vpcmpeqd(...) ,
#		define comma$if$operator$is$supported$of$vpcmpeqq(...) ,
#		define comma$if$operator$is$supported$of$vpcmpeqw(...) ,
#		define comma$if$operator$is$supported$of$vpcmpestri(...) ,
#		define comma$if$operator$is$supported$of$vpcmpestrm(...) ,
#		define comma$if$operator$is$supported$of$vpcmpgtb(...) ,
#		define comma$if$operator$is$supported$of$vpcmpgtd(...) ,
#		define comma$if$operator$is$supported$of$vpcmpgtq(...) ,
#		define comma$if$operator$is$supported$of$vpcmpgtw(...) ,
#		define comma$if$operator$is$supported$of$vpcmpistri(...) ,
#		define comma$if$operator$is$supported$of$vpcmpistrm(...) ,
#		define comma$if$operator$is$supported$of$vpdpbusd(...) ,
#		define comma$if$operator$is$supported$of$vpdpbusds(...) ,
#		define comma$if$operator$is$supported$of$vpdpwssd(...) ,
#		define comma$if$operator$is$supported$of$vpdpwssds(...) ,
#		define comma$if$operator$is$supported$of$vperm2f128(...) ,
#		define comma$if$operator$is$supported$of$vperm2i128(...) ,
#		define comma$if$operator$is$supported$of$vpermd(...) ,
#		define comma$if$operator$is$supported$of$vpermilpd(...) ,
#		define comma$if$operator$is$supported$of$vpermilps(...) ,
#		define comma$if$operator$is$supported$of$vpermpd(...) ,
#		define comma$if$operator$is$supported$of$vpermps(...) ,
#		define comma$if$operator$is$supported$of$vpermq(...) ,
#		define comma$if$operator$is$supported$of$vpextrb(...) ,
#		define comma$if$operator$is$supported$of$vpextrd(...) ,
#		define comma$if$operator$is$supported$of$vpextrq(...) ,
#		define comma$if$operator$is$supported$of$vpextrw(...) ,
#		define comma$if$operator$is$supported$of$vphaddd(...) ,
#		define comma$if$operator$is$supported$of$vphaddsw(...) ,
#		define comma$if$operator$is$supported$of$vphaddw(...) ,
#		define comma$if$operator$is$supported$of$vphminposuw(...) ,
#		define comma$if$operator$is$supported$of$vphsubd(...) ,
#		define comma$if$operator$is$supported$of$vphsubsw(...) ,
#		define comma$if$operator$is$supported$of$vphsubw(...) ,
#		define comma$if$operator$is$supported$of$vpinsrb(...) ,
#		define comma$if$operator$is$supported$of$vpinsrd(...) ,
#		define comma$if$operator$is$supported$of$vpinsrq(...) ,
#		define comma$if$operator$is$supported$of$vpinsrw(...) ,
#		define comma$if$operator$is$supported$of$vpmaddubsw(...) ,
#		define comma$if$operator$is$supported$of$vpmaddwd(...) ,
#		define comma$if$operator$is$supported$of$vpmaskmovd(...) ,
#		define comma$if$operator$is$supported$of$vpmaskmovq(...) ,
#		define comma$if$operator$is$supported$of$vpmaxsb(...) ,
#		define comma$if$operator$is$supported$of$vpmaxsd(...) ,
#		define comma$if$operator$is$supported$of$vpmaxsw(...) ,
#		define comma$if$operator$is$supported$of$vpmaxub(...) ,
#		define comma$if$operator$is$supported$of$vpmaxud(...) ,
#		define comma$if$operator$is$supported$of$vpmaxuw(...) ,
#		define comma$if$operator$is$supported$of$vpminsb(...) ,
#		define comma$if$operator$is$supported$of$vpminsd(...) ,
#		define comma$if$operator$is$supported$of$vpminsw(...) ,
#		define comma$if$operator$is$supported$of$vpminub(...) ,
#		define comma$if$operator$is$supported$of$vpminud(...) ,
#		define comma$if$operator$is$supported$of$vpminuw(...) ,
#		define comma$if$operator$is$supported$of$vpmovmskb(...) ,
#		define comma$if$operator$is$supported$of$vpmovsxbd(...) ,
#		define comma$if$operator$is$supported$of$vpmovsxbq(...) ,
#		define comma$if$operator$is$supported$of$vpmovsxbw(...) ,
#		define comma$if$operator$is$supported$of$vpmovsxdq(...) ,
#		define comma$if$operator$is$supported$of$vpmovsxwd(...) ,
#		define comma$if$operator$is$supported$of$vpmovsxwq(...) ,
#		define comma$if$operator$is$supported$of$vpmovzxbd(...) ,
#		define comma$if$operator$is$supported$of$vpmovzxbq(...) ,
#		define comma$if$operator$is$supported$of$vpmovzxbw(...) ,
#		define comma$if$operator$is$supported$of$vpmovzxdq(...) ,
#		define comma$if$operator$is$supported$of$vpmovzxwd(...) ,
#		define comma$if$operator$is$supported$of$vpmovzxwq(...) ,
#		define comma$if$operator$is$supported$of$vpmuldq(...) ,
#		define comma$if$operator$is$supported$of$vpmulhrsw(...) ,
#		define comma$if$operator$is$supported$of$vpmulhuw(...) ,
#		define comma$if$operator$is$supported$of$vpmulhw(...) ,
#		define comma$if$operator$is$supported$of$vpmulld(...) ,
#		define comma$if$operator$is$supported$of$vpmullw(...) ,
#		define comma$if$operator$is$supported$of$vpmuludq(...) ,
#		define comma$if$operator$is$supported$of$vpor(...) ,
#		define comma$if$operator$is$supported$of$vpsadbw(...) ,
#		define comma$if$operator$is$supported$of$vpshufb(...) ,
#		define comma$if$operator$is$supported$of$vpshufd(...) ,
#		define comma$if$operator$is$supported$of$vpshufhw(...) ,
#		define comma$if$operator$is$supported$of$vpshuflw(...) ,
#		define comma$if$operator$is$supported$of$vpsignb(...) ,
#		define comma$if$operator$is$supported$of$vpsignd(...) ,
#		define comma$if$operator$is$supported$of$vpsignw(...) ,
#		define comma$if$operator$is$supported$of$vpslld(...) ,
#		define comma$if$operator$is$supported$of$vpslldq(...) ,
#		define comma$if$operator$is$supported$of$vpsllq(...) ,
#		define comma$if$operator$is$supported$of$vpsllvd(...) ,
#		define comma$if$operator$is$supported$of$vpsllvq(...) ,
#		define comma$if$operator$is$supported$of$vpsllw(...) ,
#		define comma$if$operator$is$supported$of$vpsrad(...) ,
#		define comma$if$operator$is$supported$of$vpsravd(...) ,
#		define comma$if$operator$is$supported$of$vpsraw(...) ,
#		define comma$if$operator$is$supported$of$vpsrld(...) ,
#		define comma$if$operator$is$supported$of$vpsrldq(...) ,
#		define comma$if$operator$is$supported$of$vpsrlq(...) ,
#		define comma$if$operator$is$supported$of$vpsrlvd(...) ,
#		define comma$if$operator$is$supported$of$vpsrlvq(...) ,
#		define comma$if$operator$is$supported$of$vpsrlw(...) ,
#		define comma$if$operator$is$supported$of$vpsubb(...) ,
#		define comma$if$operator$is$supported$of$vpsubd(...) ,
#		define comma$if$operator$is$supported$of$vpsubq(...) ,
#		define comma$if$operator$is$supported$of$vpsubsb(...) ,
#		define comma$if$operator$is$supported$of$vpsubsw(...) ,
#		define comma$if$operator$is$supported$of$vpsubusb(...) ,
#		define comma$if$operator$is$supported$of$vpsubusw(...) ,
#		define comma$if$operator$is$supported$of$vpsubw(...) ,
#		define comma$if$operator$is$supported$of$vptest(...) ,
#		define comma$if$operator$is$supported$of$vpunpckhbw(...) ,
#		define comma$if$operator$is$supported$of$vpunpckhdq(...) ,
#		define comma$if$operator$is$supported$of$vpunpckhqdq(...) ,
#		define comma$if$operator$is$supported$of$vpunpckhwd(...) ,
#		define comma$if$operator$is$supported$of$vpunpcklbw(...) ,
#		define comma$if$operator$is$supported$of$vpunpckldq(...) ,
#		define comma$if$operator$is$supported$of$vpunpcklqdq(...) ,
#		define comma$if$operator$is$supported$of$vpunpcklwd(...) ,
#		define comma$if$operator$is$supported$of$vpxor(...) ,
#		define comma$if$operator$is$supported$of$vrcpps(...) ,
#		define comma$if$operator$is$supported$of$vrcpss(...) ,
#		define comma$if$operator$is$supported$of$vroundpd(...) ,
#		define comma$if$operator$is$supported$of$vroundps(...) ,
#		define comma$if$operator$is$supported$of$vroundsd(...) ,
#		define comma$if$operator$is$supported$of$vroundss(...) ,
#		define comma$if$operator$is$supported$of$vrsqrtps(...) ,
#		define comma$if$operator$is$supported$of$vrsqrtss(...) ,
#		define comma$if$operator$is$supported$of$vshufpd(...) ,
#		define comma$if$operator$is$supported$of$vshufps(...) ,
#		define comma$if$operator$is$supported$of$vsqrtpd(...) ,
#		define comma$if$operator$is$supported$of$vsqrtps(...) ,
#		define comma$if$operator$is$supported$of$vsqrtsd(...) ,
#		define comma$if$operator$is$supported$of$vsqrtss(...) ,
#		define comma$if$operator$is$supported$of$vstmxcsr(...) ,
#		define comma$if$operator$is$supported$of$vsubpd(...) ,
#		define comma$if$operator$is$supported$of$vsubps(...) ,
#		define comma$if$operator$is$supported$of$vsubsd(...) ,
#		define comma$if$operator$is$supported$of$vsubss(...) ,
#		define comma$if$operator$is$supported$of$vtestpd(...) ,
#		define comma$if$operator$is$supported$of$vtestps(...) ,
#		define comma$if$operator$is$supported$of$vucomisd(...) ,
#		define comma$if$operator$is$supported$of$vucomiss(...) ,
#		define comma$if$operator$is$supported$of$vunpckhpd(...) ,
#		define comma$if$operator$is$supported$of$vunpckhps(...) ,
#		define comma$if$operator$is$supported$of$vunpcklpd(...) ,
#		define comma$if$operator$is$supported$of$vunpcklps(...) ,
#		define comma$if$operator$is$supported$of$vxorpd(...) ,
#		define comma$if$operator$is$supported$of$vxorps(...) ,
#		define comma$if$operator$is$supported$of$vzeroall(...) ,
#		define comma$if$operator$is$supported$of$vzeroupper(...) ,
#		define comma$if$operator$is$supported$of$wait(...) ,
#		define comma$if$operator$is$supported$of$wbinvd(...) ,
#		define comma$if$operator$is$supported$of$wbnoinvd(...) ,
#		define comma$if$operator$is$supported$of$wrfsbase(...) ,
#		define comma$if$operator$is$supported$of$wrgsbase(...) ,
#		define comma$if$operator$is$supported$of$wrmsr(...) ,
#		define comma$if$operator$is$supported$of$wrpkru(...) ,
#		define comma$if$operator$is$supported$of$wrssd(...) ,
#		define comma$if$operator$is$supported$of$wrssq(...) ,
#		define comma$if$operator$is$supported$of$wrussd(...) ,
#		define comma$if$operator$is$supported$of$wrussq(...) ,
#		define comma$if$operator$is$supported$of$xabort(...) ,
#		define comma$if$operator$is$supported$of$xacquire(...) ,
#		define comma$if$operator$is$supported$of$xadd(...) ,
#		define comma$if$operator$is$supported$of$xbegin(...) ,
#		define comma$if$operator$is$supported$of$xchg(...) ,
#		define comma$if$operator$is$supported$of$xend(...) ,
#		define comma$if$operator$is$supported$of$xgetbv(...) ,
#		define comma$if$operator$is$supported$of$xlatb(...) ,
#		define comma$if$operator$is$supported$of$xor(...) ,
#		define comma$if$operator$is$supported$of$xorpd(...) ,
#		define comma$if$operator$is$supported$of$xorps(...) ,
#		define comma$if$operator$is$supported$of$xrelease(...) ,
#		define comma$if$operator$is$supported$of$xrstor(...) ,
#		define comma$if$operator$is$supported$of$xrstor64(...) ,
#		define comma$if$operator$is$supported$of$xrstors(...) ,
#		define comma$if$operator$is$supported$of$xrstors64(...) ,
#		define comma$if$operator$is$supported$of$xsave(...) ,
#		define comma$if$operator$is$supported$of$xsave64(...) ,
#		define comma$if$operator$is$supported$of$xsavec(...) ,
#		define comma$if$operator$is$supported$of$xsavec64(...) ,
#		define comma$if$operator$is$supported$of$xsaveopt(...) ,
#		define comma$if$operator$is$supported$of$xsaveopt64(...) ,
#		define comma$if$operator$is$supported$of$xsaves(...) ,
#		define comma$if$operator$is$supported$of$xsaves64(...) ,
#		define comma$if$operator$is$supported$of$xsetbv(...) ,
#		define comma$if$operator$is$supported$of$xtest(...) ,
#		define count(...) count$1(__VA_ARGS__)
#		define count$1(...) count$2(__VA_ARGS__)
#		define count$2(...) count$3(_, ##__VA_ARGS__, ff,fe,fd,fc,fb,fa,f9,f8,f7,f6,f5,f4,f3,f2,f1,f0,ef,ee,ed,ec,eb,ea,e9,e8,e7,e6,e5,e4,e3,e2,e1,e0,df,de,dd,dc,db,da,d9,d8,d7,d6,d5,d4,d3,d2,d1,d0,cf,ce,cd,cc,cb,ca,c9,c8,c7,c6,c5,c4,c3,c2,c1,c0,bf,be,bd,bc,bb,ba,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0,af,ae,ad,ac,ab,aa,a9,a8,a7,a6,a5,a4,a3,a2,a1,a0,9f,9e,9d,9c,9b,9a,99,98,97,96,95,94,93,92,91,90,8f,8e,8d,8c,8b,8a,89,88,87,86,85,84,83,82,81,80,7f,7e,7d,7c,7b,7a,79,78,77,76,75,74,73,72,71,70,6f,6e,6d,6c,6b,6a,69,68,67,66,65,64,63,62,61,60,5f,5e,5d,5c,5b,5a,59,58,57,56,55,54,53,52,51,50,4f,4e,4d,4c,4b,4a,49,48,47,46,45,44,43,42,41,40,3f,3e,3d,3c,3b,3a,39,38,37,36,35,34,33,32,31,30,2f,2e,2d,2c,2b,2a,29,28,27,26,25,24,23,22,21,20,1f,1e,1d,1c,1b,1a,19,18,17,16,15,14,13,12,11,10,0f,0e,0d,0c,0b,0a,09,08,07,06,05,04,03,02,01,00)
#		define count$3(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250,_251,_252,_253,_254,_255,_n,...) _n
#		define countbytes(...) countbytes$1(isbytes(__VA_ARGS__), __VA_ARGS__)
#		define countbytes$1(...) countbytes$2(__VA_ARGS__)
#		define countbytes$2(c, ...) countbytes$valid##c(__VA_ARGS__)
#		define countbytes$valid0(...) 00
#		define countbytes$valid1(b) countbytes$with$##b
#		define countbytes$with$bytes(...) count(__VA_ARGS__)
#		define cr0 creg(CR0)
#		define cr1 creg(CR1)
#		define cr2 creg(CR2)
#		define cr3 creg(CR3)
#		define cr4 creg(CR4)
#		define cr5 creg(CR5)
#		define cr6 creg(CR6)
#		define cr7 creg(CR7)
#		define cs segm(CS)
#		define cx reg16(CX)
#		define dh reg08(DH)
#		define di reg16(DI)
#		define dil reg08(DIL)
#		define dl reg08(DL)
#		define doscan$using$code(state, code) doscan$using$code$1(state, isbytes(code), i08$fromhex(countbytes(code)))
#		define doscan$using$code$1(...) doscan$using$code$2(__VA_ARGS__)
#		define doscan$using$code$2(state, check, ...) doscan$using$code$valid##check(state, __VA_ARGS__)
#		define doscan$using$code$valid0(state, ...) state error$if(1, "invalid operator/operand-type combination")
#		define doscan$using$code$valid1(state, b7,b6,b5,b4,b3,b2,b1,b0) state$add$offset(state, i08$zx32(b7,b6,b5,b4,b3,b2,b1,b0))
#		define dr0 dreg(DR0)
#		define dr1 dreg(DR1)
#		define dr2 dreg(DR2)
#		define dr3 dreg(DR3)
#		define dr4 dreg(DR4)
#		define dr5 dreg(DR5)
#		define dr6 dreg(DR6)
#		define dr7 dreg(DR7)
#		define ds segm(DS)
#		define dword bits(32)
#		define dx reg16(DX)
#		define eax reg32(EAX)
#		define ebp reg32(EBP)
#		define ebx reg32(EBX)
#		define ecx reg32(ECX)
#		define edi reg32(EDI)
#		define edx reg32(EDX)
#		define error$if(...) error$if$1(__VA_ARGS__)
#		define error$if$1(...) error$if$2(__VA_ARGS__)
#		define error$if$2(c, m) error$if$3(pragma$if$cond##c, m)
#		define error$if$3(...) error$if$4(__VA_ARGS__)
#		define error$if$4(p, m) p(GCC error m)
#		define es segm(ES)
#		define esi reg32(ESI)
#		define esp reg32(ESP)
#		define formatbytes(...) formatbytes$1(isbytes(__VA_ARGS__), __VA_ARGS__)
#		define formatbytes$1(...) formatbytes$2(__VA_ARGS__)
#		define formatbytes$2(c, ...) formatbytes$valid##c(__VA_ARGS__)
#		define formatbytes$valid0(b)
#		define formatbytes$valid1(b) formatbytes$with$##b
#		define formatbytes$with$bytes(...) bytes$all$as(byte$as$0xff, ##__VA_ARGS__)
#		define fpreg80$is$st0(reg) byte$eq(0,0,0,0,0,0,0,0,byte$fromhex(regencode(reg)))
#		define fs segm(FS)
#		define gs segm(GS)
#		define i08$add(...) byte$add$removeflags(i08$add$1(0, __VA_ARGS__))
#		define i08$add$0(...) i08$add$1(__VA_ARGS__)
#		define i08$add$1(...) i08$add$2(__VA_ARGS__)
#		define i08$add$2(c, B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0, B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0) byte$addo(c, B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0, B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0)
#		define i08$and(...) i08$bit2op(byte$and,__VA_ARGS__)
#		define i08$bit1op(...) i08$bit1op$1(__VA_ARGS__)
#		define i08$bit1op$1(...) i08$bit1op$2(__VA_ARGS__)
#		define i08$bit1op$2(op,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i08$bit2op(...) i08$bit2op$1(__VA_ARGS__)
#		define i08$bit2op$1(...) i08$bit2op$2(__VA_ARGS__)
#		define i08$bit2op$2(op,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i08$bytes$be(...) i08$tohex(byte$as$ff,byte$join$comma,__VA_ARGS__)
#		define i08$bytes$le(...) i08$bytes$le$1(__VA_ARGS__)
#		define i08$bytes$le$1(...) i08$bytes$le$2(__VA_ARGS__)
#		define i08$bytes$le$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$tohex(byte$as$ff,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i08$cmp(...) i08$cmp$1(__VA_ARGS__)
#		define i08$cmp$1(...) i08$cmp$2(__VA_ARGS__)
#		define i08$cmp$2(...) i08$cmp$3(i08$sub$0(__VA_ARGS__))
#		define i08$cmp$3(...) i08$cmp$4(__VA_ARGS__)
#		define i08$cmp$4(c,o,s,...) i08$cmp$5(c,o,s,i08$iszero(s,__VA_ARGS__))
#		define i08$cmp$5(...) i08$cmp$6(__VA_ARGS__)
#		define i08$cmp$6(c,o,s,z) c,o,s,z
#		define i08$fromhex(...) i08$fromhex$1(__VA_ARGS__)
#		define i08$fromhex$1(...) i08$fromhex$2(__VA_ARGS__)
#		define i08$fromhex$2(h0) byte$fromhex(h0)
#		define i08$getbyte(...) i08$getbyte$1(__VA_ARGS__)
#		define i08$getbyte$1(...) i08$getbyte$2(__VA_ARGS__)
#		define i08$getbyte$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0,...) i08$getbyte$byte##B0b7##B0b6##B0b5##B0b4##B0b3##B0b2##B0b1##B0b0(__VA_ARGS__)
#		define i08$getbyte$byte00000000(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$inv(...) i08$bit1op(byte$inv,__VA_ARGS__)
#		define i08$isa(...) cmp$call(cmp$isa, i08$cmp(__VA_ARGS__))
#		define i08$isae(...) cmp$call(cmp$isae, i08$cmp(__VA_ARGS__))
#		define i08$isb(...) cmp$call(cmp$isb, i08$cmp(__VA_ARGS__))
#		define i08$isbe(...) cmp$call(cmp$isbe, i08$cmp(__VA_ARGS__))
#		define i08$iseq(...) i08$iszero(i08$xor(__VA_ARGS__))
#		define i08$isge(...) cmp$call(cmp$isge, i08$cmp(__VA_ARGS__))
#		define i08$isgt(...) cmp$call(cmp$isg, i08$cmp(__VA_ARGS__))
#		define i08$isle(...) cmp$call(cmp$isle, i08$cmp(__VA_ARGS__))
#		define i08$islt(...) cmp$call(cmp$isl, i08$cmp(__VA_ARGS__))
#		define i08$isneg(...) i08$isneg$1(__VA_ARGS__)
#		define i08$isneg$1(...) i08$isneg$2(__VA_ARGS__)
#		define i08$isneg$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7
#		define i08$isnegorzero(...) bit$or(i08$iszero(__VA_ARGS__),i08$isneg(__VA_ARGS__))
#		define i08$isneq(...) i08$isnonzero(i08$xor(__VA_ARGS__))
#		define i08$isnonzero(...) i08$isnonzero$1(__VA_ARGS__)
#		define i08$isnonzero$1(...) i08$isnonzero$2(__VA_ARGS__)
#		define i08$isnonzero$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$any(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i08$ispos(...) bit$and(i08$isposorzero(__VA_ARGS__),i08$isnonzero(__VA_ARGS__))
#		define i08$isposorzero(...) i08$isposorzero$1(__VA_ARGS__)
#		define i08$isposorzero$1(...) i08$isposorzero$2(__VA_ARGS__)
#		define i08$isposorzero$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$not(B0b7)
#		define i08$iszero(...) i08$iszero$1(__VA_ARGS__)
#		define i08$iszero$1(...) i08$iszero$2(__VA_ARGS__)
#		define i08$iszero$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$iszero(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i08$neg(...) i08$neg$1(__VA_ARGS__)
#		define i08$neg$1(...) i08$neg$2(__VA_ARGS__)
#		define i08$neg$2(...) i08$add(i08$inv(__VA_ARGS__), i08$one)
#		define i08$one 0,0,0,0,0,0,0,1
#		define i08$or(...) i08$bit2op(byte$or,__VA_ARGS__)
#		define i08$smax 0,1,1,1,1,1,1,1
#		define i08$smin 1,0,0,0,0,0,0,0
#		define i08$sub(...) byte$add$removeflags(i08$sub$1(__VA_ARGS__))
#		define i08$sub$0(...) i08$sub$1(__VA_ARGS__)
#		define i08$sub$1(...) i08$sub$2(__VA_ARGS__)
#		define i08$sub$2(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) i08$add$0(1, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, i08$bit1op(byte$inv, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i08$sx08(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$sx16(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat8(B0b7), B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$sx32(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat16(B0b7), repeat8(B0b7), B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$sx64(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat32(B0b7), repeat16(B0b7), repeat8(B0b7), B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$tohex(...) i08$tohex$1(__VA_ARGS__)
#		define i08$tohex$1(...) i08$tohex$2(__VA_ARGS__)
#		define i08$tohex$2(p,j,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$tohex(p, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i08$umax repeat8(1)
#		define i08$xor(...) i08$bit2op(byte$xor,__VA_ARGS__)
#		define i08$zero repeat8(0)
#		define i08$zx08(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$zx16(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat8(0), B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$zx32(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat16(0), repeat8(0), B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i08$zx64(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat32(0), repeat16(0), repeat32(0), B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i16$add(...) byte$add$removeflags(i16$add$1(0, __VA_ARGS__))
#		define i16$add$0(...) i16$add$1(__VA_ARGS__)
#		define i16$add$1(...) i16$add$2(__VA_ARGS__)
#		define i16$add$2(c, B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0, B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0) i16$add$3(byte$add(c, B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0, B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0), B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0)
#		define i16$add$3(...) i16$add$4(__VA_ARGS__)
#		define i16$add$4(c, B20b7, B20b6, B20b5, B20b4, B20b3, B20b2, B20b1, B20b0, B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0) byte$addo(c, B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0), B20b7, B20b6, B20b5, B20b4, B20b3, B20b2, B20b1, B20b0
#		define i16$and(...) i16$bit2op(byte$and,__VA_ARGS__)
#		define i16$bit1op(...) i16$bit1op$1(__VA_ARGS__)
#		define i16$bit1op$1(...) i16$bit1op$2(__VA_ARGS__)
#		define i16$bit1op$2(op,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), op(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i16$bit2op(...) i16$bit2op$1(__VA_ARGS__)
#		define i16$bit2op$1(...) i16$bit2op$2(__VA_ARGS__)
#		define i16$bit2op$2(op,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), op(B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i16$bytes$be(...) i16$tohex(byte$as$ff,byte$join$comma,__VA_ARGS__)
#		define i16$bytes$le(...) i16$bytes$le$1(__VA_ARGS__)
#		define i16$bytes$le$1(...) i16$bytes$le$2(__VA_ARGS__)
#		define i16$bytes$le$2(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$tohex(byte$as$ff,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0), byte$tohex(byte$as$ff,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0)
#		define i16$cmp(...) i16$cmp$1(__VA_ARGS__)
#		define i16$cmp$1(...) i16$cmp$2(__VA_ARGS__)
#		define i16$cmp$2(...) i16$cmp$3(i16$sub$0(__VA_ARGS__))
#		define i16$cmp$3(...) i16$cmp$4(__VA_ARGS__)
#		define i16$cmp$4(c,o,s,...) i16$cmp$5(c,o,s,i16$iszero(s,__VA_ARGS__))
#		define i16$cmp$5(...) i16$cmp$6(__VA_ARGS__)
#		define i16$cmp$6(c,o,s,z) c,o,s,z
#		define i16$fromhex(...) i16$fromhex$1(__VA_ARGS__)
#		define i16$fromhex$1(...) i16$fromhex$2(__VA_ARGS__)
#		define i16$fromhex$2(h1,h0) byte$fromhex(h1), byte$fromhex(h0)
#		define i16$getbyte(...) i16$getbyte$1(__VA_ARGS__)
#		define i16$getbyte$1(...) i16$getbyte$2(__VA_ARGS__)
#		define i16$getbyte$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0,...) i16$getbyte$byte##B0b7##B0b6##B0b5##B0b4##B0b3##B0b2##B0b1##B0b0(__VA_ARGS__)
#		define i16$getbyte$byte00000000(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i16$getbyte$byte00000001(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0
#		define i16$inv(...) i16$bit1op(byte$inv,__VA_ARGS__)
#		define i16$isa(...) cmp$call(cmp$isa, i16$cmp(__VA_ARGS__))
#		define i16$isae(...) cmp$call(cmp$isae, i16$cmp(__VA_ARGS__))
#		define i16$isb(...) cmp$call(cmp$isb, i16$cmp(__VA_ARGS__))
#		define i16$isbe(...) cmp$call(cmp$isbe, i16$cmp(__VA_ARGS__))
#		define i16$iseq(...) i16$iszero(i16$xor(__VA_ARGS__))
#		define i16$isge(...) cmp$call(cmp$isge, i16$cmp(__VA_ARGS__))
#		define i16$isgt(...) cmp$call(cmp$isg, i16$cmp(__VA_ARGS__))
#		define i16$isle(...) cmp$call(cmp$isle, i16$cmp(__VA_ARGS__))
#		define i16$islt(...) cmp$call(cmp$isl, i16$cmp(__VA_ARGS__))
#		define i16$isneg(...) i16$isneg$1(__VA_ARGS__)
#		define i16$isneg$1(...) i16$isneg$2(__VA_ARGS__)
#		define i16$isneg$2(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7
#		define i16$isnegorzero(...) bit$or(i16$iszero(__VA_ARGS__),i16$isneg(__VA_ARGS__))
#		define i16$isneq(...) i16$isnonzero(i16$xor(__VA_ARGS__))
#		define i16$isnonzero(...) i16$isnonzero$1(__VA_ARGS__)
#		define i16$isnonzero$1(...) i16$isnonzero$2(__VA_ARGS__)
#		define i16$isnonzero$2(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$any2(i16$bit1op(byte$any,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i16$ispos(...) bit$and(i16$isposorzero(__VA_ARGS__),i16$isnonzero(__VA_ARGS__))
#		define i16$isposorzero(...) i16$isposorzero$1(__VA_ARGS__)
#		define i16$isposorzero$1(...) i16$isposorzero$2(__VA_ARGS__)
#		define i16$isposorzero$2(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$not(B1b7)
#		define i16$iszero(...) i16$iszero$1(__VA_ARGS__)
#		define i16$iszero$1(...) i16$iszero$2(__VA_ARGS__)
#		define i16$iszero$2(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$all2(i16$bit1op(byte$iszero,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i16$neg(...) i16$neg$1(__VA_ARGS__)
#		define i16$neg$1(...) i16$neg$2(__VA_ARGS__)
#		define i16$neg$2(...) i16$add(i16$inv(__VA_ARGS__), i16$one)
#		define i16$one repeat8(0),i08$one
#		define i16$or(...) i16$bit2op(byte$or,__VA_ARGS__)
#		define i16$smax i08$smax, repeat8(1)
#		define i16$smin i08$smin, repeat8(0)
#		define i16$sub(...) byte$add$removeflags(i16$sub$1(__VA_ARGS__))
#		define i16$sub$0(...) i16$sub$1(__VA_ARGS__)
#		define i16$sub$1(...) i16$sub$2(__VA_ARGS__)
#		define i16$sub$2(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) i16$add$0(1, B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0, i16$bit1op(byte$inv, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i16$sx16(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0
#		define i16$sx32(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat16(B1b7), B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i16$sx64(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat32(B1b7), repeat16(B1b7), B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i16$to08(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i16$tohex(...) i16$tohex$1(__VA_ARGS__)
#		define i16$tohex$1(...) i16$tohex$2(__VA_ARGS__)
#		define i16$tohex$2(p,j,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) j(byte$tohex(p, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), byte$tohex(p, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i16$umax repeat16(1)
#		define i16$xor(...) i16$bit2op(byte$xor,__VA_ARGS__)
#		define i16$zero repeat16(0)
#		define i16$zx16(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0
#		define i16$zx32(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat16(0), B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0
#		define i16$zx64(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat32(0), repeat16(0), B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i32$add(...) byte$add$removeflags(i32$add$1(0, __VA_ARGS__))
#		define i32$add$0(...) i32$add$1(__VA_ARGS__)
#		define i32$add$1(...) i32$add$2(__VA_ARGS__)
#		define i32$add$2(c, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0,B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0,B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0,B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0,B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0,B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0,B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0,B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0) i32$add$3(byte$add(c, B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0, B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0), B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0, B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0, B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0)
#		define i32$add$3(...) i32$add$4(__VA_ARGS__)
#		define i32$add$4(c, B20b7, B20b6, B20b5, B20b4, B20b3, B20b2, B20b1, B20b0, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0, B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0, B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0) i32$add$5(byte$add(c, B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0), B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0, B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0), B20b7, B20b6, B20b5, B20b4, B20b3, B20b2, B20b1, B20b0
#		define i32$add$5(...) i32$add$6(__VA_ARGS__)
#		define i32$add$6(c, B21b7, B21b6, B21b5, B21b4, B21b3, B21b2, B21b1, B21b0, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0, B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0) i32$add$7(byte$add(c, B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0, B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0), B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0), B21b7, B21b6, B21b5, B21b4, B21b3, B21b2, B21b1, B21b0
#		define i32$add$7(...) i32$add$8(__VA_ARGS__)
#		define i32$add$8(c, B22b7, B22b6, B22b5, B22b4, B22b3, B22b2, B22b1, B22b0, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0) byte$addo(c, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0), B22b7, B22b6, B22b5, B22b4, B22b3, B22b2, B22b1, B22b0
#		define i32$and(...) i32$bit2op(byte$and,__VA_ARGS__)
#		define i32$bit1op(...) i32$bit1op$1(__VA_ARGS__)
#		define i32$bit1op$1(...) i32$bit1op$2(__VA_ARGS__)
#		define i32$bit1op$2(op,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0), op(B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), op(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), op(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i32$bit2op(...) i32$bit2op$1(__VA_ARGS__)
#		define i32$bit2op$1(...) i32$bit2op$2(__VA_ARGS__)
#		define i32$bit2op$2(op,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0, B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0), op(B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), op(B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), op(B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i32$bytes$be(...) i32$tohex(byte$as$ff,byte$join$comma,__VA_ARGS__)
#		define i32$bytes$le(...) i32$bytes$le$1(__VA_ARGS__)
#		define i32$bytes$le$1(...) i32$bytes$le$2(__VA_ARGS__)
#		define i32$bytes$le$2(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$tohex(byte$as$ff,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0), byte$tohex(byte$as$ff,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), byte$tohex(byte$as$ff,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), byte$tohex(byte$as$ff,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0)
#		define i32$cmp(...) i32$cmp$1(__VA_ARGS__)
#		define i32$cmp$1(...) i32$cmp$2(__VA_ARGS__)
#		define i32$cmp$2(...) i32$cmp$3(i32$sub$0(__VA_ARGS__))
#		define i32$cmp$3(...) i32$cmp$4(__VA_ARGS__)
#		define i32$cmp$4(c,o,s,...) i32$cmp$5(c,o,s,i32$iszero(s,__VA_ARGS__))
#		define i32$cmp$5(...) i32$cmp$6(__VA_ARGS__)
#		define i32$cmp$6(c,o,s,z) c,o,s,z
#		define i32$fromhex(...) i32$fromhex$1(__VA_ARGS__)
#		define i32$fromhex$1(...) i32$fromhex$2(__VA_ARGS__)
#		define i32$fromhex$2(h3,h2,h1,h0) byte$fromhex(h3), byte$fromhex(h2), byte$fromhex(h1), byte$fromhex(h0)
#		define i32$getbyte(...) i32$getbyte$1(__VA_ARGS__)
#		define i32$getbyte$1(...) i32$getbyte$2(__VA_ARGS__)
#		define i32$getbyte$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0,...) i32$getbyte$byte##B0b7##B0b6##B0b5##B0b4##B0b3##B0b2##B0b1##B0b0(__VA_ARGS__)
#		define i32$getbyte$byte00000000(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i32$getbyte$byte00000001(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0
#		define i32$getbyte$byte00000010(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0
#		define i32$getbyte$byte00000011(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0
#		define i32$inv(...) i32$bit1op(byte$inv,__VA_ARGS__)
#		define i32$isa(...) cmp$call(cmp$isa, i32$cmp(__VA_ARGS__))
#		define i32$isae(...) cmp$call(cmp$isae, i32$cmp(__VA_ARGS__))
#		define i32$isb(...) cmp$call(cmp$isb, i32$cmp(__VA_ARGS__))
#		define i32$isbe(...) cmp$call(cmp$isbe, i32$cmp(__VA_ARGS__))
#		define i32$iseq(...) i32$iszero(i32$xor(__VA_ARGS__))
#		define i32$isge(...) cmp$call(cmp$isge, i32$cmp(__VA_ARGS__))
#		define i32$isgt(...) cmp$call(cmp$isg, i32$cmp(__VA_ARGS__))
#		define i32$isle(...) cmp$call(cmp$isle, i32$cmp(__VA_ARGS__))
#		define i32$islt(...) cmp$call(cmp$isl, i32$cmp(__VA_ARGS__))
#		define i32$isneg(...) i32$isneg$1(__VA_ARGS__)
#		define i32$isneg$1(...) i32$isneg$2(__VA_ARGS__)
#		define i32$isneg$2(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B3b7
#		define i32$isnegorzero(...) bit$or(i32$iszero(__VA_ARGS__),i32$isneg(__VA_ARGS__))
#		define i32$isneq(...) i32$isnonzero(i32$xor(__VA_ARGS__))
#		define i32$isnonzero(...) i32$isnonzero$1(__VA_ARGS__)
#		define i32$isnonzero$1(...) i32$isnonzero$2(__VA_ARGS__)
#		define i32$isnonzero$2(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$any4(i32$bit1op(byte$any,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i32$ispos(...) bit$and(i32$isposorzero(__VA_ARGS__),i32$isnonzero(__VA_ARGS__))
#		define i32$isposorzero(...) i32$isposorzero$1(__VA_ARGS__)
#		define i32$isposorzero$1(...) i32$isposorzero$2(__VA_ARGS__)
#		define i32$isposorzero$2(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$not(B3b7)
#		define i32$iszero(...) i32$iszero$1(__VA_ARGS__)
#		define i32$iszero$1(...) i32$iszero$2(__VA_ARGS__)
#		define i32$iszero$2(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$all4(i32$bit1op(byte$iszero,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i32$neg(...) i32$neg$1(__VA_ARGS__)
#		define i32$neg$1(...) i32$neg$2(__VA_ARGS__)
#		define i32$neg$2(...) i32$add(i32$inv(__VA_ARGS__), i32$one)
#		define i32$one repeat16(0),i16$one
#		define i32$or(...) i32$bit2op(byte$or,__VA_ARGS__)
#		define i32$smax i16$smax, repeat16(1)
#		define i32$smin i16$smin, repeat16(0)
#		define i32$sub(...) byte$add$removeflags(i32$sub$1(__VA_ARGS__))
#		define i32$sub$0(...) i32$sub$1(__VA_ARGS__)
#		define i32$sub$1(...) i32$sub$2(__VA_ARGS__)
#		define i32$sub$2(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) i32$add$0(1, B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0, i32$bit1op(byte$inv, B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i32$sx32(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i32$sx64(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat32(B3b7), B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i32$to08(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i32$to16(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i32$tohex(...) i32$tohex$1(__VA_ARGS__)
#		define i32$tohex$1(...) i32$tohex$2(__VA_ARGS__)
#		define i32$tohex$2(p,j,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) j(byte$tohex(p, B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0), j(byte$tohex(p, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), j(byte$tohex(p, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), byte$tohex(p, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))))
#		define i32$umax repeat32(1)
#		define i32$xor(...) i32$bit2op(byte$xor,__VA_ARGS__)
#		define i32$zero repeat32(0)
#		define i32$zx32(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i32$zx64(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) repeat32(0), B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i64$add(...) byte$add$removeflags(i64$add$1(0, __VA_ARGS__))
#		define i64$add$0(...) i64$add$1(__VA_ARGS__)
#		define i64$add$1(...) i64$add$2(__VA_ARGS__)
#		define i64$add$2(c, B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0,B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0,B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0,B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0,B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0,B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0,B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0,B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0,B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0,B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0,B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0,B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0) i64$add$3(byte$add(c, B10b7, B10b6, B10b5, B10b4, B10b3, B10b2, B10b1, B10b0, B00b7, B00b6, B00b5, B00b4, B00b3, B00b2, B00b1, B00b0), B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0, B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0, B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0, B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0, B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0, B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0, B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0, B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0, B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0, B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0, B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0)
#		define i64$add$3(...) i64$add$4(__VA_ARGS__)
#		define i64$add$4(c, B20b7, B20b6, B20b5, B20b4, B20b3, B20b2, B20b1, B20b0,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0,B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0,B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0,B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0,B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0,B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0,B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0,B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0,B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0,B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0) i64$add$5(byte$add(c,B11b7, B11b6, B11b5, B11b4, B11b3, B11b2, B11b1, B11b0,B01b7, B01b6, B01b5, B01b4, B01b3, B01b2, B01b1, B01b0), B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0, B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0, B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0, B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0, B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0, B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0, B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0, B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0, B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0), B20b7, B20b6, B20b5, B20b4, B20b3, B20b2, B20b1, B20b0
#		define i64$add$5(...) i64$add$6(__VA_ARGS__)
#		define i64$add$6(c, B21b7, B21b6, B21b5, B21b4, B21b3, B21b2, B21b1, B21b0,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0,B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0,B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0,B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0,B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0,B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0,B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0,B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0) i64$add$7(byte$add(c,B12b7, B12b6, B12b5, B12b4, B12b3, B12b2, B12b1, B12b0,B02b7, B02b6, B02b5, B02b4, B02b3, B02b2, B02b1, B02b0), B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0, B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0, B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0, B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0, B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0, B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0, B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0, B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0, B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0, B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0), B21b7, B21b6, B21b5, B21b4, B21b3, B21b2, B21b1, B21b0
#		define i64$add$7(...) i64$add$8(__VA_ARGS__)
#		define i64$add$8(c, B22b7, B22b6, B22b5, B22b4, B22b3, B22b2, B22b1, B22b0,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0,B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0,B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0,B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0,B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0,B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0) i64$add$9(byte$add(c,B13b7, B13b6, B13b5, B13b4, B13b3, B13b2, B13b1, B13b0,B03b7, B03b6, B03b5, B03b4, B03b3, B03b2, B03b1, B03b0), B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0, B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0, B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0, B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0, B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0, B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0, B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0, B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0), B22b7, B22b6, B22b5, B22b4, B22b3, B22b2, B22b1, B22b0
#		define i64$add$9(...) i64$add$A(__VA_ARGS__)
#		define i64$add$A(c, B23b7, B23b6, B23b5, B23b4, B23b3, B23b2, B23b1, B23b0,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0,B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0,B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0,B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0) i64$add$B(byte$add(c,B14b7, B14b6, B14b5, B14b4, B14b3, B14b2, B14b1, B14b0,B04b7, B04b6, B04b5, B04b4, B04b3, B04b2, B04b1, B04b0), B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0, B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0, B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0, B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0, B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0, B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0), B23b7, B23b6, B23b5, B23b4, B23b3, B23b2, B23b1, B23b0
#		define i64$add$B(...) i64$add$C(__VA_ARGS__)
#		define i64$add$C(c, B24b7, B24b6, B24b5, B24b4, B24b3, B24b2, B24b1, B24b0,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0,B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0) i64$add$D(byte$add(c,B15b7, B15b6, B15b5, B15b4, B15b3, B15b2, B15b1, B15b0,B05b7, B05b6, B05b5, B05b4, B05b3, B05b2, B05b1, B05b0), B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0, B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0, B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0, B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0), B24b7, B24b6, B24b5, B24b4, B24b3, B24b2, B24b1, B24b0
#		define i64$add$D(...) i64$add$E(__VA_ARGS__)
#		define i64$add$E(c, B25b7, B25b6, B25b5, B25b4, B25b3, B25b2, B25b1, B25b0,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0) i64$add$F(byte$add(c,B16b7, B16b6, B16b5, B16b4, B16b3, B16b2, B16b1, B16b0,B06b7, B06b6, B06b5, B06b4, B06b3, B06b2, B06b1, B06b0), B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0, B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0), B25b7, B25b6, B25b5, B25b4, B25b3, B25b2, B25b1, B25b0
#		define i64$add$F(...) i64$add$G(__VA_ARGS__)
#		define i64$add$G(c, B26b7, B26b6, B26b5, B26b4, B26b3, B26b2, B26b1, B26b0,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0) byte$addo(c,B17b7, B17b6, B17b5, B17b4, B17b3, B17b2, B17b1, B17b0,B07b7, B07b6, B07b5, B07b4, B07b3, B07b2, B07b1, B07b0), B26b7, B26b6, B26b5, B26b4, B26b3, B26b2, B26b1, B26b0
#		define i64$and(...) i64$bit2op(byte$and,__VA_ARGS__)
#		define i64$bit1op(...) i64$bit1op$1(__VA_ARGS__)
#		define i64$bit1op$1(...) i64$bit1op$2(__VA_ARGS__)
#		define i64$bit1op$2(op,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0), op(B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0), op(B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0), op(B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0), op(B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0), op(B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), op(B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), op(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i64$bit2op(...) i64$bit2op$1(__VA_ARGS__)
#		define i64$bit2op$1(...) i64$bit2op$2(__VA_ARGS__)
#		define i64$bit2op$2(op,BFb7, BFb6, BFb5, BFb4, BFb3, BFb2, BFb1, BFb0,BEb7, BEb6, BEb5, BEb4, BEb3, BEb2, BEb1, BEb0,BDb7, BDb6, BDb5, BDb4, BDb3, BDb2, BDb1, BDb0,BCb7, BCb6, BCb5, BCb4, BCb3, BCb2, BCb1, BCb0,BBb7, BBb6, BBb5, BBb4, BBb3, BBb2, BBb1, BBb0,BAb7, BAb6, BAb5, BAb4, BAb3, BAb2, BAb1, BAb0,B9b7, B9b6, B9b5, B9b4, B9b3, B9b2, B9b1, B9b0,B8b7, B8b6, B8b5, B8b4, B8b3, B8b2, B8b1, B8b0,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) op(BFb7, BFb6, BFb5, BFb4, BFb3, BFb2, BFb1, BFb0, B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0), op(BEb7, BEb6, BEb5, BEb4, BEb3, BEb2, BEb1, BEb0, B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0), op(BDb7, BDb6, BDb5, BDb4, BDb3, BDb2, BDb1, BDb0, B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0), op(BCb7, BCb6, BCb5, BCb4, BCb3, BCb2, BCb1, BCb0, B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0), op(BBb7, BBb6, BBb5, BBb4, BBb3, BBb2, BBb1, BBb0, B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0), op(BAb7, BAb6, BAb5, BAb4, BAb3, BAb2, BAb1, BAb0, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), op(B9b7, B9b6, B9b5, B9b4, B9b3, B9b2, B9b1, B9b0, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), op(B8b7, B8b6, B8b5, B8b4, B8b3, B8b2, B8b1, B8b0, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0)
#		define i64$bytes$be(...) i64$tohex(byte$as$ff,byte$join$comma,__VA_ARGS__)
#		define i64$bytes$le(...) i64$bytes$le$1(__VA_ARGS__)
#		define i64$bytes$le$1(...) i64$bytes$le$2(__VA_ARGS__)
#		define i64$bytes$le$2(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) byte$tohex(byte$as$ff,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0), byte$tohex(byte$as$ff,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), byte$tohex(byte$as$ff,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), byte$tohex(byte$as$ff,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0), byte$tohex(byte$as$ff,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0), byte$tohex(byte$as$ff,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0), byte$tohex(byte$as$ff,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0), byte$tohex(byte$as$ff,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0)
#		define i64$cmp(...) i64$cmp$1(__VA_ARGS__)
#		define i64$cmp$1(...) i64$cmp$2(__VA_ARGS__)
#		define i64$cmp$2(...) i64$cmp$3(i64$sub$0(__VA_ARGS__))
#		define i64$cmp$3(...) i64$cmp$4(__VA_ARGS__)
#		define i64$cmp$4(c,o,s,...) i64$cmp$5(c,o,s,i64$iszero(s,__VA_ARGS__))
#		define i64$cmp$5(...) i64$cmp$6(__VA_ARGS__)
#		define i64$cmp$6(c,o,s,z) c,o,s,z
#		define i64$fromhex(...) i64$fromhex$1(__VA_ARGS__)
#		define i64$fromhex$1(...) i64$fromhex$2(__VA_ARGS__)
#		define i64$fromhex$2(h7,h6,h5,h4,h3,h2,h1,h0) byte$fromhex(h7), byte$fromhex(h6), byte$fromhex(h5), byte$fromhex(h4), byte$fromhex(h3), byte$fromhex(h2), byte$fromhex(h1), byte$fromhex(h0)
#		define i64$getbyte(...) i64$getbyte$1(__VA_ARGS__)
#		define i64$getbyte$1(...) i64$getbyte$2(__VA_ARGS__)
#		define i64$getbyte$2(B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0,...) i64$getbyte$byte##B0b7##B0b6##B0b5##B0b4##B0b3##B0b2##B0b1##B0b0(__VA_ARGS__)
#		define i64$getbyte$byte00000000(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i64$getbyte$byte00000001(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0
#		define i64$getbyte$byte00000010(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0
#		define i64$getbyte$byte00000011(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0
#		define i64$getbyte$byte00000100(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0
#		define i64$getbyte$byte00000101(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0
#		define i64$getbyte$byte00000110(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0
#		define i64$getbyte$byte00000111(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0
#		define i64$inv(...) i64$bit1op(byte$inv,__VA_ARGS__)
#		define i64$isa(...) cmp$call(cmp$isa, i64$cmp(__VA_ARGS__))
#		define i64$isae(...) cmp$call(cmp$isae, i64$cmp(__VA_ARGS__))
#		define i64$isb(...) cmp$call(cmp$isb, i64$cmp(__VA_ARGS__))
#		define i64$isbe(...) cmp$call(cmp$isbe, i64$cmp(__VA_ARGS__))
#		define i64$iseq(...) i64$iszero(i64$xor(__VA_ARGS__))
#		define i64$isge(...) cmp$call(cmp$isge, i64$cmp(__VA_ARGS__))
#		define i64$isgt(...) cmp$call(cmp$isg, i64$cmp(__VA_ARGS__))
#		define i64$isle(...) cmp$call(cmp$isle, i64$cmp(__VA_ARGS__))
#		define i64$islt(...) cmp$call(cmp$isl, i64$cmp(__VA_ARGS__))
#		define i64$isneg(...) i64$isneg$1(__VA_ARGS__)
#		define i64$isneg$1(...) i64$isneg$2(__VA_ARGS__)
#		define i64$isneg$2(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B7b7
#		define i64$isnegorzero(...) bit$or(i64$iszero(__VA_ARGS__),i64$isneg(__VA_ARGS__))
#		define i64$isneq(...) i64$isnonzero(i64$xor(__VA_ARGS__))
#		define i64$isnonzero(...) i64$isnonzero$1(__VA_ARGS__)
#		define i64$isnonzero$1(...) i64$isnonzero$2(__VA_ARGS__)
#		define i64$isnonzero$2(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$any8(i64$bit1op(byte$any,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i64$ispos(...) bit$and(i64$isposorzero(__VA_ARGS__),i64$isnonzero(__VA_ARGS__))
#		define i64$isposorzero(...) i64$isposorzero$1(__VA_ARGS__)
#		define i64$isposorzero$1(...) i64$isposorzero$2(__VA_ARGS__)
#		define i64$isposorzero$2(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$not(B7b7)
#		define i64$iszero(...) i64$iszero$1(__VA_ARGS__)
#		define i64$iszero$1(...) i64$iszero$2(__VA_ARGS__)
#		define i64$iszero$2(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) bit$all8(i64$bit1op(byte$iszero,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i64$neg(...) i64$neg$1(__VA_ARGS__)
#		define i64$neg$1(...) i64$neg$2(__VA_ARGS__)
#		define i64$neg$2(...) i64$add(i64$inv(__VA_ARGS__), i64$one)
#		define i64$one repeat32(0),i32$one
#		define i64$or(...) i64$bit2op(byte$or,__VA_ARGS__)
#		define i64$smax i32$smax, repeat32(1)
#		define i64$smin i32$smin, repeat32(0)
#		define i64$sub(...) byte$add$removeflags(i64$sub$1(__VA_ARGS__))
#		define i64$sub$0(...) i64$sub$1(__VA_ARGS__)
#		define i64$sub$1(...) i64$sub$2(__VA_ARGS__)
#		define i64$sub$2(BFb7, BFb6, BFb5, BFb4, BFb3, BFb2, BFb1, BFb0,BEb7, BEb6, BEb5, BEb4, BEb3, BEb2, BEb1, BEb0,BDb7, BDb6, BDb5, BDb4, BDb3, BDb2, BDb1, BDb0,BCb7, BCb6, BCb5, BCb4, BCb3, BCb2, BCb1, BCb0,BBb7, BBb6, BBb5, BBb4, BBb3, BBb2, BBb1, BBb0,BAb7, BAb6, BAb5, BAb4, BAb3, BAb2, BAb1, BAb0,B9b7, B9b6, B9b5, B9b4, B9b3, B9b2, B9b1, B9b0,B8b7, B8b6, B8b5, B8b4, B8b3, B8b2, B8b1, B8b0,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) i64$add$0(1, BFb7, BFb6, BFb5, BFb4, BFb3, BFb2, BFb1, BFb0,BEb7, BEb6, BEb5, BEb4, BEb3, BEb2, BEb1, BEb0,BDb7, BDb6, BDb5, BDb4, BDb3, BDb2, BDb1, BDb0,BCb7, BCb6, BCb5, BCb4, BCb3, BCb2, BCb1, BCb0,BBb7, BBb6, BBb5, BBb4, BBb3, BBb2, BBb1, BBb0,BAb7, BAb6, BAb5, BAb4, BAb3, BAb2, BAb1, BAb0,B9b7, B9b6, B9b5, B9b4, B9b3, B9b2, B9b1, B9b0,B8b7, B8b6, B8b5, B8b4, B8b3, B8b2, B8b1, B8b0, i64$bit1op(byte$inv, B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))
#		define i64$sx64(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i64$to08(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i64$to16(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i64$to32(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define i64$tohex(...) i64$tohex$1(__VA_ARGS__)
#		define i64$tohex$1(...) i64$tohex$2(__VA_ARGS__)
#		define i64$tohex$2(p,j,B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) j(byte$tohex(p, B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0), j(byte$tohex(p, B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0), j(byte$tohex(p, B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0), j(byte$tohex(p, B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0), j(byte$tohex(p, B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0), j(byte$tohex(p, B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0), j(byte$tohex(p, B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0), byte$tohex(p, B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0))))))))
#		define i64$umax repeat64(1)
#		define i64$xor(...) i64$bit2op(byte$xor,__VA_ARGS__)
#		define i64$zero repeat64(0)
#		define i64$zx64(B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0) B7b7, B7b6, B7b5, B7b4, B7b3, B7b2, B7b1, B7b0,B6b7, B6b6, B6b5, B6b4, B6b3, B6b2, B6b1, B6b0,B5b7, B5b6, B5b5, B5b4, B5b3, B5b2, B5b1, B5b0,B4b7, B4b6, B4b5, B4b4, B4b3, B4b2, B4b1, B4b0,B3b7, B3b6, B3b5, B3b4, B3b3, B3b2, B3b1, B3b0,B2b7, B2b6, B2b5, B2b4, B2b3, B2b2, B2b1, B2b0,B1b7, B1b6, B1b5, B1b4, B1b3, B1b2, B1b1, B1b0,B0b7, B0b6, B0b5, B0b4, B0b3, B0b2, B0b1, B0b0
#		define ignore(...) /* ignore */
#		define imm(...) imm$1(count(__VA_ARGS__), __VA_ARGS__)
#		define imm$1(...) imm$2(__VA_ARGS__)
#		define imm$2(n, ...) imm$numbytes##n(__VA_ARGS__)
#		define imm$numbytes01(...) imm08(__VA_ARGS__)
#		define imm$numbytes02(...) imm16(__VA_ARGS__)
#		define imm$numbytes03(...) imm32(00, __VA_ARGS__)
#		define imm$numbytes04(...) imm32(__VA_ARGS__)
#		define imm08b(...) imm08(i08$bytes$be(__VA_ARGS__))
#		define imm08one imm08(i08$bytes$be(i08$one))
#		define imm08smax imm08(i08$bytes$be(i08$smax))
#		define imm08smin imm08(i08$bytes$be(i08$smin))
#		define imm08umax imm08(i08$bytes$be(i08$umax))
#		define imm08zero imm08(i08$bytes$be(i08$zero))
#		define imm16b(...) imm16(i16$bytes$be(__VA_ARGS__))
#		define imm16one imm16(i16$bytes$be(i16$one))
#		define imm16smax imm16(i16$bytes$be(i16$smax))
#		define imm16smin imm16(i16$bytes$be(i16$smin))
#		define imm16umax imm16(i16$bytes$be(i16$umax))
#		define imm16zero imm16(i16$bytes$be(i16$zero))
#		define imm32b(...) imm32(i32$bytes$be(__VA_ARGS__))
#		define imm32one imm32(i32$bytes$be(i32$one))
#		define imm32smax imm32(i32$bytes$be(i32$smax))
#		define imm32smin imm32(i32$bytes$be(i32$smin))
#		define imm32umax imm32(i32$bytes$be(i32$umax))
#		define imm32zero imm32(i32$bytes$be(i32$zero))
#		define imm64b(...) imm64(i64$bytes$be(__VA_ARGS__))
#		define imm64one imm64(i64$bytes$be(i64$one))
#		define imm64smax imm64(i64$bytes$be(i64$smax))
#		define imm64smin imm64(i64$bytes$be(i64$smin))
#		define imm64umax imm64(i64$bytes$be(i64$umax))
#		define imm64zero imm64(i64$bytes$be(i64$zero))
#		define immb(...) immb$1(count(__VA_ARGS__), __VA_ARGS__)
#		define immb$1(...) immb$2(__VA_ARGS__)
#		define immb$2(n, ...) immb$numbits##n(__VA_ARGS__)
#		define immb$numbits08(...) imm08b(__VA_ARGS__)
#		define immb$numbits10(...) imm16b(__VA_ARGS__)
#		define immb$numbits20(...) imm32b(__VA_ARGS__)
#		define immb$numbits40(...) imm64b(__VA_ARGS__)
#		define instr$get$operands(i) instr$get$operands$of$##i
#		define instr$get$operands$of$adc(...) __VA_ARGS__
#		define instr$get$operands$of$adcx(...) __VA_ARGS__
#		define instr$get$operands$of$add(...) __VA_ARGS__
#		define instr$get$operands$of$addpd(...) __VA_ARGS__
#		define instr$get$operands$of$addps(...) __VA_ARGS__
#		define instr$get$operands$of$addsd(...) __VA_ARGS__
#		define instr$get$operands$of$addss(...) __VA_ARGS__
#		define instr$get$operands$of$addsubpd(...) __VA_ARGS__
#		define instr$get$operands$of$addsubps(...) __VA_ARGS__
#		define instr$get$operands$of$adox(...) __VA_ARGS__
#		define instr$get$operands$of$aesdec(...) __VA_ARGS__
#		define instr$get$operands$of$aesdeclast(...) __VA_ARGS__
#		define instr$get$operands$of$aesenc(...) __VA_ARGS__
#		define instr$get$operands$of$aesenclast(...) __VA_ARGS__
#		define instr$get$operands$of$aesimc(...) __VA_ARGS__
#		define instr$get$operands$of$aeskeygenassist(...) __VA_ARGS__
#		define instr$get$operands$of$and(...) __VA_ARGS__
#		define instr$get$operands$of$andn(...) __VA_ARGS__
#		define instr$get$operands$of$andnpd(...) __VA_ARGS__
#		define instr$get$operands$of$andnps(...) __VA_ARGS__
#		define instr$get$operands$of$andpd(...) __VA_ARGS__
#		define instr$get$operands$of$andps(...) __VA_ARGS__
#		define instr$get$operands$of$bextr(...) __VA_ARGS__
#		define instr$get$operands$of$blendpd(...) __VA_ARGS__
#		define instr$get$operands$of$blendps(...) __VA_ARGS__
#		define instr$get$operands$of$blendvpd(...) __VA_ARGS__
#		define instr$get$operands$of$blendvps(...) __VA_ARGS__
#		define instr$get$operands$of$blsi(...) __VA_ARGS__
#		define instr$get$operands$of$blsmsk(...) __VA_ARGS__
#		define instr$get$operands$of$blsr(...) __VA_ARGS__
#		define instr$get$operands$of$bsf(...) __VA_ARGS__
#		define instr$get$operands$of$bsr(...) __VA_ARGS__
#		define instr$get$operands$of$bswap(...) __VA_ARGS__
#		define instr$get$operands$of$bt(...) __VA_ARGS__
#		define instr$get$operands$of$btc(...) __VA_ARGS__
#		define instr$get$operands$of$btr(...) __VA_ARGS__
#		define instr$get$operands$of$bts(...) __VA_ARGS__
#		define instr$get$operands$of$bzhi(...) __VA_ARGS__
#		define instr$get$operands$of$call(...) __VA_ARGS__
#		define instr$get$operands$of$cdq(...) __VA_ARGS__
#		define instr$get$operands$of$clac(...) __VA_ARGS__
#		define instr$get$operands$of$clc(...) __VA_ARGS__
#		define instr$get$operands$of$cld(...) __VA_ARGS__
#		define instr$get$operands$of$cldemote(...) __VA_ARGS__
#		define instr$get$operands$of$clflush(...) __VA_ARGS__
#		define instr$get$operands$of$clflushopt(...) __VA_ARGS__
#		define instr$get$operands$of$cli(...) __VA_ARGS__
#		define instr$get$operands$of$clrssbsy(...) __VA_ARGS__
#		define instr$get$operands$of$clts(...) __VA_ARGS__
#		define instr$get$operands$of$clwb(...) __VA_ARGS__
#		define instr$get$operands$of$cmc(...) __VA_ARGS__
#		define instr$get$operands$of$cmova(...) __VA_ARGS__
#		define instr$get$operands$of$cmovae(...) __VA_ARGS__
#		define instr$get$operands$of$cmovb(...) __VA_ARGS__
#		define instr$get$operands$of$cmovbe(...) __VA_ARGS__
#		define instr$get$operands$of$cmovc(...) __VA_ARGS__
#		define instr$get$operands$of$cmove(...) __VA_ARGS__
#		define instr$get$operands$of$cmovg(...) __VA_ARGS__
#		define instr$get$operands$of$cmovge(...) __VA_ARGS__
#		define instr$get$operands$of$cmovl(...) __VA_ARGS__
#		define instr$get$operands$of$cmovle(...) __VA_ARGS__
#		define instr$get$operands$of$cmovna(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnae(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnb(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnbe(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnc(...) __VA_ARGS__
#		define instr$get$operands$of$cmovne(...) __VA_ARGS__
#		define instr$get$operands$of$cmovng(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnge(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnl(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnle(...) __VA_ARGS__
#		define instr$get$operands$of$cmovno(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnp(...) __VA_ARGS__
#		define instr$get$operands$of$cmovns(...) __VA_ARGS__
#		define instr$get$operands$of$cmovnz(...) __VA_ARGS__
#		define instr$get$operands$of$cmovo(...) __VA_ARGS__
#		define instr$get$operands$of$cmovp(...) __VA_ARGS__
#		define instr$get$operands$of$cmovpe(...) __VA_ARGS__
#		define instr$get$operands$of$cmovpo(...) __VA_ARGS__
#		define instr$get$operands$of$cmovs(...) __VA_ARGS__
#		define instr$get$operands$of$cmovz(...) __VA_ARGS__
#		define instr$get$operands$of$cmp(...) __VA_ARGS__
#		define instr$get$operands$of$cmpeqpd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpeqps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpeqsd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpeqss(...) __VA_ARGS__
#		define instr$get$operands$of$cmplepd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpleps(...) __VA_ARGS__
#		define instr$get$operands$of$cmplesd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpless(...) __VA_ARGS__
#		define instr$get$operands$of$cmpltpd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpltps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpltsd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpltss(...) __VA_ARGS__
#		define instr$get$operands$of$cmpneqpd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpneqps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpneqsd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpneqss(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnlepd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnleps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnlesd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnless(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnltpd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnltps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnltsd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpnltss(...) __VA_ARGS__
#		define instr$get$operands$of$cmpordpd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpordps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpordsd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpordss(...) __VA_ARGS__
#		define instr$get$operands$of$cmppd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpsb(...) __VA_ARGS__
#		define instr$get$operands$of$cmpsd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpsq(...) __VA_ARGS__
#		define instr$get$operands$of$cmpss(...) __VA_ARGS__
#		define instr$get$operands$of$cmpsw(...) __VA_ARGS__
#		define instr$get$operands$of$cmpunordpd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpunordps(...) __VA_ARGS__
#		define instr$get$operands$of$cmpunordsd(...) __VA_ARGS__
#		define instr$get$operands$of$cmpunordss(...) __VA_ARGS__
#		define instr$get$operands$of$cmpxchg(...) __VA_ARGS__
#		define instr$get$operands$of$cmpxchg8b(...) __VA_ARGS__
#		define instr$get$operands$of$comisd(...) __VA_ARGS__
#		define instr$get$operands$of$comiss(...) __VA_ARGS__
#		define instr$get$operands$of$cpuid(...) __VA_ARGS__
#		define instr$get$operands$of$cqo(...) __VA_ARGS__
#		define instr$get$operands$of$crc32(...) __VA_ARGS__
#		define instr$get$operands$of$cvtdq2pd(...) __VA_ARGS__
#		define instr$get$operands$of$cvtdq2ps(...) __VA_ARGS__
#		define instr$get$operands$of$cvtpd2dq(...) __VA_ARGS__
#		define instr$get$operands$of$cvtpd2pi(...) __VA_ARGS__
#		define instr$get$operands$of$cvtpd2ps(...) __VA_ARGS__
#		define instr$get$operands$of$cvtpi2pd(...) __VA_ARGS__
#		define instr$get$operands$of$cvtpi2ps(...) __VA_ARGS__
#		define instr$get$operands$of$cvtps2dq(...) __VA_ARGS__
#		define instr$get$operands$of$cvtps2pd(...) __VA_ARGS__
#		define instr$get$operands$of$cvtps2pi(...) __VA_ARGS__
#		define instr$get$operands$of$cvtsd2si(...) __VA_ARGS__
#		define instr$get$operands$of$cvtsd2ss(...) __VA_ARGS__
#		define instr$get$operands$of$cvtsi2sd(...) __VA_ARGS__
#		define instr$get$operands$of$cvtsi2ss(...) __VA_ARGS__
#		define instr$get$operands$of$cvtss2sd(...) __VA_ARGS__
#		define instr$get$operands$of$cvtss2si(...) __VA_ARGS__
#		define instr$get$operands$of$cvttpd2dq(...) __VA_ARGS__
#		define instr$get$operands$of$cvttpd2pi(...) __VA_ARGS__
#		define instr$get$operands$of$cvttps2dq(...) __VA_ARGS__
#		define instr$get$operands$of$cvttps2pi(...) __VA_ARGS__
#		define instr$get$operands$of$cvttsd2si(...) __VA_ARGS__
#		define instr$get$operands$of$cvttss2si(...) __VA_ARGS__
#		define instr$get$operands$of$cwd(...) __VA_ARGS__
#		define instr$get$operands$of$dec(...) __VA_ARGS__
#		define instr$get$operands$of$div(...) __VA_ARGS__
#		define instr$get$operands$of$divpd(...) __VA_ARGS__
#		define instr$get$operands$of$divps(...) __VA_ARGS__
#		define instr$get$operands$of$divsd(...) __VA_ARGS__
#		define instr$get$operands$of$divss(...) __VA_ARGS__
#		define instr$get$operands$of$dppd(...) __VA_ARGS__
#		define instr$get$operands$of$dpps(...) __VA_ARGS__
#		define instr$get$operands$of$emms(...) __VA_ARGS__
#		define instr$get$operands$of$encls(...) __VA_ARGS__
#		define instr$get$operands$of$enclu(...) __VA_ARGS__
#		define instr$get$operands$of$enclv(...) __VA_ARGS__
#		define instr$get$operands$of$endbr32(...) __VA_ARGS__
#		define instr$get$operands$of$endbr64(...) __VA_ARGS__
#		define instr$get$operands$of$enter(...) __VA_ARGS__
#		define instr$get$operands$of$extractps(...) __VA_ARGS__
#		define instr$get$operands$of$f2xm1(...) __VA_ARGS__
#		define instr$get$operands$of$fabs(...) __VA_ARGS__
#		define instr$get$operands$of$fadd(...) __VA_ARGS__
#		define instr$get$operands$of$faddp(...) __VA_ARGS__
#		define instr$get$operands$of$fbld(...) __VA_ARGS__
#		define instr$get$operands$of$fbstp(...) __VA_ARGS__
#		define instr$get$operands$of$fchs(...) __VA_ARGS__
#		define instr$get$operands$of$fclex(...) __VA_ARGS__
#		define instr$get$operands$of$fcmovb(...) __VA_ARGS__
#		define instr$get$operands$of$fcmovbe(...) __VA_ARGS__
#		define instr$get$operands$of$fcmove(...) __VA_ARGS__
#		define instr$get$operands$of$fcmovnb(...) __VA_ARGS__
#		define instr$get$operands$of$fcmovnbe(...) __VA_ARGS__
#		define instr$get$operands$of$fcmovne(...) __VA_ARGS__
#		define instr$get$operands$of$fcmovnu(...) __VA_ARGS__
#		define instr$get$operands$of$fcmovu(...) __VA_ARGS__
#		define instr$get$operands$of$fcom(...) __VA_ARGS__
#		define instr$get$operands$of$fcomi(...) __VA_ARGS__
#		define instr$get$operands$of$fcomip(...) __VA_ARGS__
#		define instr$get$operands$of$fcomp(...) __VA_ARGS__
#		define instr$get$operands$of$fcompp(...) __VA_ARGS__
#		define instr$get$operands$of$fcos(...) __VA_ARGS__
#		define instr$get$operands$of$fdecstp(...) __VA_ARGS__
#		define instr$get$operands$of$fdiv(...) __VA_ARGS__
#		define instr$get$operands$of$fdivp(...) __VA_ARGS__
#		define instr$get$operands$of$fdivr(...) __VA_ARGS__
#		define instr$get$operands$of$fdivrp(...) __VA_ARGS__
#		define instr$get$operands$of$ffree(...) __VA_ARGS__
#		define instr$get$operands$of$fiadd(...) __VA_ARGS__
#		define instr$get$operands$of$ficom(...) __VA_ARGS__
#		define instr$get$operands$of$ficomp(...) __VA_ARGS__
#		define instr$get$operands$of$fidiv(...) __VA_ARGS__
#		define instr$get$operands$of$fidivr(...) __VA_ARGS__
#		define instr$get$operands$of$fild(...) __VA_ARGS__
#		define instr$get$operands$of$fimul(...) __VA_ARGS__
#		define instr$get$operands$of$fincstp(...) __VA_ARGS__
#		define instr$get$operands$of$finit(...) __VA_ARGS__
#		define instr$get$operands$of$fist(...) __VA_ARGS__
#		define instr$get$operands$of$fistp(...) __VA_ARGS__
#		define instr$get$operands$of$fisttp(...) __VA_ARGS__
#		define instr$get$operands$of$fisub(...) __VA_ARGS__
#		define instr$get$operands$of$fisubr(...) __VA_ARGS__
#		define instr$get$operands$of$fld(...) __VA_ARGS__
#		define instr$get$operands$of$fld1(...) __VA_ARGS__
#		define instr$get$operands$of$fldcw(...) __VA_ARGS__
#		define instr$get$operands$of$fldenv(...) __VA_ARGS__
#		define instr$get$operands$of$fldl2e(...) __VA_ARGS__
#		define instr$get$operands$of$fldl2t(...) __VA_ARGS__
#		define instr$get$operands$of$fldlg2(...) __VA_ARGS__
#		define instr$get$operands$of$fldln2(...) __VA_ARGS__
#		define instr$get$operands$of$fldpi(...) __VA_ARGS__
#		define instr$get$operands$of$fldz(...) __VA_ARGS__
#		define instr$get$operands$of$fmul(...) __VA_ARGS__
#		define instr$get$operands$of$fmulp(...) __VA_ARGS__
#		define instr$get$operands$of$fnclex(...) __VA_ARGS__
#		define instr$get$operands$of$fninit(...) __VA_ARGS__
#		define instr$get$operands$of$fnop(...) __VA_ARGS__
#		define instr$get$operands$of$fnsave(...) __VA_ARGS__
#		define instr$get$operands$of$fnstcw(...) __VA_ARGS__
#		define instr$get$operands$of$fnstenv(...) __VA_ARGS__
#		define instr$get$operands$of$fnstsw(...) __VA_ARGS__
#		define instr$get$operands$of$fpatan(...) __VA_ARGS__
#		define instr$get$operands$of$fprem(...) __VA_ARGS__
#		define instr$get$operands$of$fprem1(...) __VA_ARGS__
#		define instr$get$operands$of$fptan(...) __VA_ARGS__
#		define instr$get$operands$of$frndint(...) __VA_ARGS__
#		define instr$get$operands$of$frstor(...) __VA_ARGS__
#		define instr$get$operands$of$fsave(...) __VA_ARGS__
#		define instr$get$operands$of$fscale(...) __VA_ARGS__
#		define instr$get$operands$of$fsin(...) __VA_ARGS__
#		define instr$get$operands$of$fsincos(...) __VA_ARGS__
#		define instr$get$operands$of$fsqrt(...) __VA_ARGS__
#		define instr$get$operands$of$fst(...) __VA_ARGS__
#		define instr$get$operands$of$fstcw(...) __VA_ARGS__
#		define instr$get$operands$of$fstenv(...) __VA_ARGS__
#		define instr$get$operands$of$fstp(...) __VA_ARGS__
#		define instr$get$operands$of$fstsw(...) __VA_ARGS__
#		define instr$get$operands$of$fsub(...) __VA_ARGS__
#		define instr$get$operands$of$fsubp(...) __VA_ARGS__
#		define instr$get$operands$of$fsubr(...) __VA_ARGS__
#		define instr$get$operands$of$fsubrp(...) __VA_ARGS__
#		define instr$get$operands$of$ftst(...) __VA_ARGS__
#		define instr$get$operands$of$fucom(...) __VA_ARGS__
#		define instr$get$operands$of$fucomi(...) __VA_ARGS__
#		define instr$get$operands$of$fucomip(...) __VA_ARGS__
#		define instr$get$operands$of$fucomp(...) __VA_ARGS__
#		define instr$get$operands$of$fucompp(...) __VA_ARGS__
#		define instr$get$operands$of$fwait(...) __VA_ARGS__
#		define instr$get$operands$of$fxam(...) __VA_ARGS__
#		define instr$get$operands$of$fxch(...) __VA_ARGS__
#		define instr$get$operands$of$fxrstor(...) __VA_ARGS__
#		define instr$get$operands$of$fxrstor64(...) __VA_ARGS__
#		define instr$get$operands$of$fxsave(...) __VA_ARGS__
#		define instr$get$operands$of$fxsave64(...) __VA_ARGS__
#		define instr$get$operands$of$fxtract(...) __VA_ARGS__
#		define instr$get$operands$of$fyl2x(...) __VA_ARGS__
#		define instr$get$operands$of$fyl2xp1(...) __VA_ARGS__
#		define instr$get$operands$of$gf2p8affineinvqb(...) __VA_ARGS__
#		define instr$get$operands$of$gf2p8affineqb(...) __VA_ARGS__
#		define instr$get$operands$of$gf2p8mulb(...) __VA_ARGS__
#		define instr$get$operands$of$haddpd(...) __VA_ARGS__
#		define instr$get$operands$of$haddps(...) __VA_ARGS__
#		define instr$get$operands$of$hlt(...) __VA_ARGS__
#		define instr$get$operands$of$hreset(...) __VA_ARGS__
#		define instr$get$operands$of$hsubpd(...) __VA_ARGS__
#		define instr$get$operands$of$hsubps(...) __VA_ARGS__
#		define instr$get$operands$of$idiv(...) __VA_ARGS__
#		define instr$get$operands$of$imul(...) __VA_ARGS__
#		define instr$get$operands$of$in(...) __VA_ARGS__
#		define instr$get$operands$of$inc(...) __VA_ARGS__
#		define instr$get$operands$of$incsspd(...) __VA_ARGS__
#		define instr$get$operands$of$incsspq(...) __VA_ARGS__
#		define instr$get$operands$of$insb(...) __VA_ARGS__
#		define instr$get$operands$of$insd(...) __VA_ARGS__
#		define instr$get$operands$of$insertps(...) __VA_ARGS__
#		define instr$get$operands$of$insw(...) __VA_ARGS__
#		define instr$get$operands$of$int0(...) __VA_ARGS__
#		define instr$get$operands$of$int1(...) __VA_ARGS__
#		define instr$get$operands$of$int3(...) __VA_ARGS__
#		define instr$get$operands$of$invd(...) __VA_ARGS__
#		define instr$get$operands$of$invept(...) __VA_ARGS__
#		define instr$get$operands$of$invlpg(...) __VA_ARGS__
#		define instr$get$operands$of$invpcid(...) __VA_ARGS__
#		define instr$get$operands$of$invvpid(...) __VA_ARGS__
#		define instr$get$operands$of$iret(...) __VA_ARGS__
#		define instr$get$operands$of$iretd(...) __VA_ARGS__
#		define instr$get$operands$of$iretq(...) __VA_ARGS__
#		define instr$get$operands$of$ja(...) __VA_ARGS__
#		define instr$get$operands$of$jae(...) __VA_ARGS__
#		define instr$get$operands$of$jb(...) __VA_ARGS__
#		define instr$get$operands$of$jbe(...) __VA_ARGS__
#		define instr$get$operands$of$jc(...) __VA_ARGS__
#		define instr$get$operands$of$je(...) __VA_ARGS__
#		define instr$get$operands$of$jg(...) __VA_ARGS__
#		define instr$get$operands$of$jge(...) __VA_ARGS__
#		define instr$get$operands$of$jl(...) __VA_ARGS__
#		define instr$get$operands$of$jle(...) __VA_ARGS__
#		define instr$get$operands$of$jmp(...) __VA_ARGS__
#		define instr$get$operands$of$jna(...) __VA_ARGS__
#		define instr$get$operands$of$jnae(...) __VA_ARGS__
#		define instr$get$operands$of$jnb(...) __VA_ARGS__
#		define instr$get$operands$of$jnbe(...) __VA_ARGS__
#		define instr$get$operands$of$jnc(...) __VA_ARGS__
#		define instr$get$operands$of$jne(...) __VA_ARGS__
#		define instr$get$operands$of$jng(...) __VA_ARGS__
#		define instr$get$operands$of$jnge(...) __VA_ARGS__
#		define instr$get$operands$of$jnl(...) __VA_ARGS__
#		define instr$get$operands$of$jnle(...) __VA_ARGS__
#		define instr$get$operands$of$jno(...) __VA_ARGS__
#		define instr$get$operands$of$jnp(...) __VA_ARGS__
#		define instr$get$operands$of$jns(...) __VA_ARGS__
#		define instr$get$operands$of$jnz(...) __VA_ARGS__
#		define instr$get$operands$of$jo(...) __VA_ARGS__
#		define instr$get$operands$of$jp(...) __VA_ARGS__
#		define instr$get$operands$of$jpe(...) __VA_ARGS__
#		define instr$get$operands$of$jpo(...) __VA_ARGS__
#		define instr$get$operands$of$js(...) __VA_ARGS__
#		define instr$get$operands$of$jz(...) __VA_ARGS__
#		define instr$get$operands$of$label(...) __VA_ARGS__
#		define instr$get$operands$of$lar(...) __VA_ARGS__
#		define instr$get$operands$of$lddqu(...) __VA_ARGS__
#		define instr$get$operands$of$ldmxcsr(...) __VA_ARGS__
#		define instr$get$operands$of$lea(...) __VA_ARGS__
#		define instr$get$operands$of$leave(...) __VA_ARGS__
#		define instr$get$operands$of$lfence(...) __VA_ARGS__
#		define instr$get$operands$of$lldt(...) __VA_ARGS__
#		define instr$get$operands$of$lmsw(...) __VA_ARGS__
#		define instr$get$operands$of$lods(...) __VA_ARGS__
#		define instr$get$operands$of$lodsb(...) __VA_ARGS__
#		define instr$get$operands$of$lodsd(...) __VA_ARGS__
#		define instr$get$operands$of$lodsq(...) __VA_ARGS__
#		define instr$get$operands$of$lodsw(...) __VA_ARGS__
#		define instr$get$operands$of$loop(...) __VA_ARGS__
#		define instr$get$operands$of$loope(...) __VA_ARGS__
#		define instr$get$operands$of$loopne(...) __VA_ARGS__
#		define instr$get$operands$of$lsl(...) __VA_ARGS__
#		define instr$get$operands$of$ltr(...) __VA_ARGS__
#		define instr$get$operands$of$lzcnt(...) __VA_ARGS__
#		define instr$get$operands$of$maskmovdqu(...) __VA_ARGS__
#		define instr$get$operands$of$maskmovq(...) __VA_ARGS__
#		define instr$get$operands$of$maxpd(...) __VA_ARGS__
#		define instr$get$operands$of$maxps(...) __VA_ARGS__
#		define instr$get$operands$of$maxsd(...) __VA_ARGS__
#		define instr$get$operands$of$maxss(...) __VA_ARGS__
#		define instr$get$operands$of$mfence(...) __VA_ARGS__
#		define instr$get$operands$of$minpd(...) __VA_ARGS__
#		define instr$get$operands$of$minps(...) __VA_ARGS__
#		define instr$get$operands$of$minsd(...) __VA_ARGS__
#		define instr$get$operands$of$minss(...) __VA_ARGS__
#		define instr$get$operands$of$monitor(...) __VA_ARGS__
#		define instr$get$operands$of$mov(...) __VA_ARGS__
#		define instr$get$operands$of$movapd(...) __VA_ARGS__
#		define instr$get$operands$of$movaps(...) __VA_ARGS__
#		define instr$get$operands$of$movbe(...) __VA_ARGS__
#		define instr$get$operands$of$movd(...) __VA_ARGS__
#		define instr$get$operands$of$movddup(...) __VA_ARGS__
#		define instr$get$operands$of$movdir64b(...) __VA_ARGS__
#		define instr$get$operands$of$movdiri(...) __VA_ARGS__
#		define instr$get$operands$of$movdq2q(...) __VA_ARGS__
#		define instr$get$operands$of$movdqa(...) __VA_ARGS__
#		define instr$get$operands$of$movdqu(...) __VA_ARGS__
#		define instr$get$operands$of$movhlps(...) __VA_ARGS__
#		define instr$get$operands$of$movhpd(...) __VA_ARGS__
#		define instr$get$operands$of$movhps(...) __VA_ARGS__
#		define instr$get$operands$of$movlhps(...) __VA_ARGS__
#		define instr$get$operands$of$movlpd(...) __VA_ARGS__
#		define instr$get$operands$of$movlps(...) __VA_ARGS__
#		define instr$get$operands$of$movmskpd(...) __VA_ARGS__
#		define instr$get$operands$of$movmskps(...) __VA_ARGS__
#		define instr$get$operands$of$movntdq(...) __VA_ARGS__
#		define instr$get$operands$of$movntdqa(...) __VA_ARGS__
#		define instr$get$operands$of$movnti(...) __VA_ARGS__
#		define instr$get$operands$of$movntpd(...) __VA_ARGS__
#		define instr$get$operands$of$movntps(...) __VA_ARGS__
#		define instr$get$operands$of$movntq(...) __VA_ARGS__
#		define instr$get$operands$of$movq(...) __VA_ARGS__
#		define instr$get$operands$of$movq2dq(...) __VA_ARGS__
#		define instr$get$operands$of$movsb(...) __VA_ARGS__
#		define instr$get$operands$of$movsd(...) __VA_ARGS__
#		define instr$get$operands$of$movshdup(...) __VA_ARGS__
#		define instr$get$operands$of$movshlup(...) __VA_ARGS__
#		define instr$get$operands$of$movsq(...) __VA_ARGS__
#		define instr$get$operands$of$movss(...) __VA_ARGS__
#		define instr$get$operands$of$movsw(...) __VA_ARGS__
#		define instr$get$operands$of$movsx(...) __VA_ARGS__
#		define instr$get$operands$of$movsxd(...) __VA_ARGS__
#		define instr$get$operands$of$movupd(...) __VA_ARGS__
#		define instr$get$operands$of$movups(...) __VA_ARGS__
#		define instr$get$operands$of$movzx(...) __VA_ARGS__
#		define instr$get$operands$of$mpsadbw(...) __VA_ARGS__
#		define instr$get$operands$of$mul(...) __VA_ARGS__
#		define instr$get$operands$of$mulpd(...) __VA_ARGS__
#		define instr$get$operands$of$mulps(...) __VA_ARGS__
#		define instr$get$operands$of$mulsd(...) __VA_ARGS__
#		define instr$get$operands$of$mulss(...) __VA_ARGS__
#		define instr$get$operands$of$mulx(...) __VA_ARGS__
#		define instr$get$operands$of$mwait(...) __VA_ARGS__
#		define instr$get$operands$of$neg(...) __VA_ARGS__
#		define instr$get$operands$of$nop(...) __VA_ARGS__
#		define instr$get$operands$of$nop2(...) __VA_ARGS__
#		define instr$get$operands$of$nop3(...) __VA_ARGS__
#		define instr$get$operands$of$nop4(...) __VA_ARGS__
#		define instr$get$operands$of$nop5(...) __VA_ARGS__
#		define instr$get$operands$of$nop6(...) __VA_ARGS__
#		define instr$get$operands$of$nop7(...) __VA_ARGS__
#		define instr$get$operands$of$nop8(...) __VA_ARGS__
#		define instr$get$operands$of$nop9(...) __VA_ARGS__
#		define instr$get$operands$of$not(...) __VA_ARGS__
#		define instr$get$operands$of$or(...) __VA_ARGS__
#		define instr$get$operands$of$orpd(...) __VA_ARGS__
#		define instr$get$operands$of$orps(...) __VA_ARGS__
#		define instr$get$operands$of$out(...) __VA_ARGS__
#		define instr$get$operands$of$outsb(...) __VA_ARGS__
#		define instr$get$operands$of$outsd(...) __VA_ARGS__
#		define instr$get$operands$of$outsw(...) __VA_ARGS__
#		define instr$get$operands$of$pabsb(...) __VA_ARGS__
#		define instr$get$operands$of$pabsd(...) __VA_ARGS__
#		define instr$get$operands$of$pabsw(...) __VA_ARGS__
#		define instr$get$operands$of$packssdw(...) __VA_ARGS__
#		define instr$get$operands$of$packsswb(...) __VA_ARGS__
#		define instr$get$operands$of$packusdw(...) __VA_ARGS__
#		define instr$get$operands$of$packuswb(...) __VA_ARGS__
#		define instr$get$operands$of$paddb(...) __VA_ARGS__
#		define instr$get$operands$of$paddd(...) __VA_ARGS__
#		define instr$get$operands$of$paddq(...) __VA_ARGS__
#		define instr$get$operands$of$paddsb(...) __VA_ARGS__
#		define instr$get$operands$of$paddsw(...) __VA_ARGS__
#		define instr$get$operands$of$paddusb(...) __VA_ARGS__
#		define instr$get$operands$of$paddusw(...) __VA_ARGS__
#		define instr$get$operands$of$paddw(...) __VA_ARGS__
#		define instr$get$operands$of$palignr(...) __VA_ARGS__
#		define instr$get$operands$of$pand(...) __VA_ARGS__
#		define instr$get$operands$of$pandn(...) __VA_ARGS__
#		define instr$get$operands$of$pause(...) __VA_ARGS__
#		define instr$get$operands$of$pavgb(...) __VA_ARGS__
#		define instr$get$operands$of$pavgw(...) __VA_ARGS__
#		define instr$get$operands$of$pblendvb(...) __VA_ARGS__
#		define instr$get$operands$of$pblendw(...) __VA_ARGS__
#		define instr$get$operands$of$pclmulqdq(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpeqb(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpeqd(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpeqq(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpeqw(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpestri(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpestrm(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpgtb(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpgtd(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpgtq(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpgtw(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpistri(...) __VA_ARGS__
#		define instr$get$operands$of$pcmpistrm(...) __VA_ARGS__
#		define instr$get$operands$of$pconfig(...) __VA_ARGS__
#		define instr$get$operands$of$pdep(...) __VA_ARGS__
#		define instr$get$operands$of$pext(...) __VA_ARGS__
#		define instr$get$operands$of$pextrb(...) __VA_ARGS__
#		define instr$get$operands$of$pextrd(...) __VA_ARGS__
#		define instr$get$operands$of$pextrq(...) __VA_ARGS__
#		define instr$get$operands$of$pextrw(...) __VA_ARGS__
#		define instr$get$operands$of$phaddd(...) __VA_ARGS__
#		define instr$get$operands$of$phaddsw(...) __VA_ARGS__
#		define instr$get$operands$of$phaddw(...) __VA_ARGS__
#		define instr$get$operands$of$phminposuw(...) __VA_ARGS__
#		define instr$get$operands$of$phsubd(...) __VA_ARGS__
#		define instr$get$operands$of$phsubsw(...) __VA_ARGS__
#		define instr$get$operands$of$phsubw(...) __VA_ARGS__
#		define instr$get$operands$of$pinsrb(...) __VA_ARGS__
#		define instr$get$operands$of$pinsrd(...) __VA_ARGS__
#		define instr$get$operands$of$pinsrq(...) __VA_ARGS__
#		define instr$get$operands$of$pinsrw(...) __VA_ARGS__
#		define instr$get$operands$of$pmaddubsw(...) __VA_ARGS__
#		define instr$get$operands$of$pmaddwd(...) __VA_ARGS__
#		define instr$get$operands$of$pmaxsb(...) __VA_ARGS__
#		define instr$get$operands$of$pmaxsd(...) __VA_ARGS__
#		define instr$get$operands$of$pmaxsw(...) __VA_ARGS__
#		define instr$get$operands$of$pmaxub(...) __VA_ARGS__
#		define instr$get$operands$of$pmaxud(...) __VA_ARGS__
#		define instr$get$operands$of$pmaxuw(...) __VA_ARGS__
#		define instr$get$operands$of$pminsb(...) __VA_ARGS__
#		define instr$get$operands$of$pminsd(...) __VA_ARGS__
#		define instr$get$operands$of$pminsw(...) __VA_ARGS__
#		define instr$get$operands$of$pminub(...) __VA_ARGS__
#		define instr$get$operands$of$pminud(...) __VA_ARGS__
#		define instr$get$operands$of$pminuw(...) __VA_ARGS__
#		define instr$get$operands$of$pmovmskb(...) __VA_ARGS__
#		define instr$get$operands$of$pmovsxbd(...) __VA_ARGS__
#		define instr$get$operands$of$pmovsxbq(...) __VA_ARGS__
#		define instr$get$operands$of$pmovsxbw(...) __VA_ARGS__
#		define instr$get$operands$of$pmovsxdq(...) __VA_ARGS__
#		define instr$get$operands$of$pmovsxwd(...) __VA_ARGS__
#		define instr$get$operands$of$pmovsxwq(...) __VA_ARGS__
#		define instr$get$operands$of$pmovzxbd(...) __VA_ARGS__
#		define instr$get$operands$of$pmovzxbq(...) __VA_ARGS__
#		define instr$get$operands$of$pmovzxbw(...) __VA_ARGS__
#		define instr$get$operands$of$pmovzxdq(...) __VA_ARGS__
#		define instr$get$operands$of$pmovzxwd(...) __VA_ARGS__
#		define instr$get$operands$of$pmovzxwq(...) __VA_ARGS__
#		define instr$get$operands$of$pmuldq(...) __VA_ARGS__
#		define instr$get$operands$of$pmulhrsw(...) __VA_ARGS__
#		define instr$get$operands$of$pmulhw(...) __VA_ARGS__
#		define instr$get$operands$of$pmulld(...) __VA_ARGS__
#		define instr$get$operands$of$pmullw(...) __VA_ARGS__
#		define instr$get$operands$of$pmuludq(...) __VA_ARGS__
#		define instr$get$operands$of$pmuluw(...) __VA_ARGS__
#		define instr$get$operands$of$pop(...) __VA_ARGS__
#		define instr$get$operands$of$popcnt(...) __VA_ARGS__
#		define instr$get$operands$of$popf(...) __VA_ARGS__
#		define instr$get$operands$of$popfq(...) __VA_ARGS__
#		define instr$get$operands$of$por(...) __VA_ARGS__
#		define instr$get$operands$of$prefetchnta(...) __VA_ARGS__
#		define instr$get$operands$of$prefetcht0(...) __VA_ARGS__
#		define instr$get$operands$of$prefetcht1(...) __VA_ARGS__
#		define instr$get$operands$of$prefetcht2(...) __VA_ARGS__
#		define instr$get$operands$of$prefetchw(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$bhnottaken(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$bhtaken(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$lock(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$rep(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$repe(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$repne(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$repnz(...) __VA_ARGS__
#		define instr$get$operands$of$prefix$repz(...) __VA_ARGS__
#		define instr$get$operands$of$psadbw(...) __VA_ARGS__
#		define instr$get$operands$of$pshufb(...) __VA_ARGS__
#		define instr$get$operands$of$pshufd(...) __VA_ARGS__
#		define instr$get$operands$of$pshuflw(...) __VA_ARGS__
#		define instr$get$operands$of$pshufw(...) __VA_ARGS__
#		define instr$get$operands$of$psignb(...) __VA_ARGS__
#		define instr$get$operands$of$psignd(...) __VA_ARGS__
#		define instr$get$operands$of$psignw(...) __VA_ARGS__
#		define instr$get$operands$of$pslld(...) __VA_ARGS__
#		define instr$get$operands$of$pslldq(...) __VA_ARGS__
#		define instr$get$operands$of$psllq(...) __VA_ARGS__
#		define instr$get$operands$of$psllw(...) __VA_ARGS__
#		define instr$get$operands$of$psrad(...) __VA_ARGS__
#		define instr$get$operands$of$psraw(...) __VA_ARGS__
#		define instr$get$operands$of$psrld(...) __VA_ARGS__
#		define instr$get$operands$of$psrldq(...) __VA_ARGS__
#		define instr$get$operands$of$psrlq(...) __VA_ARGS__
#		define instr$get$operands$of$psrlw(...) __VA_ARGS__
#		define instr$get$operands$of$psubb(...) __VA_ARGS__
#		define instr$get$operands$of$psubd(...) __VA_ARGS__
#		define instr$get$operands$of$psubq(...) __VA_ARGS__
#		define instr$get$operands$of$psubsb(...) __VA_ARGS__
#		define instr$get$operands$of$psubsw(...) __VA_ARGS__
#		define instr$get$operands$of$psubusb(...) __VA_ARGS__
#		define instr$get$operands$of$psubusw(...) __VA_ARGS__
#		define instr$get$operands$of$psubw(...) __VA_ARGS__
#		define instr$get$operands$of$ptest(...) __VA_ARGS__
#		define instr$get$operands$of$ptwrite(...) __VA_ARGS__
#		define instr$get$operands$of$punpckhbw(...) __VA_ARGS__
#		define instr$get$operands$of$punpckhdq(...) __VA_ARGS__
#		define instr$get$operands$of$punpckhqdq(...) __VA_ARGS__
#		define instr$get$operands$of$punpckhwd(...) __VA_ARGS__
#		define instr$get$operands$of$punpcklbw(...) __VA_ARGS__
#		define instr$get$operands$of$punpckldq(...) __VA_ARGS__
#		define instr$get$operands$of$punpcklqdq(...) __VA_ARGS__
#		define instr$get$operands$of$punpcklwd(...) __VA_ARGS__
#		define instr$get$operands$of$push(...) __VA_ARGS__
#		define instr$get$operands$of$pushf(...) __VA_ARGS__
#		define instr$get$operands$of$pushfq(...) __VA_ARGS__
#		define instr$get$operands$of$pxor(...) __VA_ARGS__
#		define instr$get$operands$of$rawbyte(...) __VA_ARGS__
#		define instr$get$operands$of$rawint(...) __VA_ARGS__
#		define instr$get$operands$of$rcl(...) __VA_ARGS__
#		define instr$get$operands$of$rcpps(...) __VA_ARGS__
#		define instr$get$operands$of$rcpss(...) __VA_ARGS__
#		define instr$get$operands$of$rcr(...) __VA_ARGS__
#		define instr$get$operands$of$rdfsbase(...) __VA_ARGS__
#		define instr$get$operands$of$rdgsbase(...) __VA_ARGS__
#		define instr$get$operands$of$rdmsr(...) __VA_ARGS__
#		define instr$get$operands$of$rdpid(...) __VA_ARGS__
#		define instr$get$operands$of$rdpkru(...) __VA_ARGS__
#		define instr$get$operands$of$rdpmc(...) __VA_ARGS__
#		define instr$get$operands$of$rdrand(...) __VA_ARGS__
#		define instr$get$operands$of$rdseed(...) __VA_ARGS__
#		define instr$get$operands$of$rdsspd(...) __VA_ARGS__
#		define instr$get$operands$of$rdsspq(...) __VA_ARGS__
#		define instr$get$operands$of$rdtsc(...) __VA_ARGS__
#		define instr$get$operands$of$rdtscp(...) __VA_ARGS__
#		define instr$get$operands$of$ret(...) __VA_ARGS__
#		define instr$get$operands$of$rol(...) __VA_ARGS__
#		define instr$get$operands$of$ror(...) __VA_ARGS__
#		define instr$get$operands$of$rorx(...) __VA_ARGS__
#		define instr$get$operands$of$roundpd(...) __VA_ARGS__
#		define instr$get$operands$of$roundps(...) __VA_ARGS__
#		define instr$get$operands$of$roundsd(...) __VA_ARGS__
#		define instr$get$operands$of$roundss(...) __VA_ARGS__
#		define instr$get$operands$of$rsm(...) __VA_ARGS__
#		define instr$get$operands$of$rsqrtps(...) __VA_ARGS__
#		define instr$get$operands$of$rsqrtss(...) __VA_ARGS__
#		define instr$get$operands$of$rstorssp(...) __VA_ARGS__
#		define instr$get$operands$of$sal(...) __VA_ARGS__
#		define instr$get$operands$of$sar(...) __VA_ARGS__
#		define instr$get$operands$of$sarx(...) __VA_ARGS__
#		define instr$get$operands$of$saveprevssp(...) __VA_ARGS__
#		define instr$get$operands$of$sbb(...) __VA_ARGS__
#		define instr$get$operands$of$scasb(...) __VA_ARGS__
#		define instr$get$operands$of$scasd(...) __VA_ARGS__
#		define instr$get$operands$of$scasq(...) __VA_ARGS__
#		define instr$get$operands$of$scasw(...) __VA_ARGS__
#		define instr$get$operands$of$serialize(...) __VA_ARGS__
#		define instr$get$operands$of$seta(...) __VA_ARGS__
#		define instr$get$operands$of$setae(...) __VA_ARGS__
#		define instr$get$operands$of$setb(...) __VA_ARGS__
#		define instr$get$operands$of$setbe(...) __VA_ARGS__
#		define instr$get$operands$of$setc(...) __VA_ARGS__
#		define instr$get$operands$of$sete(...) __VA_ARGS__
#		define instr$get$operands$of$setg(...) __VA_ARGS__
#		define instr$get$operands$of$setge(...) __VA_ARGS__
#		define instr$get$operands$of$setl(...) __VA_ARGS__
#		define instr$get$operands$of$setle(...) __VA_ARGS__
#		define instr$get$operands$of$setna(...) __VA_ARGS__
#		define instr$get$operands$of$setnae(...) __VA_ARGS__
#		define instr$get$operands$of$setnb(...) __VA_ARGS__
#		define instr$get$operands$of$setnbe(...) __VA_ARGS__
#		define instr$get$operands$of$setnc(...) __VA_ARGS__
#		define instr$get$operands$of$setne(...) __VA_ARGS__
#		define instr$get$operands$of$setng(...) __VA_ARGS__
#		define instr$get$operands$of$setnge(...) __VA_ARGS__
#		define instr$get$operands$of$setnl(...) __VA_ARGS__
#		define instr$get$operands$of$setnle(...) __VA_ARGS__
#		define instr$get$operands$of$setno(...) __VA_ARGS__
#		define instr$get$operands$of$setnp(...) __VA_ARGS__
#		define instr$get$operands$of$setns(...) __VA_ARGS__
#		define instr$get$operands$of$setnz(...) __VA_ARGS__
#		define instr$get$operands$of$seto(...) __VA_ARGS__
#		define instr$get$operands$of$setp(...) __VA_ARGS__
#		define instr$get$operands$of$setpe(...) __VA_ARGS__
#		define instr$get$operands$of$setpo(...) __VA_ARGS__
#		define instr$get$operands$of$sets(...) __VA_ARGS__
#		define instr$get$operands$of$setssbsy(...) __VA_ARGS__
#		define instr$get$operands$of$setz(...) __VA_ARGS__
#		define instr$get$operands$of$sfence(...) __VA_ARGS__
#		define instr$get$operands$of$sgdt(...) __VA_ARGS__
#		define instr$get$operands$of$sha1msg1(...) __VA_ARGS__
#		define instr$get$operands$of$sha1msg2(...) __VA_ARGS__
#		define instr$get$operands$of$sha1nexte(...) __VA_ARGS__
#		define instr$get$operands$of$sha1rnds4(...) __VA_ARGS__
#		define instr$get$operands$of$sha256msg1(...) __VA_ARGS__
#		define instr$get$operands$of$sha256msg2(...) __VA_ARGS__
#		define instr$get$operands$of$sha256rnds2(...) __VA_ARGS__
#		define instr$get$operands$of$shl(...) __VA_ARGS__
#		define instr$get$operands$of$shld(...) __VA_ARGS__
#		define instr$get$operands$of$shlx(...) __VA_ARGS__
#		define instr$get$operands$of$shr(...) __VA_ARGS__
#		define instr$get$operands$of$shrd(...) __VA_ARGS__
#		define instr$get$operands$of$shrx(...) __VA_ARGS__
#		define instr$get$operands$of$shufpd(...) __VA_ARGS__
#		define instr$get$operands$of$shufps(...) __VA_ARGS__
#		define instr$get$operands$of$sidt(...) __VA_ARGS__
#		define instr$get$operands$of$sldt(...) __VA_ARGS__
#		define instr$get$operands$of$smsw(...) __VA_ARGS__
#		define instr$get$operands$of$sqrtpd(...) __VA_ARGS__
#		define instr$get$operands$of$sqrtps(...) __VA_ARGS__
#		define instr$get$operands$of$sqrtsd(...) __VA_ARGS__
#		define instr$get$operands$of$sqrtss(...) __VA_ARGS__
#		define instr$get$operands$of$stac(...) __VA_ARGS__
#		define instr$get$operands$of$stc(...) __VA_ARGS__
#		define instr$get$operands$of$std(...) __VA_ARGS__
#		define instr$get$operands$of$sti(...) __VA_ARGS__
#		define instr$get$operands$of$stmxcsr(...) __VA_ARGS__
#		define instr$get$operands$of$stosb(...) __VA_ARGS__
#		define instr$get$operands$of$stosd(...) __VA_ARGS__
#		define instr$get$operands$of$stosq(...) __VA_ARGS__
#		define instr$get$operands$of$stosw(...) __VA_ARGS__
#		define instr$get$operands$of$str(...) __VA_ARGS__
#		define instr$get$operands$of$sub(...) __VA_ARGS__
#		define instr$get$operands$of$subpd(...) __VA_ARGS__
#		define instr$get$operands$of$subps(...) __VA_ARGS__
#		define instr$get$operands$of$subsd(...) __VA_ARGS__
#		define instr$get$operands$of$subss(...) __VA_ARGS__
#		define instr$get$operands$of$swapgs(...) __VA_ARGS__
#		define instr$get$operands$of$syscall(...) __VA_ARGS__
#		define instr$get$operands$of$sysenter(...) __VA_ARGS__
#		define instr$get$operands$of$sysexit(...) __VA_ARGS__
#		define instr$get$operands$of$sysexit64(...) __VA_ARGS__
#		define instr$get$operands$of$sysret(...) __VA_ARGS__
#		define instr$get$operands$of$sysret64(...) __VA_ARGS__
#		define instr$get$operands$of$test(...) __VA_ARGS__
#		define instr$get$operands$of$tpause(...) __VA_ARGS__
#		define instr$get$operands$of$tzcnt(...) __VA_ARGS__
#		define instr$get$operands$of$ucomisd(...) __VA_ARGS__
#		define instr$get$operands$of$ucomiss(...) __VA_ARGS__
#		define instr$get$operands$of$ud1(...) __VA_ARGS__
#		define instr$get$operands$of$ud2(...) __VA_ARGS__
#		define instr$get$operands$of$umonitor(...) __VA_ARGS__
#		define instr$get$operands$of$umwait(...) __VA_ARGS__
#		define instr$get$operands$of$unpckhpd(...) __VA_ARGS__
#		define instr$get$operands$of$unpckhps(...) __VA_ARGS__
#		define instr$get$operands$of$unpcklpd(...) __VA_ARGS__
#		define instr$get$operands$of$unpcklps(...) __VA_ARGS__
#		define instr$get$operands$of$vaddpd(...) __VA_ARGS__
#		define instr$get$operands$of$vaddps(...) __VA_ARGS__
#		define instr$get$operands$of$vaddss(...) __VA_ARGS__
#		define instr$get$operands$of$vaddsubpd(...) __VA_ARGS__
#		define instr$get$operands$of$vaddsubps(...) __VA_ARGS__
#		define instr$get$operands$of$vaesdec(...) __VA_ARGS__
#		define instr$get$operands$of$vaesdeclast(...) __VA_ARGS__
#		define instr$get$operands$of$vaesenc(...) __VA_ARGS__
#		define instr$get$operands$of$vaesenclast(...) __VA_ARGS__
#		define instr$get$operands$of$vaesimc(...) __VA_ARGS__
#		define instr$get$operands$of$vaeskeygenassist(...) __VA_ARGS__
#		define instr$get$operands$of$vandnpd(...) __VA_ARGS__
#		define instr$get$operands$of$vandnps(...) __VA_ARGS__
#		define instr$get$operands$of$vandpd(...) __VA_ARGS__
#		define instr$get$operands$of$vandps(...) __VA_ARGS__
#		define instr$get$operands$of$vblendpd(...) __VA_ARGS__
#		define instr$get$operands$of$vblendps(...) __VA_ARGS__
#		define instr$get$operands$of$vblendvpd(...) __VA_ARGS__
#		define instr$get$operands$of$vblendvps(...) __VA_ARGS__
#		define instr$get$operands$of$vbroadcastf128(...) __VA_ARGS__
#		define instr$get$operands$of$vbroadcasti128(...) __VA_ARGS__
#		define instr$get$operands$of$vbroadcastsd(...) __VA_ARGS__
#		define instr$get$operands$of$vbroadcastss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_ospd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_osps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_ossd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_osss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_uqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_uqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_uqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_uqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_uspd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_usps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_ussd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeq_usss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpeqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalse_ospd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalse_osps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalse_ossd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalse_osss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalsepd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalseps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalsesd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpfalsess(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpge_oqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpge_oqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpge_oqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpge_oqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgepd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgeps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgesd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgess(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgt_oqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgt_oqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgt_oqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgt_oqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgtpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgtps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgtsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpgtss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmple_oqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmple_oqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmple_oqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmple_oqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmplepd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpleps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmplesd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpless(...) __VA_ARGS__
#		define instr$get$operands$of$vcmplt_oqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmplt_oqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmplt_oqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmplt_oqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpltpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpltps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpltsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpltss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_oqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_oqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_oqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_oqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_ospd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_osps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_ossd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_osss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_uspd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_usps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_ussd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneq_usss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpneqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnge_uqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnge_uqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnge_uqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnge_uqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngepd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngeps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngesd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngess(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngt_uqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngt_uqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngt_uqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngt_uqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngtpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngtps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngtsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpngtss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnle_uqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnle_uqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnle_uqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnle_uqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnlepd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnleps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnlesd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnless(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnlt_uqpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnlt_uqps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnlt_uqsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnlt_uqss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnltpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnltps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnltsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpnltss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpord_spd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpord_sps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpord_ssd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpord_sss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpordpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpordps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpordsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpordss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmppd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptrue_uspd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptrue_usps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptrue_ussd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptrue_usss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptruepd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptrueps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptruesd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmptruess(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunord_spd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunord_sps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunord_ssd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunord_sss(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunordpd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunordps(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunordsd(...) __VA_ARGS__
#		define instr$get$operands$of$vcmpunordss(...) __VA_ARGS__
#		define instr$get$operands$of$vcomisd(...) __VA_ARGS__
#		define instr$get$operands$of$vcomiss(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtdq2pd(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtdq2ps(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtpd2dq(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtpd2ps(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtph2ps(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtps2dq(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtps2pd(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtps2ph(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtsd2si(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtsd2ss(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtsi2sd(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtsi2ss(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtss2sd(...) __VA_ARGS__
#		define instr$get$operands$of$vcvtss2si(...) __VA_ARGS__
#		define instr$get$operands$of$vcvttpd2dq(...) __VA_ARGS__
#		define instr$get$operands$of$vcvttps2dq(...) __VA_ARGS__
#		define instr$get$operands$of$vcvttsd2si(...) __VA_ARGS__
#		define instr$get$operands$of$vcvttss2si(...) __VA_ARGS__
#		define instr$get$operands$of$vdivpd(...) __VA_ARGS__
#		define instr$get$operands$of$vdivps(...) __VA_ARGS__
#		define instr$get$operands$of$vdivsd(...) __VA_ARGS__
#		define instr$get$operands$of$vdivss(...) __VA_ARGS__
#		define instr$get$operands$of$vdppd(...) __VA_ARGS__
#		define instr$get$operands$of$vdpps(...) __VA_ARGS__
#		define instr$get$operands$of$vextractf128(...) __VA_ARGS__
#		define instr$get$operands$of$vextracti128(...) __VA_ARGS__
#		define instr$get$operands$of$vextractps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd132pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd132ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd132sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd132ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd213pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd213ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd213sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd213ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd231pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd231ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd231sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmadd231ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfmaddsub132pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmaddsub132ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmaddsub213pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmaddsub213ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmaddsub231pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmaddsub231ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub132pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub132ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub132sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub132ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub213pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub213ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub213sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub213ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub231pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub231ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub231sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsub231ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsubadd132pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsubadd132ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsubadd213pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsubadd213ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsubadd231pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfmsubadd231ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd132pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd132ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd132sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd132ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd213pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd213ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd213sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd213ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd231pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd231ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd231sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmadd231ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub132pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub132ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub132sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub132ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub213pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub213ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub213sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub213ss(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub231pd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub231ps(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub231sd(...) __VA_ARGS__
#		define instr$get$operands$of$vfnmsub231ss(...) __VA_ARGS__
#		define instr$get$operands$of$vgf2p8affineinvqb(...) __VA_ARGS__
#		define instr$get$operands$of$vgf2p8affineqb(...) __VA_ARGS__
#		define instr$get$operands$of$vgf2p8mulb(...) __VA_ARGS__
#		define instr$get$operands$of$vhaddpd(...) __VA_ARGS__
#		define instr$get$operands$of$vhaddps(...) __VA_ARGS__
#		define instr$get$operands$of$vhsubpd(...) __VA_ARGS__
#		define instr$get$operands$of$vhsubps(...) __VA_ARGS__
#		define instr$get$operands$of$vinsertf128(...) __VA_ARGS__
#		define instr$get$operands$of$vinserti128(...) __VA_ARGS__
#		define instr$get$operands$of$vinsertps(...) __VA_ARGS__
#		define instr$get$operands$of$vlddqu(...) __VA_ARGS__
#		define instr$get$operands$of$vldmxcsr(...) __VA_ARGS__
#		define instr$get$operands$of$vmaskmovdqu(...) __VA_ARGS__
#		define instr$get$operands$of$vmaskmovpd(...) __VA_ARGS__
#		define instr$get$operands$of$vmaskmovps(...) __VA_ARGS__
#		define instr$get$operands$of$vmaxpd(...) __VA_ARGS__
#		define instr$get$operands$of$vmaxps(...) __VA_ARGS__
#		define instr$get$operands$of$vmaxsd(...) __VA_ARGS__
#		define instr$get$operands$of$vmaxss(...) __VA_ARGS__
#		define instr$get$operands$of$vmcall(...) __VA_ARGS__
#		define instr$get$operands$of$vmclear(...) __VA_ARGS__
#		define instr$get$operands$of$vmfunc(...) __VA_ARGS__
#		define instr$get$operands$of$vminpd(...) __VA_ARGS__
#		define instr$get$operands$of$vminps(...) __VA_ARGS__
#		define instr$get$operands$of$vminsd(...) __VA_ARGS__
#		define instr$get$operands$of$vminss(...) __VA_ARGS__
#		define instr$get$operands$of$vmlaunch(...) __VA_ARGS__
#		define instr$get$operands$of$vmovapd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovaps(...) __VA_ARGS__
#		define instr$get$operands$of$vmovd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovddup(...) __VA_ARGS__
#		define instr$get$operands$of$vmovdqa(...) __VA_ARGS__
#		define instr$get$operands$of$vmovdqu(...) __VA_ARGS__
#		define instr$get$operands$of$vmovhlps(...) __VA_ARGS__
#		define instr$get$operands$of$vmovhpd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovhps(...) __VA_ARGS__
#		define instr$get$operands$of$vmovlhps(...) __VA_ARGS__
#		define instr$get$operands$of$vmovlpd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovlps(...) __VA_ARGS__
#		define instr$get$operands$of$vmovmskpd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovmskps(...) __VA_ARGS__
#		define instr$get$operands$of$vmovntdq(...) __VA_ARGS__
#		define instr$get$operands$of$vmovntdqa(...) __VA_ARGS__
#		define instr$get$operands$of$vmovntpd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovntps(...) __VA_ARGS__
#		define instr$get$operands$of$vmovq(...) __VA_ARGS__
#		define instr$get$operands$of$vmovsd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovshdup(...) __VA_ARGS__
#		define instr$get$operands$of$vmovsldup(...) __VA_ARGS__
#		define instr$get$operands$of$vmovss(...) __VA_ARGS__
#		define instr$get$operands$of$vmovupd(...) __VA_ARGS__
#		define instr$get$operands$of$vmovups(...) __VA_ARGS__
#		define instr$get$operands$of$vmpsadbw(...) __VA_ARGS__
#		define instr$get$operands$of$vmptrld(...) __VA_ARGS__
#		define instr$get$operands$of$vmptrst(...) __VA_ARGS__
#		define instr$get$operands$of$vmread(...) __VA_ARGS__
#		define instr$get$operands$of$vmresume(...) __VA_ARGS__
#		define instr$get$operands$of$vmulpd(...) __VA_ARGS__
#		define instr$get$operands$of$vmulps(...) __VA_ARGS__
#		define instr$get$operands$of$vmulsd(...) __VA_ARGS__
#		define instr$get$operands$of$vmulss(...) __VA_ARGS__
#		define instr$get$operands$of$vmwrite(...) __VA_ARGS__
#		define instr$get$operands$of$vmxoff(...) __VA_ARGS__
#		define instr$get$operands$of$vmxon(...) __VA_ARGS__
#		define instr$get$operands$of$vorpd(...) __VA_ARGS__
#		define instr$get$operands$of$vorps(...) __VA_ARGS__
#		define instr$get$operands$of$vpabsb(...) __VA_ARGS__
#		define instr$get$operands$of$vpabsd(...) __VA_ARGS__
#		define instr$get$operands$of$vpabsw(...) __VA_ARGS__
#		define instr$get$operands$of$vpackssdw(...) __VA_ARGS__
#		define instr$get$operands$of$vpacksswb(...) __VA_ARGS__
#		define instr$get$operands$of$vpackusdw(...) __VA_ARGS__
#		define instr$get$operands$of$vpackuswb(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddb(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddd(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddq(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddsb(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddsw(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddusb(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddusw(...) __VA_ARGS__
#		define instr$get$operands$of$vpaddw(...) __VA_ARGS__
#		define instr$get$operands$of$vpalignr(...) __VA_ARGS__
#		define instr$get$operands$of$vpand(...) __VA_ARGS__
#		define instr$get$operands$of$vpandn(...) __VA_ARGS__
#		define instr$get$operands$of$vpavgb(...) __VA_ARGS__
#		define instr$get$operands$of$vpavgw(...) __VA_ARGS__
#		define instr$get$operands$of$vpblendd(...) __VA_ARGS__
#		define instr$get$operands$of$vpblendvb(...) __VA_ARGS__
#		define instr$get$operands$of$vpblendw(...) __VA_ARGS__
#		define instr$get$operands$of$vpbroadcastb(...) __VA_ARGS__
#		define instr$get$operands$of$vpbroadcastd(...) __VA_ARGS__
#		define instr$get$operands$of$vpbroadcastq(...) __VA_ARGS__
#		define instr$get$operands$of$vpbroadcastw(...) __VA_ARGS__
#		define instr$get$operands$of$vpclmulqdq(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpeqb(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpeqd(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpeqq(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpeqw(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpestri(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpestrm(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpgtb(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpgtd(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpgtq(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpgtw(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpistri(...) __VA_ARGS__
#		define instr$get$operands$of$vpcmpistrm(...) __VA_ARGS__
#		define instr$get$operands$of$vpdpbusd(...) __VA_ARGS__
#		define instr$get$operands$of$vpdpbusds(...) __VA_ARGS__
#		define instr$get$operands$of$vpdpwssd(...) __VA_ARGS__
#		define instr$get$operands$of$vpdpwssds(...) __VA_ARGS__
#		define instr$get$operands$of$vperm2f128(...) __VA_ARGS__
#		define instr$get$operands$of$vperm2i128(...) __VA_ARGS__
#		define instr$get$operands$of$vpermd(...) __VA_ARGS__
#		define instr$get$operands$of$vpermilpd(...) __VA_ARGS__
#		define instr$get$operands$of$vpermilps(...) __VA_ARGS__
#		define instr$get$operands$of$vpermpd(...) __VA_ARGS__
#		define instr$get$operands$of$vpermps(...) __VA_ARGS__
#		define instr$get$operands$of$vpermq(...) __VA_ARGS__
#		define instr$get$operands$of$vpextrb(...) __VA_ARGS__
#		define instr$get$operands$of$vpextrd(...) __VA_ARGS__
#		define instr$get$operands$of$vpextrq(...) __VA_ARGS__
#		define instr$get$operands$of$vpextrw(...) __VA_ARGS__
#		define instr$get$operands$of$vphaddd(...) __VA_ARGS__
#		define instr$get$operands$of$vphaddsw(...) __VA_ARGS__
#		define instr$get$operands$of$vphaddw(...) __VA_ARGS__
#		define instr$get$operands$of$vphminposuw(...) __VA_ARGS__
#		define instr$get$operands$of$vphsubd(...) __VA_ARGS__
#		define instr$get$operands$of$vphsubsw(...) __VA_ARGS__
#		define instr$get$operands$of$vphsubw(...) __VA_ARGS__
#		define instr$get$operands$of$vpinsrb(...) __VA_ARGS__
#		define instr$get$operands$of$vpinsrd(...) __VA_ARGS__
#		define instr$get$operands$of$vpinsrq(...) __VA_ARGS__
#		define instr$get$operands$of$vpinsrw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaddubsw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaddwd(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaskmovd(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaskmovq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaxsb(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaxsd(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaxsw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaxub(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaxud(...) __VA_ARGS__
#		define instr$get$operands$of$vpmaxuw(...) __VA_ARGS__
#		define instr$get$operands$of$vpminsb(...) __VA_ARGS__
#		define instr$get$operands$of$vpminsd(...) __VA_ARGS__
#		define instr$get$operands$of$vpminsw(...) __VA_ARGS__
#		define instr$get$operands$of$vpminub(...) __VA_ARGS__
#		define instr$get$operands$of$vpminud(...) __VA_ARGS__
#		define instr$get$operands$of$vpminuw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovmskb(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovsxbd(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovsxbq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovsxbw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovsxdq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovsxwd(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovsxwq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovzxbd(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovzxbq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovzxbw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovzxdq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovzxwd(...) __VA_ARGS__
#		define instr$get$operands$of$vpmovzxwq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmuldq(...) __VA_ARGS__
#		define instr$get$operands$of$vpmulhrsw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmulhuw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmulhw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmulld(...) __VA_ARGS__
#		define instr$get$operands$of$vpmullw(...) __VA_ARGS__
#		define instr$get$operands$of$vpmuludq(...) __VA_ARGS__
#		define instr$get$operands$of$vpor(...) __VA_ARGS__
#		define instr$get$operands$of$vpsadbw(...) __VA_ARGS__
#		define instr$get$operands$of$vpshufb(...) __VA_ARGS__
#		define instr$get$operands$of$vpshufd(...) __VA_ARGS__
#		define instr$get$operands$of$vpshufhw(...) __VA_ARGS__
#		define instr$get$operands$of$vpshuflw(...) __VA_ARGS__
#		define instr$get$operands$of$vpsignb(...) __VA_ARGS__
#		define instr$get$operands$of$vpsignd(...) __VA_ARGS__
#		define instr$get$operands$of$vpsignw(...) __VA_ARGS__
#		define instr$get$operands$of$vpslld(...) __VA_ARGS__
#		define instr$get$operands$of$vpslldq(...) __VA_ARGS__
#		define instr$get$operands$of$vpsllq(...) __VA_ARGS__
#		define instr$get$operands$of$vpsllvd(...) __VA_ARGS__
#		define instr$get$operands$of$vpsllvq(...) __VA_ARGS__
#		define instr$get$operands$of$vpsllw(...) __VA_ARGS__
#		define instr$get$operands$of$vpsrad(...) __VA_ARGS__
#		define instr$get$operands$of$vpsravd(...) __VA_ARGS__
#		define instr$get$operands$of$vpsraw(...) __VA_ARGS__
#		define instr$get$operands$of$vpsrld(...) __VA_ARGS__
#		define instr$get$operands$of$vpsrldq(...) __VA_ARGS__
#		define instr$get$operands$of$vpsrlq(...) __VA_ARGS__
#		define instr$get$operands$of$vpsrlvd(...) __VA_ARGS__
#		define instr$get$operands$of$vpsrlvq(...) __VA_ARGS__
#		define instr$get$operands$of$vpsrlw(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubb(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubd(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubq(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubsb(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubsw(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubusb(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubusw(...) __VA_ARGS__
#		define instr$get$operands$of$vpsubw(...) __VA_ARGS__
#		define instr$get$operands$of$vptest(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpckhbw(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpckhdq(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpckhqdq(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpckhwd(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpcklbw(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpckldq(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpcklqdq(...) __VA_ARGS__
#		define instr$get$operands$of$vpunpcklwd(...) __VA_ARGS__
#		define instr$get$operands$of$vpxor(...) __VA_ARGS__
#		define instr$get$operands$of$vrcpps(...) __VA_ARGS__
#		define instr$get$operands$of$vrcpss(...) __VA_ARGS__
#		define instr$get$operands$of$vroundpd(...) __VA_ARGS__
#		define instr$get$operands$of$vroundps(...) __VA_ARGS__
#		define instr$get$operands$of$vroundsd(...) __VA_ARGS__
#		define instr$get$operands$of$vroundss(...) __VA_ARGS__
#		define instr$get$operands$of$vrsqrtps(...) __VA_ARGS__
#		define instr$get$operands$of$vrsqrtss(...) __VA_ARGS__
#		define instr$get$operands$of$vshufpd(...) __VA_ARGS__
#		define instr$get$operands$of$vshufps(...) __VA_ARGS__
#		define instr$get$operands$of$vsqrtpd(...) __VA_ARGS__
#		define instr$get$operands$of$vsqrtps(...) __VA_ARGS__
#		define instr$get$operands$of$vsqrtsd(...) __VA_ARGS__
#		define instr$get$operands$of$vsqrtss(...) __VA_ARGS__
#		define instr$get$operands$of$vstmxcsr(...) __VA_ARGS__
#		define instr$get$operands$of$vsubpd(...) __VA_ARGS__
#		define instr$get$operands$of$vsubps(...) __VA_ARGS__
#		define instr$get$operands$of$vsubsd(...) __VA_ARGS__
#		define instr$get$operands$of$vsubss(...) __VA_ARGS__
#		define instr$get$operands$of$vtestpd(...) __VA_ARGS__
#		define instr$get$operands$of$vtestps(...) __VA_ARGS__
#		define instr$get$operands$of$vucomisd(...) __VA_ARGS__
#		define instr$get$operands$of$vucomiss(...) __VA_ARGS__
#		define instr$get$operands$of$vunpckhpd(...) __VA_ARGS__
#		define instr$get$operands$of$vunpckhps(...) __VA_ARGS__
#		define instr$get$operands$of$vunpcklpd(...) __VA_ARGS__
#		define instr$get$operands$of$vunpcklps(...) __VA_ARGS__
#		define instr$get$operands$of$vxorpd(...) __VA_ARGS__
#		define instr$get$operands$of$vxorps(...) __VA_ARGS__
#		define instr$get$operands$of$vzeroall(...) __VA_ARGS__
#		define instr$get$operands$of$vzeroupper(...) __VA_ARGS__
#		define instr$get$operands$of$wait(...) __VA_ARGS__
#		define instr$get$operands$of$wbinvd(...) __VA_ARGS__
#		define instr$get$operands$of$wbnoinvd(...) __VA_ARGS__
#		define instr$get$operands$of$wrfsbase(...) __VA_ARGS__
#		define instr$get$operands$of$wrgsbase(...) __VA_ARGS__
#		define instr$get$operands$of$wrmsr(...) __VA_ARGS__
#		define instr$get$operands$of$wrpkru(...) __VA_ARGS__
#		define instr$get$operands$of$wrssd(...) __VA_ARGS__
#		define instr$get$operands$of$wrssq(...) __VA_ARGS__
#		define instr$get$operands$of$wrussd(...) __VA_ARGS__
#		define instr$get$operands$of$wrussq(...) __VA_ARGS__
#		define instr$get$operands$of$xabort(...) __VA_ARGS__
#		define instr$get$operands$of$xacquire(...) __VA_ARGS__
#		define instr$get$operands$of$xadd(...) __VA_ARGS__
#		define instr$get$operands$of$xbegin(...) __VA_ARGS__
#		define instr$get$operands$of$xchg(...) __VA_ARGS__
#		define instr$get$operands$of$xend(...) __VA_ARGS__
#		define instr$get$operands$of$xgetbv(...) __VA_ARGS__
#		define instr$get$operands$of$xlatb(...) __VA_ARGS__
#		define instr$get$operands$of$xor(...) __VA_ARGS__
#		define instr$get$operands$of$xorpd(...) __VA_ARGS__
#		define instr$get$operands$of$xorps(...) __VA_ARGS__
#		define instr$get$operands$of$xrelease(...) __VA_ARGS__
#		define instr$get$operands$of$xrstor(...) __VA_ARGS__
#		define instr$get$operands$of$xrstor64(...) __VA_ARGS__
#		define instr$get$operands$of$xrstors(...) __VA_ARGS__
#		define instr$get$operands$of$xrstors64(...) __VA_ARGS__
#		define instr$get$operands$of$xsave(...) __VA_ARGS__
#		define instr$get$operands$of$xsave64(...) __VA_ARGS__
#		define instr$get$operands$of$xsavec(...) __VA_ARGS__
#		define instr$get$operands$of$xsavec64(...) __VA_ARGS__
#		define instr$get$operands$of$xsaveopt(...) __VA_ARGS__
#		define instr$get$operands$of$xsaveopt64(...) __VA_ARGS__
#		define instr$get$operands$of$xsaves(...) __VA_ARGS__
#		define instr$get$operands$of$xsaves64(...) __VA_ARGS__
#		define instr$get$operands$of$xsetbv(...) __VA_ARGS__
#		define instr$get$operands$of$xtest(...) __VA_ARGS__
#		define instr$get$operator(i) instr$get$operator$of$##i
#		define instr$get$operator$of$adc(...) adc
#		define instr$get$operator$of$adcx(...) adcx
#		define instr$get$operator$of$add(...) add
#		define instr$get$operator$of$addpd(...) addpd
#		define instr$get$operator$of$addps(...) addps
#		define instr$get$operator$of$addsd(...) addsd
#		define instr$get$operator$of$addss(...) addss
#		define instr$get$operator$of$addsubpd(...) addsubpd
#		define instr$get$operator$of$addsubps(...) addsubps
#		define instr$get$operator$of$adox(...) adox
#		define instr$get$operator$of$aesdec(...) aesdec
#		define instr$get$operator$of$aesdeclast(...) aesdeclast
#		define instr$get$operator$of$aesenc(...) aesenc
#		define instr$get$operator$of$aesenclast(...) aesenclast
#		define instr$get$operator$of$aesimc(...) aesimc
#		define instr$get$operator$of$aeskeygenassist(...) aeskeygenassist
#		define instr$get$operator$of$and(...) and
#		define instr$get$operator$of$andn(...) andn
#		define instr$get$operator$of$andnpd(...) andnpd
#		define instr$get$operator$of$andnps(...) andnps
#		define instr$get$operator$of$andpd(...) andpd
#		define instr$get$operator$of$andps(...) andps
#		define instr$get$operator$of$bextr(...) bextr
#		define instr$get$operator$of$blendpd(...) blendpd
#		define instr$get$operator$of$blendps(...) blendps
#		define instr$get$operator$of$blendvpd(...) blendvpd
#		define instr$get$operator$of$blendvps(...) blendvps
#		define instr$get$operator$of$blsi(...) blsi
#		define instr$get$operator$of$blsmsk(...) blsmsk
#		define instr$get$operator$of$blsr(...) blsr
#		define instr$get$operator$of$bsf(...) bsf
#		define instr$get$operator$of$bsr(...) bsr
#		define instr$get$operator$of$bswap(...) bswap
#		define instr$get$operator$of$bt(...) bt
#		define instr$get$operator$of$btc(...) btc
#		define instr$get$operator$of$btr(...) btr
#		define instr$get$operator$of$bts(...) bts
#		define instr$get$operator$of$bzhi(...) bzhi
#		define instr$get$operator$of$call(...) call
#		define instr$get$operator$of$cdq(...) cdq
#		define instr$get$operator$of$clac(...) clac
#		define instr$get$operator$of$clc(...) clc
#		define instr$get$operator$of$cld(...) cld
#		define instr$get$operator$of$cldemote(...) cldemote
#		define instr$get$operator$of$clflush(...) clflush
#		define instr$get$operator$of$clflushopt(...) clflushopt
#		define instr$get$operator$of$cli(...) cli
#		define instr$get$operator$of$clrssbsy(...) clrssbsy
#		define instr$get$operator$of$clts(...) clts
#		define instr$get$operator$of$clwb(...) clwb
#		define instr$get$operator$of$cmc(...) cmc
#		define instr$get$operator$of$cmova(...) cmova
#		define instr$get$operator$of$cmovae(...) cmovae
#		define instr$get$operator$of$cmovb(...) cmovb
#		define instr$get$operator$of$cmovbe(...) cmovbe
#		define instr$get$operator$of$cmovc(...) cmovc
#		define instr$get$operator$of$cmove(...) cmove
#		define instr$get$operator$of$cmovg(...) cmovg
#		define instr$get$operator$of$cmovge(...) cmovge
#		define instr$get$operator$of$cmovl(...) cmovl
#		define instr$get$operator$of$cmovle(...) cmovle
#		define instr$get$operator$of$cmovna(...) cmovna
#		define instr$get$operator$of$cmovnae(...) cmovnae
#		define instr$get$operator$of$cmovnb(...) cmovnb
#		define instr$get$operator$of$cmovnbe(...) cmovnbe
#		define instr$get$operator$of$cmovnc(...) cmovnc
#		define instr$get$operator$of$cmovne(...) cmovne
#		define instr$get$operator$of$cmovng(...) cmovng
#		define instr$get$operator$of$cmovnge(...) cmovnge
#		define instr$get$operator$of$cmovnl(...) cmovnl
#		define instr$get$operator$of$cmovnle(...) cmovnle
#		define instr$get$operator$of$cmovno(...) cmovno
#		define instr$get$operator$of$cmovnp(...) cmovnp
#		define instr$get$operator$of$cmovns(...) cmovns
#		define instr$get$operator$of$cmovnz(...) cmovnz
#		define instr$get$operator$of$cmovo(...) cmovo
#		define instr$get$operator$of$cmovp(...) cmovp
#		define instr$get$operator$of$cmovpe(...) cmovpe
#		define instr$get$operator$of$cmovpo(...) cmovpo
#		define instr$get$operator$of$cmovs(...) cmovs
#		define instr$get$operator$of$cmovz(...) cmovz
#		define instr$get$operator$of$cmp(...) cmp
#		define instr$get$operator$of$cmpeqpd(...) cmpeqpd
#		define instr$get$operator$of$cmpeqps(...) cmpeqps
#		define instr$get$operator$of$cmpeqsd(...) cmpeqsd
#		define instr$get$operator$of$cmpeqss(...) cmpeqss
#		define instr$get$operator$of$cmplepd(...) cmplepd
#		define instr$get$operator$of$cmpleps(...) cmpleps
#		define instr$get$operator$of$cmplesd(...) cmplesd
#		define instr$get$operator$of$cmpless(...) cmpless
#		define instr$get$operator$of$cmpltpd(...) cmpltpd
#		define instr$get$operator$of$cmpltps(...) cmpltps
#		define instr$get$operator$of$cmpltsd(...) cmpltsd
#		define instr$get$operator$of$cmpltss(...) cmpltss
#		define instr$get$operator$of$cmpneqpd(...) cmpneqpd
#		define instr$get$operator$of$cmpneqps(...) cmpneqps
#		define instr$get$operator$of$cmpneqsd(...) cmpneqsd
#		define instr$get$operator$of$cmpneqss(...) cmpneqss
#		define instr$get$operator$of$cmpnlepd(...) cmpnlepd
#		define instr$get$operator$of$cmpnleps(...) cmpnleps
#		define instr$get$operator$of$cmpnlesd(...) cmpnlesd
#		define instr$get$operator$of$cmpnless(...) cmpnless
#		define instr$get$operator$of$cmpnltpd(...) cmpnltpd
#		define instr$get$operator$of$cmpnltps(...) cmpnltps
#		define instr$get$operator$of$cmpnltsd(...) cmpnltsd
#		define instr$get$operator$of$cmpnltss(...) cmpnltss
#		define instr$get$operator$of$cmpordpd(...) cmpordpd
#		define instr$get$operator$of$cmpordps(...) cmpordps
#		define instr$get$operator$of$cmpordsd(...) cmpordsd
#		define instr$get$operator$of$cmpordss(...) cmpordss
#		define instr$get$operator$of$cmppd(...) cmppd
#		define instr$get$operator$of$cmpps(...) cmpps
#		define instr$get$operator$of$cmpsb(...) cmpsb
#		define instr$get$operator$of$cmpsd(...) cmpsd
#		define instr$get$operator$of$cmpsq(...) cmpsq
#		define instr$get$operator$of$cmpss(...) cmpss
#		define instr$get$operator$of$cmpsw(...) cmpsw
#		define instr$get$operator$of$cmpunordpd(...) cmpunordpd
#		define instr$get$operator$of$cmpunordps(...) cmpunordps
#		define instr$get$operator$of$cmpunordsd(...) cmpunordsd
#		define instr$get$operator$of$cmpunordss(...) cmpunordss
#		define instr$get$operator$of$cmpxchg(...) cmpxchg
#		define instr$get$operator$of$cmpxchg8b(...) cmpxchg8b
#		define instr$get$operator$of$comisd(...) comisd
#		define instr$get$operator$of$comiss(...) comiss
#		define instr$get$operator$of$cpuid(...) cpuid
#		define instr$get$operator$of$cqo(...) cqo
#		define instr$get$operator$of$crc32(...) crc32
#		define instr$get$operator$of$cvtdq2pd(...) cvtdq2pd
#		define instr$get$operator$of$cvtdq2ps(...) cvtdq2ps
#		define instr$get$operator$of$cvtpd2dq(...) cvtpd2dq
#		define instr$get$operator$of$cvtpd2pi(...) cvtpd2pi
#		define instr$get$operator$of$cvtpd2ps(...) cvtpd2ps
#		define instr$get$operator$of$cvtpi2pd(...) cvtpi2pd
#		define instr$get$operator$of$cvtpi2ps(...) cvtpi2ps
#		define instr$get$operator$of$cvtps2dq(...) cvtps2dq
#		define instr$get$operator$of$cvtps2pd(...) cvtps2pd
#		define instr$get$operator$of$cvtps2pi(...) cvtps2pi
#		define instr$get$operator$of$cvtsd2si(...) cvtsd2si
#		define instr$get$operator$of$cvtsd2ss(...) cvtsd2ss
#		define instr$get$operator$of$cvtsi2sd(...) cvtsi2sd
#		define instr$get$operator$of$cvtsi2ss(...) cvtsi2ss
#		define instr$get$operator$of$cvtss2sd(...) cvtss2sd
#		define instr$get$operator$of$cvtss2si(...) cvtss2si
#		define instr$get$operator$of$cvttpd2dq(...) cvttpd2dq
#		define instr$get$operator$of$cvttpd2pi(...) cvttpd2pi
#		define instr$get$operator$of$cvttps2dq(...) cvttps2dq
#		define instr$get$operator$of$cvttps2pi(...) cvttps2pi
#		define instr$get$operator$of$cvttsd2si(...) cvttsd2si
#		define instr$get$operator$of$cvttss2si(...) cvttss2si
#		define instr$get$operator$of$cwd(...) cwd
#		define instr$get$operator$of$dec(...) dec
#		define instr$get$operator$of$div(...) div
#		define instr$get$operator$of$divpd(...) divpd
#		define instr$get$operator$of$divps(...) divps
#		define instr$get$operator$of$divsd(...) divsd
#		define instr$get$operator$of$divss(...) divss
#		define instr$get$operator$of$dppd(...) dppd
#		define instr$get$operator$of$dpps(...) dpps
#		define instr$get$operator$of$emms(...) emms
#		define instr$get$operator$of$encls(...) encls
#		define instr$get$operator$of$enclu(...) enclu
#		define instr$get$operator$of$enclv(...) enclv
#		define instr$get$operator$of$endbr32(...) endbr32
#		define instr$get$operator$of$endbr64(...) endbr64
#		define instr$get$operator$of$enter(...) enter
#		define instr$get$operator$of$extractps(...) extractps
#		define instr$get$operator$of$f2xm1(...) f2xm1
#		define instr$get$operator$of$fabs(...) fabs
#		define instr$get$operator$of$fadd(...) fadd
#		define instr$get$operator$of$faddp(...) faddp
#		define instr$get$operator$of$fbld(...) fbld
#		define instr$get$operator$of$fbstp(...) fbstp
#		define instr$get$operator$of$fchs(...) fchs
#		define instr$get$operator$of$fclex(...) fclex
#		define instr$get$operator$of$fcmovb(...) fcmovb
#		define instr$get$operator$of$fcmovbe(...) fcmovbe
#		define instr$get$operator$of$fcmove(...) fcmove
#		define instr$get$operator$of$fcmovnb(...) fcmovnb
#		define instr$get$operator$of$fcmovnbe(...) fcmovnbe
#		define instr$get$operator$of$fcmovne(...) fcmovne
#		define instr$get$operator$of$fcmovnu(...) fcmovnu
#		define instr$get$operator$of$fcmovu(...) fcmovu
#		define instr$get$operator$of$fcom(...) fcom
#		define instr$get$operator$of$fcomi(...) fcomi
#		define instr$get$operator$of$fcomip(...) fcomip
#		define instr$get$operator$of$fcomp(...) fcomp
#		define instr$get$operator$of$fcompp(...) fcompp
#		define instr$get$operator$of$fcos(...) fcos
#		define instr$get$operator$of$fdecstp(...) fdecstp
#		define instr$get$operator$of$fdiv(...) fdiv
#		define instr$get$operator$of$fdivp(...) fdivp
#		define instr$get$operator$of$fdivr(...) fdivr
#		define instr$get$operator$of$fdivrp(...) fdivrp
#		define instr$get$operator$of$ffree(...) ffree
#		define instr$get$operator$of$fiadd(...) fiadd
#		define instr$get$operator$of$ficom(...) ficom
#		define instr$get$operator$of$ficomp(...) ficomp
#		define instr$get$operator$of$fidiv(...) fidiv
#		define instr$get$operator$of$fidivr(...) fidivr
#		define instr$get$operator$of$fild(...) fild
#		define instr$get$operator$of$fimul(...) fimul
#		define instr$get$operator$of$fincstp(...) fincstp
#		define instr$get$operator$of$finit(...) finit
#		define instr$get$operator$of$fist(...) fist
#		define instr$get$operator$of$fistp(...) fistp
#		define instr$get$operator$of$fisttp(...) fisttp
#		define instr$get$operator$of$fisub(...) fisub
#		define instr$get$operator$of$fisubr(...) fisubr
#		define instr$get$operator$of$fld(...) fld
#		define instr$get$operator$of$fld1(...) fld1
#		define instr$get$operator$of$fldcw(...) fldcw
#		define instr$get$operator$of$fldenv(...) fldenv
#		define instr$get$operator$of$fldl2e(...) fldl2e
#		define instr$get$operator$of$fldl2t(...) fldl2t
#		define instr$get$operator$of$fldlg2(...) fldlg2
#		define instr$get$operator$of$fldln2(...) fldln2
#		define instr$get$operator$of$fldpi(...) fldpi
#		define instr$get$operator$of$fldz(...) fldz
#		define instr$get$operator$of$fmul(...) fmul
#		define instr$get$operator$of$fmulp(...) fmulp
#		define instr$get$operator$of$fnclex(...) fnclex
#		define instr$get$operator$of$fninit(...) fninit
#		define instr$get$operator$of$fnop(...) fnop
#		define instr$get$operator$of$fnsave(...) fnsave
#		define instr$get$operator$of$fnstcw(...) fnstcw
#		define instr$get$operator$of$fnstenv(...) fnstenv
#		define instr$get$operator$of$fnstsw(...) fnstsw
#		define instr$get$operator$of$fpatan(...) fpatan
#		define instr$get$operator$of$fprem(...) fprem
#		define instr$get$operator$of$fprem1(...) fprem1
#		define instr$get$operator$of$fptan(...) fptan
#		define instr$get$operator$of$frndint(...) frndint
#		define instr$get$operator$of$frstor(...) frstor
#		define instr$get$operator$of$fsave(...) fsave
#		define instr$get$operator$of$fscale(...) fscale
#		define instr$get$operator$of$fsin(...) fsin
#		define instr$get$operator$of$fsincos(...) fsincos
#		define instr$get$operator$of$fsqrt(...) fsqrt
#		define instr$get$operator$of$fst(...) fst
#		define instr$get$operator$of$fstcw(...) fstcw
#		define instr$get$operator$of$fstenv(...) fstenv
#		define instr$get$operator$of$fstp(...) fstp
#		define instr$get$operator$of$fstsw(...) fstsw
#		define instr$get$operator$of$fsub(...) fsub
#		define instr$get$operator$of$fsubp(...) fsubp
#		define instr$get$operator$of$fsubr(...) fsubr
#		define instr$get$operator$of$fsubrp(...) fsubrp
#		define instr$get$operator$of$ftst(...) ftst
#		define instr$get$operator$of$fucom(...) fucom
#		define instr$get$operator$of$fucomi(...) fucomi
#		define instr$get$operator$of$fucomip(...) fucomip
#		define instr$get$operator$of$fucomp(...) fucomp
#		define instr$get$operator$of$fucompp(...) fucompp
#		define instr$get$operator$of$fwait(...) fwait
#		define instr$get$operator$of$fxam(...) fxam
#		define instr$get$operator$of$fxch(...) fxch
#		define instr$get$operator$of$fxrstor(...) fxrstor
#		define instr$get$operator$of$fxrstor64(...) fxrstor64
#		define instr$get$operator$of$fxsave(...) fxsave
#		define instr$get$operator$of$fxsave64(...) fxsave64
#		define instr$get$operator$of$fxtract(...) fxtract
#		define instr$get$operator$of$fyl2x(...) fyl2x
#		define instr$get$operator$of$fyl2xp1(...) fyl2xp1
#		define instr$get$operator$of$gf2p8affineinvqb(...) gf2p8affineinvqb
#		define instr$get$operator$of$gf2p8affineqb(...) gf2p8affineqb
#		define instr$get$operator$of$gf2p8mulb(...) gf2p8mulb
#		define instr$get$operator$of$haddpd(...) haddpd
#		define instr$get$operator$of$haddps(...) haddps
#		define instr$get$operator$of$hlt(...) hlt
#		define instr$get$operator$of$hreset(...) hreset
#		define instr$get$operator$of$hsubpd(...) hsubpd
#		define instr$get$operator$of$hsubps(...) hsubps
#		define instr$get$operator$of$idiv(...) idiv
#		define instr$get$operator$of$imul(...) imul
#		define instr$get$operator$of$in(...) in
#		define instr$get$operator$of$inc(...) inc
#		define instr$get$operator$of$incsspd(...) incsspd
#		define instr$get$operator$of$incsspq(...) incsspq
#		define instr$get$operator$of$insb(...) insb
#		define instr$get$operator$of$insd(...) insd
#		define instr$get$operator$of$insertps(...) insertps
#		define instr$get$operator$of$insw(...) insw
#		define instr$get$operator$of$int0(...) int0
#		define instr$get$operator$of$int1(...) int1
#		define instr$get$operator$of$int3(...) int3
#		define instr$get$operator$of$invd(...) invd
#		define instr$get$operator$of$invept(...) invept
#		define instr$get$operator$of$invlpg(...) invlpg
#		define instr$get$operator$of$invpcid(...) invpcid
#		define instr$get$operator$of$invvpid(...) invvpid
#		define instr$get$operator$of$iret(...) iret
#		define instr$get$operator$of$iretd(...) iretd
#		define instr$get$operator$of$iretq(...) iretq
#		define instr$get$operator$of$ja(...) ja
#		define instr$get$operator$of$jae(...) jae
#		define instr$get$operator$of$jb(...) jb
#		define instr$get$operator$of$jbe(...) jbe
#		define instr$get$operator$of$jc(...) jc
#		define instr$get$operator$of$je(...) je
#		define instr$get$operator$of$jg(...) jg
#		define instr$get$operator$of$jge(...) jge
#		define instr$get$operator$of$jl(...) jl
#		define instr$get$operator$of$jle(...) jle
#		define instr$get$operator$of$jmp(...) jmp
#		define instr$get$operator$of$jna(...) jna
#		define instr$get$operator$of$jnae(...) jnae
#		define instr$get$operator$of$jnb(...) jnb
#		define instr$get$operator$of$jnbe(...) jnbe
#		define instr$get$operator$of$jnc(...) jnc
#		define instr$get$operator$of$jne(...) jne
#		define instr$get$operator$of$jng(...) jng
#		define instr$get$operator$of$jnge(...) jnge
#		define instr$get$operator$of$jnl(...) jnl
#		define instr$get$operator$of$jnle(...) jnle
#		define instr$get$operator$of$jno(...) jno
#		define instr$get$operator$of$jnp(...) jnp
#		define instr$get$operator$of$jns(...) jns
#		define instr$get$operator$of$jnz(...) jnz
#		define instr$get$operator$of$jo(...) jo
#		define instr$get$operator$of$jp(...) jp
#		define instr$get$operator$of$jpe(...) jpe
#		define instr$get$operator$of$jpo(...) jpo
#		define instr$get$operator$of$js(...) js
#		define instr$get$operator$of$jz(...) jz
#		define instr$get$operator$of$label(...) label
#		define instr$get$operator$of$lar(...) lar
#		define instr$get$operator$of$lddqu(...) lddqu
#		define instr$get$operator$of$ldmxcsr(...) ldmxcsr
#		define instr$get$operator$of$lea(...) lea
#		define instr$get$operator$of$leave(...) leave
#		define instr$get$operator$of$lfence(...) lfence
#		define instr$get$operator$of$lldt(...) lldt
#		define instr$get$operator$of$lmsw(...) lmsw
#		define instr$get$operator$of$lods(...) lods
#		define instr$get$operator$of$lodsb(...) lodsb
#		define instr$get$operator$of$lodsd(...) lodsd
#		define instr$get$operator$of$lodsq(...) lodsq
#		define instr$get$operator$of$lodsw(...) lodsw
#		define instr$get$operator$of$loop(...) loop
#		define instr$get$operator$of$loope(...) loope
#		define instr$get$operator$of$loopne(...) loopne
#		define instr$get$operator$of$lsl(...) lsl
#		define instr$get$operator$of$ltr(...) ltr
#		define instr$get$operator$of$lzcnt(...) lzcnt
#		define instr$get$operator$of$maskmovdqu(...) maskmovdqu
#		define instr$get$operator$of$maskmovq(...) maskmovq
#		define instr$get$operator$of$maxpd(...) maxpd
#		define instr$get$operator$of$maxps(...) maxps
#		define instr$get$operator$of$maxsd(...) maxsd
#		define instr$get$operator$of$maxss(...) maxss
#		define instr$get$operator$of$mfence(...) mfence
#		define instr$get$operator$of$minpd(...) minpd
#		define instr$get$operator$of$minps(...) minps
#		define instr$get$operator$of$minsd(...) minsd
#		define instr$get$operator$of$minss(...) minss
#		define instr$get$operator$of$monitor(...) monitor
#		define instr$get$operator$of$mov(...) mov
#		define instr$get$operator$of$movapd(...) movapd
#		define instr$get$operator$of$movaps(...) movaps
#		define instr$get$operator$of$movbe(...) movbe
#		define instr$get$operator$of$movd(...) movd
#		define instr$get$operator$of$movddup(...) movddup
#		define instr$get$operator$of$movdir64b(...) movdir64b
#		define instr$get$operator$of$movdiri(...) movdiri
#		define instr$get$operator$of$movdq2q(...) movdq2q
#		define instr$get$operator$of$movdqa(...) movdqa
#		define instr$get$operator$of$movdqu(...) movdqu
#		define instr$get$operator$of$movhlps(...) movhlps
#		define instr$get$operator$of$movhpd(...) movhpd
#		define instr$get$operator$of$movhps(...) movhps
#		define instr$get$operator$of$movlhps(...) movlhps
#		define instr$get$operator$of$movlpd(...) movlpd
#		define instr$get$operator$of$movlps(...) movlps
#		define instr$get$operator$of$movmskpd(...) movmskpd
#		define instr$get$operator$of$movmskps(...) movmskps
#		define instr$get$operator$of$movntdq(...) movntdq
#		define instr$get$operator$of$movntdqa(...) movntdqa
#		define instr$get$operator$of$movnti(...) movnti
#		define instr$get$operator$of$movntpd(...) movntpd
#		define instr$get$operator$of$movntps(...) movntps
#		define instr$get$operator$of$movntq(...) movntq
#		define instr$get$operator$of$movq(...) movq
#		define instr$get$operator$of$movq2dq(...) movq2dq
#		define instr$get$operator$of$movsb(...) movsb
#		define instr$get$operator$of$movsd(...) movsd
#		define instr$get$operator$of$movshdup(...) movshdup
#		define instr$get$operator$of$movshlup(...) movshlup
#		define instr$get$operator$of$movsq(...) movsq
#		define instr$get$operator$of$movss(...) movss
#		define instr$get$operator$of$movsw(...) movsw
#		define instr$get$operator$of$movsx(...) movsx
#		define instr$get$operator$of$movsxd(...) movsxd
#		define instr$get$operator$of$movupd(...) movupd
#		define instr$get$operator$of$movups(...) movups
#		define instr$get$operator$of$movzx(...) movzx
#		define instr$get$operator$of$mpsadbw(...) mpsadbw
#		define instr$get$operator$of$mul(...) mul
#		define instr$get$operator$of$mulpd(...) mulpd
#		define instr$get$operator$of$mulps(...) mulps
#		define instr$get$operator$of$mulsd(...) mulsd
#		define instr$get$operator$of$mulss(...) mulss
#		define instr$get$operator$of$mulx(...) mulx
#		define instr$get$operator$of$mwait(...) mwait
#		define instr$get$operator$of$neg(...) neg
#		define instr$get$operator$of$nop(...) nop
#		define instr$get$operator$of$nop2(...) nop2
#		define instr$get$operator$of$nop3(...) nop3
#		define instr$get$operator$of$nop4(...) nop4
#		define instr$get$operator$of$nop5(...) nop5
#		define instr$get$operator$of$nop6(...) nop6
#		define instr$get$operator$of$nop7(...) nop7
#		define instr$get$operator$of$nop8(...) nop8
#		define instr$get$operator$of$nop9(...) nop9
#		define instr$get$operator$of$not(...) not
#		define instr$get$operator$of$or(...) or
#		define instr$get$operator$of$orpd(...) orpd
#		define instr$get$operator$of$orps(...) orps
#		define instr$get$operator$of$out(...) out
#		define instr$get$operator$of$outsb(...) outsb
#		define instr$get$operator$of$outsd(...) outsd
#		define instr$get$operator$of$outsw(...) outsw
#		define instr$get$operator$of$pabsb(...) pabsb
#		define instr$get$operator$of$pabsd(...) pabsd
#		define instr$get$operator$of$pabsw(...) pabsw
#		define instr$get$operator$of$packssdw(...) packssdw
#		define instr$get$operator$of$packsswb(...) packsswb
#		define instr$get$operator$of$packusdw(...) packusdw
#		define instr$get$operator$of$packuswb(...) packuswb
#		define instr$get$operator$of$paddb(...) paddb
#		define instr$get$operator$of$paddd(...) paddd
#		define instr$get$operator$of$paddq(...) paddq
#		define instr$get$operator$of$paddsb(...) paddsb
#		define instr$get$operator$of$paddsw(...) paddsw
#		define instr$get$operator$of$paddusb(...) paddusb
#		define instr$get$operator$of$paddusw(...) paddusw
#		define instr$get$operator$of$paddw(...) paddw
#		define instr$get$operator$of$palignr(...) palignr
#		define instr$get$operator$of$pand(...) pand
#		define instr$get$operator$of$pandn(...) pandn
#		define instr$get$operator$of$pause(...) pause
#		define instr$get$operator$of$pavgb(...) pavgb
#		define instr$get$operator$of$pavgw(...) pavgw
#		define instr$get$operator$of$pblendvb(...) pblendvb
#		define instr$get$operator$of$pblendw(...) pblendw
#		define instr$get$operator$of$pclmulqdq(...) pclmulqdq
#		define instr$get$operator$of$pcmpeqb(...) pcmpeqb
#		define instr$get$operator$of$pcmpeqd(...) pcmpeqd
#		define instr$get$operator$of$pcmpeqq(...) pcmpeqq
#		define instr$get$operator$of$pcmpeqw(...) pcmpeqw
#		define instr$get$operator$of$pcmpestri(...) pcmpestri
#		define instr$get$operator$of$pcmpestrm(...) pcmpestrm
#		define instr$get$operator$of$pcmpgtb(...) pcmpgtb
#		define instr$get$operator$of$pcmpgtd(...) pcmpgtd
#		define instr$get$operator$of$pcmpgtq(...) pcmpgtq
#		define instr$get$operator$of$pcmpgtw(...) pcmpgtw
#		define instr$get$operator$of$pcmpistri(...) pcmpistri
#		define instr$get$operator$of$pcmpistrm(...) pcmpistrm
#		define instr$get$operator$of$pconfig(...) pconfig
#		define instr$get$operator$of$pdep(...) pdep
#		define instr$get$operator$of$pext(...) pext
#		define instr$get$operator$of$pextrb(...) pextrb
#		define instr$get$operator$of$pextrd(...) pextrd
#		define instr$get$operator$of$pextrq(...) pextrq
#		define instr$get$operator$of$pextrw(...) pextrw
#		define instr$get$operator$of$phaddd(...) phaddd
#		define instr$get$operator$of$phaddsw(...) phaddsw
#		define instr$get$operator$of$phaddw(...) phaddw
#		define instr$get$operator$of$phminposuw(...) phminposuw
#		define instr$get$operator$of$phsubd(...) phsubd
#		define instr$get$operator$of$phsubsw(...) phsubsw
#		define instr$get$operator$of$phsubw(...) phsubw
#		define instr$get$operator$of$pinsrb(...) pinsrb
#		define instr$get$operator$of$pinsrd(...) pinsrd
#		define instr$get$operator$of$pinsrq(...) pinsrq
#		define instr$get$operator$of$pinsrw(...) pinsrw
#		define instr$get$operator$of$pmaddubsw(...) pmaddubsw
#		define instr$get$operator$of$pmaddwd(...) pmaddwd
#		define instr$get$operator$of$pmaxsb(...) pmaxsb
#		define instr$get$operator$of$pmaxsd(...) pmaxsd
#		define instr$get$operator$of$pmaxsw(...) pmaxsw
#		define instr$get$operator$of$pmaxub(...) pmaxub
#		define instr$get$operator$of$pmaxud(...) pmaxud
#		define instr$get$operator$of$pmaxuw(...) pmaxuw
#		define instr$get$operator$of$pminsb(...) pminsb
#		define instr$get$operator$of$pminsd(...) pminsd
#		define instr$get$operator$of$pminsw(...) pminsw
#		define instr$get$operator$of$pminub(...) pminub
#		define instr$get$operator$of$pminud(...) pminud
#		define instr$get$operator$of$pminuw(...) pminuw
#		define instr$get$operator$of$pmovmskb(...) pmovmskb
#		define instr$get$operator$of$pmovsxbd(...) pmovsxbd
#		define instr$get$operator$of$pmovsxbq(...) pmovsxbq
#		define instr$get$operator$of$pmovsxbw(...) pmovsxbw
#		define instr$get$operator$of$pmovsxdq(...) pmovsxdq
#		define instr$get$operator$of$pmovsxwd(...) pmovsxwd
#		define instr$get$operator$of$pmovsxwq(...) pmovsxwq
#		define instr$get$operator$of$pmovzxbd(...) pmovzxbd
#		define instr$get$operator$of$pmovzxbq(...) pmovzxbq
#		define instr$get$operator$of$pmovzxbw(...) pmovzxbw
#		define instr$get$operator$of$pmovzxdq(...) pmovzxdq
#		define instr$get$operator$of$pmovzxwd(...) pmovzxwd
#		define instr$get$operator$of$pmovzxwq(...) pmovzxwq
#		define instr$get$operator$of$pmuldq(...) pmuldq
#		define instr$get$operator$of$pmulhrsw(...) pmulhrsw
#		define instr$get$operator$of$pmulhw(...) pmulhw
#		define instr$get$operator$of$pmulld(...) pmulld
#		define instr$get$operator$of$pmullw(...) pmullw
#		define instr$get$operator$of$pmuludq(...) pmuludq
#		define instr$get$operator$of$pmuluw(...) pmuluw
#		define instr$get$operator$of$pop(...) pop
#		define instr$get$operator$of$popcnt(...) popcnt
#		define instr$get$operator$of$popf(...) popf
#		define instr$get$operator$of$popfq(...) popfq
#		define instr$get$operator$of$por(...) por
#		define instr$get$operator$of$prefetchnta(...) prefetchnta
#		define instr$get$operator$of$prefetcht0(...) prefetcht0
#		define instr$get$operator$of$prefetcht1(...) prefetcht1
#		define instr$get$operator$of$prefetcht2(...) prefetcht2
#		define instr$get$operator$of$prefetchw(...) prefetchw
#		define instr$get$operator$of$prefix$bhnottaken(...) prefix$bhnottaken
#		define instr$get$operator$of$prefix$bhtaken(...) prefix$bhtaken
#		define instr$get$operator$of$prefix$lock(...) prefix$lock
#		define instr$get$operator$of$prefix$rep(...) prefix$rep
#		define instr$get$operator$of$prefix$repe(...) prefix$repe
#		define instr$get$operator$of$prefix$repne(...) prefix$repne
#		define instr$get$operator$of$prefix$repnz(...) prefix$repnz
#		define instr$get$operator$of$prefix$repz(...) prefix$repz
#		define instr$get$operator$of$psadbw(...) psadbw
#		define instr$get$operator$of$pshufb(...) pshufb
#		define instr$get$operator$of$pshufd(...) pshufd
#		define instr$get$operator$of$pshuflw(...) pshuflw
#		define instr$get$operator$of$pshufw(...) pshufw
#		define instr$get$operator$of$psignb(...) psignb
#		define instr$get$operator$of$psignd(...) psignd
#		define instr$get$operator$of$psignw(...) psignw
#		define instr$get$operator$of$pslld(...) pslld
#		define instr$get$operator$of$pslldq(...) pslldq
#		define instr$get$operator$of$psllq(...) psllq
#		define instr$get$operator$of$psllw(...) psllw
#		define instr$get$operator$of$psrad(...) psrad
#		define instr$get$operator$of$psraw(...) psraw
#		define instr$get$operator$of$psrld(...) psrld
#		define instr$get$operator$of$psrldq(...) psrldq
#		define instr$get$operator$of$psrlq(...) psrlq
#		define instr$get$operator$of$psrlw(...) psrlw
#		define instr$get$operator$of$psubb(...) psubb
#		define instr$get$operator$of$psubd(...) psubd
#		define instr$get$operator$of$psubq(...) psubq
#		define instr$get$operator$of$psubsb(...) psubsb
#		define instr$get$operator$of$psubsw(...) psubsw
#		define instr$get$operator$of$psubusb(...) psubusb
#		define instr$get$operator$of$psubusw(...) psubusw
#		define instr$get$operator$of$psubw(...) psubw
#		define instr$get$operator$of$ptest(...) ptest
#		define instr$get$operator$of$ptwrite(...) ptwrite
#		define instr$get$operator$of$punpckhbw(...) punpckhbw
#		define instr$get$operator$of$punpckhdq(...) punpckhdq
#		define instr$get$operator$of$punpckhqdq(...) punpckhqdq
#		define instr$get$operator$of$punpckhwd(...) punpckhwd
#		define instr$get$operator$of$punpcklbw(...) punpcklbw
#		define instr$get$operator$of$punpckldq(...) punpckldq
#		define instr$get$operator$of$punpcklqdq(...) punpcklqdq
#		define instr$get$operator$of$punpcklwd(...) punpcklwd
#		define instr$get$operator$of$push(...) push
#		define instr$get$operator$of$pushf(...) pushf
#		define instr$get$operator$of$pushfq(...) pushfq
#		define instr$get$operator$of$pxor(...) pxor
#		define instr$get$operator$of$rawbyte(...) rawbyte
#		define instr$get$operator$of$rawint(...) rawint
#		define instr$get$operator$of$rcl(...) rcl
#		define instr$get$operator$of$rcpps(...) rcpps
#		define instr$get$operator$of$rcpss(...) rcpss
#		define instr$get$operator$of$rcr(...) rcr
#		define instr$get$operator$of$rdfsbase(...) rdfsbase
#		define instr$get$operator$of$rdgsbase(...) rdgsbase
#		define instr$get$operator$of$rdmsr(...) rdmsr
#		define instr$get$operator$of$rdpid(...) rdpid
#		define instr$get$operator$of$rdpkru(...) rdpkru
#		define instr$get$operator$of$rdpmc(...) rdpmc
#		define instr$get$operator$of$rdrand(...) rdrand
#		define instr$get$operator$of$rdseed(...) rdseed
#		define instr$get$operator$of$rdsspd(...) rdsspd
#		define instr$get$operator$of$rdsspq(...) rdsspq
#		define instr$get$operator$of$rdtsc(...) rdtsc
#		define instr$get$operator$of$rdtscp(...) rdtscp
#		define instr$get$operator$of$ret(...) ret
#		define instr$get$operator$of$rol(...) rol
#		define instr$get$operator$of$ror(...) ror
#		define instr$get$operator$of$rorx(...) rorx
#		define instr$get$operator$of$roundpd(...) roundpd
#		define instr$get$operator$of$roundps(...) roundps
#		define instr$get$operator$of$roundsd(...) roundsd
#		define instr$get$operator$of$roundss(...) roundss
#		define instr$get$operator$of$rsm(...) rsm
#		define instr$get$operator$of$rsqrtps(...) rsqrtps
#		define instr$get$operator$of$rsqrtss(...) rsqrtss
#		define instr$get$operator$of$rstorssp(...) rstorssp
#		define instr$get$operator$of$sal(...) sal
#		define instr$get$operator$of$sar(...) sar
#		define instr$get$operator$of$sarx(...) sarx
#		define instr$get$operator$of$saveprevssp(...) saveprevssp
#		define instr$get$operator$of$sbb(...) sbb
#		define instr$get$operator$of$scasb(...) scasb
#		define instr$get$operator$of$scasd(...) scasd
#		define instr$get$operator$of$scasq(...) scasq
#		define instr$get$operator$of$scasw(...) scasw
#		define instr$get$operator$of$serialize(...) serialize
#		define instr$get$operator$of$seta(...) seta
#		define instr$get$operator$of$setae(...) setae
#		define instr$get$operator$of$setb(...) setb
#		define instr$get$operator$of$setbe(...) setbe
#		define instr$get$operator$of$setc(...) setc
#		define instr$get$operator$of$sete(...) sete
#		define instr$get$operator$of$setg(...) setg
#		define instr$get$operator$of$setge(...) setge
#		define instr$get$operator$of$setl(...) setl
#		define instr$get$operator$of$setle(...) setle
#		define instr$get$operator$of$setna(...) setna
#		define instr$get$operator$of$setnae(...) setnae
#		define instr$get$operator$of$setnb(...) setnb
#		define instr$get$operator$of$setnbe(...) setnbe
#		define instr$get$operator$of$setnc(...) setnc
#		define instr$get$operator$of$setne(...) setne
#		define instr$get$operator$of$setng(...) setng
#		define instr$get$operator$of$setnge(...) setnge
#		define instr$get$operator$of$setnl(...) setnl
#		define instr$get$operator$of$setnle(...) setnle
#		define instr$get$operator$of$setno(...) setno
#		define instr$get$operator$of$setnp(...) setnp
#		define instr$get$operator$of$setns(...) setns
#		define instr$get$operator$of$setnz(...) setnz
#		define instr$get$operator$of$seto(...) seto
#		define instr$get$operator$of$setp(...) setp
#		define instr$get$operator$of$setpe(...) setpe
#		define instr$get$operator$of$setpo(...) setpo
#		define instr$get$operator$of$sets(...) sets
#		define instr$get$operator$of$setssbsy(...) setssbsy
#		define instr$get$operator$of$setz(...) setz
#		define instr$get$operator$of$sfence(...) sfence
#		define instr$get$operator$of$sgdt(...) sgdt
#		define instr$get$operator$of$sha1msg1(...) sha1msg1
#		define instr$get$operator$of$sha1msg2(...) sha1msg2
#		define instr$get$operator$of$sha1nexte(...) sha1nexte
#		define instr$get$operator$of$sha1rnds4(...) sha1rnds4
#		define instr$get$operator$of$sha256msg1(...) sha256msg1
#		define instr$get$operator$of$sha256msg2(...) sha256msg2
#		define instr$get$operator$of$sha256rnds2(...) sha256rnds2
#		define instr$get$operator$of$shl(...) shl
#		define instr$get$operator$of$shld(...) shld
#		define instr$get$operator$of$shlx(...) shlx
#		define instr$get$operator$of$shr(...) shr
#		define instr$get$operator$of$shrd(...) shrd
#		define instr$get$operator$of$shrx(...) shrx
#		define instr$get$operator$of$shufpd(...) shufpd
#		define instr$get$operator$of$shufps(...) shufps
#		define instr$get$operator$of$sidt(...) sidt
#		define instr$get$operator$of$sldt(...) sldt
#		define instr$get$operator$of$smsw(...) smsw
#		define instr$get$operator$of$sqrtpd(...) sqrtpd
#		define instr$get$operator$of$sqrtps(...) sqrtps
#		define instr$get$operator$of$sqrtsd(...) sqrtsd
#		define instr$get$operator$of$sqrtss(...) sqrtss
#		define instr$get$operator$of$stac(...) stac
#		define instr$get$operator$of$stc(...) stc
#		define instr$get$operator$of$std(...) std
#		define instr$get$operator$of$sti(...) sti
#		define instr$get$operator$of$stmxcsr(...) stmxcsr
#		define instr$get$operator$of$stosb(...) stosb
#		define instr$get$operator$of$stosd(...) stosd
#		define instr$get$operator$of$stosq(...) stosq
#		define instr$get$operator$of$stosw(...) stosw
#		define instr$get$operator$of$str(...) str
#		define instr$get$operator$of$sub(...) sub
#		define instr$get$operator$of$subpd(...) subpd
#		define instr$get$operator$of$subps(...) subps
#		define instr$get$operator$of$subsd(...) subsd
#		define instr$get$operator$of$subss(...) subss
#		define instr$get$operator$of$swapgs(...) swapgs
#		define instr$get$operator$of$syscall(...) syscall
#		define instr$get$operator$of$sysenter(...) sysenter
#		define instr$get$operator$of$sysexit(...) sysexit
#		define instr$get$operator$of$sysexit64(...) sysexit64
#		define instr$get$operator$of$sysret(...) sysret
#		define instr$get$operator$of$sysret64(...) sysret64
#		define instr$get$operator$of$test(...) test
#		define instr$get$operator$of$tpause(...) tpause
#		define instr$get$operator$of$tzcnt(...) tzcnt
#		define instr$get$operator$of$ucomisd(...) ucomisd
#		define instr$get$operator$of$ucomiss(...) ucomiss
#		define instr$get$operator$of$ud1(...) ud1
#		define instr$get$operator$of$ud2(...) ud2
#		define instr$get$operator$of$umonitor(...) umonitor
#		define instr$get$operator$of$umwait(...) umwait
#		define instr$get$operator$of$unpckhpd(...) unpckhpd
#		define instr$get$operator$of$unpckhps(...) unpckhps
#		define instr$get$operator$of$unpcklpd(...) unpcklpd
#		define instr$get$operator$of$unpcklps(...) unpcklps
#		define instr$get$operator$of$vaddpd(...) vaddpd
#		define instr$get$operator$of$vaddps(...) vaddps
#		define instr$get$operator$of$vaddss(...) vaddss
#		define instr$get$operator$of$vaddsubpd(...) vaddsubpd
#		define instr$get$operator$of$vaddsubps(...) vaddsubps
#		define instr$get$operator$of$vaesdec(...) vaesdec
#		define instr$get$operator$of$vaesdeclast(...) vaesdeclast
#		define instr$get$operator$of$vaesenc(...) vaesenc
#		define instr$get$operator$of$vaesenclast(...) vaesenclast
#		define instr$get$operator$of$vaesimc(...) vaesimc
#		define instr$get$operator$of$vaeskeygenassist(...) vaeskeygenassist
#		define instr$get$operator$of$vandnpd(...) vandnpd
#		define instr$get$operator$of$vandnps(...) vandnps
#		define instr$get$operator$of$vandpd(...) vandpd
#		define instr$get$operator$of$vandps(...) vandps
#		define instr$get$operator$of$vblendpd(...) vblendpd
#		define instr$get$operator$of$vblendps(...) vblendps
#		define instr$get$operator$of$vblendvpd(...) vblendvpd
#		define instr$get$operator$of$vblendvps(...) vblendvps
#		define instr$get$operator$of$vbroadcastf128(...) vbroadcastf128
#		define instr$get$operator$of$vbroadcasti128(...) vbroadcasti128
#		define instr$get$operator$of$vbroadcastsd(...) vbroadcastsd
#		define instr$get$operator$of$vbroadcastss(...) vbroadcastss
#		define instr$get$operator$of$vcmpeq_ospd(...) vcmpeq_ospd
#		define instr$get$operator$of$vcmpeq_osps(...) vcmpeq_osps
#		define instr$get$operator$of$vcmpeq_ossd(...) vcmpeq_ossd
#		define instr$get$operator$of$vcmpeq_osss(...) vcmpeq_osss
#		define instr$get$operator$of$vcmpeq_uqpd(...) vcmpeq_uqpd
#		define instr$get$operator$of$vcmpeq_uqps(...) vcmpeq_uqps
#		define instr$get$operator$of$vcmpeq_uqsd(...) vcmpeq_uqsd
#		define instr$get$operator$of$vcmpeq_uqss(...) vcmpeq_uqss
#		define instr$get$operator$of$vcmpeq_uspd(...) vcmpeq_uspd
#		define instr$get$operator$of$vcmpeq_usps(...) vcmpeq_usps
#		define instr$get$operator$of$vcmpeq_ussd(...) vcmpeq_ussd
#		define instr$get$operator$of$vcmpeq_usss(...) vcmpeq_usss
#		define instr$get$operator$of$vcmpeqpd(...) vcmpeqpd
#		define instr$get$operator$of$vcmpeqps(...) vcmpeqps
#		define instr$get$operator$of$vcmpeqsd(...) vcmpeqsd
#		define instr$get$operator$of$vcmpeqss(...) vcmpeqss
#		define instr$get$operator$of$vcmpfalse_ospd(...) vcmpfalse_ospd
#		define instr$get$operator$of$vcmpfalse_osps(...) vcmpfalse_osps
#		define instr$get$operator$of$vcmpfalse_ossd(...) vcmpfalse_ossd
#		define instr$get$operator$of$vcmpfalse_osss(...) vcmpfalse_osss
#		define instr$get$operator$of$vcmpfalsepd(...) vcmpfalsepd
#		define instr$get$operator$of$vcmpfalseps(...) vcmpfalseps
#		define instr$get$operator$of$vcmpfalsesd(...) vcmpfalsesd
#		define instr$get$operator$of$vcmpfalsess(...) vcmpfalsess
#		define instr$get$operator$of$vcmpge_oqpd(...) vcmpge_oqpd
#		define instr$get$operator$of$vcmpge_oqps(...) vcmpge_oqps
#		define instr$get$operator$of$vcmpge_oqsd(...) vcmpge_oqsd
#		define instr$get$operator$of$vcmpge_oqss(...) vcmpge_oqss
#		define instr$get$operator$of$vcmpgepd(...) vcmpgepd
#		define instr$get$operator$of$vcmpgeps(...) vcmpgeps
#		define instr$get$operator$of$vcmpgesd(...) vcmpgesd
#		define instr$get$operator$of$vcmpgess(...) vcmpgess
#		define instr$get$operator$of$vcmpgt_oqpd(...) vcmpgt_oqpd
#		define instr$get$operator$of$vcmpgt_oqps(...) vcmpgt_oqps
#		define instr$get$operator$of$vcmpgt_oqsd(...) vcmpgt_oqsd
#		define instr$get$operator$of$vcmpgt_oqss(...) vcmpgt_oqss
#		define instr$get$operator$of$vcmpgtpd(...) vcmpgtpd
#		define instr$get$operator$of$vcmpgtps(...) vcmpgtps
#		define instr$get$operator$of$vcmpgtsd(...) vcmpgtsd
#		define instr$get$operator$of$vcmpgtss(...) vcmpgtss
#		define instr$get$operator$of$vcmple_oqpd(...) vcmple_oqpd
#		define instr$get$operator$of$vcmple_oqps(...) vcmple_oqps
#		define instr$get$operator$of$vcmple_oqsd(...) vcmple_oqsd
#		define instr$get$operator$of$vcmple_oqss(...) vcmple_oqss
#		define instr$get$operator$of$vcmplepd(...) vcmplepd
#		define instr$get$operator$of$vcmpleps(...) vcmpleps
#		define instr$get$operator$of$vcmplesd(...) vcmplesd
#		define instr$get$operator$of$vcmpless(...) vcmpless
#		define instr$get$operator$of$vcmplt_oqpd(...) vcmplt_oqpd
#		define instr$get$operator$of$vcmplt_oqps(...) vcmplt_oqps
#		define instr$get$operator$of$vcmplt_oqsd(...) vcmplt_oqsd
#		define instr$get$operator$of$vcmplt_oqss(...) vcmplt_oqss
#		define instr$get$operator$of$vcmpltpd(...) vcmpltpd
#		define instr$get$operator$of$vcmpltps(...) vcmpltps
#		define instr$get$operator$of$vcmpltsd(...) vcmpltsd
#		define instr$get$operator$of$vcmpltss(...) vcmpltss
#		define instr$get$operator$of$vcmpneq_oqpd(...) vcmpneq_oqpd
#		define instr$get$operator$of$vcmpneq_oqps(...) vcmpneq_oqps
#		define instr$get$operator$of$vcmpneq_oqsd(...) vcmpneq_oqsd
#		define instr$get$operator$of$vcmpneq_oqss(...) vcmpneq_oqss
#		define instr$get$operator$of$vcmpneq_ospd(...) vcmpneq_ospd
#		define instr$get$operator$of$vcmpneq_osps(...) vcmpneq_osps
#		define instr$get$operator$of$vcmpneq_ossd(...) vcmpneq_ossd
#		define instr$get$operator$of$vcmpneq_osss(...) vcmpneq_osss
#		define instr$get$operator$of$vcmpneq_uspd(...) vcmpneq_uspd
#		define instr$get$operator$of$vcmpneq_usps(...) vcmpneq_usps
#		define instr$get$operator$of$vcmpneq_ussd(...) vcmpneq_ussd
#		define instr$get$operator$of$vcmpneq_usss(...) vcmpneq_usss
#		define instr$get$operator$of$vcmpneqpd(...) vcmpneqpd
#		define instr$get$operator$of$vcmpneqps(...) vcmpneqps
#		define instr$get$operator$of$vcmpneqsd(...) vcmpneqsd
#		define instr$get$operator$of$vcmpneqss(...) vcmpneqss
#		define instr$get$operator$of$vcmpnge_uqpd(...) vcmpnge_uqpd
#		define instr$get$operator$of$vcmpnge_uqps(...) vcmpnge_uqps
#		define instr$get$operator$of$vcmpnge_uqsd(...) vcmpnge_uqsd
#		define instr$get$operator$of$vcmpnge_uqss(...) vcmpnge_uqss
#		define instr$get$operator$of$vcmpngepd(...) vcmpngepd
#		define instr$get$operator$of$vcmpngeps(...) vcmpngeps
#		define instr$get$operator$of$vcmpngesd(...) vcmpngesd
#		define instr$get$operator$of$vcmpngess(...) vcmpngess
#		define instr$get$operator$of$vcmpngt_uqpd(...) vcmpngt_uqpd
#		define instr$get$operator$of$vcmpngt_uqps(...) vcmpngt_uqps
#		define instr$get$operator$of$vcmpngt_uqsd(...) vcmpngt_uqsd
#		define instr$get$operator$of$vcmpngt_uqss(...) vcmpngt_uqss
#		define instr$get$operator$of$vcmpngtpd(...) vcmpngtpd
#		define instr$get$operator$of$vcmpngtps(...) vcmpngtps
#		define instr$get$operator$of$vcmpngtsd(...) vcmpngtsd
#		define instr$get$operator$of$vcmpngtss(...) vcmpngtss
#		define instr$get$operator$of$vcmpnle_uqpd(...) vcmpnle_uqpd
#		define instr$get$operator$of$vcmpnle_uqps(...) vcmpnle_uqps
#		define instr$get$operator$of$vcmpnle_uqsd(...) vcmpnle_uqsd
#		define instr$get$operator$of$vcmpnle_uqss(...) vcmpnle_uqss
#		define instr$get$operator$of$vcmpnlepd(...) vcmpnlepd
#		define instr$get$operator$of$vcmpnleps(...) vcmpnleps
#		define instr$get$operator$of$vcmpnlesd(...) vcmpnlesd
#		define instr$get$operator$of$vcmpnless(...) vcmpnless
#		define instr$get$operator$of$vcmpnlt_uqpd(...) vcmpnlt_uqpd
#		define instr$get$operator$of$vcmpnlt_uqps(...) vcmpnlt_uqps
#		define instr$get$operator$of$vcmpnlt_uqsd(...) vcmpnlt_uqsd
#		define instr$get$operator$of$vcmpnlt_uqss(...) vcmpnlt_uqss
#		define instr$get$operator$of$vcmpnltpd(...) vcmpnltpd
#		define instr$get$operator$of$vcmpnltps(...) vcmpnltps
#		define instr$get$operator$of$vcmpnltsd(...) vcmpnltsd
#		define instr$get$operator$of$vcmpnltss(...) vcmpnltss
#		define instr$get$operator$of$vcmpord_spd(...) vcmpord_spd
#		define instr$get$operator$of$vcmpord_sps(...) vcmpord_sps
#		define instr$get$operator$of$vcmpord_ssd(...) vcmpord_ssd
#		define instr$get$operator$of$vcmpord_sss(...) vcmpord_sss
#		define instr$get$operator$of$vcmpordpd(...) vcmpordpd
#		define instr$get$operator$of$vcmpordps(...) vcmpordps
#		define instr$get$operator$of$vcmpordsd(...) vcmpordsd
#		define instr$get$operator$of$vcmpordss(...) vcmpordss
#		define instr$get$operator$of$vcmppd(...) vcmppd
#		define instr$get$operator$of$vcmpps(...) vcmpps
#		define instr$get$operator$of$vcmpsd(...) vcmpsd
#		define instr$get$operator$of$vcmpss(...) vcmpss
#		define instr$get$operator$of$vcmptrue_uspd(...) vcmptrue_uspd
#		define instr$get$operator$of$vcmptrue_usps(...) vcmptrue_usps
#		define instr$get$operator$of$vcmptrue_ussd(...) vcmptrue_ussd
#		define instr$get$operator$of$vcmptrue_usss(...) vcmptrue_usss
#		define instr$get$operator$of$vcmptruepd(...) vcmptruepd
#		define instr$get$operator$of$vcmptrueps(...) vcmptrueps
#		define instr$get$operator$of$vcmptruesd(...) vcmptruesd
#		define instr$get$operator$of$vcmptruess(...) vcmptruess
#		define instr$get$operator$of$vcmpunord_spd(...) vcmpunord_spd
#		define instr$get$operator$of$vcmpunord_sps(...) vcmpunord_sps
#		define instr$get$operator$of$vcmpunord_ssd(...) vcmpunord_ssd
#		define instr$get$operator$of$vcmpunord_sss(...) vcmpunord_sss
#		define instr$get$operator$of$vcmpunordpd(...) vcmpunordpd
#		define instr$get$operator$of$vcmpunordps(...) vcmpunordps
#		define instr$get$operator$of$vcmpunordsd(...) vcmpunordsd
#		define instr$get$operator$of$vcmpunordss(...) vcmpunordss
#		define instr$get$operator$of$vcomisd(...) vcomisd
#		define instr$get$operator$of$vcomiss(...) vcomiss
#		define instr$get$operator$of$vcvtdq2pd(...) vcvtdq2pd
#		define instr$get$operator$of$vcvtdq2ps(...) vcvtdq2ps
#		define instr$get$operator$of$vcvtpd2dq(...) vcvtpd2dq
#		define instr$get$operator$of$vcvtpd2ps(...) vcvtpd2ps
#		define instr$get$operator$of$vcvtph2ps(...) vcvtph2ps
#		define instr$get$operator$of$vcvtps2dq(...) vcvtps2dq
#		define instr$get$operator$of$vcvtps2pd(...) vcvtps2pd
#		define instr$get$operator$of$vcvtps2ph(...) vcvtps2ph
#		define instr$get$operator$of$vcvtsd2si(...) vcvtsd2si
#		define instr$get$operator$of$vcvtsd2ss(...) vcvtsd2ss
#		define instr$get$operator$of$vcvtsi2sd(...) vcvtsi2sd
#		define instr$get$operator$of$vcvtsi2ss(...) vcvtsi2ss
#		define instr$get$operator$of$vcvtss2sd(...) vcvtss2sd
#		define instr$get$operator$of$vcvtss2si(...) vcvtss2si
#		define instr$get$operator$of$vcvttpd2dq(...) vcvttpd2dq
#		define instr$get$operator$of$vcvttps2dq(...) vcvttps2dq
#		define instr$get$operator$of$vcvttsd2si(...) vcvttsd2si
#		define instr$get$operator$of$vcvttss2si(...) vcvttss2si
#		define instr$get$operator$of$vdivpd(...) vdivpd
#		define instr$get$operator$of$vdivps(...) vdivps
#		define instr$get$operator$of$vdivsd(...) vdivsd
#		define instr$get$operator$of$vdivss(...) vdivss
#		define instr$get$operator$of$vdppd(...) vdppd
#		define instr$get$operator$of$vdpps(...) vdpps
#		define instr$get$operator$of$vextractf128(...) vextractf128
#		define instr$get$operator$of$vextracti128(...) vextracti128
#		define instr$get$operator$of$vextractps(...) vextractps
#		define instr$get$operator$of$vfmadd132pd(...) vfmadd132pd
#		define instr$get$operator$of$vfmadd132ps(...) vfmadd132ps
#		define instr$get$operator$of$vfmadd132sd(...) vfmadd132sd
#		define instr$get$operator$of$vfmadd132ss(...) vfmadd132ss
#		define instr$get$operator$of$vfmadd213pd(...) vfmadd213pd
#		define instr$get$operator$of$vfmadd213ps(...) vfmadd213ps
#		define instr$get$operator$of$vfmadd213sd(...) vfmadd213sd
#		define instr$get$operator$of$vfmadd213ss(...) vfmadd213ss
#		define instr$get$operator$of$vfmadd231pd(...) vfmadd231pd
#		define instr$get$operator$of$vfmadd231ps(...) vfmadd231ps
#		define instr$get$operator$of$vfmadd231sd(...) vfmadd231sd
#		define instr$get$operator$of$vfmadd231ss(...) vfmadd231ss
#		define instr$get$operator$of$vfmaddsub132pd(...) vfmaddsub132pd
#		define instr$get$operator$of$vfmaddsub132ps(...) vfmaddsub132ps
#		define instr$get$operator$of$vfmaddsub213pd(...) vfmaddsub213pd
#		define instr$get$operator$of$vfmaddsub213ps(...) vfmaddsub213ps
#		define instr$get$operator$of$vfmaddsub231pd(...) vfmaddsub231pd
#		define instr$get$operator$of$vfmaddsub231ps(...) vfmaddsub231ps
#		define instr$get$operator$of$vfmsub132pd(...) vfmsub132pd
#		define instr$get$operator$of$vfmsub132ps(...) vfmsub132ps
#		define instr$get$operator$of$vfmsub132sd(...) vfmsub132sd
#		define instr$get$operator$of$vfmsub132ss(...) vfmsub132ss
#		define instr$get$operator$of$vfmsub213pd(...) vfmsub213pd
#		define instr$get$operator$of$vfmsub213ps(...) vfmsub213ps
#		define instr$get$operator$of$vfmsub213sd(...) vfmsub213sd
#		define instr$get$operator$of$vfmsub213ss(...) vfmsub213ss
#		define instr$get$operator$of$vfmsub231pd(...) vfmsub231pd
#		define instr$get$operator$of$vfmsub231ps(...) vfmsub231ps
#		define instr$get$operator$of$vfmsub231sd(...) vfmsub231sd
#		define instr$get$operator$of$vfmsub231ss(...) vfmsub231ss
#		define instr$get$operator$of$vfmsubadd132pd(...) vfmsubadd132pd
#		define instr$get$operator$of$vfmsubadd132ps(...) vfmsubadd132ps
#		define instr$get$operator$of$vfmsubadd213pd(...) vfmsubadd213pd
#		define instr$get$operator$of$vfmsubadd213ps(...) vfmsubadd213ps
#		define instr$get$operator$of$vfmsubadd231pd(...) vfmsubadd231pd
#		define instr$get$operator$of$vfmsubadd231ps(...) vfmsubadd231ps
#		define instr$get$operator$of$vfnmadd132pd(...) vfnmadd132pd
#		define instr$get$operator$of$vfnmadd132ps(...) vfnmadd132ps
#		define instr$get$operator$of$vfnmadd132sd(...) vfnmadd132sd
#		define instr$get$operator$of$vfnmadd132ss(...) vfnmadd132ss
#		define instr$get$operator$of$vfnmadd213pd(...) vfnmadd213pd
#		define instr$get$operator$of$vfnmadd213ps(...) vfnmadd213ps
#		define instr$get$operator$of$vfnmadd213sd(...) vfnmadd213sd
#		define instr$get$operator$of$vfnmadd213ss(...) vfnmadd213ss
#		define instr$get$operator$of$vfnmadd231pd(...) vfnmadd231pd
#		define instr$get$operator$of$vfnmadd231ps(...) vfnmadd231ps
#		define instr$get$operator$of$vfnmadd231sd(...) vfnmadd231sd
#		define instr$get$operator$of$vfnmadd231ss(...) vfnmadd231ss
#		define instr$get$operator$of$vfnmsub132pd(...) vfnmsub132pd
#		define instr$get$operator$of$vfnmsub132ps(...) vfnmsub132ps
#		define instr$get$operator$of$vfnmsub132sd(...) vfnmsub132sd
#		define instr$get$operator$of$vfnmsub132ss(...) vfnmsub132ss
#		define instr$get$operator$of$vfnmsub213pd(...) vfnmsub213pd
#		define instr$get$operator$of$vfnmsub213ps(...) vfnmsub213ps
#		define instr$get$operator$of$vfnmsub213sd(...) vfnmsub213sd
#		define instr$get$operator$of$vfnmsub213ss(...) vfnmsub213ss
#		define instr$get$operator$of$vfnmsub231pd(...) vfnmsub231pd
#		define instr$get$operator$of$vfnmsub231ps(...) vfnmsub231ps
#		define instr$get$operator$of$vfnmsub231sd(...) vfnmsub231sd
#		define instr$get$operator$of$vfnmsub231ss(...) vfnmsub231ss
#		define instr$get$operator$of$vgf2p8affineinvqb(...) vgf2p8affineinvqb
#		define instr$get$operator$of$vgf2p8affineqb(...) vgf2p8affineqb
#		define instr$get$operator$of$vgf2p8mulb(...) vgf2p8mulb
#		define instr$get$operator$of$vhaddpd(...) vhaddpd
#		define instr$get$operator$of$vhaddps(...) vhaddps
#		define instr$get$operator$of$vhsubpd(...) vhsubpd
#		define instr$get$operator$of$vhsubps(...) vhsubps
#		define instr$get$operator$of$vinsertf128(...) vinsertf128
#		define instr$get$operator$of$vinserti128(...) vinserti128
#		define instr$get$operator$of$vinsertps(...) vinsertps
#		define instr$get$operator$of$vlddqu(...) vlddqu
#		define instr$get$operator$of$vldmxcsr(...) vldmxcsr
#		define instr$get$operator$of$vmaskmovdqu(...) vmaskmovdqu
#		define instr$get$operator$of$vmaskmovpd(...) vmaskmovpd
#		define instr$get$operator$of$vmaskmovps(...) vmaskmovps
#		define instr$get$operator$of$vmaxpd(...) vmaxpd
#		define instr$get$operator$of$vmaxps(...) vmaxps
#		define instr$get$operator$of$vmaxsd(...) vmaxsd
#		define instr$get$operator$of$vmaxss(...) vmaxss
#		define instr$get$operator$of$vmcall(...) vmcall
#		define instr$get$operator$of$vmclear(...) vmclear
#		define instr$get$operator$of$vmfunc(...) vmfunc
#		define instr$get$operator$of$vminpd(...) vminpd
#		define instr$get$operator$of$vminps(...) vminps
#		define instr$get$operator$of$vminsd(...) vminsd
#		define instr$get$operator$of$vminss(...) vminss
#		define instr$get$operator$of$vmlaunch(...) vmlaunch
#		define instr$get$operator$of$vmovapd(...) vmovapd
#		define instr$get$operator$of$vmovaps(...) vmovaps
#		define instr$get$operator$of$vmovd(...) vmovd
#		define instr$get$operator$of$vmovddup(...) vmovddup
#		define instr$get$operator$of$vmovdqa(...) vmovdqa
#		define instr$get$operator$of$vmovdqu(...) vmovdqu
#		define instr$get$operator$of$vmovhlps(...) vmovhlps
#		define instr$get$operator$of$vmovhpd(...) vmovhpd
#		define instr$get$operator$of$vmovhps(...) vmovhps
#		define instr$get$operator$of$vmovlhps(...) vmovlhps
#		define instr$get$operator$of$vmovlpd(...) vmovlpd
#		define instr$get$operator$of$vmovlps(...) vmovlps
#		define instr$get$operator$of$vmovmskpd(...) vmovmskpd
#		define instr$get$operator$of$vmovmskps(...) vmovmskps
#		define instr$get$operator$of$vmovntdq(...) vmovntdq
#		define instr$get$operator$of$vmovntdqa(...) vmovntdqa
#		define instr$get$operator$of$vmovntpd(...) vmovntpd
#		define instr$get$operator$of$vmovntps(...) vmovntps
#		define instr$get$operator$of$vmovq(...) vmovq
#		define instr$get$operator$of$vmovsd(...) vmovsd
#		define instr$get$operator$of$vmovshdup(...) vmovshdup
#		define instr$get$operator$of$vmovsldup(...) vmovsldup
#		define instr$get$operator$of$vmovss(...) vmovss
#		define instr$get$operator$of$vmovupd(...) vmovupd
#		define instr$get$operator$of$vmovups(...) vmovups
#		define instr$get$operator$of$vmpsadbw(...) vmpsadbw
#		define instr$get$operator$of$vmptrld(...) vmptrld
#		define instr$get$operator$of$vmptrst(...) vmptrst
#		define instr$get$operator$of$vmread(...) vmread
#		define instr$get$operator$of$vmresume(...) vmresume
#		define instr$get$operator$of$vmulpd(...) vmulpd
#		define instr$get$operator$of$vmulps(...) vmulps
#		define instr$get$operator$of$vmulsd(...) vmulsd
#		define instr$get$operator$of$vmulss(...) vmulss
#		define instr$get$operator$of$vmwrite(...) vmwrite
#		define instr$get$operator$of$vmxoff(...) vmxoff
#		define instr$get$operator$of$vmxon(...) vmxon
#		define instr$get$operator$of$vorpd(...) vorpd
#		define instr$get$operator$of$vorps(...) vorps
#		define instr$get$operator$of$vpabsb(...) vpabsb
#		define instr$get$operator$of$vpabsd(...) vpabsd
#		define instr$get$operator$of$vpabsw(...) vpabsw
#		define instr$get$operator$of$vpackssdw(...) vpackssdw
#		define instr$get$operator$of$vpacksswb(...) vpacksswb
#		define instr$get$operator$of$vpackusdw(...) vpackusdw
#		define instr$get$operator$of$vpackuswb(...) vpackuswb
#		define instr$get$operator$of$vpaddb(...) vpaddb
#		define instr$get$operator$of$vpaddd(...) vpaddd
#		define instr$get$operator$of$vpaddq(...) vpaddq
#		define instr$get$operator$of$vpaddsb(...) vpaddsb
#		define instr$get$operator$of$vpaddsw(...) vpaddsw
#		define instr$get$operator$of$vpaddusb(...) vpaddusb
#		define instr$get$operator$of$vpaddusw(...) vpaddusw
#		define instr$get$operator$of$vpaddw(...) vpaddw
#		define instr$get$operator$of$vpalignr(...) vpalignr
#		define instr$get$operator$of$vpand(...) vpand
#		define instr$get$operator$of$vpandn(...) vpandn
#		define instr$get$operator$of$vpavgb(...) vpavgb
#		define instr$get$operator$of$vpavgw(...) vpavgw
#		define instr$get$operator$of$vpblendd(...) vpblendd
#		define instr$get$operator$of$vpblendvb(...) vpblendvb
#		define instr$get$operator$of$vpblendw(...) vpblendw
#		define instr$get$operator$of$vpbroadcastb(...) vpbroadcastb
#		define instr$get$operator$of$vpbroadcastd(...) vpbroadcastd
#		define instr$get$operator$of$vpbroadcastq(...) vpbroadcastq
#		define instr$get$operator$of$vpbroadcastw(...) vpbroadcastw
#		define instr$get$operator$of$vpclmulqdq(...) vpclmulqdq
#		define instr$get$operator$of$vpcmpeqb(...) vpcmpeqb
#		define instr$get$operator$of$vpcmpeqd(...) vpcmpeqd
#		define instr$get$operator$of$vpcmpeqq(...) vpcmpeqq
#		define instr$get$operator$of$vpcmpeqw(...) vpcmpeqw
#		define instr$get$operator$of$vpcmpestri(...) vpcmpestri
#		define instr$get$operator$of$vpcmpestrm(...) vpcmpestrm
#		define instr$get$operator$of$vpcmpgtb(...) vpcmpgtb
#		define instr$get$operator$of$vpcmpgtd(...) vpcmpgtd
#		define instr$get$operator$of$vpcmpgtq(...) vpcmpgtq
#		define instr$get$operator$of$vpcmpgtw(...) vpcmpgtw
#		define instr$get$operator$of$vpcmpistri(...) vpcmpistri
#		define instr$get$operator$of$vpcmpistrm(...) vpcmpistrm
#		define instr$get$operator$of$vpdpbusd(...) vpdpbusd
#		define instr$get$operator$of$vpdpbusds(...) vpdpbusds
#		define instr$get$operator$of$vpdpwssd(...) vpdpwssd
#		define instr$get$operator$of$vpdpwssds(...) vpdpwssds
#		define instr$get$operator$of$vperm2f128(...) vperm2f128
#		define instr$get$operator$of$vperm2i128(...) vperm2i128
#		define instr$get$operator$of$vpermd(...) vpermd
#		define instr$get$operator$of$vpermilpd(...) vpermilpd
#		define instr$get$operator$of$vpermilps(...) vpermilps
#		define instr$get$operator$of$vpermpd(...) vpermpd
#		define instr$get$operator$of$vpermps(...) vpermps
#		define instr$get$operator$of$vpermq(...) vpermq
#		define instr$get$operator$of$vpextrb(...) vpextrb
#		define instr$get$operator$of$vpextrd(...) vpextrd
#		define instr$get$operator$of$vpextrq(...) vpextrq
#		define instr$get$operator$of$vpextrw(...) vpextrw
#		define instr$get$operator$of$vphaddd(...) vphaddd
#		define instr$get$operator$of$vphaddsw(...) vphaddsw
#		define instr$get$operator$of$vphaddw(...) vphaddw
#		define instr$get$operator$of$vphminposuw(...) vphminposuw
#		define instr$get$operator$of$vphsubd(...) vphsubd
#		define instr$get$operator$of$vphsubsw(...) vphsubsw
#		define instr$get$operator$of$vphsubw(...) vphsubw
#		define instr$get$operator$of$vpinsrb(...) vpinsrb
#		define instr$get$operator$of$vpinsrd(...) vpinsrd
#		define instr$get$operator$of$vpinsrq(...) vpinsrq
#		define instr$get$operator$of$vpinsrw(...) vpinsrw
#		define instr$get$operator$of$vpmaddubsw(...) vpmaddubsw
#		define instr$get$operator$of$vpmaddwd(...) vpmaddwd
#		define instr$get$operator$of$vpmaskmovd(...) vpmaskmovd
#		define instr$get$operator$of$vpmaskmovq(...) vpmaskmovq
#		define instr$get$operator$of$vpmaxsb(...) vpmaxsb
#		define instr$get$operator$of$vpmaxsd(...) vpmaxsd
#		define instr$get$operator$of$vpmaxsw(...) vpmaxsw
#		define instr$get$operator$of$vpmaxub(...) vpmaxub
#		define instr$get$operator$of$vpmaxud(...) vpmaxud
#		define instr$get$operator$of$vpmaxuw(...) vpmaxuw
#		define instr$get$operator$of$vpminsb(...) vpminsb
#		define instr$get$operator$of$vpminsd(...) vpminsd
#		define instr$get$operator$of$vpminsw(...) vpminsw
#		define instr$get$operator$of$vpminub(...) vpminub
#		define instr$get$operator$of$vpminud(...) vpminud
#		define instr$get$operator$of$vpminuw(...) vpminuw
#		define instr$get$operator$of$vpmovmskb(...) vpmovmskb
#		define instr$get$operator$of$vpmovsxbd(...) vpmovsxbd
#		define instr$get$operator$of$vpmovsxbq(...) vpmovsxbq
#		define instr$get$operator$of$vpmovsxbw(...) vpmovsxbw
#		define instr$get$operator$of$vpmovsxdq(...) vpmovsxdq
#		define instr$get$operator$of$vpmovsxwd(...) vpmovsxwd
#		define instr$get$operator$of$vpmovsxwq(...) vpmovsxwq
#		define instr$get$operator$of$vpmovzxbd(...) vpmovzxbd
#		define instr$get$operator$of$vpmovzxbq(...) vpmovzxbq
#		define instr$get$operator$of$vpmovzxbw(...) vpmovzxbw
#		define instr$get$operator$of$vpmovzxdq(...) vpmovzxdq
#		define instr$get$operator$of$vpmovzxwd(...) vpmovzxwd
#		define instr$get$operator$of$vpmovzxwq(...) vpmovzxwq
#		define instr$get$operator$of$vpmuldq(...) vpmuldq
#		define instr$get$operator$of$vpmulhrsw(...) vpmulhrsw
#		define instr$get$operator$of$vpmulhuw(...) vpmulhuw
#		define instr$get$operator$of$vpmulhw(...) vpmulhw
#		define instr$get$operator$of$vpmulld(...) vpmulld
#		define instr$get$operator$of$vpmullw(...) vpmullw
#		define instr$get$operator$of$vpmuludq(...) vpmuludq
#		define instr$get$operator$of$vpor(...) vpor
#		define instr$get$operator$of$vpsadbw(...) vpsadbw
#		define instr$get$operator$of$vpshufb(...) vpshufb
#		define instr$get$operator$of$vpshufd(...) vpshufd
#		define instr$get$operator$of$vpshufhw(...) vpshufhw
#		define instr$get$operator$of$vpshuflw(...) vpshuflw
#		define instr$get$operator$of$vpsignb(...) vpsignb
#		define instr$get$operator$of$vpsignd(...) vpsignd
#		define instr$get$operator$of$vpsignw(...) vpsignw
#		define instr$get$operator$of$vpslld(...) vpslld
#		define instr$get$operator$of$vpslldq(...) vpslldq
#		define instr$get$operator$of$vpsllq(...) vpsllq
#		define instr$get$operator$of$vpsllvd(...) vpsllvd
#		define instr$get$operator$of$vpsllvq(...) vpsllvq
#		define instr$get$operator$of$vpsllw(...) vpsllw
#		define instr$get$operator$of$vpsrad(...) vpsrad
#		define instr$get$operator$of$vpsravd(...) vpsravd
#		define instr$get$operator$of$vpsraw(...) vpsraw
#		define instr$get$operator$of$vpsrld(...) vpsrld
#		define instr$get$operator$of$vpsrldq(...) vpsrldq
#		define instr$get$operator$of$vpsrlq(...) vpsrlq
#		define instr$get$operator$of$vpsrlvd(...) vpsrlvd
#		define instr$get$operator$of$vpsrlvq(...) vpsrlvq
#		define instr$get$operator$of$vpsrlw(...) vpsrlw
#		define instr$get$operator$of$vpsubb(...) vpsubb
#		define instr$get$operator$of$vpsubd(...) vpsubd
#		define instr$get$operator$of$vpsubq(...) vpsubq
#		define instr$get$operator$of$vpsubsb(...) vpsubsb
#		define instr$get$operator$of$vpsubsw(...) vpsubsw
#		define instr$get$operator$of$vpsubusb(...) vpsubusb
#		define instr$get$operator$of$vpsubusw(...) vpsubusw
#		define instr$get$operator$of$vpsubw(...) vpsubw
#		define instr$get$operator$of$vptest(...) vptest
#		define instr$get$operator$of$vpunpckhbw(...) vpunpckhbw
#		define instr$get$operator$of$vpunpckhdq(...) vpunpckhdq
#		define instr$get$operator$of$vpunpckhqdq(...) vpunpckhqdq
#		define instr$get$operator$of$vpunpckhwd(...) vpunpckhwd
#		define instr$get$operator$of$vpunpcklbw(...) vpunpcklbw
#		define instr$get$operator$of$vpunpckldq(...) vpunpckldq
#		define instr$get$operator$of$vpunpcklqdq(...) vpunpcklqdq
#		define instr$get$operator$of$vpunpcklwd(...) vpunpcklwd
#		define instr$get$operator$of$vpxor(...) vpxor
#		define instr$get$operator$of$vrcpps(...) vrcpps
#		define instr$get$operator$of$vrcpss(...) vrcpss
#		define instr$get$operator$of$vroundpd(...) vroundpd
#		define instr$get$operator$of$vroundps(...) vroundps
#		define instr$get$operator$of$vroundsd(...) vroundsd
#		define instr$get$operator$of$vroundss(...) vroundss
#		define instr$get$operator$of$vrsqrtps(...) vrsqrtps
#		define instr$get$operator$of$vrsqrtss(...) vrsqrtss
#		define instr$get$operator$of$vshufpd(...) vshufpd
#		define instr$get$operator$of$vshufps(...) vshufps
#		define instr$get$operator$of$vsqrtpd(...) vsqrtpd
#		define instr$get$operator$of$vsqrtps(...) vsqrtps
#		define instr$get$operator$of$vsqrtsd(...) vsqrtsd
#		define instr$get$operator$of$vsqrtss(...) vsqrtss
#		define instr$get$operator$of$vstmxcsr(...) vstmxcsr
#		define instr$get$operator$of$vsubpd(...) vsubpd
#		define instr$get$operator$of$vsubps(...) vsubps
#		define instr$get$operator$of$vsubsd(...) vsubsd
#		define instr$get$operator$of$vsubss(...) vsubss
#		define instr$get$operator$of$vtestpd(...) vtestpd
#		define instr$get$operator$of$vtestps(...) vtestps
#		define instr$get$operator$of$vucomisd(...) vucomisd
#		define instr$get$operator$of$vucomiss(...) vucomiss
#		define instr$get$operator$of$vunpckhpd(...) vunpckhpd
#		define instr$get$operator$of$vunpckhps(...) vunpckhps
#		define instr$get$operator$of$vunpcklpd(...) vunpcklpd
#		define instr$get$operator$of$vunpcklps(...) vunpcklps
#		define instr$get$operator$of$vxorpd(...) vxorpd
#		define instr$get$operator$of$vxorps(...) vxorps
#		define instr$get$operator$of$vzeroall(...) vzeroall
#		define instr$get$operator$of$vzeroupper(...) vzeroupper
#		define instr$get$operator$of$wait(...) wait
#		define instr$get$operator$of$wbinvd(...) wbinvd
#		define instr$get$operator$of$wbnoinvd(...) wbnoinvd
#		define instr$get$operator$of$wrfsbase(...) wrfsbase
#		define instr$get$operator$of$wrgsbase(...) wrgsbase
#		define instr$get$operator$of$wrmsr(...) wrmsr
#		define instr$get$operator$of$wrpkru(...) wrpkru
#		define instr$get$operator$of$wrssd(...) wrssd
#		define instr$get$operator$of$wrssq(...) wrssq
#		define instr$get$operator$of$wrussd(...) wrussd
#		define instr$get$operator$of$wrussq(...) wrussq
#		define instr$get$operator$of$xabort(...) xabort
#		define instr$get$operator$of$xacquire(...) xacquire
#		define instr$get$operator$of$xadd(...) xadd
#		define instr$get$operator$of$xbegin(...) xbegin
#		define instr$get$operator$of$xchg(...) xchg
#		define instr$get$operator$of$xend(...) xend
#		define instr$get$operator$of$xgetbv(...) xgetbv
#		define instr$get$operator$of$xlatb(...) xlatb
#		define instr$get$operator$of$xor(...) xor
#		define instr$get$operator$of$xorpd(...) xorpd
#		define instr$get$operator$of$xorps(...) xorps
#		define instr$get$operator$of$xrelease(...) xrelease
#		define instr$get$operator$of$xrstor(...) xrstor
#		define instr$get$operator$of$xrstor64(...) xrstor64
#		define instr$get$operator$of$xrstors(...) xrstors
#		define instr$get$operator$of$xrstors64(...) xrstors64
#		define instr$get$operator$of$xsave(...) xsave
#		define instr$get$operator$of$xsave64(...) xsave64
#		define instr$get$operator$of$xsavec(...) xsavec
#		define instr$get$operator$of$xsavec64(...) xsavec64
#		define instr$get$operator$of$xsaveopt(...) xsaveopt
#		define instr$get$operator$of$xsaveopt64(...) xsaveopt64
#		define instr$get$operator$of$xsaves(...) xsaves
#		define instr$get$operator$of$xsaves64(...) xsaves64
#		define instr$get$operator$of$xsetbv(...) xsetbv
#		define instr$get$operator$of$xtest(...) xtest
#		define int(...) rawint(imm08(__VA_ARGS__))
#		define isbytes(x) byte$eq(0,0,0,0,0,0,1,0,byte$fromhex(count(comma$if$isbytes(x))))
#		define just(...) __VA_ARGS__
#		define keyval$8$32$add(self,...) keyval$8$32$add$1(keyval$8$32$getsize(self),keyval$8$32$getdata(self), __VA_ARGS__)
#		define keyval$8$32$add$1(...) keyval$8$32$add$2(__VA_ARGS__)
#		define keyval$8$32$add$2(...) keyval$8$32$add$3(__VA_ARGS__)
#		define keyval$8$32$add$3(size,data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v1b31,v1b30,v1b29,v1b28,v1b27,v1b26,v1b25,v1b24,v1b23,v1b22,v1b21,v1b20,v1b19,v1b18,v1b17,v1b16,v1b15,v1b14,v1b13,v1b12,v1b11,v1b10,v1b9,v1b8,v1b7,v1b6,v1b5,v1b4,v1b3,v1b2,v1b1,v1b0) (i08$tohex(byte$as$ff,byte$join$glue,i08$add(i08$fromhex(size),i08$one)),(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v1b31,v1b30,v1b29,v1b28,v1b27,v1b26,v1b25,v1b24,v1b23,v1b22,v1b21,v1b20,v1b19,v1b18,v1b17,v1b16,v1b15,v1b14,v1b13,v1b12,v1b11,v1b10,v1b9,v1b8,v1b7,v1b6,v1b5,v1b4,v1b3,v1b2,v1b1,v1b0,data))
#		define keyval$8$32$get(...) keyval$8$32$get$1(__VA_ARGS__)
#		define keyval$8$32$get$1(...) keyval$8$32$get$2(__VA_ARGS__)
#		define keyval$8$32$get$2(self,nil,...) keyval$8$32$get$3(keyval$8$32$getsize(self),keyval$8$32$getdata(self),nil,__VA_ARGS__)
#		define keyval$8$32$get$3(...) keyval$8$32$get$4(__VA_ARGS__)
#		define keyval$8$32$get$4(size,data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for##size(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for00(...) keyval$8$32$get$for00$1(__VA_ARGS__)
#		define keyval$8$32$get$for00$1(...) keyval$8$32$get$for00$2(__VA_ARGS__)
#		define keyval$8$32$get$for00$2(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) nil
#		define keyval$8$32$get$for01(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for01$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for01$1(...) keyval$8$32$get$for01$2(__VA_ARGS__)
#		define keyval$8$32$get$for01$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for01$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for01$3(...) keyval$8$32$get$for01$4(__VA_ARGS__)
#		define keyval$8$32$get$for01$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for01$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for01$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for00(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for01$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for02(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for02$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for02$1(...) keyval$8$32$get$for02$2(__VA_ARGS__)
#		define keyval$8$32$get$for02$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for02$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for02$3(...) keyval$8$32$get$for02$4(__VA_ARGS__)
#		define keyval$8$32$get$for02$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for02$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for02$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for01(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for02$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for03(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for03$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for03$1(...) keyval$8$32$get$for03$2(__VA_ARGS__)
#		define keyval$8$32$get$for03$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for03$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for03$3(...) keyval$8$32$get$for03$4(__VA_ARGS__)
#		define keyval$8$32$get$for03$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for03$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for03$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for02(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for03$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for04(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for04$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for04$1(...) keyval$8$32$get$for04$2(__VA_ARGS__)
#		define keyval$8$32$get$for04$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for04$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for04$3(...) keyval$8$32$get$for04$4(__VA_ARGS__)
#		define keyval$8$32$get$for04$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for04$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for04$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for03(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for04$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for05(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for05$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for05$1(...) keyval$8$32$get$for05$2(__VA_ARGS__)
#		define keyval$8$32$get$for05$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for05$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for05$3(...) keyval$8$32$get$for05$4(__VA_ARGS__)
#		define keyval$8$32$get$for05$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for05$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for05$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for04(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for05$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for06(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for06$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for06$1(...) keyval$8$32$get$for06$2(__VA_ARGS__)
#		define keyval$8$32$get$for06$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for06$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for06$3(...) keyval$8$32$get$for06$4(__VA_ARGS__)
#		define keyval$8$32$get$for06$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for06$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for06$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for05(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for06$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for07(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for07$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for07$1(...) keyval$8$32$get$for07$2(__VA_ARGS__)
#		define keyval$8$32$get$for07$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for07$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for07$3(...) keyval$8$32$get$for07$4(__VA_ARGS__)
#		define keyval$8$32$get$for07$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for07$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for07$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for06(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for07$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for08(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for08$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for08$1(...) keyval$8$32$get$for08$2(__VA_ARGS__)
#		define keyval$8$32$get$for08$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for08$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for08$3(...) keyval$8$32$get$for08$4(__VA_ARGS__)
#		define keyval$8$32$get$for08$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for08$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for08$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for07(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for08$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for09(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for09$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for09$1(...) keyval$8$32$get$for09$2(__VA_ARGS__)
#		define keyval$8$32$get$for09$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for09$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for09$3(...) keyval$8$32$get$for09$4(__VA_ARGS__)
#		define keyval$8$32$get$for09$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for09$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for09$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for08(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for09$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for0a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0a$1(...) keyval$8$32$get$for0a$2(__VA_ARGS__)
#		define keyval$8$32$get$for0a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0a$3(...) keyval$8$32$get$for0a$4(__VA_ARGS__)
#		define keyval$8$32$get$for0a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for09(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for0b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0b$1(...) keyval$8$32$get$for0b$2(__VA_ARGS__)
#		define keyval$8$32$get$for0b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0b$3(...) keyval$8$32$get$for0b$4(__VA_ARGS__)
#		define keyval$8$32$get$for0b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for0c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0c$1(...) keyval$8$32$get$for0c$2(__VA_ARGS__)
#		define keyval$8$32$get$for0c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0c$3(...) keyval$8$32$get$for0c$4(__VA_ARGS__)
#		define keyval$8$32$get$for0c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for0d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0d$1(...) keyval$8$32$get$for0d$2(__VA_ARGS__)
#		define keyval$8$32$get$for0d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0d$3(...) keyval$8$32$get$for0d$4(__VA_ARGS__)
#		define keyval$8$32$get$for0d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for0e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0e$1(...) keyval$8$32$get$for0e$2(__VA_ARGS__)
#		define keyval$8$32$get$for0e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0e$3(...) keyval$8$32$get$for0e$4(__VA_ARGS__)
#		define keyval$8$32$get$for0e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for0f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0f$1(...) keyval$8$32$get$for0f$2(__VA_ARGS__)
#		define keyval$8$32$get$for0f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for0f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0f$3(...) keyval$8$32$get$for0f$4(__VA_ARGS__)
#		define keyval$8$32$get$for0f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for0f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for0f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for10(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for10$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for10$1(...) keyval$8$32$get$for10$2(__VA_ARGS__)
#		define keyval$8$32$get$for10$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for10$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for10$3(...) keyval$8$32$get$for10$4(__VA_ARGS__)
#		define keyval$8$32$get$for10$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for10$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for10$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for0f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for10$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for11(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for11$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for11$1(...) keyval$8$32$get$for11$2(__VA_ARGS__)
#		define keyval$8$32$get$for11$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for11$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for11$3(...) keyval$8$32$get$for11$4(__VA_ARGS__)
#		define keyval$8$32$get$for11$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for11$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for11$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for10(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for11$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for12(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for12$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for12$1(...) keyval$8$32$get$for12$2(__VA_ARGS__)
#		define keyval$8$32$get$for12$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for12$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for12$3(...) keyval$8$32$get$for12$4(__VA_ARGS__)
#		define keyval$8$32$get$for12$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for12$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for12$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for11(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for12$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for13(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for13$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for13$1(...) keyval$8$32$get$for13$2(__VA_ARGS__)
#		define keyval$8$32$get$for13$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for13$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for13$3(...) keyval$8$32$get$for13$4(__VA_ARGS__)
#		define keyval$8$32$get$for13$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for13$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for13$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for12(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for13$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for14(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for14$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for14$1(...) keyval$8$32$get$for14$2(__VA_ARGS__)
#		define keyval$8$32$get$for14$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for14$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for14$3(...) keyval$8$32$get$for14$4(__VA_ARGS__)
#		define keyval$8$32$get$for14$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for14$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for14$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for13(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for14$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for15(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for15$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for15$1(...) keyval$8$32$get$for15$2(__VA_ARGS__)
#		define keyval$8$32$get$for15$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for15$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for15$3(...) keyval$8$32$get$for15$4(__VA_ARGS__)
#		define keyval$8$32$get$for15$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for15$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for15$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for14(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for15$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for16(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for16$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for16$1(...) keyval$8$32$get$for16$2(__VA_ARGS__)
#		define keyval$8$32$get$for16$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for16$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for16$3(...) keyval$8$32$get$for16$4(__VA_ARGS__)
#		define keyval$8$32$get$for16$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for16$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for16$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for15(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for16$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for17(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for17$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for17$1(...) keyval$8$32$get$for17$2(__VA_ARGS__)
#		define keyval$8$32$get$for17$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for17$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for17$3(...) keyval$8$32$get$for17$4(__VA_ARGS__)
#		define keyval$8$32$get$for17$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for17$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for17$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for16(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for17$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for18(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for18$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for18$1(...) keyval$8$32$get$for18$2(__VA_ARGS__)
#		define keyval$8$32$get$for18$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for18$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for18$3(...) keyval$8$32$get$for18$4(__VA_ARGS__)
#		define keyval$8$32$get$for18$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for18$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for18$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for17(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for18$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for19(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for19$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for19$1(...) keyval$8$32$get$for19$2(__VA_ARGS__)
#		define keyval$8$32$get$for19$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for19$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for19$3(...) keyval$8$32$get$for19$4(__VA_ARGS__)
#		define keyval$8$32$get$for19$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for19$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for19$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for18(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for19$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for1a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1a$1(...) keyval$8$32$get$for1a$2(__VA_ARGS__)
#		define keyval$8$32$get$for1a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1a$3(...) keyval$8$32$get$for1a$4(__VA_ARGS__)
#		define keyval$8$32$get$for1a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for19(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for1b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1b$1(...) keyval$8$32$get$for1b$2(__VA_ARGS__)
#		define keyval$8$32$get$for1b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1b$3(...) keyval$8$32$get$for1b$4(__VA_ARGS__)
#		define keyval$8$32$get$for1b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for1c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1c$1(...) keyval$8$32$get$for1c$2(__VA_ARGS__)
#		define keyval$8$32$get$for1c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1c$3(...) keyval$8$32$get$for1c$4(__VA_ARGS__)
#		define keyval$8$32$get$for1c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for1d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1d$1(...) keyval$8$32$get$for1d$2(__VA_ARGS__)
#		define keyval$8$32$get$for1d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1d$3(...) keyval$8$32$get$for1d$4(__VA_ARGS__)
#		define keyval$8$32$get$for1d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for1e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1e$1(...) keyval$8$32$get$for1e$2(__VA_ARGS__)
#		define keyval$8$32$get$for1e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1e$3(...) keyval$8$32$get$for1e$4(__VA_ARGS__)
#		define keyval$8$32$get$for1e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for1f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1f$1(...) keyval$8$32$get$for1f$2(__VA_ARGS__)
#		define keyval$8$32$get$for1f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for1f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1f$3(...) keyval$8$32$get$for1f$4(__VA_ARGS__)
#		define keyval$8$32$get$for1f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for1f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for1f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for20(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for20$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for20$1(...) keyval$8$32$get$for20$2(__VA_ARGS__)
#		define keyval$8$32$get$for20$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for20$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for20$3(...) keyval$8$32$get$for20$4(__VA_ARGS__)
#		define keyval$8$32$get$for20$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for20$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for20$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for1f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for20$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for21(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for21$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for21$1(...) keyval$8$32$get$for21$2(__VA_ARGS__)
#		define keyval$8$32$get$for21$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for21$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for21$3(...) keyval$8$32$get$for21$4(__VA_ARGS__)
#		define keyval$8$32$get$for21$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for21$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for21$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for20(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for21$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for22(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for22$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for22$1(...) keyval$8$32$get$for22$2(__VA_ARGS__)
#		define keyval$8$32$get$for22$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for22$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for22$3(...) keyval$8$32$get$for22$4(__VA_ARGS__)
#		define keyval$8$32$get$for22$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for22$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for22$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for21(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for22$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for23(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for23$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for23$1(...) keyval$8$32$get$for23$2(__VA_ARGS__)
#		define keyval$8$32$get$for23$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for23$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for23$3(...) keyval$8$32$get$for23$4(__VA_ARGS__)
#		define keyval$8$32$get$for23$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for23$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for23$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for22(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for23$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for24(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for24$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for24$1(...) keyval$8$32$get$for24$2(__VA_ARGS__)
#		define keyval$8$32$get$for24$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for24$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for24$3(...) keyval$8$32$get$for24$4(__VA_ARGS__)
#		define keyval$8$32$get$for24$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for24$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for24$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for23(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for24$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for25(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for25$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for25$1(...) keyval$8$32$get$for25$2(__VA_ARGS__)
#		define keyval$8$32$get$for25$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for25$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for25$3(...) keyval$8$32$get$for25$4(__VA_ARGS__)
#		define keyval$8$32$get$for25$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for25$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for25$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for24(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for25$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for26(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for26$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for26$1(...) keyval$8$32$get$for26$2(__VA_ARGS__)
#		define keyval$8$32$get$for26$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for26$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for26$3(...) keyval$8$32$get$for26$4(__VA_ARGS__)
#		define keyval$8$32$get$for26$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for26$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for26$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for25(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for26$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for27(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for27$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for27$1(...) keyval$8$32$get$for27$2(__VA_ARGS__)
#		define keyval$8$32$get$for27$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for27$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for27$3(...) keyval$8$32$get$for27$4(__VA_ARGS__)
#		define keyval$8$32$get$for27$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for27$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for27$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for26(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for27$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for28(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for28$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for28$1(...) keyval$8$32$get$for28$2(__VA_ARGS__)
#		define keyval$8$32$get$for28$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for28$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for28$3(...) keyval$8$32$get$for28$4(__VA_ARGS__)
#		define keyval$8$32$get$for28$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for28$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for28$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for27(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for28$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for29(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for29$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for29$1(...) keyval$8$32$get$for29$2(__VA_ARGS__)
#		define keyval$8$32$get$for29$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for29$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for29$3(...) keyval$8$32$get$for29$4(__VA_ARGS__)
#		define keyval$8$32$get$for29$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for29$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for29$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for28(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for29$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for2a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2a$1(...) keyval$8$32$get$for2a$2(__VA_ARGS__)
#		define keyval$8$32$get$for2a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2a$3(...) keyval$8$32$get$for2a$4(__VA_ARGS__)
#		define keyval$8$32$get$for2a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for29(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for2b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2b$1(...) keyval$8$32$get$for2b$2(__VA_ARGS__)
#		define keyval$8$32$get$for2b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2b$3(...) keyval$8$32$get$for2b$4(__VA_ARGS__)
#		define keyval$8$32$get$for2b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for2c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2c$1(...) keyval$8$32$get$for2c$2(__VA_ARGS__)
#		define keyval$8$32$get$for2c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2c$3(...) keyval$8$32$get$for2c$4(__VA_ARGS__)
#		define keyval$8$32$get$for2c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for2d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2d$1(...) keyval$8$32$get$for2d$2(__VA_ARGS__)
#		define keyval$8$32$get$for2d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2d$3(...) keyval$8$32$get$for2d$4(__VA_ARGS__)
#		define keyval$8$32$get$for2d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for2e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2e$1(...) keyval$8$32$get$for2e$2(__VA_ARGS__)
#		define keyval$8$32$get$for2e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2e$3(...) keyval$8$32$get$for2e$4(__VA_ARGS__)
#		define keyval$8$32$get$for2e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for2f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2f$1(...) keyval$8$32$get$for2f$2(__VA_ARGS__)
#		define keyval$8$32$get$for2f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for2f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2f$3(...) keyval$8$32$get$for2f$4(__VA_ARGS__)
#		define keyval$8$32$get$for2f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for2f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for2f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for30(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for30$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for30$1(...) keyval$8$32$get$for30$2(__VA_ARGS__)
#		define keyval$8$32$get$for30$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for30$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for30$3(...) keyval$8$32$get$for30$4(__VA_ARGS__)
#		define keyval$8$32$get$for30$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for30$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for30$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for2f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for30$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for31(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for31$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for31$1(...) keyval$8$32$get$for31$2(__VA_ARGS__)
#		define keyval$8$32$get$for31$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for31$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for31$3(...) keyval$8$32$get$for31$4(__VA_ARGS__)
#		define keyval$8$32$get$for31$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for31$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for31$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for30(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for31$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for32(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for32$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for32$1(...) keyval$8$32$get$for32$2(__VA_ARGS__)
#		define keyval$8$32$get$for32$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for32$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for32$3(...) keyval$8$32$get$for32$4(__VA_ARGS__)
#		define keyval$8$32$get$for32$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for32$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for32$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for31(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for32$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for33(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for33$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for33$1(...) keyval$8$32$get$for33$2(__VA_ARGS__)
#		define keyval$8$32$get$for33$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for33$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for33$3(...) keyval$8$32$get$for33$4(__VA_ARGS__)
#		define keyval$8$32$get$for33$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for33$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for33$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for32(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for33$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for34(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for34$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for34$1(...) keyval$8$32$get$for34$2(__VA_ARGS__)
#		define keyval$8$32$get$for34$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for34$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for34$3(...) keyval$8$32$get$for34$4(__VA_ARGS__)
#		define keyval$8$32$get$for34$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for34$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for34$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for33(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for34$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for35(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for35$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for35$1(...) keyval$8$32$get$for35$2(__VA_ARGS__)
#		define keyval$8$32$get$for35$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for35$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for35$3(...) keyval$8$32$get$for35$4(__VA_ARGS__)
#		define keyval$8$32$get$for35$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for35$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for35$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for34(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for35$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for36(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for36$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for36$1(...) keyval$8$32$get$for36$2(__VA_ARGS__)
#		define keyval$8$32$get$for36$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for36$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for36$3(...) keyval$8$32$get$for36$4(__VA_ARGS__)
#		define keyval$8$32$get$for36$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for36$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for36$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for35(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for36$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for37(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for37$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for37$1(...) keyval$8$32$get$for37$2(__VA_ARGS__)
#		define keyval$8$32$get$for37$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for37$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for37$3(...) keyval$8$32$get$for37$4(__VA_ARGS__)
#		define keyval$8$32$get$for37$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for37$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for37$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for36(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for37$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for38(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for38$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for38$1(...) keyval$8$32$get$for38$2(__VA_ARGS__)
#		define keyval$8$32$get$for38$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for38$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for38$3(...) keyval$8$32$get$for38$4(__VA_ARGS__)
#		define keyval$8$32$get$for38$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for38$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for38$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for37(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for38$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for39(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for39$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for39$1(...) keyval$8$32$get$for39$2(__VA_ARGS__)
#		define keyval$8$32$get$for39$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for39$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for39$3(...) keyval$8$32$get$for39$4(__VA_ARGS__)
#		define keyval$8$32$get$for39$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for39$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for39$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for38(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for39$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for3a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3a$1(...) keyval$8$32$get$for3a$2(__VA_ARGS__)
#		define keyval$8$32$get$for3a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3a$3(...) keyval$8$32$get$for3a$4(__VA_ARGS__)
#		define keyval$8$32$get$for3a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for39(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for3b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3b$1(...) keyval$8$32$get$for3b$2(__VA_ARGS__)
#		define keyval$8$32$get$for3b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3b$3(...) keyval$8$32$get$for3b$4(__VA_ARGS__)
#		define keyval$8$32$get$for3b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for3c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3c$1(...) keyval$8$32$get$for3c$2(__VA_ARGS__)
#		define keyval$8$32$get$for3c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3c$3(...) keyval$8$32$get$for3c$4(__VA_ARGS__)
#		define keyval$8$32$get$for3c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for3d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3d$1(...) keyval$8$32$get$for3d$2(__VA_ARGS__)
#		define keyval$8$32$get$for3d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3d$3(...) keyval$8$32$get$for3d$4(__VA_ARGS__)
#		define keyval$8$32$get$for3d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for3e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3e$1(...) keyval$8$32$get$for3e$2(__VA_ARGS__)
#		define keyval$8$32$get$for3e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3e$3(...) keyval$8$32$get$for3e$4(__VA_ARGS__)
#		define keyval$8$32$get$for3e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for3f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3f$1(...) keyval$8$32$get$for3f$2(__VA_ARGS__)
#		define keyval$8$32$get$for3f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for3f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3f$3(...) keyval$8$32$get$for3f$4(__VA_ARGS__)
#		define keyval$8$32$get$for3f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for3f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for3f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for40(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for40$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for40$1(...) keyval$8$32$get$for40$2(__VA_ARGS__)
#		define keyval$8$32$get$for40$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for40$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for40$3(...) keyval$8$32$get$for40$4(__VA_ARGS__)
#		define keyval$8$32$get$for40$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for40$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for40$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for3f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for40$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for41(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for41$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for41$1(...) keyval$8$32$get$for41$2(__VA_ARGS__)
#		define keyval$8$32$get$for41$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for41$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for41$3(...) keyval$8$32$get$for41$4(__VA_ARGS__)
#		define keyval$8$32$get$for41$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for41$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for41$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for40(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for41$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for42(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for42$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for42$1(...) keyval$8$32$get$for42$2(__VA_ARGS__)
#		define keyval$8$32$get$for42$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for42$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for42$3(...) keyval$8$32$get$for42$4(__VA_ARGS__)
#		define keyval$8$32$get$for42$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for42$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for42$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for41(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for42$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for43(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for43$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for43$1(...) keyval$8$32$get$for43$2(__VA_ARGS__)
#		define keyval$8$32$get$for43$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for43$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for43$3(...) keyval$8$32$get$for43$4(__VA_ARGS__)
#		define keyval$8$32$get$for43$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for43$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for43$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for42(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for43$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for44(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for44$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for44$1(...) keyval$8$32$get$for44$2(__VA_ARGS__)
#		define keyval$8$32$get$for44$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for44$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for44$3(...) keyval$8$32$get$for44$4(__VA_ARGS__)
#		define keyval$8$32$get$for44$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for44$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for44$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for43(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for44$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for45(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for45$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for45$1(...) keyval$8$32$get$for45$2(__VA_ARGS__)
#		define keyval$8$32$get$for45$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for45$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for45$3(...) keyval$8$32$get$for45$4(__VA_ARGS__)
#		define keyval$8$32$get$for45$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for45$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for45$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for44(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for45$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for46(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for46$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for46$1(...) keyval$8$32$get$for46$2(__VA_ARGS__)
#		define keyval$8$32$get$for46$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for46$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for46$3(...) keyval$8$32$get$for46$4(__VA_ARGS__)
#		define keyval$8$32$get$for46$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for46$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for46$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for45(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for46$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for47(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for47$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for47$1(...) keyval$8$32$get$for47$2(__VA_ARGS__)
#		define keyval$8$32$get$for47$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for47$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for47$3(...) keyval$8$32$get$for47$4(__VA_ARGS__)
#		define keyval$8$32$get$for47$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for47$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for47$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for46(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for47$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for48(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for48$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for48$1(...) keyval$8$32$get$for48$2(__VA_ARGS__)
#		define keyval$8$32$get$for48$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for48$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for48$3(...) keyval$8$32$get$for48$4(__VA_ARGS__)
#		define keyval$8$32$get$for48$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for48$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for48$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for47(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for48$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for49(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for49$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for49$1(...) keyval$8$32$get$for49$2(__VA_ARGS__)
#		define keyval$8$32$get$for49$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for49$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for49$3(...) keyval$8$32$get$for49$4(__VA_ARGS__)
#		define keyval$8$32$get$for49$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for49$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for49$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for48(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for49$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for4a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4a$1(...) keyval$8$32$get$for4a$2(__VA_ARGS__)
#		define keyval$8$32$get$for4a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4a$3(...) keyval$8$32$get$for4a$4(__VA_ARGS__)
#		define keyval$8$32$get$for4a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for49(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for4b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4b$1(...) keyval$8$32$get$for4b$2(__VA_ARGS__)
#		define keyval$8$32$get$for4b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4b$3(...) keyval$8$32$get$for4b$4(__VA_ARGS__)
#		define keyval$8$32$get$for4b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for4c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4c$1(...) keyval$8$32$get$for4c$2(__VA_ARGS__)
#		define keyval$8$32$get$for4c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4c$3(...) keyval$8$32$get$for4c$4(__VA_ARGS__)
#		define keyval$8$32$get$for4c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for4d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4d$1(...) keyval$8$32$get$for4d$2(__VA_ARGS__)
#		define keyval$8$32$get$for4d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4d$3(...) keyval$8$32$get$for4d$4(__VA_ARGS__)
#		define keyval$8$32$get$for4d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for4e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4e$1(...) keyval$8$32$get$for4e$2(__VA_ARGS__)
#		define keyval$8$32$get$for4e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4e$3(...) keyval$8$32$get$for4e$4(__VA_ARGS__)
#		define keyval$8$32$get$for4e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for4f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4f$1(...) keyval$8$32$get$for4f$2(__VA_ARGS__)
#		define keyval$8$32$get$for4f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for4f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4f$3(...) keyval$8$32$get$for4f$4(__VA_ARGS__)
#		define keyval$8$32$get$for4f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for4f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for4f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for50(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for50$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for50$1(...) keyval$8$32$get$for50$2(__VA_ARGS__)
#		define keyval$8$32$get$for50$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for50$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for50$3(...) keyval$8$32$get$for50$4(__VA_ARGS__)
#		define keyval$8$32$get$for50$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for50$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for50$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for4f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for50$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for51(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for51$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for51$1(...) keyval$8$32$get$for51$2(__VA_ARGS__)
#		define keyval$8$32$get$for51$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for51$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for51$3(...) keyval$8$32$get$for51$4(__VA_ARGS__)
#		define keyval$8$32$get$for51$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for51$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for51$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for50(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for51$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for52(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for52$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for52$1(...) keyval$8$32$get$for52$2(__VA_ARGS__)
#		define keyval$8$32$get$for52$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for52$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for52$3(...) keyval$8$32$get$for52$4(__VA_ARGS__)
#		define keyval$8$32$get$for52$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for52$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for52$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for51(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for52$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for53(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for53$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for53$1(...) keyval$8$32$get$for53$2(__VA_ARGS__)
#		define keyval$8$32$get$for53$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for53$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for53$3(...) keyval$8$32$get$for53$4(__VA_ARGS__)
#		define keyval$8$32$get$for53$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for53$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for53$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for52(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for53$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for54(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for54$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for54$1(...) keyval$8$32$get$for54$2(__VA_ARGS__)
#		define keyval$8$32$get$for54$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for54$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for54$3(...) keyval$8$32$get$for54$4(__VA_ARGS__)
#		define keyval$8$32$get$for54$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for54$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for54$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for53(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for54$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for55(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for55$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for55$1(...) keyval$8$32$get$for55$2(__VA_ARGS__)
#		define keyval$8$32$get$for55$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for55$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for55$3(...) keyval$8$32$get$for55$4(__VA_ARGS__)
#		define keyval$8$32$get$for55$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for55$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for55$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for54(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for55$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for56(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for56$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for56$1(...) keyval$8$32$get$for56$2(__VA_ARGS__)
#		define keyval$8$32$get$for56$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for56$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for56$3(...) keyval$8$32$get$for56$4(__VA_ARGS__)
#		define keyval$8$32$get$for56$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for56$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for56$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for55(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for56$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for57(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for57$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for57$1(...) keyval$8$32$get$for57$2(__VA_ARGS__)
#		define keyval$8$32$get$for57$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for57$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for57$3(...) keyval$8$32$get$for57$4(__VA_ARGS__)
#		define keyval$8$32$get$for57$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for57$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for57$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for56(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for57$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for58(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for58$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for58$1(...) keyval$8$32$get$for58$2(__VA_ARGS__)
#		define keyval$8$32$get$for58$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for58$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for58$3(...) keyval$8$32$get$for58$4(__VA_ARGS__)
#		define keyval$8$32$get$for58$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for58$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for58$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for57(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for58$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for59(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for59$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for59$1(...) keyval$8$32$get$for59$2(__VA_ARGS__)
#		define keyval$8$32$get$for59$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for59$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for59$3(...) keyval$8$32$get$for59$4(__VA_ARGS__)
#		define keyval$8$32$get$for59$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for59$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for59$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for58(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for59$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for5a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5a$1(...) keyval$8$32$get$for5a$2(__VA_ARGS__)
#		define keyval$8$32$get$for5a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5a$3(...) keyval$8$32$get$for5a$4(__VA_ARGS__)
#		define keyval$8$32$get$for5a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for59(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for5b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5b$1(...) keyval$8$32$get$for5b$2(__VA_ARGS__)
#		define keyval$8$32$get$for5b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5b$3(...) keyval$8$32$get$for5b$4(__VA_ARGS__)
#		define keyval$8$32$get$for5b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for5c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5c$1(...) keyval$8$32$get$for5c$2(__VA_ARGS__)
#		define keyval$8$32$get$for5c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5c$3(...) keyval$8$32$get$for5c$4(__VA_ARGS__)
#		define keyval$8$32$get$for5c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for5d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5d$1(...) keyval$8$32$get$for5d$2(__VA_ARGS__)
#		define keyval$8$32$get$for5d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5d$3(...) keyval$8$32$get$for5d$4(__VA_ARGS__)
#		define keyval$8$32$get$for5d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for5e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5e$1(...) keyval$8$32$get$for5e$2(__VA_ARGS__)
#		define keyval$8$32$get$for5e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5e$3(...) keyval$8$32$get$for5e$4(__VA_ARGS__)
#		define keyval$8$32$get$for5e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for5f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5f$1(...) keyval$8$32$get$for5f$2(__VA_ARGS__)
#		define keyval$8$32$get$for5f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for5f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5f$3(...) keyval$8$32$get$for5f$4(__VA_ARGS__)
#		define keyval$8$32$get$for5f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for5f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for5f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for60(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for60$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for60$1(...) keyval$8$32$get$for60$2(__VA_ARGS__)
#		define keyval$8$32$get$for60$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for60$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for60$3(...) keyval$8$32$get$for60$4(__VA_ARGS__)
#		define keyval$8$32$get$for60$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for60$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for60$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for5f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for60$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for61(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for61$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for61$1(...) keyval$8$32$get$for61$2(__VA_ARGS__)
#		define keyval$8$32$get$for61$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for61$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for61$3(...) keyval$8$32$get$for61$4(__VA_ARGS__)
#		define keyval$8$32$get$for61$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for61$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for61$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for60(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for61$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for62(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for62$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for62$1(...) keyval$8$32$get$for62$2(__VA_ARGS__)
#		define keyval$8$32$get$for62$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for62$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for62$3(...) keyval$8$32$get$for62$4(__VA_ARGS__)
#		define keyval$8$32$get$for62$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for62$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for62$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for61(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for62$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for63(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for63$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for63$1(...) keyval$8$32$get$for63$2(__VA_ARGS__)
#		define keyval$8$32$get$for63$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for63$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for63$3(...) keyval$8$32$get$for63$4(__VA_ARGS__)
#		define keyval$8$32$get$for63$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for63$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for63$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for62(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for63$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for64(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for64$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for64$1(...) keyval$8$32$get$for64$2(__VA_ARGS__)
#		define keyval$8$32$get$for64$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for64$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for64$3(...) keyval$8$32$get$for64$4(__VA_ARGS__)
#		define keyval$8$32$get$for64$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for64$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for64$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for63(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for64$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for65(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for65$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for65$1(...) keyval$8$32$get$for65$2(__VA_ARGS__)
#		define keyval$8$32$get$for65$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for65$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for65$3(...) keyval$8$32$get$for65$4(__VA_ARGS__)
#		define keyval$8$32$get$for65$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for65$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for65$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for64(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for65$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for66(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for66$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for66$1(...) keyval$8$32$get$for66$2(__VA_ARGS__)
#		define keyval$8$32$get$for66$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for66$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for66$3(...) keyval$8$32$get$for66$4(__VA_ARGS__)
#		define keyval$8$32$get$for66$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for66$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for66$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for65(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for66$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for67(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for67$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for67$1(...) keyval$8$32$get$for67$2(__VA_ARGS__)
#		define keyval$8$32$get$for67$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for67$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for67$3(...) keyval$8$32$get$for67$4(__VA_ARGS__)
#		define keyval$8$32$get$for67$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for67$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for67$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for66(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for67$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for68(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for68$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for68$1(...) keyval$8$32$get$for68$2(__VA_ARGS__)
#		define keyval$8$32$get$for68$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for68$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for68$3(...) keyval$8$32$get$for68$4(__VA_ARGS__)
#		define keyval$8$32$get$for68$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for68$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for68$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for67(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for68$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for69(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for69$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for69$1(...) keyval$8$32$get$for69$2(__VA_ARGS__)
#		define keyval$8$32$get$for69$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for69$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for69$3(...) keyval$8$32$get$for69$4(__VA_ARGS__)
#		define keyval$8$32$get$for69$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for69$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for69$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for68(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for69$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for6a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6a$1(...) keyval$8$32$get$for6a$2(__VA_ARGS__)
#		define keyval$8$32$get$for6a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6a$3(...) keyval$8$32$get$for6a$4(__VA_ARGS__)
#		define keyval$8$32$get$for6a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for69(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for6b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6b$1(...) keyval$8$32$get$for6b$2(__VA_ARGS__)
#		define keyval$8$32$get$for6b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6b$3(...) keyval$8$32$get$for6b$4(__VA_ARGS__)
#		define keyval$8$32$get$for6b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for6c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6c$1(...) keyval$8$32$get$for6c$2(__VA_ARGS__)
#		define keyval$8$32$get$for6c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6c$3(...) keyval$8$32$get$for6c$4(__VA_ARGS__)
#		define keyval$8$32$get$for6c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for6d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6d$1(...) keyval$8$32$get$for6d$2(__VA_ARGS__)
#		define keyval$8$32$get$for6d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6d$3(...) keyval$8$32$get$for6d$4(__VA_ARGS__)
#		define keyval$8$32$get$for6d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for6e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6e$1(...) keyval$8$32$get$for6e$2(__VA_ARGS__)
#		define keyval$8$32$get$for6e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6e$3(...) keyval$8$32$get$for6e$4(__VA_ARGS__)
#		define keyval$8$32$get$for6e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for6f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6f$1(...) keyval$8$32$get$for6f$2(__VA_ARGS__)
#		define keyval$8$32$get$for6f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for6f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6f$3(...) keyval$8$32$get$for6f$4(__VA_ARGS__)
#		define keyval$8$32$get$for6f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for6f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for6f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for70(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for70$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for70$1(...) keyval$8$32$get$for70$2(__VA_ARGS__)
#		define keyval$8$32$get$for70$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for70$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for70$3(...) keyval$8$32$get$for70$4(__VA_ARGS__)
#		define keyval$8$32$get$for70$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for70$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for70$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for6f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for70$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for71(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for71$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for71$1(...) keyval$8$32$get$for71$2(__VA_ARGS__)
#		define keyval$8$32$get$for71$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for71$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for71$3(...) keyval$8$32$get$for71$4(__VA_ARGS__)
#		define keyval$8$32$get$for71$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for71$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for71$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for70(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for71$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for72(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for72$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for72$1(...) keyval$8$32$get$for72$2(__VA_ARGS__)
#		define keyval$8$32$get$for72$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for72$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for72$3(...) keyval$8$32$get$for72$4(__VA_ARGS__)
#		define keyval$8$32$get$for72$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for72$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for72$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for71(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for72$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for73(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for73$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for73$1(...) keyval$8$32$get$for73$2(__VA_ARGS__)
#		define keyval$8$32$get$for73$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for73$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for73$3(...) keyval$8$32$get$for73$4(__VA_ARGS__)
#		define keyval$8$32$get$for73$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for73$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for73$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for72(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for73$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for74(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for74$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for74$1(...) keyval$8$32$get$for74$2(__VA_ARGS__)
#		define keyval$8$32$get$for74$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for74$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for74$3(...) keyval$8$32$get$for74$4(__VA_ARGS__)
#		define keyval$8$32$get$for74$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for74$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for74$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for73(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for74$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for75(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for75$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for75$1(...) keyval$8$32$get$for75$2(__VA_ARGS__)
#		define keyval$8$32$get$for75$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for75$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for75$3(...) keyval$8$32$get$for75$4(__VA_ARGS__)
#		define keyval$8$32$get$for75$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for75$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for75$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for74(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for75$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for76(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for76$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for76$1(...) keyval$8$32$get$for76$2(__VA_ARGS__)
#		define keyval$8$32$get$for76$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for76$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for76$3(...) keyval$8$32$get$for76$4(__VA_ARGS__)
#		define keyval$8$32$get$for76$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for76$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for76$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for75(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for76$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for77(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for77$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for77$1(...) keyval$8$32$get$for77$2(__VA_ARGS__)
#		define keyval$8$32$get$for77$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for77$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for77$3(...) keyval$8$32$get$for77$4(__VA_ARGS__)
#		define keyval$8$32$get$for77$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for77$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for77$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for76(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for77$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for78(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for78$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for78$1(...) keyval$8$32$get$for78$2(__VA_ARGS__)
#		define keyval$8$32$get$for78$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for78$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for78$3(...) keyval$8$32$get$for78$4(__VA_ARGS__)
#		define keyval$8$32$get$for78$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for78$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for78$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for77(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for78$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for79(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for79$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for79$1(...) keyval$8$32$get$for79$2(__VA_ARGS__)
#		define keyval$8$32$get$for79$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for79$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for79$3(...) keyval$8$32$get$for79$4(__VA_ARGS__)
#		define keyval$8$32$get$for79$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for79$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for79$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for78(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for79$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for7a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7a$1(...) keyval$8$32$get$for7a$2(__VA_ARGS__)
#		define keyval$8$32$get$for7a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7a$3(...) keyval$8$32$get$for7a$4(__VA_ARGS__)
#		define keyval$8$32$get$for7a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for79(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for7b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7b$1(...) keyval$8$32$get$for7b$2(__VA_ARGS__)
#		define keyval$8$32$get$for7b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7b$3(...) keyval$8$32$get$for7b$4(__VA_ARGS__)
#		define keyval$8$32$get$for7b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for7c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7c$1(...) keyval$8$32$get$for7c$2(__VA_ARGS__)
#		define keyval$8$32$get$for7c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7c$3(...) keyval$8$32$get$for7c$4(__VA_ARGS__)
#		define keyval$8$32$get$for7c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for7d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7d$1(...) keyval$8$32$get$for7d$2(__VA_ARGS__)
#		define keyval$8$32$get$for7d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7d$3(...) keyval$8$32$get$for7d$4(__VA_ARGS__)
#		define keyval$8$32$get$for7d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for7e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7e$1(...) keyval$8$32$get$for7e$2(__VA_ARGS__)
#		define keyval$8$32$get$for7e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7e$3(...) keyval$8$32$get$for7e$4(__VA_ARGS__)
#		define keyval$8$32$get$for7e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for7f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7f$1(...) keyval$8$32$get$for7f$2(__VA_ARGS__)
#		define keyval$8$32$get$for7f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for7f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7f$3(...) keyval$8$32$get$for7f$4(__VA_ARGS__)
#		define keyval$8$32$get$for7f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for7f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for7f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for80(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for80$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for80$1(...) keyval$8$32$get$for80$2(__VA_ARGS__)
#		define keyval$8$32$get$for80$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for80$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for80$3(...) keyval$8$32$get$for80$4(__VA_ARGS__)
#		define keyval$8$32$get$for80$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for80$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for80$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for7f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for80$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for81(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for81$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for81$1(...) keyval$8$32$get$for81$2(__VA_ARGS__)
#		define keyval$8$32$get$for81$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for81$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for81$3(...) keyval$8$32$get$for81$4(__VA_ARGS__)
#		define keyval$8$32$get$for81$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for81$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for81$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for80(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for81$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for82(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for82$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for82$1(...) keyval$8$32$get$for82$2(__VA_ARGS__)
#		define keyval$8$32$get$for82$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for82$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for82$3(...) keyval$8$32$get$for82$4(__VA_ARGS__)
#		define keyval$8$32$get$for82$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for82$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for82$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for81(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for82$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for83(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for83$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for83$1(...) keyval$8$32$get$for83$2(__VA_ARGS__)
#		define keyval$8$32$get$for83$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for83$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for83$3(...) keyval$8$32$get$for83$4(__VA_ARGS__)
#		define keyval$8$32$get$for83$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for83$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for83$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for82(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for83$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for84(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for84$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for84$1(...) keyval$8$32$get$for84$2(__VA_ARGS__)
#		define keyval$8$32$get$for84$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for84$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for84$3(...) keyval$8$32$get$for84$4(__VA_ARGS__)
#		define keyval$8$32$get$for84$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for84$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for84$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for83(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for84$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for85(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for85$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for85$1(...) keyval$8$32$get$for85$2(__VA_ARGS__)
#		define keyval$8$32$get$for85$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for85$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for85$3(...) keyval$8$32$get$for85$4(__VA_ARGS__)
#		define keyval$8$32$get$for85$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for85$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for85$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for84(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for85$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for86(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for86$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for86$1(...) keyval$8$32$get$for86$2(__VA_ARGS__)
#		define keyval$8$32$get$for86$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for86$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for86$3(...) keyval$8$32$get$for86$4(__VA_ARGS__)
#		define keyval$8$32$get$for86$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for86$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for86$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for85(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for86$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for87(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for87$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for87$1(...) keyval$8$32$get$for87$2(__VA_ARGS__)
#		define keyval$8$32$get$for87$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for87$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for87$3(...) keyval$8$32$get$for87$4(__VA_ARGS__)
#		define keyval$8$32$get$for87$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for87$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for87$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for86(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for87$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for88(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for88$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for88$1(...) keyval$8$32$get$for88$2(__VA_ARGS__)
#		define keyval$8$32$get$for88$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for88$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for88$3(...) keyval$8$32$get$for88$4(__VA_ARGS__)
#		define keyval$8$32$get$for88$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for88$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for88$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for87(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for88$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for89(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for89$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for89$1(...) keyval$8$32$get$for89$2(__VA_ARGS__)
#		define keyval$8$32$get$for89$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for89$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for89$3(...) keyval$8$32$get$for89$4(__VA_ARGS__)
#		define keyval$8$32$get$for89$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for89$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for89$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for88(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for89$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for8a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8a$1(...) keyval$8$32$get$for8a$2(__VA_ARGS__)
#		define keyval$8$32$get$for8a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8a$3(...) keyval$8$32$get$for8a$4(__VA_ARGS__)
#		define keyval$8$32$get$for8a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for89(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for8b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8b$1(...) keyval$8$32$get$for8b$2(__VA_ARGS__)
#		define keyval$8$32$get$for8b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8b$3(...) keyval$8$32$get$for8b$4(__VA_ARGS__)
#		define keyval$8$32$get$for8b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for8c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8c$1(...) keyval$8$32$get$for8c$2(__VA_ARGS__)
#		define keyval$8$32$get$for8c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8c$3(...) keyval$8$32$get$for8c$4(__VA_ARGS__)
#		define keyval$8$32$get$for8c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for8d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8d$1(...) keyval$8$32$get$for8d$2(__VA_ARGS__)
#		define keyval$8$32$get$for8d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8d$3(...) keyval$8$32$get$for8d$4(__VA_ARGS__)
#		define keyval$8$32$get$for8d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for8e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8e$1(...) keyval$8$32$get$for8e$2(__VA_ARGS__)
#		define keyval$8$32$get$for8e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8e$3(...) keyval$8$32$get$for8e$4(__VA_ARGS__)
#		define keyval$8$32$get$for8e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for8f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8f$1(...) keyval$8$32$get$for8f$2(__VA_ARGS__)
#		define keyval$8$32$get$for8f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for8f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8f$3(...) keyval$8$32$get$for8f$4(__VA_ARGS__)
#		define keyval$8$32$get$for8f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for8f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for8f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for90(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for90$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for90$1(...) keyval$8$32$get$for90$2(__VA_ARGS__)
#		define keyval$8$32$get$for90$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for90$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for90$3(...) keyval$8$32$get$for90$4(__VA_ARGS__)
#		define keyval$8$32$get$for90$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for90$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for90$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for8f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for90$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for91(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for91$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for91$1(...) keyval$8$32$get$for91$2(__VA_ARGS__)
#		define keyval$8$32$get$for91$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for91$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for91$3(...) keyval$8$32$get$for91$4(__VA_ARGS__)
#		define keyval$8$32$get$for91$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for91$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for91$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for90(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for91$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for92(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for92$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for92$1(...) keyval$8$32$get$for92$2(__VA_ARGS__)
#		define keyval$8$32$get$for92$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for92$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for92$3(...) keyval$8$32$get$for92$4(__VA_ARGS__)
#		define keyval$8$32$get$for92$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for92$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for92$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for91(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for92$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for93(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for93$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for93$1(...) keyval$8$32$get$for93$2(__VA_ARGS__)
#		define keyval$8$32$get$for93$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for93$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for93$3(...) keyval$8$32$get$for93$4(__VA_ARGS__)
#		define keyval$8$32$get$for93$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for93$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for93$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for92(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for93$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for94(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for94$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for94$1(...) keyval$8$32$get$for94$2(__VA_ARGS__)
#		define keyval$8$32$get$for94$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for94$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for94$3(...) keyval$8$32$get$for94$4(__VA_ARGS__)
#		define keyval$8$32$get$for94$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for94$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for94$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for93(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for94$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for95(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for95$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for95$1(...) keyval$8$32$get$for95$2(__VA_ARGS__)
#		define keyval$8$32$get$for95$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for95$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for95$3(...) keyval$8$32$get$for95$4(__VA_ARGS__)
#		define keyval$8$32$get$for95$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for95$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for95$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for94(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for95$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for96(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for96$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for96$1(...) keyval$8$32$get$for96$2(__VA_ARGS__)
#		define keyval$8$32$get$for96$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for96$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for96$3(...) keyval$8$32$get$for96$4(__VA_ARGS__)
#		define keyval$8$32$get$for96$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for96$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for96$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for95(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for96$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for97(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for97$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for97$1(...) keyval$8$32$get$for97$2(__VA_ARGS__)
#		define keyval$8$32$get$for97$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for97$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for97$3(...) keyval$8$32$get$for97$4(__VA_ARGS__)
#		define keyval$8$32$get$for97$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for97$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for97$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for96(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for97$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for98(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for98$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for98$1(...) keyval$8$32$get$for98$2(__VA_ARGS__)
#		define keyval$8$32$get$for98$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for98$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for98$3(...) keyval$8$32$get$for98$4(__VA_ARGS__)
#		define keyval$8$32$get$for98$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for98$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for98$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for97(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for98$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for99(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for99$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for99$1(...) keyval$8$32$get$for99$2(__VA_ARGS__)
#		define keyval$8$32$get$for99$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for99$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for99$3(...) keyval$8$32$get$for99$4(__VA_ARGS__)
#		define keyval$8$32$get$for99$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for99$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for99$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for98(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for99$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for9a(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9a$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9a$1(...) keyval$8$32$get$for9a$2(__VA_ARGS__)
#		define keyval$8$32$get$for9a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9a$3(...) keyval$8$32$get$for9a$4(__VA_ARGS__)
#		define keyval$8$32$get$for9a$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9a$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9a$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for99(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9a$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for9b(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9b$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9b$1(...) keyval$8$32$get$for9b$2(__VA_ARGS__)
#		define keyval$8$32$get$for9b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9b$3(...) keyval$8$32$get$for9b$4(__VA_ARGS__)
#		define keyval$8$32$get$for9b$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9b$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9b$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9a(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9b$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for9c(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9c$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9c$1(...) keyval$8$32$get$for9c$2(__VA_ARGS__)
#		define keyval$8$32$get$for9c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9c$3(...) keyval$8$32$get$for9c$4(__VA_ARGS__)
#		define keyval$8$32$get$for9c$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9c$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9c$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9b(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9c$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for9d(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9d$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9d$1(...) keyval$8$32$get$for9d$2(__VA_ARGS__)
#		define keyval$8$32$get$for9d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9d$3(...) keyval$8$32$get$for9d$4(__VA_ARGS__)
#		define keyval$8$32$get$for9d$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9d$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9d$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9c(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9d$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for9e(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9e$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9e$1(...) keyval$8$32$get$for9e$2(__VA_ARGS__)
#		define keyval$8$32$get$for9e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9e$3(...) keyval$8$32$get$for9e$4(__VA_ARGS__)
#		define keyval$8$32$get$for9e$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9e$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9e$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9d(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9e$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$for9f(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9f$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9f$1(...) keyval$8$32$get$for9f$2(__VA_ARGS__)
#		define keyval$8$32$get$for9f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$for9f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9f$3(...) keyval$8$32$get$for9f$4(__VA_ARGS__)
#		define keyval$8$32$get$for9f$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9f$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$for9f$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9e(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$for9f$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora0(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora0$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora0$1(...) keyval$8$32$get$fora0$2(__VA_ARGS__)
#		define keyval$8$32$get$fora0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora0$3(...) keyval$8$32$get$fora0$4(__VA_ARGS__)
#		define keyval$8$32$get$fora0$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora0$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora0$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$for9f(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora0$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora1(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora1$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora1$1(...) keyval$8$32$get$fora1$2(__VA_ARGS__)
#		define keyval$8$32$get$fora1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora1$3(...) keyval$8$32$get$fora1$4(__VA_ARGS__)
#		define keyval$8$32$get$fora1$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora1$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora1$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora0(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora1$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora2(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora2$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora2$1(...) keyval$8$32$get$fora2$2(__VA_ARGS__)
#		define keyval$8$32$get$fora2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora2$3(...) keyval$8$32$get$fora2$4(__VA_ARGS__)
#		define keyval$8$32$get$fora2$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora2$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora2$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora1(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora2$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora3(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora3$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora3$1(...) keyval$8$32$get$fora3$2(__VA_ARGS__)
#		define keyval$8$32$get$fora3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora3$3(...) keyval$8$32$get$fora3$4(__VA_ARGS__)
#		define keyval$8$32$get$fora3$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora3$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora3$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora2(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora3$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora4(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora4$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora4$1(...) keyval$8$32$get$fora4$2(__VA_ARGS__)
#		define keyval$8$32$get$fora4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora4$3(...) keyval$8$32$get$fora4$4(__VA_ARGS__)
#		define keyval$8$32$get$fora4$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora4$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora4$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora3(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora4$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora5(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora5$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora5$1(...) keyval$8$32$get$fora5$2(__VA_ARGS__)
#		define keyval$8$32$get$fora5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora5$3(...) keyval$8$32$get$fora5$4(__VA_ARGS__)
#		define keyval$8$32$get$fora5$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora5$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora5$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora4(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora5$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora6(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora6$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora6$1(...) keyval$8$32$get$fora6$2(__VA_ARGS__)
#		define keyval$8$32$get$fora6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora6$3(...) keyval$8$32$get$fora6$4(__VA_ARGS__)
#		define keyval$8$32$get$fora6$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora6$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora6$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora5(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora6$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora7(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora7$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora7$1(...) keyval$8$32$get$fora7$2(__VA_ARGS__)
#		define keyval$8$32$get$fora7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora7$3(...) keyval$8$32$get$fora7$4(__VA_ARGS__)
#		define keyval$8$32$get$fora7$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora7$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora7$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora6(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora7$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora8(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora8$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora8$1(...) keyval$8$32$get$fora8$2(__VA_ARGS__)
#		define keyval$8$32$get$fora8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora8$3(...) keyval$8$32$get$fora8$4(__VA_ARGS__)
#		define keyval$8$32$get$fora8$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora8$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora8$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora7(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora8$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fora9(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora9$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora9$1(...) keyval$8$32$get$fora9$2(__VA_ARGS__)
#		define keyval$8$32$get$fora9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fora9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora9$3(...) keyval$8$32$get$fora9$4(__VA_ARGS__)
#		define keyval$8$32$get$fora9$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora9$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fora9$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora8(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fora9$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$foraa(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foraa$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foraa$1(...) keyval$8$32$get$foraa$2(__VA_ARGS__)
#		define keyval$8$32$get$foraa$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foraa$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foraa$3(...) keyval$8$32$get$foraa$4(__VA_ARGS__)
#		define keyval$8$32$get$foraa$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foraa$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foraa$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fora9(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foraa$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forab(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forab$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forab$1(...) keyval$8$32$get$forab$2(__VA_ARGS__)
#		define keyval$8$32$get$forab$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forab$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forab$3(...) keyval$8$32$get$forab$4(__VA_ARGS__)
#		define keyval$8$32$get$forab$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forab$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forab$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foraa(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forab$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forac(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forac$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forac$1(...) keyval$8$32$get$forac$2(__VA_ARGS__)
#		define keyval$8$32$get$forac$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forac$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forac$3(...) keyval$8$32$get$forac$4(__VA_ARGS__)
#		define keyval$8$32$get$forac$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forac$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forac$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forab(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forac$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forad(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forad$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forad$1(...) keyval$8$32$get$forad$2(__VA_ARGS__)
#		define keyval$8$32$get$forad$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forad$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forad$3(...) keyval$8$32$get$forad$4(__VA_ARGS__)
#		define keyval$8$32$get$forad$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forad$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forad$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forac(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forad$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forae(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forae$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forae$1(...) keyval$8$32$get$forae$2(__VA_ARGS__)
#		define keyval$8$32$get$forae$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forae$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forae$3(...) keyval$8$32$get$forae$4(__VA_ARGS__)
#		define keyval$8$32$get$forae$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forae$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forae$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forad(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forae$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$foraf(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foraf$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foraf$1(...) keyval$8$32$get$foraf$2(__VA_ARGS__)
#		define keyval$8$32$get$foraf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foraf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foraf$3(...) keyval$8$32$get$foraf$4(__VA_ARGS__)
#		define keyval$8$32$get$foraf$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foraf$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foraf$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forae(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foraf$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb0(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb0$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb0$1(...) keyval$8$32$get$forb0$2(__VA_ARGS__)
#		define keyval$8$32$get$forb0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb0$3(...) keyval$8$32$get$forb0$4(__VA_ARGS__)
#		define keyval$8$32$get$forb0$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb0$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb0$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foraf(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb0$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb1(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb1$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb1$1(...) keyval$8$32$get$forb1$2(__VA_ARGS__)
#		define keyval$8$32$get$forb1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb1$3(...) keyval$8$32$get$forb1$4(__VA_ARGS__)
#		define keyval$8$32$get$forb1$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb1$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb1$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb0(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb1$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb2(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb2$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb2$1(...) keyval$8$32$get$forb2$2(__VA_ARGS__)
#		define keyval$8$32$get$forb2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb2$3(...) keyval$8$32$get$forb2$4(__VA_ARGS__)
#		define keyval$8$32$get$forb2$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb2$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb2$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb1(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb2$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb3(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb3$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb3$1(...) keyval$8$32$get$forb3$2(__VA_ARGS__)
#		define keyval$8$32$get$forb3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb3$3(...) keyval$8$32$get$forb3$4(__VA_ARGS__)
#		define keyval$8$32$get$forb3$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb3$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb3$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb2(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb3$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb4(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb4$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb4$1(...) keyval$8$32$get$forb4$2(__VA_ARGS__)
#		define keyval$8$32$get$forb4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb4$3(...) keyval$8$32$get$forb4$4(__VA_ARGS__)
#		define keyval$8$32$get$forb4$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb4$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb4$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb3(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb4$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb5(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb5$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb5$1(...) keyval$8$32$get$forb5$2(__VA_ARGS__)
#		define keyval$8$32$get$forb5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb5$3(...) keyval$8$32$get$forb5$4(__VA_ARGS__)
#		define keyval$8$32$get$forb5$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb5$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb5$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb4(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb5$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb6(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb6$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb6$1(...) keyval$8$32$get$forb6$2(__VA_ARGS__)
#		define keyval$8$32$get$forb6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb6$3(...) keyval$8$32$get$forb6$4(__VA_ARGS__)
#		define keyval$8$32$get$forb6$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb6$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb6$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb5(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb6$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb7(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb7$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb7$1(...) keyval$8$32$get$forb7$2(__VA_ARGS__)
#		define keyval$8$32$get$forb7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb7$3(...) keyval$8$32$get$forb7$4(__VA_ARGS__)
#		define keyval$8$32$get$forb7$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb7$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb7$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb6(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb7$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb8(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb8$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb8$1(...) keyval$8$32$get$forb8$2(__VA_ARGS__)
#		define keyval$8$32$get$forb8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb8$3(...) keyval$8$32$get$forb8$4(__VA_ARGS__)
#		define keyval$8$32$get$forb8$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb8$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb8$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb7(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb8$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forb9(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb9$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb9$1(...) keyval$8$32$get$forb9$2(__VA_ARGS__)
#		define keyval$8$32$get$forb9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forb9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb9$3(...) keyval$8$32$get$forb9$4(__VA_ARGS__)
#		define keyval$8$32$get$forb9$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb9$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forb9$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb8(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forb9$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forba(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forba$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forba$1(...) keyval$8$32$get$forba$2(__VA_ARGS__)
#		define keyval$8$32$get$forba$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forba$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forba$3(...) keyval$8$32$get$forba$4(__VA_ARGS__)
#		define keyval$8$32$get$forba$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forba$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forba$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forb9(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forba$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forbb(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbb$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbb$1(...) keyval$8$32$get$forbb$2(__VA_ARGS__)
#		define keyval$8$32$get$forbb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbb$3(...) keyval$8$32$get$forbb$4(__VA_ARGS__)
#		define keyval$8$32$get$forbb$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbb$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbb$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forba(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbb$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forbc(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbc$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbc$1(...) keyval$8$32$get$forbc$2(__VA_ARGS__)
#		define keyval$8$32$get$forbc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbc$3(...) keyval$8$32$get$forbc$4(__VA_ARGS__)
#		define keyval$8$32$get$forbc$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbc$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbc$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbb(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbc$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forbd(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbd$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbd$1(...) keyval$8$32$get$forbd$2(__VA_ARGS__)
#		define keyval$8$32$get$forbd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbd$3(...) keyval$8$32$get$forbd$4(__VA_ARGS__)
#		define keyval$8$32$get$forbd$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbd$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbd$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbc(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbd$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forbe(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbe$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbe$1(...) keyval$8$32$get$forbe$2(__VA_ARGS__)
#		define keyval$8$32$get$forbe$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbe$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbe$3(...) keyval$8$32$get$forbe$4(__VA_ARGS__)
#		define keyval$8$32$get$forbe$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbe$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbe$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbd(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbe$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forbf(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbf$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbf$1(...) keyval$8$32$get$forbf$2(__VA_ARGS__)
#		define keyval$8$32$get$forbf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forbf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbf$3(...) keyval$8$32$get$forbf$4(__VA_ARGS__)
#		define keyval$8$32$get$forbf$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbf$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forbf$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbe(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forbf$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc0(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc0$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc0$1(...) keyval$8$32$get$forc0$2(__VA_ARGS__)
#		define keyval$8$32$get$forc0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc0$3(...) keyval$8$32$get$forc0$4(__VA_ARGS__)
#		define keyval$8$32$get$forc0$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc0$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc0$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forbf(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc0$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc1(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc1$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc1$1(...) keyval$8$32$get$forc1$2(__VA_ARGS__)
#		define keyval$8$32$get$forc1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc1$3(...) keyval$8$32$get$forc1$4(__VA_ARGS__)
#		define keyval$8$32$get$forc1$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc1$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc1$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc0(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc1$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc2(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc2$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc2$1(...) keyval$8$32$get$forc2$2(__VA_ARGS__)
#		define keyval$8$32$get$forc2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc2$3(...) keyval$8$32$get$forc2$4(__VA_ARGS__)
#		define keyval$8$32$get$forc2$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc2$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc2$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc1(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc2$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc3(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc3$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc3$1(...) keyval$8$32$get$forc3$2(__VA_ARGS__)
#		define keyval$8$32$get$forc3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc3$3(...) keyval$8$32$get$forc3$4(__VA_ARGS__)
#		define keyval$8$32$get$forc3$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc3$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc3$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc2(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc3$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc4(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc4$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc4$1(...) keyval$8$32$get$forc4$2(__VA_ARGS__)
#		define keyval$8$32$get$forc4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc4$3(...) keyval$8$32$get$forc4$4(__VA_ARGS__)
#		define keyval$8$32$get$forc4$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc4$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc4$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc3(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc4$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc5(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc5$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc5$1(...) keyval$8$32$get$forc5$2(__VA_ARGS__)
#		define keyval$8$32$get$forc5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc5$3(...) keyval$8$32$get$forc5$4(__VA_ARGS__)
#		define keyval$8$32$get$forc5$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc5$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc5$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc4(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc5$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc6(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc6$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc6$1(...) keyval$8$32$get$forc6$2(__VA_ARGS__)
#		define keyval$8$32$get$forc6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc6$3(...) keyval$8$32$get$forc6$4(__VA_ARGS__)
#		define keyval$8$32$get$forc6$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc6$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc6$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc5(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc6$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc7(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc7$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc7$1(...) keyval$8$32$get$forc7$2(__VA_ARGS__)
#		define keyval$8$32$get$forc7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc7$3(...) keyval$8$32$get$forc7$4(__VA_ARGS__)
#		define keyval$8$32$get$forc7$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc7$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc7$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc6(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc7$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc8(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc8$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc8$1(...) keyval$8$32$get$forc8$2(__VA_ARGS__)
#		define keyval$8$32$get$forc8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc8$3(...) keyval$8$32$get$forc8$4(__VA_ARGS__)
#		define keyval$8$32$get$forc8$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc8$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc8$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc7(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc8$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forc9(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc9$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc9$1(...) keyval$8$32$get$forc9$2(__VA_ARGS__)
#		define keyval$8$32$get$forc9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forc9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc9$3(...) keyval$8$32$get$forc9$4(__VA_ARGS__)
#		define keyval$8$32$get$forc9$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc9$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forc9$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc8(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forc9$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forca(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forca$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forca$1(...) keyval$8$32$get$forca$2(__VA_ARGS__)
#		define keyval$8$32$get$forca$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forca$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forca$3(...) keyval$8$32$get$forca$4(__VA_ARGS__)
#		define keyval$8$32$get$forca$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forca$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forca$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forc9(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forca$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forcb(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcb$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcb$1(...) keyval$8$32$get$forcb$2(__VA_ARGS__)
#		define keyval$8$32$get$forcb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcb$3(...) keyval$8$32$get$forcb$4(__VA_ARGS__)
#		define keyval$8$32$get$forcb$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcb$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcb$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forca(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcb$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forcc(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcc$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcc$1(...) keyval$8$32$get$forcc$2(__VA_ARGS__)
#		define keyval$8$32$get$forcc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcc$3(...) keyval$8$32$get$forcc$4(__VA_ARGS__)
#		define keyval$8$32$get$forcc$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcc$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcc$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcb(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcc$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forcd(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcd$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcd$1(...) keyval$8$32$get$forcd$2(__VA_ARGS__)
#		define keyval$8$32$get$forcd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcd$3(...) keyval$8$32$get$forcd$4(__VA_ARGS__)
#		define keyval$8$32$get$forcd$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcd$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcd$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcc(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcd$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$force(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$force$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$force$1(...) keyval$8$32$get$force$2(__VA_ARGS__)
#		define keyval$8$32$get$force$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$force$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$force$3(...) keyval$8$32$get$force$4(__VA_ARGS__)
#		define keyval$8$32$get$force$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$force$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$force$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcd(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$force$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forcf(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcf$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcf$1(...) keyval$8$32$get$forcf$2(__VA_ARGS__)
#		define keyval$8$32$get$forcf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forcf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcf$3(...) keyval$8$32$get$forcf$4(__VA_ARGS__)
#		define keyval$8$32$get$forcf$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcf$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forcf$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$force(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forcf$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford0(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford0$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford0$1(...) keyval$8$32$get$ford0$2(__VA_ARGS__)
#		define keyval$8$32$get$ford0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford0$3(...) keyval$8$32$get$ford0$4(__VA_ARGS__)
#		define keyval$8$32$get$ford0$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford0$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford0$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forcf(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford0$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford1(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford1$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford1$1(...) keyval$8$32$get$ford1$2(__VA_ARGS__)
#		define keyval$8$32$get$ford1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford1$3(...) keyval$8$32$get$ford1$4(__VA_ARGS__)
#		define keyval$8$32$get$ford1$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford1$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford1$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford0(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford1$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford2(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford2$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford2$1(...) keyval$8$32$get$ford2$2(__VA_ARGS__)
#		define keyval$8$32$get$ford2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford2$3(...) keyval$8$32$get$ford2$4(__VA_ARGS__)
#		define keyval$8$32$get$ford2$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford2$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford2$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford1(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford2$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford3(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford3$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford3$1(...) keyval$8$32$get$ford3$2(__VA_ARGS__)
#		define keyval$8$32$get$ford3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford3$3(...) keyval$8$32$get$ford3$4(__VA_ARGS__)
#		define keyval$8$32$get$ford3$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford3$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford3$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford2(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford3$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford4(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford4$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford4$1(...) keyval$8$32$get$ford4$2(__VA_ARGS__)
#		define keyval$8$32$get$ford4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford4$3(...) keyval$8$32$get$ford4$4(__VA_ARGS__)
#		define keyval$8$32$get$ford4$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford4$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford4$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford3(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford4$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford5(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford5$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford5$1(...) keyval$8$32$get$ford5$2(__VA_ARGS__)
#		define keyval$8$32$get$ford5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford5$3(...) keyval$8$32$get$ford5$4(__VA_ARGS__)
#		define keyval$8$32$get$ford5$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford5$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford5$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford4(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford5$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford6(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford6$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford6$1(...) keyval$8$32$get$ford6$2(__VA_ARGS__)
#		define keyval$8$32$get$ford6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford6$3(...) keyval$8$32$get$ford6$4(__VA_ARGS__)
#		define keyval$8$32$get$ford6$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford6$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford6$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford5(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford6$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford7(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford7$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford7$1(...) keyval$8$32$get$ford7$2(__VA_ARGS__)
#		define keyval$8$32$get$ford7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford7$3(...) keyval$8$32$get$ford7$4(__VA_ARGS__)
#		define keyval$8$32$get$ford7$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford7$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford7$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford6(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford7$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford8(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford8$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford8$1(...) keyval$8$32$get$ford8$2(__VA_ARGS__)
#		define keyval$8$32$get$ford8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford8$3(...) keyval$8$32$get$ford8$4(__VA_ARGS__)
#		define keyval$8$32$get$ford8$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford8$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford8$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford7(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford8$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$ford9(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford9$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford9$1(...) keyval$8$32$get$ford9$2(__VA_ARGS__)
#		define keyval$8$32$get$ford9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$ford9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford9$3(...) keyval$8$32$get$ford9$4(__VA_ARGS__)
#		define keyval$8$32$get$ford9$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford9$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$ford9$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford8(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$ford9$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forda(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forda$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forda$1(...) keyval$8$32$get$forda$2(__VA_ARGS__)
#		define keyval$8$32$get$forda$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forda$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forda$3(...) keyval$8$32$get$forda$4(__VA_ARGS__)
#		define keyval$8$32$get$forda$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forda$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forda$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$ford9(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forda$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fordb(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordb$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordb$1(...) keyval$8$32$get$fordb$2(__VA_ARGS__)
#		define keyval$8$32$get$fordb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordb$3(...) keyval$8$32$get$fordb$4(__VA_ARGS__)
#		define keyval$8$32$get$fordb$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordb$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordb$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forda(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordb$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fordc(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordc$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordc$1(...) keyval$8$32$get$fordc$2(__VA_ARGS__)
#		define keyval$8$32$get$fordc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordc$3(...) keyval$8$32$get$fordc$4(__VA_ARGS__)
#		define keyval$8$32$get$fordc$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordc$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordc$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordb(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordc$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fordd(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordd$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordd$1(...) keyval$8$32$get$fordd$2(__VA_ARGS__)
#		define keyval$8$32$get$fordd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordd$3(...) keyval$8$32$get$fordd$4(__VA_ARGS__)
#		define keyval$8$32$get$fordd$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordd$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordd$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordc(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordd$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forde(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forde$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forde$1(...) keyval$8$32$get$forde$2(__VA_ARGS__)
#		define keyval$8$32$get$forde$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forde$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forde$3(...) keyval$8$32$get$forde$4(__VA_ARGS__)
#		define keyval$8$32$get$forde$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forde$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forde$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordd(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forde$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fordf(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordf$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordf$1(...) keyval$8$32$get$fordf$2(__VA_ARGS__)
#		define keyval$8$32$get$fordf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fordf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordf$3(...) keyval$8$32$get$fordf$4(__VA_ARGS__)
#		define keyval$8$32$get$fordf$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordf$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fordf$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forde(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fordf$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore0(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore0$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore0$1(...) keyval$8$32$get$fore0$2(__VA_ARGS__)
#		define keyval$8$32$get$fore0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore0$3(...) keyval$8$32$get$fore0$4(__VA_ARGS__)
#		define keyval$8$32$get$fore0$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore0$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore0$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fordf(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore0$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore1(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore1$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore1$1(...) keyval$8$32$get$fore1$2(__VA_ARGS__)
#		define keyval$8$32$get$fore1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore1$3(...) keyval$8$32$get$fore1$4(__VA_ARGS__)
#		define keyval$8$32$get$fore1$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore1$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore1$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore0(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore1$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore2(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore2$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore2$1(...) keyval$8$32$get$fore2$2(__VA_ARGS__)
#		define keyval$8$32$get$fore2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore2$3(...) keyval$8$32$get$fore2$4(__VA_ARGS__)
#		define keyval$8$32$get$fore2$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore2$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore2$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore1(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore2$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore3(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore3$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore3$1(...) keyval$8$32$get$fore3$2(__VA_ARGS__)
#		define keyval$8$32$get$fore3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore3$3(...) keyval$8$32$get$fore3$4(__VA_ARGS__)
#		define keyval$8$32$get$fore3$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore3$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore3$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore2(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore3$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore4(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore4$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore4$1(...) keyval$8$32$get$fore4$2(__VA_ARGS__)
#		define keyval$8$32$get$fore4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore4$3(...) keyval$8$32$get$fore4$4(__VA_ARGS__)
#		define keyval$8$32$get$fore4$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore4$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore4$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore3(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore4$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore5(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore5$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore5$1(...) keyval$8$32$get$fore5$2(__VA_ARGS__)
#		define keyval$8$32$get$fore5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore5$3(...) keyval$8$32$get$fore5$4(__VA_ARGS__)
#		define keyval$8$32$get$fore5$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore5$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore5$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore4(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore5$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore6(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore6$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore6$1(...) keyval$8$32$get$fore6$2(__VA_ARGS__)
#		define keyval$8$32$get$fore6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore6$3(...) keyval$8$32$get$fore6$4(__VA_ARGS__)
#		define keyval$8$32$get$fore6$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore6$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore6$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore5(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore6$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore7(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore7$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore7$1(...) keyval$8$32$get$fore7$2(__VA_ARGS__)
#		define keyval$8$32$get$fore7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore7$3(...) keyval$8$32$get$fore7$4(__VA_ARGS__)
#		define keyval$8$32$get$fore7$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore7$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore7$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore6(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore7$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore8(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore8$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore8$1(...) keyval$8$32$get$fore8$2(__VA_ARGS__)
#		define keyval$8$32$get$fore8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore8$3(...) keyval$8$32$get$fore8$4(__VA_ARGS__)
#		define keyval$8$32$get$fore8$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore8$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore8$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore7(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore8$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fore9(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore9$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore9$1(...) keyval$8$32$get$fore9$2(__VA_ARGS__)
#		define keyval$8$32$get$fore9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fore9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore9$3(...) keyval$8$32$get$fore9$4(__VA_ARGS__)
#		define keyval$8$32$get$fore9$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore9$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fore9$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore8(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fore9$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forea(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forea$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forea$1(...) keyval$8$32$get$forea$2(__VA_ARGS__)
#		define keyval$8$32$get$forea$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forea$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forea$3(...) keyval$8$32$get$forea$4(__VA_ARGS__)
#		define keyval$8$32$get$forea$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forea$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forea$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fore9(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forea$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$foreb(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foreb$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foreb$1(...) keyval$8$32$get$foreb$2(__VA_ARGS__)
#		define keyval$8$32$get$foreb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foreb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foreb$3(...) keyval$8$32$get$foreb$4(__VA_ARGS__)
#		define keyval$8$32$get$foreb$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foreb$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foreb$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forea(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foreb$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forec(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forec$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forec$1(...) keyval$8$32$get$forec$2(__VA_ARGS__)
#		define keyval$8$32$get$forec$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forec$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forec$3(...) keyval$8$32$get$forec$4(__VA_ARGS__)
#		define keyval$8$32$get$forec$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forec$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forec$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foreb(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forec$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$fored(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fored$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fored$1(...) keyval$8$32$get$fored$2(__VA_ARGS__)
#		define keyval$8$32$get$fored$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$fored$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fored$3(...) keyval$8$32$get$fored$4(__VA_ARGS__)
#		define keyval$8$32$get$fored$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fored$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$fored$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forec(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$fored$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$foree(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foree$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foree$1(...) keyval$8$32$get$foree$2(__VA_ARGS__)
#		define keyval$8$32$get$foree$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foree$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foree$3(...) keyval$8$32$get$foree$4(__VA_ARGS__)
#		define keyval$8$32$get$foree$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foree$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foree$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$fored(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foree$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$foref(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foref$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foref$1(...) keyval$8$32$get$foref$2(__VA_ARGS__)
#		define keyval$8$32$get$foref$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$foref$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foref$3(...) keyval$8$32$get$foref$4(__VA_ARGS__)
#		define keyval$8$32$get$foref$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foref$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$foref$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foree(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$foref$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf0(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf0$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf0$1(...) keyval$8$32$get$forf0$2(__VA_ARGS__)
#		define keyval$8$32$get$forf0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf0$3(...) keyval$8$32$get$forf0$4(__VA_ARGS__)
#		define keyval$8$32$get$forf0$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf0$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf0$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$foref(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf0$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf1(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf1$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf1$1(...) keyval$8$32$get$forf1$2(__VA_ARGS__)
#		define keyval$8$32$get$forf1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf1$3(...) keyval$8$32$get$forf1$4(__VA_ARGS__)
#		define keyval$8$32$get$forf1$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf1$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf1$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf0(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf1$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf2(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf2$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf2$1(...) keyval$8$32$get$forf2$2(__VA_ARGS__)
#		define keyval$8$32$get$forf2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf2$3(...) keyval$8$32$get$forf2$4(__VA_ARGS__)
#		define keyval$8$32$get$forf2$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf2$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf2$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf1(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf2$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf3(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf3$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf3$1(...) keyval$8$32$get$forf3$2(__VA_ARGS__)
#		define keyval$8$32$get$forf3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf3$3(...) keyval$8$32$get$forf3$4(__VA_ARGS__)
#		define keyval$8$32$get$forf3$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf3$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf3$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf2(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf3$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf4(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf4$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf4$1(...) keyval$8$32$get$forf4$2(__VA_ARGS__)
#		define keyval$8$32$get$forf4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf4$3(...) keyval$8$32$get$forf4$4(__VA_ARGS__)
#		define keyval$8$32$get$forf4$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf4$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf4$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf3(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf4$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf5(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf5$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf5$1(...) keyval$8$32$get$forf5$2(__VA_ARGS__)
#		define keyval$8$32$get$forf5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf5$3(...) keyval$8$32$get$forf5$4(__VA_ARGS__)
#		define keyval$8$32$get$forf5$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf5$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf5$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf4(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf5$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf6(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf6$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf6$1(...) keyval$8$32$get$forf6$2(__VA_ARGS__)
#		define keyval$8$32$get$forf6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf6$3(...) keyval$8$32$get$forf6$4(__VA_ARGS__)
#		define keyval$8$32$get$forf6$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf6$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf6$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf5(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf6$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf7(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf7$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf7$1(...) keyval$8$32$get$forf7$2(__VA_ARGS__)
#		define keyval$8$32$get$forf7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf7$3(...) keyval$8$32$get$forf7$4(__VA_ARGS__)
#		define keyval$8$32$get$forf7$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf7$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf7$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf6(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf7$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf8(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf8$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf8$1(...) keyval$8$32$get$forf8$2(__VA_ARGS__)
#		define keyval$8$32$get$forf8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf8$3(...) keyval$8$32$get$forf8$4(__VA_ARGS__)
#		define keyval$8$32$get$forf8$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf8$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf8$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf7(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf8$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forf9(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf9$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf9$1(...) keyval$8$32$get$forf9$2(__VA_ARGS__)
#		define keyval$8$32$get$forf9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forf9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf9$3(...) keyval$8$32$get$forf9$4(__VA_ARGS__)
#		define keyval$8$32$get$forf9$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf9$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forf9$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf8(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forf9$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forfa(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfa$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfa$1(...) keyval$8$32$get$forfa$2(__VA_ARGS__)
#		define keyval$8$32$get$forfa$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfa$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfa$3(...) keyval$8$32$get$forfa$4(__VA_ARGS__)
#		define keyval$8$32$get$forfa$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfa$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfa$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forf9(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfa$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forfb(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfb$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfb$1(...) keyval$8$32$get$forfb$2(__VA_ARGS__)
#		define keyval$8$32$get$forfb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfb$3(...) keyval$8$32$get$forfb$4(__VA_ARGS__)
#		define keyval$8$32$get$forfb$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfb$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfb$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfa(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfb$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forfc(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfc$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfc$1(...) keyval$8$32$get$forfc$2(__VA_ARGS__)
#		define keyval$8$32$get$forfc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfc$3(...) keyval$8$32$get$forfc$4(__VA_ARGS__)
#		define keyval$8$32$get$forfc$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfc$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfc$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfb(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfc$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forfd(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfd$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfd$1(...) keyval$8$32$get$forfd$2(__VA_ARGS__)
#		define keyval$8$32$get$forfd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfd$3(...) keyval$8$32$get$forfd$4(__VA_ARGS__)
#		define keyval$8$32$get$forfd$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfd$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfd$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfc(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfd$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forfe(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfe$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfe$1(...) keyval$8$32$get$forfe$2(__VA_ARGS__)
#		define keyval$8$32$get$forfe$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forfe$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfe$3(...) keyval$8$32$get$forfe$4(__VA_ARGS__)
#		define keyval$8$32$get$forfe$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfe$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forfe$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfd(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forfe$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$get$forff(data,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forff$1(keyval$8$32$getentry(data),nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forff$1(...) keyval$8$32$get$forff$2(__VA_ARGS__)
#		define keyval$8$32$get$forff$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$get$forff$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forff$3(...) keyval$8$32$get$forff$4(__VA_ARGS__)
#		define keyval$8$32$get$forff$4(eq,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forff$match##eq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil)
#		define keyval$8$32$get$forff$match0(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) keyval$8$32$get$forfe(tail,nil,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$get$forff$match1(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,nil) v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0
#		define keyval$8$32$getdata(self) keyval$8$32$getdata$extract(self)
#		define keyval$8$32$getdata$extract(self) keyval$8$32$getdata$extract$1 self
#		define keyval$8$32$getdata$extract$1(n,t) t
#		define keyval$8$32$getentry(data) keyval$8$32$getentry$extract(data)
#		define keyval$8$32$getentry$extract(data) keyval$8$32$getentry$extract$1 data
#		define keyval$8$32$getentry$extract$1(...) __VA_ARGS__
#		define keyval$8$32$getsize(self) keyval$8$32$getsize$extract(self)
#		define keyval$8$32$getsize$extract(self) keyval$8$32$getsize$extract$1 self
#		define keyval$8$32$getsize$extract$1(n,t) n
#		define keyval$8$32$has(...) keyval$8$32$has$1(__VA_ARGS__)
#		define keyval$8$32$has$1(...) keyval$8$32$has$2(__VA_ARGS__)
#		define keyval$8$32$has$2(self,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$3(keyval$8$32$getsize(self),keyval$8$32$getdata(self),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$3(...) keyval$8$32$has$4(__VA_ARGS__)
#		define keyval$8$32$has$4(size,data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for##size(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for00(...) 0
#		define keyval$8$32$has$for01(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for01$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for01$1(...) keyval$8$32$has$for01$2(__VA_ARGS__)
#		define keyval$8$32$has$for01$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for01$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for01$3(...) keyval$8$32$has$for01$4(__VA_ARGS__)
#		define keyval$8$32$has$for01$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for01$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for01$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for00(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for01$match1(...) 1
#		define keyval$8$32$has$for02(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for02$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for02$1(...) keyval$8$32$has$for02$2(__VA_ARGS__)
#		define keyval$8$32$has$for02$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for02$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for02$3(...) keyval$8$32$has$for02$4(__VA_ARGS__)
#		define keyval$8$32$has$for02$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for02$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for02$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for01(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for02$match1(...) 1
#		define keyval$8$32$has$for03(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for03$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for03$1(...) keyval$8$32$has$for03$2(__VA_ARGS__)
#		define keyval$8$32$has$for03$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for03$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for03$3(...) keyval$8$32$has$for03$4(__VA_ARGS__)
#		define keyval$8$32$has$for03$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for03$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for03$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for02(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for03$match1(...) 1
#		define keyval$8$32$has$for04(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for04$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for04$1(...) keyval$8$32$has$for04$2(__VA_ARGS__)
#		define keyval$8$32$has$for04$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for04$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for04$3(...) keyval$8$32$has$for04$4(__VA_ARGS__)
#		define keyval$8$32$has$for04$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for04$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for04$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for03(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for04$match1(...) 1
#		define keyval$8$32$has$for05(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for05$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for05$1(...) keyval$8$32$has$for05$2(__VA_ARGS__)
#		define keyval$8$32$has$for05$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for05$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for05$3(...) keyval$8$32$has$for05$4(__VA_ARGS__)
#		define keyval$8$32$has$for05$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for05$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for05$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for04(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for05$match1(...) 1
#		define keyval$8$32$has$for06(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for06$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for06$1(...) keyval$8$32$has$for06$2(__VA_ARGS__)
#		define keyval$8$32$has$for06$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for06$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for06$3(...) keyval$8$32$has$for06$4(__VA_ARGS__)
#		define keyval$8$32$has$for06$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for06$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for06$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for05(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for06$match1(...) 1
#		define keyval$8$32$has$for07(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for07$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for07$1(...) keyval$8$32$has$for07$2(__VA_ARGS__)
#		define keyval$8$32$has$for07$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for07$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for07$3(...) keyval$8$32$has$for07$4(__VA_ARGS__)
#		define keyval$8$32$has$for07$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for07$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for07$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for06(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for07$match1(...) 1
#		define keyval$8$32$has$for08(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for08$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for08$1(...) keyval$8$32$has$for08$2(__VA_ARGS__)
#		define keyval$8$32$has$for08$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for08$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for08$3(...) keyval$8$32$has$for08$4(__VA_ARGS__)
#		define keyval$8$32$has$for08$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for08$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for08$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for07(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for08$match1(...) 1
#		define keyval$8$32$has$for09(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for09$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for09$1(...) keyval$8$32$has$for09$2(__VA_ARGS__)
#		define keyval$8$32$has$for09$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for09$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for09$3(...) keyval$8$32$has$for09$4(__VA_ARGS__)
#		define keyval$8$32$has$for09$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for09$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for09$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for08(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for09$match1(...) 1
#		define keyval$8$32$has$for0a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0a$1(...) keyval$8$32$has$for0a$2(__VA_ARGS__)
#		define keyval$8$32$has$for0a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0a$3(...) keyval$8$32$has$for0a$4(__VA_ARGS__)
#		define keyval$8$32$has$for0a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for09(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0a$match1(...) 1
#		define keyval$8$32$has$for0b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0b$1(...) keyval$8$32$has$for0b$2(__VA_ARGS__)
#		define keyval$8$32$has$for0b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0b$3(...) keyval$8$32$has$for0b$4(__VA_ARGS__)
#		define keyval$8$32$has$for0b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0b$match1(...) 1
#		define keyval$8$32$has$for0c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0c$1(...) keyval$8$32$has$for0c$2(__VA_ARGS__)
#		define keyval$8$32$has$for0c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0c$3(...) keyval$8$32$has$for0c$4(__VA_ARGS__)
#		define keyval$8$32$has$for0c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0c$match1(...) 1
#		define keyval$8$32$has$for0d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0d$1(...) keyval$8$32$has$for0d$2(__VA_ARGS__)
#		define keyval$8$32$has$for0d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0d$3(...) keyval$8$32$has$for0d$4(__VA_ARGS__)
#		define keyval$8$32$has$for0d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0d$match1(...) 1
#		define keyval$8$32$has$for0e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0e$1(...) keyval$8$32$has$for0e$2(__VA_ARGS__)
#		define keyval$8$32$has$for0e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0e$3(...) keyval$8$32$has$for0e$4(__VA_ARGS__)
#		define keyval$8$32$has$for0e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0e$match1(...) 1
#		define keyval$8$32$has$for0f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0f$1(...) keyval$8$32$has$for0f$2(__VA_ARGS__)
#		define keyval$8$32$has$for0f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0f$3(...) keyval$8$32$has$for0f$4(__VA_ARGS__)
#		define keyval$8$32$has$for0f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for0f$match1(...) 1
#		define keyval$8$32$has$for10(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for10$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for10$1(...) keyval$8$32$has$for10$2(__VA_ARGS__)
#		define keyval$8$32$has$for10$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for10$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for10$3(...) keyval$8$32$has$for10$4(__VA_ARGS__)
#		define keyval$8$32$has$for10$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for10$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for10$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for0f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for10$match1(...) 1
#		define keyval$8$32$has$for11(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for11$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for11$1(...) keyval$8$32$has$for11$2(__VA_ARGS__)
#		define keyval$8$32$has$for11$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for11$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for11$3(...) keyval$8$32$has$for11$4(__VA_ARGS__)
#		define keyval$8$32$has$for11$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for11$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for11$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for10(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for11$match1(...) 1
#		define keyval$8$32$has$for12(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for12$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for12$1(...) keyval$8$32$has$for12$2(__VA_ARGS__)
#		define keyval$8$32$has$for12$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for12$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for12$3(...) keyval$8$32$has$for12$4(__VA_ARGS__)
#		define keyval$8$32$has$for12$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for12$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for12$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for11(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for12$match1(...) 1
#		define keyval$8$32$has$for13(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for13$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for13$1(...) keyval$8$32$has$for13$2(__VA_ARGS__)
#		define keyval$8$32$has$for13$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for13$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for13$3(...) keyval$8$32$has$for13$4(__VA_ARGS__)
#		define keyval$8$32$has$for13$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for13$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for13$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for12(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for13$match1(...) 1
#		define keyval$8$32$has$for14(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for14$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for14$1(...) keyval$8$32$has$for14$2(__VA_ARGS__)
#		define keyval$8$32$has$for14$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for14$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for14$3(...) keyval$8$32$has$for14$4(__VA_ARGS__)
#		define keyval$8$32$has$for14$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for14$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for14$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for13(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for14$match1(...) 1
#		define keyval$8$32$has$for15(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for15$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for15$1(...) keyval$8$32$has$for15$2(__VA_ARGS__)
#		define keyval$8$32$has$for15$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for15$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for15$3(...) keyval$8$32$has$for15$4(__VA_ARGS__)
#		define keyval$8$32$has$for15$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for15$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for15$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for14(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for15$match1(...) 1
#		define keyval$8$32$has$for16(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for16$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for16$1(...) keyval$8$32$has$for16$2(__VA_ARGS__)
#		define keyval$8$32$has$for16$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for16$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for16$3(...) keyval$8$32$has$for16$4(__VA_ARGS__)
#		define keyval$8$32$has$for16$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for16$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for16$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for15(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for16$match1(...) 1
#		define keyval$8$32$has$for17(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for17$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for17$1(...) keyval$8$32$has$for17$2(__VA_ARGS__)
#		define keyval$8$32$has$for17$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for17$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for17$3(...) keyval$8$32$has$for17$4(__VA_ARGS__)
#		define keyval$8$32$has$for17$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for17$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for17$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for16(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for17$match1(...) 1
#		define keyval$8$32$has$for18(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for18$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for18$1(...) keyval$8$32$has$for18$2(__VA_ARGS__)
#		define keyval$8$32$has$for18$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for18$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for18$3(...) keyval$8$32$has$for18$4(__VA_ARGS__)
#		define keyval$8$32$has$for18$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for18$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for18$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for17(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for18$match1(...) 1
#		define keyval$8$32$has$for19(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for19$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for19$1(...) keyval$8$32$has$for19$2(__VA_ARGS__)
#		define keyval$8$32$has$for19$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for19$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for19$3(...) keyval$8$32$has$for19$4(__VA_ARGS__)
#		define keyval$8$32$has$for19$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for19$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for19$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for18(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for19$match1(...) 1
#		define keyval$8$32$has$for1a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1a$1(...) keyval$8$32$has$for1a$2(__VA_ARGS__)
#		define keyval$8$32$has$for1a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1a$3(...) keyval$8$32$has$for1a$4(__VA_ARGS__)
#		define keyval$8$32$has$for1a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for19(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1a$match1(...) 1
#		define keyval$8$32$has$for1b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1b$1(...) keyval$8$32$has$for1b$2(__VA_ARGS__)
#		define keyval$8$32$has$for1b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1b$3(...) keyval$8$32$has$for1b$4(__VA_ARGS__)
#		define keyval$8$32$has$for1b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1b$match1(...) 1
#		define keyval$8$32$has$for1c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1c$1(...) keyval$8$32$has$for1c$2(__VA_ARGS__)
#		define keyval$8$32$has$for1c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1c$3(...) keyval$8$32$has$for1c$4(__VA_ARGS__)
#		define keyval$8$32$has$for1c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1c$match1(...) 1
#		define keyval$8$32$has$for1d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1d$1(...) keyval$8$32$has$for1d$2(__VA_ARGS__)
#		define keyval$8$32$has$for1d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1d$3(...) keyval$8$32$has$for1d$4(__VA_ARGS__)
#		define keyval$8$32$has$for1d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1d$match1(...) 1
#		define keyval$8$32$has$for1e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1e$1(...) keyval$8$32$has$for1e$2(__VA_ARGS__)
#		define keyval$8$32$has$for1e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1e$3(...) keyval$8$32$has$for1e$4(__VA_ARGS__)
#		define keyval$8$32$has$for1e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1e$match1(...) 1
#		define keyval$8$32$has$for1f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1f$1(...) keyval$8$32$has$for1f$2(__VA_ARGS__)
#		define keyval$8$32$has$for1f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1f$3(...) keyval$8$32$has$for1f$4(__VA_ARGS__)
#		define keyval$8$32$has$for1f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for1f$match1(...) 1
#		define keyval$8$32$has$for20(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for20$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for20$1(...) keyval$8$32$has$for20$2(__VA_ARGS__)
#		define keyval$8$32$has$for20$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for20$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for20$3(...) keyval$8$32$has$for20$4(__VA_ARGS__)
#		define keyval$8$32$has$for20$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for20$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for20$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for1f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for20$match1(...) 1
#		define keyval$8$32$has$for21(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for21$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for21$1(...) keyval$8$32$has$for21$2(__VA_ARGS__)
#		define keyval$8$32$has$for21$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for21$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for21$3(...) keyval$8$32$has$for21$4(__VA_ARGS__)
#		define keyval$8$32$has$for21$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for21$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for21$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for20(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for21$match1(...) 1
#		define keyval$8$32$has$for22(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for22$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for22$1(...) keyval$8$32$has$for22$2(__VA_ARGS__)
#		define keyval$8$32$has$for22$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for22$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for22$3(...) keyval$8$32$has$for22$4(__VA_ARGS__)
#		define keyval$8$32$has$for22$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for22$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for22$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for21(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for22$match1(...) 1
#		define keyval$8$32$has$for23(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for23$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for23$1(...) keyval$8$32$has$for23$2(__VA_ARGS__)
#		define keyval$8$32$has$for23$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for23$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for23$3(...) keyval$8$32$has$for23$4(__VA_ARGS__)
#		define keyval$8$32$has$for23$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for23$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for23$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for22(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for23$match1(...) 1
#		define keyval$8$32$has$for24(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for24$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for24$1(...) keyval$8$32$has$for24$2(__VA_ARGS__)
#		define keyval$8$32$has$for24$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for24$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for24$3(...) keyval$8$32$has$for24$4(__VA_ARGS__)
#		define keyval$8$32$has$for24$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for24$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for24$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for23(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for24$match1(...) 1
#		define keyval$8$32$has$for25(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for25$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for25$1(...) keyval$8$32$has$for25$2(__VA_ARGS__)
#		define keyval$8$32$has$for25$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for25$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for25$3(...) keyval$8$32$has$for25$4(__VA_ARGS__)
#		define keyval$8$32$has$for25$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for25$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for25$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for24(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for25$match1(...) 1
#		define keyval$8$32$has$for26(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for26$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for26$1(...) keyval$8$32$has$for26$2(__VA_ARGS__)
#		define keyval$8$32$has$for26$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for26$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for26$3(...) keyval$8$32$has$for26$4(__VA_ARGS__)
#		define keyval$8$32$has$for26$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for26$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for26$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for25(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for26$match1(...) 1
#		define keyval$8$32$has$for27(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for27$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for27$1(...) keyval$8$32$has$for27$2(__VA_ARGS__)
#		define keyval$8$32$has$for27$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for27$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for27$3(...) keyval$8$32$has$for27$4(__VA_ARGS__)
#		define keyval$8$32$has$for27$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for27$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for27$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for26(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for27$match1(...) 1
#		define keyval$8$32$has$for28(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for28$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for28$1(...) keyval$8$32$has$for28$2(__VA_ARGS__)
#		define keyval$8$32$has$for28$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for28$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for28$3(...) keyval$8$32$has$for28$4(__VA_ARGS__)
#		define keyval$8$32$has$for28$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for28$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for28$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for27(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for28$match1(...) 1
#		define keyval$8$32$has$for29(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for29$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for29$1(...) keyval$8$32$has$for29$2(__VA_ARGS__)
#		define keyval$8$32$has$for29$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for29$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for29$3(...) keyval$8$32$has$for29$4(__VA_ARGS__)
#		define keyval$8$32$has$for29$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for29$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for29$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for28(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for29$match1(...) 1
#		define keyval$8$32$has$for2a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2a$1(...) keyval$8$32$has$for2a$2(__VA_ARGS__)
#		define keyval$8$32$has$for2a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2a$3(...) keyval$8$32$has$for2a$4(__VA_ARGS__)
#		define keyval$8$32$has$for2a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for29(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2a$match1(...) 1
#		define keyval$8$32$has$for2b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2b$1(...) keyval$8$32$has$for2b$2(__VA_ARGS__)
#		define keyval$8$32$has$for2b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2b$3(...) keyval$8$32$has$for2b$4(__VA_ARGS__)
#		define keyval$8$32$has$for2b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2b$match1(...) 1
#		define keyval$8$32$has$for2c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2c$1(...) keyval$8$32$has$for2c$2(__VA_ARGS__)
#		define keyval$8$32$has$for2c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2c$3(...) keyval$8$32$has$for2c$4(__VA_ARGS__)
#		define keyval$8$32$has$for2c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2c$match1(...) 1
#		define keyval$8$32$has$for2d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2d$1(...) keyval$8$32$has$for2d$2(__VA_ARGS__)
#		define keyval$8$32$has$for2d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2d$3(...) keyval$8$32$has$for2d$4(__VA_ARGS__)
#		define keyval$8$32$has$for2d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2d$match1(...) 1
#		define keyval$8$32$has$for2e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2e$1(...) keyval$8$32$has$for2e$2(__VA_ARGS__)
#		define keyval$8$32$has$for2e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2e$3(...) keyval$8$32$has$for2e$4(__VA_ARGS__)
#		define keyval$8$32$has$for2e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2e$match1(...) 1
#		define keyval$8$32$has$for2f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2f$1(...) keyval$8$32$has$for2f$2(__VA_ARGS__)
#		define keyval$8$32$has$for2f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2f$3(...) keyval$8$32$has$for2f$4(__VA_ARGS__)
#		define keyval$8$32$has$for2f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for2f$match1(...) 1
#		define keyval$8$32$has$for30(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for30$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for30$1(...) keyval$8$32$has$for30$2(__VA_ARGS__)
#		define keyval$8$32$has$for30$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for30$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for30$3(...) keyval$8$32$has$for30$4(__VA_ARGS__)
#		define keyval$8$32$has$for30$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for30$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for30$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for2f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for30$match1(...) 1
#		define keyval$8$32$has$for31(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for31$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for31$1(...) keyval$8$32$has$for31$2(__VA_ARGS__)
#		define keyval$8$32$has$for31$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for31$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for31$3(...) keyval$8$32$has$for31$4(__VA_ARGS__)
#		define keyval$8$32$has$for31$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for31$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for31$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for30(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for31$match1(...) 1
#		define keyval$8$32$has$for32(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for32$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for32$1(...) keyval$8$32$has$for32$2(__VA_ARGS__)
#		define keyval$8$32$has$for32$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for32$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for32$3(...) keyval$8$32$has$for32$4(__VA_ARGS__)
#		define keyval$8$32$has$for32$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for32$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for32$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for31(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for32$match1(...) 1
#		define keyval$8$32$has$for33(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for33$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for33$1(...) keyval$8$32$has$for33$2(__VA_ARGS__)
#		define keyval$8$32$has$for33$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for33$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for33$3(...) keyval$8$32$has$for33$4(__VA_ARGS__)
#		define keyval$8$32$has$for33$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for33$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for33$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for32(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for33$match1(...) 1
#		define keyval$8$32$has$for34(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for34$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for34$1(...) keyval$8$32$has$for34$2(__VA_ARGS__)
#		define keyval$8$32$has$for34$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for34$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for34$3(...) keyval$8$32$has$for34$4(__VA_ARGS__)
#		define keyval$8$32$has$for34$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for34$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for34$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for33(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for34$match1(...) 1
#		define keyval$8$32$has$for35(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for35$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for35$1(...) keyval$8$32$has$for35$2(__VA_ARGS__)
#		define keyval$8$32$has$for35$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for35$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for35$3(...) keyval$8$32$has$for35$4(__VA_ARGS__)
#		define keyval$8$32$has$for35$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for35$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for35$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for34(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for35$match1(...) 1
#		define keyval$8$32$has$for36(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for36$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for36$1(...) keyval$8$32$has$for36$2(__VA_ARGS__)
#		define keyval$8$32$has$for36$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for36$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for36$3(...) keyval$8$32$has$for36$4(__VA_ARGS__)
#		define keyval$8$32$has$for36$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for36$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for36$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for35(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for36$match1(...) 1
#		define keyval$8$32$has$for37(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for37$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for37$1(...) keyval$8$32$has$for37$2(__VA_ARGS__)
#		define keyval$8$32$has$for37$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for37$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for37$3(...) keyval$8$32$has$for37$4(__VA_ARGS__)
#		define keyval$8$32$has$for37$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for37$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for37$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for36(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for37$match1(...) 1
#		define keyval$8$32$has$for38(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for38$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for38$1(...) keyval$8$32$has$for38$2(__VA_ARGS__)
#		define keyval$8$32$has$for38$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for38$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for38$3(...) keyval$8$32$has$for38$4(__VA_ARGS__)
#		define keyval$8$32$has$for38$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for38$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for38$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for37(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for38$match1(...) 1
#		define keyval$8$32$has$for39(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for39$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for39$1(...) keyval$8$32$has$for39$2(__VA_ARGS__)
#		define keyval$8$32$has$for39$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for39$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for39$3(...) keyval$8$32$has$for39$4(__VA_ARGS__)
#		define keyval$8$32$has$for39$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for39$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for39$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for38(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for39$match1(...) 1
#		define keyval$8$32$has$for3a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3a$1(...) keyval$8$32$has$for3a$2(__VA_ARGS__)
#		define keyval$8$32$has$for3a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3a$3(...) keyval$8$32$has$for3a$4(__VA_ARGS__)
#		define keyval$8$32$has$for3a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for39(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3a$match1(...) 1
#		define keyval$8$32$has$for3b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3b$1(...) keyval$8$32$has$for3b$2(__VA_ARGS__)
#		define keyval$8$32$has$for3b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3b$3(...) keyval$8$32$has$for3b$4(__VA_ARGS__)
#		define keyval$8$32$has$for3b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3b$match1(...) 1
#		define keyval$8$32$has$for3c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3c$1(...) keyval$8$32$has$for3c$2(__VA_ARGS__)
#		define keyval$8$32$has$for3c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3c$3(...) keyval$8$32$has$for3c$4(__VA_ARGS__)
#		define keyval$8$32$has$for3c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3c$match1(...) 1
#		define keyval$8$32$has$for3d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3d$1(...) keyval$8$32$has$for3d$2(__VA_ARGS__)
#		define keyval$8$32$has$for3d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3d$3(...) keyval$8$32$has$for3d$4(__VA_ARGS__)
#		define keyval$8$32$has$for3d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3d$match1(...) 1
#		define keyval$8$32$has$for3e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3e$1(...) keyval$8$32$has$for3e$2(__VA_ARGS__)
#		define keyval$8$32$has$for3e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3e$3(...) keyval$8$32$has$for3e$4(__VA_ARGS__)
#		define keyval$8$32$has$for3e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3e$match1(...) 1
#		define keyval$8$32$has$for3f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3f$1(...) keyval$8$32$has$for3f$2(__VA_ARGS__)
#		define keyval$8$32$has$for3f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3f$3(...) keyval$8$32$has$for3f$4(__VA_ARGS__)
#		define keyval$8$32$has$for3f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for3f$match1(...) 1
#		define keyval$8$32$has$for40(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for40$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for40$1(...) keyval$8$32$has$for40$2(__VA_ARGS__)
#		define keyval$8$32$has$for40$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for40$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for40$3(...) keyval$8$32$has$for40$4(__VA_ARGS__)
#		define keyval$8$32$has$for40$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for40$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for40$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for3f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for40$match1(...) 1
#		define keyval$8$32$has$for41(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for41$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for41$1(...) keyval$8$32$has$for41$2(__VA_ARGS__)
#		define keyval$8$32$has$for41$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for41$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for41$3(...) keyval$8$32$has$for41$4(__VA_ARGS__)
#		define keyval$8$32$has$for41$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for41$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for41$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for40(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for41$match1(...) 1
#		define keyval$8$32$has$for42(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for42$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for42$1(...) keyval$8$32$has$for42$2(__VA_ARGS__)
#		define keyval$8$32$has$for42$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for42$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for42$3(...) keyval$8$32$has$for42$4(__VA_ARGS__)
#		define keyval$8$32$has$for42$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for42$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for42$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for41(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for42$match1(...) 1
#		define keyval$8$32$has$for43(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for43$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for43$1(...) keyval$8$32$has$for43$2(__VA_ARGS__)
#		define keyval$8$32$has$for43$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for43$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for43$3(...) keyval$8$32$has$for43$4(__VA_ARGS__)
#		define keyval$8$32$has$for43$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for43$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for43$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for42(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for43$match1(...) 1
#		define keyval$8$32$has$for44(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for44$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for44$1(...) keyval$8$32$has$for44$2(__VA_ARGS__)
#		define keyval$8$32$has$for44$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for44$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for44$3(...) keyval$8$32$has$for44$4(__VA_ARGS__)
#		define keyval$8$32$has$for44$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for44$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for44$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for43(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for44$match1(...) 1
#		define keyval$8$32$has$for45(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for45$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for45$1(...) keyval$8$32$has$for45$2(__VA_ARGS__)
#		define keyval$8$32$has$for45$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for45$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for45$3(...) keyval$8$32$has$for45$4(__VA_ARGS__)
#		define keyval$8$32$has$for45$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for45$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for45$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for44(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for45$match1(...) 1
#		define keyval$8$32$has$for46(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for46$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for46$1(...) keyval$8$32$has$for46$2(__VA_ARGS__)
#		define keyval$8$32$has$for46$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for46$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for46$3(...) keyval$8$32$has$for46$4(__VA_ARGS__)
#		define keyval$8$32$has$for46$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for46$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for46$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for45(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for46$match1(...) 1
#		define keyval$8$32$has$for47(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for47$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for47$1(...) keyval$8$32$has$for47$2(__VA_ARGS__)
#		define keyval$8$32$has$for47$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for47$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for47$3(...) keyval$8$32$has$for47$4(__VA_ARGS__)
#		define keyval$8$32$has$for47$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for47$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for47$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for46(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for47$match1(...) 1
#		define keyval$8$32$has$for48(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for48$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for48$1(...) keyval$8$32$has$for48$2(__VA_ARGS__)
#		define keyval$8$32$has$for48$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for48$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for48$3(...) keyval$8$32$has$for48$4(__VA_ARGS__)
#		define keyval$8$32$has$for48$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for48$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for48$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for47(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for48$match1(...) 1
#		define keyval$8$32$has$for49(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for49$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for49$1(...) keyval$8$32$has$for49$2(__VA_ARGS__)
#		define keyval$8$32$has$for49$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for49$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for49$3(...) keyval$8$32$has$for49$4(__VA_ARGS__)
#		define keyval$8$32$has$for49$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for49$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for49$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for48(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for49$match1(...) 1
#		define keyval$8$32$has$for4a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4a$1(...) keyval$8$32$has$for4a$2(__VA_ARGS__)
#		define keyval$8$32$has$for4a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4a$3(...) keyval$8$32$has$for4a$4(__VA_ARGS__)
#		define keyval$8$32$has$for4a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for49(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4a$match1(...) 1
#		define keyval$8$32$has$for4b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4b$1(...) keyval$8$32$has$for4b$2(__VA_ARGS__)
#		define keyval$8$32$has$for4b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4b$3(...) keyval$8$32$has$for4b$4(__VA_ARGS__)
#		define keyval$8$32$has$for4b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4b$match1(...) 1
#		define keyval$8$32$has$for4c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4c$1(...) keyval$8$32$has$for4c$2(__VA_ARGS__)
#		define keyval$8$32$has$for4c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4c$3(...) keyval$8$32$has$for4c$4(__VA_ARGS__)
#		define keyval$8$32$has$for4c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4c$match1(...) 1
#		define keyval$8$32$has$for4d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4d$1(...) keyval$8$32$has$for4d$2(__VA_ARGS__)
#		define keyval$8$32$has$for4d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4d$3(...) keyval$8$32$has$for4d$4(__VA_ARGS__)
#		define keyval$8$32$has$for4d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4d$match1(...) 1
#		define keyval$8$32$has$for4e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4e$1(...) keyval$8$32$has$for4e$2(__VA_ARGS__)
#		define keyval$8$32$has$for4e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4e$3(...) keyval$8$32$has$for4e$4(__VA_ARGS__)
#		define keyval$8$32$has$for4e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4e$match1(...) 1
#		define keyval$8$32$has$for4f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4f$1(...) keyval$8$32$has$for4f$2(__VA_ARGS__)
#		define keyval$8$32$has$for4f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4f$3(...) keyval$8$32$has$for4f$4(__VA_ARGS__)
#		define keyval$8$32$has$for4f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for4f$match1(...) 1
#		define keyval$8$32$has$for50(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for50$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for50$1(...) keyval$8$32$has$for50$2(__VA_ARGS__)
#		define keyval$8$32$has$for50$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for50$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for50$3(...) keyval$8$32$has$for50$4(__VA_ARGS__)
#		define keyval$8$32$has$for50$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for50$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for50$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for4f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for50$match1(...) 1
#		define keyval$8$32$has$for51(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for51$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for51$1(...) keyval$8$32$has$for51$2(__VA_ARGS__)
#		define keyval$8$32$has$for51$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for51$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for51$3(...) keyval$8$32$has$for51$4(__VA_ARGS__)
#		define keyval$8$32$has$for51$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for51$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for51$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for50(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for51$match1(...) 1
#		define keyval$8$32$has$for52(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for52$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for52$1(...) keyval$8$32$has$for52$2(__VA_ARGS__)
#		define keyval$8$32$has$for52$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for52$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for52$3(...) keyval$8$32$has$for52$4(__VA_ARGS__)
#		define keyval$8$32$has$for52$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for52$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for52$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for51(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for52$match1(...) 1
#		define keyval$8$32$has$for53(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for53$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for53$1(...) keyval$8$32$has$for53$2(__VA_ARGS__)
#		define keyval$8$32$has$for53$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for53$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for53$3(...) keyval$8$32$has$for53$4(__VA_ARGS__)
#		define keyval$8$32$has$for53$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for53$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for53$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for52(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for53$match1(...) 1
#		define keyval$8$32$has$for54(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for54$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for54$1(...) keyval$8$32$has$for54$2(__VA_ARGS__)
#		define keyval$8$32$has$for54$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for54$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for54$3(...) keyval$8$32$has$for54$4(__VA_ARGS__)
#		define keyval$8$32$has$for54$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for54$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for54$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for53(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for54$match1(...) 1
#		define keyval$8$32$has$for55(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for55$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for55$1(...) keyval$8$32$has$for55$2(__VA_ARGS__)
#		define keyval$8$32$has$for55$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for55$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for55$3(...) keyval$8$32$has$for55$4(__VA_ARGS__)
#		define keyval$8$32$has$for55$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for55$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for55$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for54(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for55$match1(...) 1
#		define keyval$8$32$has$for56(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for56$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for56$1(...) keyval$8$32$has$for56$2(__VA_ARGS__)
#		define keyval$8$32$has$for56$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for56$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for56$3(...) keyval$8$32$has$for56$4(__VA_ARGS__)
#		define keyval$8$32$has$for56$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for56$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for56$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for55(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for56$match1(...) 1
#		define keyval$8$32$has$for57(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for57$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for57$1(...) keyval$8$32$has$for57$2(__VA_ARGS__)
#		define keyval$8$32$has$for57$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for57$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for57$3(...) keyval$8$32$has$for57$4(__VA_ARGS__)
#		define keyval$8$32$has$for57$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for57$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for57$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for56(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for57$match1(...) 1
#		define keyval$8$32$has$for58(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for58$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for58$1(...) keyval$8$32$has$for58$2(__VA_ARGS__)
#		define keyval$8$32$has$for58$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for58$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for58$3(...) keyval$8$32$has$for58$4(__VA_ARGS__)
#		define keyval$8$32$has$for58$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for58$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for58$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for57(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for58$match1(...) 1
#		define keyval$8$32$has$for59(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for59$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for59$1(...) keyval$8$32$has$for59$2(__VA_ARGS__)
#		define keyval$8$32$has$for59$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for59$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for59$3(...) keyval$8$32$has$for59$4(__VA_ARGS__)
#		define keyval$8$32$has$for59$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for59$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for59$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for58(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for59$match1(...) 1
#		define keyval$8$32$has$for5a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5a$1(...) keyval$8$32$has$for5a$2(__VA_ARGS__)
#		define keyval$8$32$has$for5a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5a$3(...) keyval$8$32$has$for5a$4(__VA_ARGS__)
#		define keyval$8$32$has$for5a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for59(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5a$match1(...) 1
#		define keyval$8$32$has$for5b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5b$1(...) keyval$8$32$has$for5b$2(__VA_ARGS__)
#		define keyval$8$32$has$for5b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5b$3(...) keyval$8$32$has$for5b$4(__VA_ARGS__)
#		define keyval$8$32$has$for5b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5b$match1(...) 1
#		define keyval$8$32$has$for5c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5c$1(...) keyval$8$32$has$for5c$2(__VA_ARGS__)
#		define keyval$8$32$has$for5c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5c$3(...) keyval$8$32$has$for5c$4(__VA_ARGS__)
#		define keyval$8$32$has$for5c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5c$match1(...) 1
#		define keyval$8$32$has$for5d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5d$1(...) keyval$8$32$has$for5d$2(__VA_ARGS__)
#		define keyval$8$32$has$for5d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5d$3(...) keyval$8$32$has$for5d$4(__VA_ARGS__)
#		define keyval$8$32$has$for5d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5d$match1(...) 1
#		define keyval$8$32$has$for5e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5e$1(...) keyval$8$32$has$for5e$2(__VA_ARGS__)
#		define keyval$8$32$has$for5e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5e$3(...) keyval$8$32$has$for5e$4(__VA_ARGS__)
#		define keyval$8$32$has$for5e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5e$match1(...) 1
#		define keyval$8$32$has$for5f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5f$1(...) keyval$8$32$has$for5f$2(__VA_ARGS__)
#		define keyval$8$32$has$for5f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5f$3(...) keyval$8$32$has$for5f$4(__VA_ARGS__)
#		define keyval$8$32$has$for5f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for5f$match1(...) 1
#		define keyval$8$32$has$for60(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for60$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for60$1(...) keyval$8$32$has$for60$2(__VA_ARGS__)
#		define keyval$8$32$has$for60$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for60$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for60$3(...) keyval$8$32$has$for60$4(__VA_ARGS__)
#		define keyval$8$32$has$for60$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for60$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for60$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for5f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for60$match1(...) 1
#		define keyval$8$32$has$for61(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for61$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for61$1(...) keyval$8$32$has$for61$2(__VA_ARGS__)
#		define keyval$8$32$has$for61$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for61$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for61$3(...) keyval$8$32$has$for61$4(__VA_ARGS__)
#		define keyval$8$32$has$for61$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for61$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for61$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for60(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for61$match1(...) 1
#		define keyval$8$32$has$for62(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for62$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for62$1(...) keyval$8$32$has$for62$2(__VA_ARGS__)
#		define keyval$8$32$has$for62$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for62$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for62$3(...) keyval$8$32$has$for62$4(__VA_ARGS__)
#		define keyval$8$32$has$for62$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for62$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for62$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for61(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for62$match1(...) 1
#		define keyval$8$32$has$for63(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for63$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for63$1(...) keyval$8$32$has$for63$2(__VA_ARGS__)
#		define keyval$8$32$has$for63$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for63$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for63$3(...) keyval$8$32$has$for63$4(__VA_ARGS__)
#		define keyval$8$32$has$for63$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for63$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for63$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for62(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for63$match1(...) 1
#		define keyval$8$32$has$for64(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for64$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for64$1(...) keyval$8$32$has$for64$2(__VA_ARGS__)
#		define keyval$8$32$has$for64$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for64$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for64$3(...) keyval$8$32$has$for64$4(__VA_ARGS__)
#		define keyval$8$32$has$for64$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for64$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for64$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for63(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for64$match1(...) 1
#		define keyval$8$32$has$for65(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for65$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for65$1(...) keyval$8$32$has$for65$2(__VA_ARGS__)
#		define keyval$8$32$has$for65$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for65$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for65$3(...) keyval$8$32$has$for65$4(__VA_ARGS__)
#		define keyval$8$32$has$for65$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for65$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for65$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for64(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for65$match1(...) 1
#		define keyval$8$32$has$for66(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for66$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for66$1(...) keyval$8$32$has$for66$2(__VA_ARGS__)
#		define keyval$8$32$has$for66$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for66$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for66$3(...) keyval$8$32$has$for66$4(__VA_ARGS__)
#		define keyval$8$32$has$for66$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for66$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for66$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for65(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for66$match1(...) 1
#		define keyval$8$32$has$for67(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for67$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for67$1(...) keyval$8$32$has$for67$2(__VA_ARGS__)
#		define keyval$8$32$has$for67$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for67$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for67$3(...) keyval$8$32$has$for67$4(__VA_ARGS__)
#		define keyval$8$32$has$for67$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for67$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for67$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for66(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for67$match1(...) 1
#		define keyval$8$32$has$for68(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for68$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for68$1(...) keyval$8$32$has$for68$2(__VA_ARGS__)
#		define keyval$8$32$has$for68$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for68$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for68$3(...) keyval$8$32$has$for68$4(__VA_ARGS__)
#		define keyval$8$32$has$for68$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for68$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for68$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for67(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for68$match1(...) 1
#		define keyval$8$32$has$for69(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for69$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for69$1(...) keyval$8$32$has$for69$2(__VA_ARGS__)
#		define keyval$8$32$has$for69$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for69$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for69$3(...) keyval$8$32$has$for69$4(__VA_ARGS__)
#		define keyval$8$32$has$for69$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for69$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for69$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for68(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for69$match1(...) 1
#		define keyval$8$32$has$for6a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6a$1(...) keyval$8$32$has$for6a$2(__VA_ARGS__)
#		define keyval$8$32$has$for6a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6a$3(...) keyval$8$32$has$for6a$4(__VA_ARGS__)
#		define keyval$8$32$has$for6a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for69(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6a$match1(...) 1
#		define keyval$8$32$has$for6b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6b$1(...) keyval$8$32$has$for6b$2(__VA_ARGS__)
#		define keyval$8$32$has$for6b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6b$3(...) keyval$8$32$has$for6b$4(__VA_ARGS__)
#		define keyval$8$32$has$for6b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6b$match1(...) 1
#		define keyval$8$32$has$for6c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6c$1(...) keyval$8$32$has$for6c$2(__VA_ARGS__)
#		define keyval$8$32$has$for6c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6c$3(...) keyval$8$32$has$for6c$4(__VA_ARGS__)
#		define keyval$8$32$has$for6c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6c$match1(...) 1
#		define keyval$8$32$has$for6d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6d$1(...) keyval$8$32$has$for6d$2(__VA_ARGS__)
#		define keyval$8$32$has$for6d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6d$3(...) keyval$8$32$has$for6d$4(__VA_ARGS__)
#		define keyval$8$32$has$for6d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6d$match1(...) 1
#		define keyval$8$32$has$for6e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6e$1(...) keyval$8$32$has$for6e$2(__VA_ARGS__)
#		define keyval$8$32$has$for6e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6e$3(...) keyval$8$32$has$for6e$4(__VA_ARGS__)
#		define keyval$8$32$has$for6e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6e$match1(...) 1
#		define keyval$8$32$has$for6f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6f$1(...) keyval$8$32$has$for6f$2(__VA_ARGS__)
#		define keyval$8$32$has$for6f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6f$3(...) keyval$8$32$has$for6f$4(__VA_ARGS__)
#		define keyval$8$32$has$for6f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for6f$match1(...) 1
#		define keyval$8$32$has$for70(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for70$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for70$1(...) keyval$8$32$has$for70$2(__VA_ARGS__)
#		define keyval$8$32$has$for70$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for70$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for70$3(...) keyval$8$32$has$for70$4(__VA_ARGS__)
#		define keyval$8$32$has$for70$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for70$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for70$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for6f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for70$match1(...) 1
#		define keyval$8$32$has$for71(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for71$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for71$1(...) keyval$8$32$has$for71$2(__VA_ARGS__)
#		define keyval$8$32$has$for71$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for71$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for71$3(...) keyval$8$32$has$for71$4(__VA_ARGS__)
#		define keyval$8$32$has$for71$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for71$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for71$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for70(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for71$match1(...) 1
#		define keyval$8$32$has$for72(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for72$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for72$1(...) keyval$8$32$has$for72$2(__VA_ARGS__)
#		define keyval$8$32$has$for72$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for72$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for72$3(...) keyval$8$32$has$for72$4(__VA_ARGS__)
#		define keyval$8$32$has$for72$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for72$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for72$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for71(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for72$match1(...) 1
#		define keyval$8$32$has$for73(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for73$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for73$1(...) keyval$8$32$has$for73$2(__VA_ARGS__)
#		define keyval$8$32$has$for73$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for73$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for73$3(...) keyval$8$32$has$for73$4(__VA_ARGS__)
#		define keyval$8$32$has$for73$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for73$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for73$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for72(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for73$match1(...) 1
#		define keyval$8$32$has$for74(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for74$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for74$1(...) keyval$8$32$has$for74$2(__VA_ARGS__)
#		define keyval$8$32$has$for74$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for74$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for74$3(...) keyval$8$32$has$for74$4(__VA_ARGS__)
#		define keyval$8$32$has$for74$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for74$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for74$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for73(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for74$match1(...) 1
#		define keyval$8$32$has$for75(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for75$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for75$1(...) keyval$8$32$has$for75$2(__VA_ARGS__)
#		define keyval$8$32$has$for75$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for75$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for75$3(...) keyval$8$32$has$for75$4(__VA_ARGS__)
#		define keyval$8$32$has$for75$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for75$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for75$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for74(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for75$match1(...) 1
#		define keyval$8$32$has$for76(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for76$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for76$1(...) keyval$8$32$has$for76$2(__VA_ARGS__)
#		define keyval$8$32$has$for76$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for76$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for76$3(...) keyval$8$32$has$for76$4(__VA_ARGS__)
#		define keyval$8$32$has$for76$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for76$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for76$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for75(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for76$match1(...) 1
#		define keyval$8$32$has$for77(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for77$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for77$1(...) keyval$8$32$has$for77$2(__VA_ARGS__)
#		define keyval$8$32$has$for77$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for77$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for77$3(...) keyval$8$32$has$for77$4(__VA_ARGS__)
#		define keyval$8$32$has$for77$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for77$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for77$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for76(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for77$match1(...) 1
#		define keyval$8$32$has$for78(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for78$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for78$1(...) keyval$8$32$has$for78$2(__VA_ARGS__)
#		define keyval$8$32$has$for78$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for78$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for78$3(...) keyval$8$32$has$for78$4(__VA_ARGS__)
#		define keyval$8$32$has$for78$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for78$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for78$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for77(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for78$match1(...) 1
#		define keyval$8$32$has$for79(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for79$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for79$1(...) keyval$8$32$has$for79$2(__VA_ARGS__)
#		define keyval$8$32$has$for79$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for79$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for79$3(...) keyval$8$32$has$for79$4(__VA_ARGS__)
#		define keyval$8$32$has$for79$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for79$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for79$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for78(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for79$match1(...) 1
#		define keyval$8$32$has$for7a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7a$1(...) keyval$8$32$has$for7a$2(__VA_ARGS__)
#		define keyval$8$32$has$for7a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7a$3(...) keyval$8$32$has$for7a$4(__VA_ARGS__)
#		define keyval$8$32$has$for7a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for79(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7a$match1(...) 1
#		define keyval$8$32$has$for7b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7b$1(...) keyval$8$32$has$for7b$2(__VA_ARGS__)
#		define keyval$8$32$has$for7b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7b$3(...) keyval$8$32$has$for7b$4(__VA_ARGS__)
#		define keyval$8$32$has$for7b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7b$match1(...) 1
#		define keyval$8$32$has$for7c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7c$1(...) keyval$8$32$has$for7c$2(__VA_ARGS__)
#		define keyval$8$32$has$for7c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7c$3(...) keyval$8$32$has$for7c$4(__VA_ARGS__)
#		define keyval$8$32$has$for7c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7c$match1(...) 1
#		define keyval$8$32$has$for7d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7d$1(...) keyval$8$32$has$for7d$2(__VA_ARGS__)
#		define keyval$8$32$has$for7d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7d$3(...) keyval$8$32$has$for7d$4(__VA_ARGS__)
#		define keyval$8$32$has$for7d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7d$match1(...) 1
#		define keyval$8$32$has$for7e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7e$1(...) keyval$8$32$has$for7e$2(__VA_ARGS__)
#		define keyval$8$32$has$for7e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7e$3(...) keyval$8$32$has$for7e$4(__VA_ARGS__)
#		define keyval$8$32$has$for7e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7e$match1(...) 1
#		define keyval$8$32$has$for7f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7f$1(...) keyval$8$32$has$for7f$2(__VA_ARGS__)
#		define keyval$8$32$has$for7f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7f$3(...) keyval$8$32$has$for7f$4(__VA_ARGS__)
#		define keyval$8$32$has$for7f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for7f$match1(...) 1
#		define keyval$8$32$has$for80(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for80$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for80$1(...) keyval$8$32$has$for80$2(__VA_ARGS__)
#		define keyval$8$32$has$for80$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for80$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for80$3(...) keyval$8$32$has$for80$4(__VA_ARGS__)
#		define keyval$8$32$has$for80$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for80$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for80$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for7f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for80$match1(...) 1
#		define keyval$8$32$has$for81(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for81$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for81$1(...) keyval$8$32$has$for81$2(__VA_ARGS__)
#		define keyval$8$32$has$for81$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for81$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for81$3(...) keyval$8$32$has$for81$4(__VA_ARGS__)
#		define keyval$8$32$has$for81$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for81$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for81$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for80(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for81$match1(...) 1
#		define keyval$8$32$has$for82(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for82$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for82$1(...) keyval$8$32$has$for82$2(__VA_ARGS__)
#		define keyval$8$32$has$for82$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for82$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for82$3(...) keyval$8$32$has$for82$4(__VA_ARGS__)
#		define keyval$8$32$has$for82$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for82$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for82$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for81(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for82$match1(...) 1
#		define keyval$8$32$has$for83(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for83$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for83$1(...) keyval$8$32$has$for83$2(__VA_ARGS__)
#		define keyval$8$32$has$for83$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for83$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for83$3(...) keyval$8$32$has$for83$4(__VA_ARGS__)
#		define keyval$8$32$has$for83$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for83$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for83$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for82(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for83$match1(...) 1
#		define keyval$8$32$has$for84(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for84$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for84$1(...) keyval$8$32$has$for84$2(__VA_ARGS__)
#		define keyval$8$32$has$for84$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for84$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for84$3(...) keyval$8$32$has$for84$4(__VA_ARGS__)
#		define keyval$8$32$has$for84$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for84$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for84$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for83(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for84$match1(...) 1
#		define keyval$8$32$has$for85(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for85$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for85$1(...) keyval$8$32$has$for85$2(__VA_ARGS__)
#		define keyval$8$32$has$for85$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for85$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for85$3(...) keyval$8$32$has$for85$4(__VA_ARGS__)
#		define keyval$8$32$has$for85$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for85$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for85$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for84(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for85$match1(...) 1
#		define keyval$8$32$has$for86(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for86$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for86$1(...) keyval$8$32$has$for86$2(__VA_ARGS__)
#		define keyval$8$32$has$for86$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for86$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for86$3(...) keyval$8$32$has$for86$4(__VA_ARGS__)
#		define keyval$8$32$has$for86$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for86$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for86$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for85(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for86$match1(...) 1
#		define keyval$8$32$has$for87(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for87$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for87$1(...) keyval$8$32$has$for87$2(__VA_ARGS__)
#		define keyval$8$32$has$for87$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for87$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for87$3(...) keyval$8$32$has$for87$4(__VA_ARGS__)
#		define keyval$8$32$has$for87$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for87$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for87$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for86(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for87$match1(...) 1
#		define keyval$8$32$has$for88(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for88$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for88$1(...) keyval$8$32$has$for88$2(__VA_ARGS__)
#		define keyval$8$32$has$for88$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for88$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for88$3(...) keyval$8$32$has$for88$4(__VA_ARGS__)
#		define keyval$8$32$has$for88$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for88$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for88$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for87(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for88$match1(...) 1
#		define keyval$8$32$has$for89(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for89$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for89$1(...) keyval$8$32$has$for89$2(__VA_ARGS__)
#		define keyval$8$32$has$for89$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for89$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for89$3(...) keyval$8$32$has$for89$4(__VA_ARGS__)
#		define keyval$8$32$has$for89$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for89$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for89$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for88(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for89$match1(...) 1
#		define keyval$8$32$has$for8a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8a$1(...) keyval$8$32$has$for8a$2(__VA_ARGS__)
#		define keyval$8$32$has$for8a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8a$3(...) keyval$8$32$has$for8a$4(__VA_ARGS__)
#		define keyval$8$32$has$for8a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for89(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8a$match1(...) 1
#		define keyval$8$32$has$for8b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8b$1(...) keyval$8$32$has$for8b$2(__VA_ARGS__)
#		define keyval$8$32$has$for8b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8b$3(...) keyval$8$32$has$for8b$4(__VA_ARGS__)
#		define keyval$8$32$has$for8b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8b$match1(...) 1
#		define keyval$8$32$has$for8c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8c$1(...) keyval$8$32$has$for8c$2(__VA_ARGS__)
#		define keyval$8$32$has$for8c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8c$3(...) keyval$8$32$has$for8c$4(__VA_ARGS__)
#		define keyval$8$32$has$for8c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8c$match1(...) 1
#		define keyval$8$32$has$for8d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8d$1(...) keyval$8$32$has$for8d$2(__VA_ARGS__)
#		define keyval$8$32$has$for8d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8d$3(...) keyval$8$32$has$for8d$4(__VA_ARGS__)
#		define keyval$8$32$has$for8d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8d$match1(...) 1
#		define keyval$8$32$has$for8e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8e$1(...) keyval$8$32$has$for8e$2(__VA_ARGS__)
#		define keyval$8$32$has$for8e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8e$3(...) keyval$8$32$has$for8e$4(__VA_ARGS__)
#		define keyval$8$32$has$for8e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8e$match1(...) 1
#		define keyval$8$32$has$for8f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8f$1(...) keyval$8$32$has$for8f$2(__VA_ARGS__)
#		define keyval$8$32$has$for8f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8f$3(...) keyval$8$32$has$for8f$4(__VA_ARGS__)
#		define keyval$8$32$has$for8f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for8f$match1(...) 1
#		define keyval$8$32$has$for90(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for90$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for90$1(...) keyval$8$32$has$for90$2(__VA_ARGS__)
#		define keyval$8$32$has$for90$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for90$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for90$3(...) keyval$8$32$has$for90$4(__VA_ARGS__)
#		define keyval$8$32$has$for90$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for90$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for90$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for8f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for90$match1(...) 1
#		define keyval$8$32$has$for91(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for91$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for91$1(...) keyval$8$32$has$for91$2(__VA_ARGS__)
#		define keyval$8$32$has$for91$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for91$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for91$3(...) keyval$8$32$has$for91$4(__VA_ARGS__)
#		define keyval$8$32$has$for91$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for91$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for91$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for90(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for91$match1(...) 1
#		define keyval$8$32$has$for92(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for92$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for92$1(...) keyval$8$32$has$for92$2(__VA_ARGS__)
#		define keyval$8$32$has$for92$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for92$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for92$3(...) keyval$8$32$has$for92$4(__VA_ARGS__)
#		define keyval$8$32$has$for92$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for92$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for92$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for91(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for92$match1(...) 1
#		define keyval$8$32$has$for93(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for93$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for93$1(...) keyval$8$32$has$for93$2(__VA_ARGS__)
#		define keyval$8$32$has$for93$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for93$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for93$3(...) keyval$8$32$has$for93$4(__VA_ARGS__)
#		define keyval$8$32$has$for93$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for93$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for93$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for92(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for93$match1(...) 1
#		define keyval$8$32$has$for94(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for94$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for94$1(...) keyval$8$32$has$for94$2(__VA_ARGS__)
#		define keyval$8$32$has$for94$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for94$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for94$3(...) keyval$8$32$has$for94$4(__VA_ARGS__)
#		define keyval$8$32$has$for94$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for94$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for94$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for93(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for94$match1(...) 1
#		define keyval$8$32$has$for95(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for95$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for95$1(...) keyval$8$32$has$for95$2(__VA_ARGS__)
#		define keyval$8$32$has$for95$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for95$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for95$3(...) keyval$8$32$has$for95$4(__VA_ARGS__)
#		define keyval$8$32$has$for95$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for95$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for95$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for94(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for95$match1(...) 1
#		define keyval$8$32$has$for96(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for96$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for96$1(...) keyval$8$32$has$for96$2(__VA_ARGS__)
#		define keyval$8$32$has$for96$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for96$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for96$3(...) keyval$8$32$has$for96$4(__VA_ARGS__)
#		define keyval$8$32$has$for96$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for96$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for96$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for95(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for96$match1(...) 1
#		define keyval$8$32$has$for97(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for97$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for97$1(...) keyval$8$32$has$for97$2(__VA_ARGS__)
#		define keyval$8$32$has$for97$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for97$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for97$3(...) keyval$8$32$has$for97$4(__VA_ARGS__)
#		define keyval$8$32$has$for97$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for97$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for97$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for96(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for97$match1(...) 1
#		define keyval$8$32$has$for98(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for98$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for98$1(...) keyval$8$32$has$for98$2(__VA_ARGS__)
#		define keyval$8$32$has$for98$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for98$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for98$3(...) keyval$8$32$has$for98$4(__VA_ARGS__)
#		define keyval$8$32$has$for98$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for98$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for98$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for97(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for98$match1(...) 1
#		define keyval$8$32$has$for99(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for99$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for99$1(...) keyval$8$32$has$for99$2(__VA_ARGS__)
#		define keyval$8$32$has$for99$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for99$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for99$3(...) keyval$8$32$has$for99$4(__VA_ARGS__)
#		define keyval$8$32$has$for99$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for99$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for99$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for98(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for99$match1(...) 1
#		define keyval$8$32$has$for9a(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9a$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9a$1(...) keyval$8$32$has$for9a$2(__VA_ARGS__)
#		define keyval$8$32$has$for9a$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9a$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9a$3(...) keyval$8$32$has$for9a$4(__VA_ARGS__)
#		define keyval$8$32$has$for9a$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9a$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9a$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for99(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9a$match1(...) 1
#		define keyval$8$32$has$for9b(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9b$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9b$1(...) keyval$8$32$has$for9b$2(__VA_ARGS__)
#		define keyval$8$32$has$for9b$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9b$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9b$3(...) keyval$8$32$has$for9b$4(__VA_ARGS__)
#		define keyval$8$32$has$for9b$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9b$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9b$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9a(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9b$match1(...) 1
#		define keyval$8$32$has$for9c(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9c$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9c$1(...) keyval$8$32$has$for9c$2(__VA_ARGS__)
#		define keyval$8$32$has$for9c$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9c$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9c$3(...) keyval$8$32$has$for9c$4(__VA_ARGS__)
#		define keyval$8$32$has$for9c$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9c$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9c$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9b(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9c$match1(...) 1
#		define keyval$8$32$has$for9d(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9d$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9d$1(...) keyval$8$32$has$for9d$2(__VA_ARGS__)
#		define keyval$8$32$has$for9d$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9d$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9d$3(...) keyval$8$32$has$for9d$4(__VA_ARGS__)
#		define keyval$8$32$has$for9d$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9d$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9d$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9c(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9d$match1(...) 1
#		define keyval$8$32$has$for9e(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9e$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9e$1(...) keyval$8$32$has$for9e$2(__VA_ARGS__)
#		define keyval$8$32$has$for9e$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9e$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9e$3(...) keyval$8$32$has$for9e$4(__VA_ARGS__)
#		define keyval$8$32$has$for9e$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9e$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9e$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9d(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9e$match1(...) 1
#		define keyval$8$32$has$for9f(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9f$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9f$1(...) keyval$8$32$has$for9f$2(__VA_ARGS__)
#		define keyval$8$32$has$for9f$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9f$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9f$3(...) keyval$8$32$has$for9f$4(__VA_ARGS__)
#		define keyval$8$32$has$for9f$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9f$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9f$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9e(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$for9f$match1(...) 1
#		define keyval$8$32$has$fora0(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora0$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora0$1(...) keyval$8$32$has$fora0$2(__VA_ARGS__)
#		define keyval$8$32$has$fora0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora0$3(...) keyval$8$32$has$fora0$4(__VA_ARGS__)
#		define keyval$8$32$has$fora0$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora0$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora0$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$for9f(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora0$match1(...) 1
#		define keyval$8$32$has$fora1(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora1$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora1$1(...) keyval$8$32$has$fora1$2(__VA_ARGS__)
#		define keyval$8$32$has$fora1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora1$3(...) keyval$8$32$has$fora1$4(__VA_ARGS__)
#		define keyval$8$32$has$fora1$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora1$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora1$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora1$match1(...) 1
#		define keyval$8$32$has$fora2(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora2$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora2$1(...) keyval$8$32$has$fora2$2(__VA_ARGS__)
#		define keyval$8$32$has$fora2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora2$3(...) keyval$8$32$has$fora2$4(__VA_ARGS__)
#		define keyval$8$32$has$fora2$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora2$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora2$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora1(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora2$match1(...) 1
#		define keyval$8$32$has$fora3(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora3$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora3$1(...) keyval$8$32$has$fora3$2(__VA_ARGS__)
#		define keyval$8$32$has$fora3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora3$3(...) keyval$8$32$has$fora3$4(__VA_ARGS__)
#		define keyval$8$32$has$fora3$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora3$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora3$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora2(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora3$match1(...) 1
#		define keyval$8$32$has$fora4(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora4$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora4$1(...) keyval$8$32$has$fora4$2(__VA_ARGS__)
#		define keyval$8$32$has$fora4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora4$3(...) keyval$8$32$has$fora4$4(__VA_ARGS__)
#		define keyval$8$32$has$fora4$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora4$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora4$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora3(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora4$match1(...) 1
#		define keyval$8$32$has$fora5(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora5$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora5$1(...) keyval$8$32$has$fora5$2(__VA_ARGS__)
#		define keyval$8$32$has$fora5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora5$3(...) keyval$8$32$has$fora5$4(__VA_ARGS__)
#		define keyval$8$32$has$fora5$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora5$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora5$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora4(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora5$match1(...) 1
#		define keyval$8$32$has$fora6(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora6$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora6$1(...) keyval$8$32$has$fora6$2(__VA_ARGS__)
#		define keyval$8$32$has$fora6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora6$3(...) keyval$8$32$has$fora6$4(__VA_ARGS__)
#		define keyval$8$32$has$fora6$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora6$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora6$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora5(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora6$match1(...) 1
#		define keyval$8$32$has$fora7(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora7$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora7$1(...) keyval$8$32$has$fora7$2(__VA_ARGS__)
#		define keyval$8$32$has$fora7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora7$3(...) keyval$8$32$has$fora7$4(__VA_ARGS__)
#		define keyval$8$32$has$fora7$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora7$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora7$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora6(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora7$match1(...) 1
#		define keyval$8$32$has$fora8(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora8$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora8$1(...) keyval$8$32$has$fora8$2(__VA_ARGS__)
#		define keyval$8$32$has$fora8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora8$3(...) keyval$8$32$has$fora8$4(__VA_ARGS__)
#		define keyval$8$32$has$fora8$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora8$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora8$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora7(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora8$match1(...) 1
#		define keyval$8$32$has$fora9(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora9$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora9$1(...) keyval$8$32$has$fora9$2(__VA_ARGS__)
#		define keyval$8$32$has$fora9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora9$3(...) keyval$8$32$has$fora9$4(__VA_ARGS__)
#		define keyval$8$32$has$fora9$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora9$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora9$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora8(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fora9$match1(...) 1
#		define keyval$8$32$has$foraa(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraa$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraa$1(...) keyval$8$32$has$foraa$2(__VA_ARGS__)
#		define keyval$8$32$has$foraa$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraa$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraa$3(...) keyval$8$32$has$foraa$4(__VA_ARGS__)
#		define keyval$8$32$has$foraa$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraa$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraa$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fora9(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraa$match1(...) 1
#		define keyval$8$32$has$forab(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forab$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forab$1(...) keyval$8$32$has$forab$2(__VA_ARGS__)
#		define keyval$8$32$has$forab$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forab$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forab$3(...) keyval$8$32$has$forab$4(__VA_ARGS__)
#		define keyval$8$32$has$forab$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forab$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forab$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraa(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forab$match1(...) 1
#		define keyval$8$32$has$forac(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forac$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forac$1(...) keyval$8$32$has$forac$2(__VA_ARGS__)
#		define keyval$8$32$has$forac$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forac$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forac$3(...) keyval$8$32$has$forac$4(__VA_ARGS__)
#		define keyval$8$32$has$forac$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forac$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forac$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forab(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forac$match1(...) 1
#		define keyval$8$32$has$forad(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forad$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forad$1(...) keyval$8$32$has$forad$2(__VA_ARGS__)
#		define keyval$8$32$has$forad$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forad$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forad$3(...) keyval$8$32$has$forad$4(__VA_ARGS__)
#		define keyval$8$32$has$forad$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forad$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forad$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forac(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forad$match1(...) 1
#		define keyval$8$32$has$forae(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forae$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forae$1(...) keyval$8$32$has$forae$2(__VA_ARGS__)
#		define keyval$8$32$has$forae$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forae$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forae$3(...) keyval$8$32$has$forae$4(__VA_ARGS__)
#		define keyval$8$32$has$forae$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forae$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forae$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forad(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forae$match1(...) 1
#		define keyval$8$32$has$foraf(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraf$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraf$1(...) keyval$8$32$has$foraf$2(__VA_ARGS__)
#		define keyval$8$32$has$foraf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraf$3(...) keyval$8$32$has$foraf$4(__VA_ARGS__)
#		define keyval$8$32$has$foraf$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraf$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraf$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forae(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foraf$match1(...) 1
#		define keyval$8$32$has$forb0(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb0$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb0$1(...) keyval$8$32$has$forb0$2(__VA_ARGS__)
#		define keyval$8$32$has$forb0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb0$3(...) keyval$8$32$has$forb0$4(__VA_ARGS__)
#		define keyval$8$32$has$forb0$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb0$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb0$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foraf(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb0$match1(...) 1
#		define keyval$8$32$has$forb1(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb1$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb1$1(...) keyval$8$32$has$forb1$2(__VA_ARGS__)
#		define keyval$8$32$has$forb1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb1$3(...) keyval$8$32$has$forb1$4(__VA_ARGS__)
#		define keyval$8$32$has$forb1$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb1$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb1$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb1$match1(...) 1
#		define keyval$8$32$has$forb2(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb2$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb2$1(...) keyval$8$32$has$forb2$2(__VA_ARGS__)
#		define keyval$8$32$has$forb2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb2$3(...) keyval$8$32$has$forb2$4(__VA_ARGS__)
#		define keyval$8$32$has$forb2$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb2$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb2$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb1(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb2$match1(...) 1
#		define keyval$8$32$has$forb3(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb3$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb3$1(...) keyval$8$32$has$forb3$2(__VA_ARGS__)
#		define keyval$8$32$has$forb3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb3$3(...) keyval$8$32$has$forb3$4(__VA_ARGS__)
#		define keyval$8$32$has$forb3$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb3$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb3$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb2(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb3$match1(...) 1
#		define keyval$8$32$has$forb4(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb4$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb4$1(...) keyval$8$32$has$forb4$2(__VA_ARGS__)
#		define keyval$8$32$has$forb4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb4$3(...) keyval$8$32$has$forb4$4(__VA_ARGS__)
#		define keyval$8$32$has$forb4$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb4$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb4$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb3(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb4$match1(...) 1
#		define keyval$8$32$has$forb5(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb5$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb5$1(...) keyval$8$32$has$forb5$2(__VA_ARGS__)
#		define keyval$8$32$has$forb5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb5$3(...) keyval$8$32$has$forb5$4(__VA_ARGS__)
#		define keyval$8$32$has$forb5$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb5$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb5$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb4(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb5$match1(...) 1
#		define keyval$8$32$has$forb6(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb6$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb6$1(...) keyval$8$32$has$forb6$2(__VA_ARGS__)
#		define keyval$8$32$has$forb6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb6$3(...) keyval$8$32$has$forb6$4(__VA_ARGS__)
#		define keyval$8$32$has$forb6$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb6$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb6$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb5(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb6$match1(...) 1
#		define keyval$8$32$has$forb7(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb7$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb7$1(...) keyval$8$32$has$forb7$2(__VA_ARGS__)
#		define keyval$8$32$has$forb7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb7$3(...) keyval$8$32$has$forb7$4(__VA_ARGS__)
#		define keyval$8$32$has$forb7$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb7$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb7$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb6(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb7$match1(...) 1
#		define keyval$8$32$has$forb8(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb8$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb8$1(...) keyval$8$32$has$forb8$2(__VA_ARGS__)
#		define keyval$8$32$has$forb8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb8$3(...) keyval$8$32$has$forb8$4(__VA_ARGS__)
#		define keyval$8$32$has$forb8$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb8$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb8$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb7(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb8$match1(...) 1
#		define keyval$8$32$has$forb9(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb9$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb9$1(...) keyval$8$32$has$forb9$2(__VA_ARGS__)
#		define keyval$8$32$has$forb9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb9$3(...) keyval$8$32$has$forb9$4(__VA_ARGS__)
#		define keyval$8$32$has$forb9$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb9$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb9$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb8(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forb9$match1(...) 1
#		define keyval$8$32$has$forba(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forba$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forba$1(...) keyval$8$32$has$forba$2(__VA_ARGS__)
#		define keyval$8$32$has$forba$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forba$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forba$3(...) keyval$8$32$has$forba$4(__VA_ARGS__)
#		define keyval$8$32$has$forba$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forba$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forba$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forb9(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forba$match1(...) 1
#		define keyval$8$32$has$forbb(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbb$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbb$1(...) keyval$8$32$has$forbb$2(__VA_ARGS__)
#		define keyval$8$32$has$forbb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbb$3(...) keyval$8$32$has$forbb$4(__VA_ARGS__)
#		define keyval$8$32$has$forbb$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbb$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbb$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forba(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbb$match1(...) 1
#		define keyval$8$32$has$forbc(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbc$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbc$1(...) keyval$8$32$has$forbc$2(__VA_ARGS__)
#		define keyval$8$32$has$forbc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbc$3(...) keyval$8$32$has$forbc$4(__VA_ARGS__)
#		define keyval$8$32$has$forbc$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbc$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbc$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbb(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbc$match1(...) 1
#		define keyval$8$32$has$forbd(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbd$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbd$1(...) keyval$8$32$has$forbd$2(__VA_ARGS__)
#		define keyval$8$32$has$forbd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbd$3(...) keyval$8$32$has$forbd$4(__VA_ARGS__)
#		define keyval$8$32$has$forbd$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbd$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbd$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbc(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbd$match1(...) 1
#		define keyval$8$32$has$forbe(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbe$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbe$1(...) keyval$8$32$has$forbe$2(__VA_ARGS__)
#		define keyval$8$32$has$forbe$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbe$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbe$3(...) keyval$8$32$has$forbe$4(__VA_ARGS__)
#		define keyval$8$32$has$forbe$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbe$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbe$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbd(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbe$match1(...) 1
#		define keyval$8$32$has$forbf(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbf$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbf$1(...) keyval$8$32$has$forbf$2(__VA_ARGS__)
#		define keyval$8$32$has$forbf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbf$3(...) keyval$8$32$has$forbf$4(__VA_ARGS__)
#		define keyval$8$32$has$forbf$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbf$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbf$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbe(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forbf$match1(...) 1
#		define keyval$8$32$has$forc0(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc0$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc0$1(...) keyval$8$32$has$forc0$2(__VA_ARGS__)
#		define keyval$8$32$has$forc0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc0$3(...) keyval$8$32$has$forc0$4(__VA_ARGS__)
#		define keyval$8$32$has$forc0$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc0$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc0$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forbf(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc0$match1(...) 1
#		define keyval$8$32$has$forc1(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc1$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc1$1(...) keyval$8$32$has$forc1$2(__VA_ARGS__)
#		define keyval$8$32$has$forc1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc1$3(...) keyval$8$32$has$forc1$4(__VA_ARGS__)
#		define keyval$8$32$has$forc1$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc1$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc1$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc1$match1(...) 1
#		define keyval$8$32$has$forc2(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc2$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc2$1(...) keyval$8$32$has$forc2$2(__VA_ARGS__)
#		define keyval$8$32$has$forc2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc2$3(...) keyval$8$32$has$forc2$4(__VA_ARGS__)
#		define keyval$8$32$has$forc2$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc2$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc2$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc1(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc2$match1(...) 1
#		define keyval$8$32$has$forc3(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc3$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc3$1(...) keyval$8$32$has$forc3$2(__VA_ARGS__)
#		define keyval$8$32$has$forc3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc3$3(...) keyval$8$32$has$forc3$4(__VA_ARGS__)
#		define keyval$8$32$has$forc3$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc3$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc3$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc2(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc3$match1(...) 1
#		define keyval$8$32$has$forc4(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc4$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc4$1(...) keyval$8$32$has$forc4$2(__VA_ARGS__)
#		define keyval$8$32$has$forc4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc4$3(...) keyval$8$32$has$forc4$4(__VA_ARGS__)
#		define keyval$8$32$has$forc4$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc4$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc4$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc3(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc4$match1(...) 1
#		define keyval$8$32$has$forc5(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc5$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc5$1(...) keyval$8$32$has$forc5$2(__VA_ARGS__)
#		define keyval$8$32$has$forc5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc5$3(...) keyval$8$32$has$forc5$4(__VA_ARGS__)
#		define keyval$8$32$has$forc5$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc5$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc5$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc4(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc5$match1(...) 1
#		define keyval$8$32$has$forc6(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc6$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc6$1(...) keyval$8$32$has$forc6$2(__VA_ARGS__)
#		define keyval$8$32$has$forc6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc6$3(...) keyval$8$32$has$forc6$4(__VA_ARGS__)
#		define keyval$8$32$has$forc6$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc6$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc6$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc5(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc6$match1(...) 1
#		define keyval$8$32$has$forc7(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc7$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc7$1(...) keyval$8$32$has$forc7$2(__VA_ARGS__)
#		define keyval$8$32$has$forc7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc7$3(...) keyval$8$32$has$forc7$4(__VA_ARGS__)
#		define keyval$8$32$has$forc7$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc7$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc7$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc6(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc7$match1(...) 1
#		define keyval$8$32$has$forc8(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc8$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc8$1(...) keyval$8$32$has$forc8$2(__VA_ARGS__)
#		define keyval$8$32$has$forc8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc8$3(...) keyval$8$32$has$forc8$4(__VA_ARGS__)
#		define keyval$8$32$has$forc8$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc8$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc8$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc7(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc8$match1(...) 1
#		define keyval$8$32$has$forc9(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc9$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc9$1(...) keyval$8$32$has$forc9$2(__VA_ARGS__)
#		define keyval$8$32$has$forc9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc9$3(...) keyval$8$32$has$forc9$4(__VA_ARGS__)
#		define keyval$8$32$has$forc9$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc9$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc9$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc8(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forc9$match1(...) 1
#		define keyval$8$32$has$forca(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forca$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forca$1(...) keyval$8$32$has$forca$2(__VA_ARGS__)
#		define keyval$8$32$has$forca$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forca$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forca$3(...) keyval$8$32$has$forca$4(__VA_ARGS__)
#		define keyval$8$32$has$forca$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forca$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forca$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forc9(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forca$match1(...) 1
#		define keyval$8$32$has$forcb(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcb$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcb$1(...) keyval$8$32$has$forcb$2(__VA_ARGS__)
#		define keyval$8$32$has$forcb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcb$3(...) keyval$8$32$has$forcb$4(__VA_ARGS__)
#		define keyval$8$32$has$forcb$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcb$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcb$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forca(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcb$match1(...) 1
#		define keyval$8$32$has$forcc(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcc$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcc$1(...) keyval$8$32$has$forcc$2(__VA_ARGS__)
#		define keyval$8$32$has$forcc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcc$3(...) keyval$8$32$has$forcc$4(__VA_ARGS__)
#		define keyval$8$32$has$forcc$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcc$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcc$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcb(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcc$match1(...) 1
#		define keyval$8$32$has$forcd(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcd$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcd$1(...) keyval$8$32$has$forcd$2(__VA_ARGS__)
#		define keyval$8$32$has$forcd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcd$3(...) keyval$8$32$has$forcd$4(__VA_ARGS__)
#		define keyval$8$32$has$forcd$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcd$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcd$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcc(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcd$match1(...) 1
#		define keyval$8$32$has$force(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$force$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$force$1(...) keyval$8$32$has$force$2(__VA_ARGS__)
#		define keyval$8$32$has$force$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$force$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$force$3(...) keyval$8$32$has$force$4(__VA_ARGS__)
#		define keyval$8$32$has$force$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$force$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$force$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcd(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$force$match1(...) 1
#		define keyval$8$32$has$forcf(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcf$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcf$1(...) keyval$8$32$has$forcf$2(__VA_ARGS__)
#		define keyval$8$32$has$forcf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcf$3(...) keyval$8$32$has$forcf$4(__VA_ARGS__)
#		define keyval$8$32$has$forcf$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcf$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcf$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$force(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forcf$match1(...) 1
#		define keyval$8$32$has$ford0(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford0$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford0$1(...) keyval$8$32$has$ford0$2(__VA_ARGS__)
#		define keyval$8$32$has$ford0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford0$3(...) keyval$8$32$has$ford0$4(__VA_ARGS__)
#		define keyval$8$32$has$ford0$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford0$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford0$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forcf(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford0$match1(...) 1
#		define keyval$8$32$has$ford1(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford1$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford1$1(...) keyval$8$32$has$ford1$2(__VA_ARGS__)
#		define keyval$8$32$has$ford1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford1$3(...) keyval$8$32$has$ford1$4(__VA_ARGS__)
#		define keyval$8$32$has$ford1$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford1$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford1$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford1$match1(...) 1
#		define keyval$8$32$has$ford2(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford2$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford2$1(...) keyval$8$32$has$ford2$2(__VA_ARGS__)
#		define keyval$8$32$has$ford2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford2$3(...) keyval$8$32$has$ford2$4(__VA_ARGS__)
#		define keyval$8$32$has$ford2$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford2$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford2$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford1(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford2$match1(...) 1
#		define keyval$8$32$has$ford3(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford3$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford3$1(...) keyval$8$32$has$ford3$2(__VA_ARGS__)
#		define keyval$8$32$has$ford3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford3$3(...) keyval$8$32$has$ford3$4(__VA_ARGS__)
#		define keyval$8$32$has$ford3$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford3$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford3$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford2(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford3$match1(...) 1
#		define keyval$8$32$has$ford4(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford4$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford4$1(...) keyval$8$32$has$ford4$2(__VA_ARGS__)
#		define keyval$8$32$has$ford4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford4$3(...) keyval$8$32$has$ford4$4(__VA_ARGS__)
#		define keyval$8$32$has$ford4$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford4$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford4$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford3(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford4$match1(...) 1
#		define keyval$8$32$has$ford5(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford5$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford5$1(...) keyval$8$32$has$ford5$2(__VA_ARGS__)
#		define keyval$8$32$has$ford5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford5$3(...) keyval$8$32$has$ford5$4(__VA_ARGS__)
#		define keyval$8$32$has$ford5$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford5$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford5$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford4(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford5$match1(...) 1
#		define keyval$8$32$has$ford6(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford6$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford6$1(...) keyval$8$32$has$ford6$2(__VA_ARGS__)
#		define keyval$8$32$has$ford6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford6$3(...) keyval$8$32$has$ford6$4(__VA_ARGS__)
#		define keyval$8$32$has$ford6$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford6$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford6$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford5(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford6$match1(...) 1
#		define keyval$8$32$has$ford7(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford7$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford7$1(...) keyval$8$32$has$ford7$2(__VA_ARGS__)
#		define keyval$8$32$has$ford7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford7$3(...) keyval$8$32$has$ford7$4(__VA_ARGS__)
#		define keyval$8$32$has$ford7$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford7$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford7$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford6(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford7$match1(...) 1
#		define keyval$8$32$has$ford8(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford8$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford8$1(...) keyval$8$32$has$ford8$2(__VA_ARGS__)
#		define keyval$8$32$has$ford8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford8$3(...) keyval$8$32$has$ford8$4(__VA_ARGS__)
#		define keyval$8$32$has$ford8$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford8$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford8$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford7(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford8$match1(...) 1
#		define keyval$8$32$has$ford9(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford9$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford9$1(...) keyval$8$32$has$ford9$2(__VA_ARGS__)
#		define keyval$8$32$has$ford9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford9$3(...) keyval$8$32$has$ford9$4(__VA_ARGS__)
#		define keyval$8$32$has$ford9$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford9$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford9$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford8(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$ford9$match1(...) 1
#		define keyval$8$32$has$forda(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forda$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forda$1(...) keyval$8$32$has$forda$2(__VA_ARGS__)
#		define keyval$8$32$has$forda$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forda$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forda$3(...) keyval$8$32$has$forda$4(__VA_ARGS__)
#		define keyval$8$32$has$forda$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forda$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forda$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$ford9(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forda$match1(...) 1
#		define keyval$8$32$has$fordb(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordb$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordb$1(...) keyval$8$32$has$fordb$2(__VA_ARGS__)
#		define keyval$8$32$has$fordb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordb$3(...) keyval$8$32$has$fordb$4(__VA_ARGS__)
#		define keyval$8$32$has$fordb$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordb$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordb$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forda(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordb$match1(...) 1
#		define keyval$8$32$has$fordc(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordc$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordc$1(...) keyval$8$32$has$fordc$2(__VA_ARGS__)
#		define keyval$8$32$has$fordc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordc$3(...) keyval$8$32$has$fordc$4(__VA_ARGS__)
#		define keyval$8$32$has$fordc$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordc$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordc$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordb(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordc$match1(...) 1
#		define keyval$8$32$has$fordd(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordd$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordd$1(...) keyval$8$32$has$fordd$2(__VA_ARGS__)
#		define keyval$8$32$has$fordd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordd$3(...) keyval$8$32$has$fordd$4(__VA_ARGS__)
#		define keyval$8$32$has$fordd$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordd$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordd$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordc(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordd$match1(...) 1
#		define keyval$8$32$has$forde(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forde$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forde$1(...) keyval$8$32$has$forde$2(__VA_ARGS__)
#		define keyval$8$32$has$forde$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forde$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forde$3(...) keyval$8$32$has$forde$4(__VA_ARGS__)
#		define keyval$8$32$has$forde$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forde$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forde$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordd(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forde$match1(...) 1
#		define keyval$8$32$has$fordf(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordf$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordf$1(...) keyval$8$32$has$fordf$2(__VA_ARGS__)
#		define keyval$8$32$has$fordf$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordf$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordf$3(...) keyval$8$32$has$fordf$4(__VA_ARGS__)
#		define keyval$8$32$has$fordf$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordf$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordf$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forde(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fordf$match1(...) 1
#		define keyval$8$32$has$fore0(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore0$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore0$1(...) keyval$8$32$has$fore0$2(__VA_ARGS__)
#		define keyval$8$32$has$fore0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore0$3(...) keyval$8$32$has$fore0$4(__VA_ARGS__)
#		define keyval$8$32$has$fore0$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore0$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore0$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fordf(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore0$match1(...) 1
#		define keyval$8$32$has$fore1(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore1$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore1$1(...) keyval$8$32$has$fore1$2(__VA_ARGS__)
#		define keyval$8$32$has$fore1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore1$3(...) keyval$8$32$has$fore1$4(__VA_ARGS__)
#		define keyval$8$32$has$fore1$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore1$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore1$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore1$match1(...) 1
#		define keyval$8$32$has$fore2(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore2$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore2$1(...) keyval$8$32$has$fore2$2(__VA_ARGS__)
#		define keyval$8$32$has$fore2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore2$3(...) keyval$8$32$has$fore2$4(__VA_ARGS__)
#		define keyval$8$32$has$fore2$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore2$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore2$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore1(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore2$match1(...) 1
#		define keyval$8$32$has$fore3(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore3$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore3$1(...) keyval$8$32$has$fore3$2(__VA_ARGS__)
#		define keyval$8$32$has$fore3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore3$3(...) keyval$8$32$has$fore3$4(__VA_ARGS__)
#		define keyval$8$32$has$fore3$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore3$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore3$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore2(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore3$match1(...) 1
#		define keyval$8$32$has$fore4(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore4$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore4$1(...) keyval$8$32$has$fore4$2(__VA_ARGS__)
#		define keyval$8$32$has$fore4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore4$3(...) keyval$8$32$has$fore4$4(__VA_ARGS__)
#		define keyval$8$32$has$fore4$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore4$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore4$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore3(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore4$match1(...) 1
#		define keyval$8$32$has$fore5(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore5$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore5$1(...) keyval$8$32$has$fore5$2(__VA_ARGS__)
#		define keyval$8$32$has$fore5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore5$3(...) keyval$8$32$has$fore5$4(__VA_ARGS__)
#		define keyval$8$32$has$fore5$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore5$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore5$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore4(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore5$match1(...) 1
#		define keyval$8$32$has$fore6(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore6$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore6$1(...) keyval$8$32$has$fore6$2(__VA_ARGS__)
#		define keyval$8$32$has$fore6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore6$3(...) keyval$8$32$has$fore6$4(__VA_ARGS__)
#		define keyval$8$32$has$fore6$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore6$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore6$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore5(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore6$match1(...) 1
#		define keyval$8$32$has$fore7(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore7$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore7$1(...) keyval$8$32$has$fore7$2(__VA_ARGS__)
#		define keyval$8$32$has$fore7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore7$3(...) keyval$8$32$has$fore7$4(__VA_ARGS__)
#		define keyval$8$32$has$fore7$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore7$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore7$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore6(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore7$match1(...) 1
#		define keyval$8$32$has$fore8(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore8$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore8$1(...) keyval$8$32$has$fore8$2(__VA_ARGS__)
#		define keyval$8$32$has$fore8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore8$3(...) keyval$8$32$has$fore8$4(__VA_ARGS__)
#		define keyval$8$32$has$fore8$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore8$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore8$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore7(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore8$match1(...) 1
#		define keyval$8$32$has$fore9(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore9$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore9$1(...) keyval$8$32$has$fore9$2(__VA_ARGS__)
#		define keyval$8$32$has$fore9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore9$3(...) keyval$8$32$has$fore9$4(__VA_ARGS__)
#		define keyval$8$32$has$fore9$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore9$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore9$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore8(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fore9$match1(...) 1
#		define keyval$8$32$has$forea(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forea$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forea$1(...) keyval$8$32$has$forea$2(__VA_ARGS__)
#		define keyval$8$32$has$forea$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forea$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forea$3(...) keyval$8$32$has$forea$4(__VA_ARGS__)
#		define keyval$8$32$has$forea$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forea$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forea$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fore9(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forea$match1(...) 1
#		define keyval$8$32$has$foreb(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foreb$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foreb$1(...) keyval$8$32$has$foreb$2(__VA_ARGS__)
#		define keyval$8$32$has$foreb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foreb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foreb$3(...) keyval$8$32$has$foreb$4(__VA_ARGS__)
#		define keyval$8$32$has$foreb$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foreb$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foreb$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forea(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foreb$match1(...) 1
#		define keyval$8$32$has$forec(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forec$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forec$1(...) keyval$8$32$has$forec$2(__VA_ARGS__)
#		define keyval$8$32$has$forec$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forec$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forec$3(...) keyval$8$32$has$forec$4(__VA_ARGS__)
#		define keyval$8$32$has$forec$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forec$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forec$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foreb(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forec$match1(...) 1
#		define keyval$8$32$has$fored(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fored$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fored$1(...) keyval$8$32$has$fored$2(__VA_ARGS__)
#		define keyval$8$32$has$fored$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fored$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fored$3(...) keyval$8$32$has$fored$4(__VA_ARGS__)
#		define keyval$8$32$has$fored$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fored$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fored$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forec(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$fored$match1(...) 1
#		define keyval$8$32$has$foree(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foree$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foree$1(...) keyval$8$32$has$foree$2(__VA_ARGS__)
#		define keyval$8$32$has$foree$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foree$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foree$3(...) keyval$8$32$has$foree$4(__VA_ARGS__)
#		define keyval$8$32$has$foree$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foree$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foree$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$fored(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foree$match1(...) 1
#		define keyval$8$32$has$foref(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foref$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foref$1(...) keyval$8$32$has$foref$2(__VA_ARGS__)
#		define keyval$8$32$has$foref$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foref$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foref$3(...) keyval$8$32$has$foref$4(__VA_ARGS__)
#		define keyval$8$32$has$foref$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foref$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foref$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foree(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$foref$match1(...) 1
#		define keyval$8$32$has$forf0(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf0$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf0$1(...) keyval$8$32$has$forf0$2(__VA_ARGS__)
#		define keyval$8$32$has$forf0$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf0$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf0$3(...) keyval$8$32$has$forf0$4(__VA_ARGS__)
#		define keyval$8$32$has$forf0$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf0$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf0$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$foref(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf0$match1(...) 1
#		define keyval$8$32$has$forf1(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf1$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf1$1(...) keyval$8$32$has$forf1$2(__VA_ARGS__)
#		define keyval$8$32$has$forf1$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf1$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf1$3(...) keyval$8$32$has$forf1$4(__VA_ARGS__)
#		define keyval$8$32$has$forf1$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf1$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf1$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf1$match1(...) 1
#		define keyval$8$32$has$forf2(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf2$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf2$1(...) keyval$8$32$has$forf2$2(__VA_ARGS__)
#		define keyval$8$32$has$forf2$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf2$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf2$3(...) keyval$8$32$has$forf2$4(__VA_ARGS__)
#		define keyval$8$32$has$forf2$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf2$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf2$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf1(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf2$match1(...) 1
#		define keyval$8$32$has$forf3(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf3$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf3$1(...) keyval$8$32$has$forf3$2(__VA_ARGS__)
#		define keyval$8$32$has$forf3$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf3$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf3$3(...) keyval$8$32$has$forf3$4(__VA_ARGS__)
#		define keyval$8$32$has$forf3$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf3$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf3$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf2(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf3$match1(...) 1
#		define keyval$8$32$has$forf4(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf4$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf4$1(...) keyval$8$32$has$forf4$2(__VA_ARGS__)
#		define keyval$8$32$has$forf4$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf4$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf4$3(...) keyval$8$32$has$forf4$4(__VA_ARGS__)
#		define keyval$8$32$has$forf4$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf4$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf4$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf3(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf4$match1(...) 1
#		define keyval$8$32$has$forf5(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf5$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf5$1(...) keyval$8$32$has$forf5$2(__VA_ARGS__)
#		define keyval$8$32$has$forf5$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf5$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf5$3(...) keyval$8$32$has$forf5$4(__VA_ARGS__)
#		define keyval$8$32$has$forf5$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf5$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf5$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf4(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf5$match1(...) 1
#		define keyval$8$32$has$forf6(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf6$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf6$1(...) keyval$8$32$has$forf6$2(__VA_ARGS__)
#		define keyval$8$32$has$forf6$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf6$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf6$3(...) keyval$8$32$has$forf6$4(__VA_ARGS__)
#		define keyval$8$32$has$forf6$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf6$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf6$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf5(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf6$match1(...) 1
#		define keyval$8$32$has$forf7(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf7$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf7$1(...) keyval$8$32$has$forf7$2(__VA_ARGS__)
#		define keyval$8$32$has$forf7$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf7$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf7$3(...) keyval$8$32$has$forf7$4(__VA_ARGS__)
#		define keyval$8$32$has$forf7$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf7$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf7$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf6(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf7$match1(...) 1
#		define keyval$8$32$has$forf8(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf8$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf8$1(...) keyval$8$32$has$forf8$2(__VA_ARGS__)
#		define keyval$8$32$has$forf8$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf8$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf8$3(...) keyval$8$32$has$forf8$4(__VA_ARGS__)
#		define keyval$8$32$has$forf8$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf8$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf8$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf7(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf8$match1(...) 1
#		define keyval$8$32$has$forf9(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf9$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf9$1(...) keyval$8$32$has$forf9$2(__VA_ARGS__)
#		define keyval$8$32$has$forf9$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf9$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf9$3(...) keyval$8$32$has$forf9$4(__VA_ARGS__)
#		define keyval$8$32$has$forf9$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf9$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf9$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf8(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forf9$match1(...) 1
#		define keyval$8$32$has$forfa(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfa$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfa$1(...) keyval$8$32$has$forfa$2(__VA_ARGS__)
#		define keyval$8$32$has$forfa$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfa$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfa$3(...) keyval$8$32$has$forfa$4(__VA_ARGS__)
#		define keyval$8$32$has$forfa$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfa$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfa$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forf9(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfa$match1(...) 1
#		define keyval$8$32$has$forfb(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfb$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfb$1(...) keyval$8$32$has$forfb$2(__VA_ARGS__)
#		define keyval$8$32$has$forfb$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfb$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfb$3(...) keyval$8$32$has$forfb$4(__VA_ARGS__)
#		define keyval$8$32$has$forfb$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfb$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfb$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfa(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfb$match1(...) 1
#		define keyval$8$32$has$forfc(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfc$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfc$1(...) keyval$8$32$has$forfc$2(__VA_ARGS__)
#		define keyval$8$32$has$forfc$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfc$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfc$3(...) keyval$8$32$has$forfc$4(__VA_ARGS__)
#		define keyval$8$32$has$forfc$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfc$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfc$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfb(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfc$match1(...) 1
#		define keyval$8$32$has$forfd(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfd$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfd$1(...) keyval$8$32$has$forfd$2(__VA_ARGS__)
#		define keyval$8$32$has$forfd$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfd$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfd$3(...) keyval$8$32$has$forfd$4(__VA_ARGS__)
#		define keyval$8$32$has$forfd$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfd$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfd$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfc(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfd$match1(...) 1
#		define keyval$8$32$has$forfe(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfe$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfe$1(...) keyval$8$32$has$forfe$2(__VA_ARGS__)
#		define keyval$8$32$has$forfe$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfe$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfe$3(...) keyval$8$32$has$forfe$4(__VA_ARGS__)
#		define keyval$8$32$has$forfe$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfe$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfe$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfd(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forfe$match1(...) 1
#		define keyval$8$32$has$forff(data,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forff$1(keyval$8$32$getentry(data),k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forff$1(...) keyval$8$32$has$forff$2(__VA_ARGS__)
#		define keyval$8$32$has$forff$2(k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0,v2b31,v2b30,v2b29,v2b28,v2b27,v2b26,v2b25,v2b24,v2b23,v2b22,v2b21,v2b20,v2b19,v2b18,v2b17,v2b16,v2b15,v2b14,v2b13,v2b12,v2b11,v2b10,v2b9,v2b8,v2b7,v2b6,v2b5,v2b4,v2b3,v2b2,v2b1,v2b0,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forff$3(i08$iseq(k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0,k2b7,k2b6,k2b5,k2b4,k2b3,k2b2,k2b1,k2b0),tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forff$3(...) keyval$8$32$has$forff$4(__VA_ARGS__)
#		define keyval$8$32$has$forff$4(eq,tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forff$match##eq(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forff$match0(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0) keyval$8$32$has$forfe(tail,k1b7,k1b6,k1b5,k1b4,k1b3,k1b2,k1b1,k1b0)
#		define keyval$8$32$has$forff$match1(...) 1
#		define keyval$8$32$new() (00,())
#		define likely prefix$bhtaken(),
#		define lock prefix$lock(),
#		define mem$disp$8to32(...) (00,00,00,__VA_ARGS__)
#		define mem$fixup(mhb,...) ppif(mhb,mem$fixup$1,mem$fixup$nobase)(mhb,__VA_ARGS__)
#		define mem$fixup$1(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) mem$fixup$2(mhb,mhi,mhs,bit$and(bit$not(mhd32),bit$or(mhd8,modrm$needsdisp(mb))),mhd32,mb,mi,ms,ppif(bit$or(mhd8,mhd32),md,(00)))
#		define mem$fixup$2(...) mem$fixup$3(__VA_ARGS__)
#		define mem$fixup$3(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) mem$fixup$4(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) error$if(bit$and(mhi,modrm$isinvalidindex(mi)), "invalid index register")
#		define mem$fixup$4(...) mem$fixup$5(__VA_ARGS__)
#		define mem$fixup$5(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) mem$fixup$6(mhb,bit$or(mhi,modrm$needssib(mb)),bit$or(mhs,modrm$needssib(mb)),mhd8,mhd32,mb,ppif(mhi,mi,04),ppif(mhs,ms,01),md)
#		define mem$fixup$6(...) (__VA_ARGS__)
#		define mem$fixup$nobase(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) (mhb,mhi,mhs,0,bit$or(mhd8,mhd32),mb,mi,ms,ppif(mhd8,mem$disp$8to32 md,md))
#		define mem$get$base(...) mem$get$base$1(__VA_ARGS__)
#		define mem$get$base$1(...) mem$get$base$2(__VA_ARGS__)
#		define mem$get$base$2(m) mem$get$base$of##m
#		define mem$get$base$ofmem(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem08(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem128(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem16(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem256(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem32(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem512(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem64(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$base$ofmem80(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhb,mb,00)
#		define mem$get$category(...) mem$get$category$1(__VA_ARGS__)
#		define mem$get$category$1(...) mem$get$category$2(__VA_ARGS__)
#		define mem$get$category$2(m) mem$get$category$of##m
#		define mem$get$category$3(...) mem$get$category$4(__VA_ARGS__)
#		define mem$get$category$4(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md,mneedsib,mneeddisp) mhb##mhi##mhs##mhd8##mhd32##mneedsib##mneeddisp
#		define mem$get$category$ofmem(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem08(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem128(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem16(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem256(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem32(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem512(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem64(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$category$ofmem80(...) mem$get$category$3(__VA_ARGS__,mem$needsib(__VA_ARGS__),mem$needdisp(__VA_ARGS__))
#		define mem$get$disp(...) mem$get$disp$1(__VA_ARGS__)
#		define mem$get$disp$1(...) mem$get$disp$2(__VA_ARGS__)
#		define mem$get$disp$2(m) mem$get$disp$of##m
#		define mem$get$disp$ofmem(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem08(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem128(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem16(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem256(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem32(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem512(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem64(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$disp$ofmem80(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) md
#		define mem$get$index(...) mem$get$index$1(__VA_ARGS__)
#		define mem$get$index$1(...) mem$get$index$2(__VA_ARGS__)
#		define mem$get$index$2(m) mem$get$index$of##m
#		define mem$get$index$ofmem(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem08(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem128(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem16(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem256(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem32(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem512(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem64(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$index$ofmem80(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ppif(mhi,mi,00)
#		define mem$get$scale(...) mem$get$scale$1(__VA_ARGS__)
#		define mem$get$scale$1(...) mem$get$scale$2(__VA_ARGS__)
#		define mem$get$scale$2(m) mem$get$scale$of##m
#		define mem$get$scale$ofmem(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem08(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem128(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem16(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem256(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem32(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem512(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem64(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$get$scale$ofmem80(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) ms
#		define mem$has$base(...) mem$has$base$1(__VA_ARGS__)
#		define mem$has$base$1(...) mem$has$base$2(__VA_ARGS__)
#		define mem$has$base$2(m) mem$has$base$of##m
#		define mem$has$base$ofmem(mhb,mhi,mhs,mhd8,mhd32,...) mhb
#		define mem$has$disp32(...) mem$has$disp32$1(__VA_ARGS__)
#		define mem$has$disp32$1(...) mem$has$disp32$2(__VA_ARGS__)
#		define mem$has$disp32$2(m) mem$has$disp32$of##m
#		define mem$has$disp32$ofmem(mhb,mhi,mhs,mhd8,mhd32,...) mhd32
#		define mem$has$disp8(...) mem$has$disp8$1(__VA_ARGS__)
#		define mem$has$disp8$1(...) mem$has$disp8$2(__VA_ARGS__)
#		define mem$has$disp8$2(m) mem$has$disp8$of##m
#		define mem$has$disp8$ofmem(mhb,mhi,mhs,mhd8,mhd32,...) mhd8
#		define mem$has$index(...) mem$has$index$1(__VA_ARGS__)
#		define mem$has$index$1(...) mem$has$index$2(__VA_ARGS__)
#		define mem$has$index$2(m) mem$has$index$of##m
#		define mem$has$index$ofmem(mhb,mhi,mhs,mhd8,mhd32,...) mhi
#		define mem$has$scale(...) mem$has$scale$1(__VA_ARGS__)
#		define mem$has$scale$1(...) mem$has$scale$2(__VA_ARGS__)
#		define mem$has$scale$2(m) mem$has$scale$of##m
#		define mem$has$scale$ofmem(mhb,mhi,mhs,mhd8,mhd32,...) mhs
#		define mem$needdisp(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) bit$or(mhd8,mhd32)
#		define mem$needsib(mhb,mhi,mhs,mhd8,mhd32,mb,mi,ms,md) mhi
#		define mem$with$bits(...) mem$with$bits$1(__VA_ARGS__)
#		define mem$with$bits$1(...) mem$with$bits$2(__VA_ARGS__)
#		define mem$with$bits$2(o) mem$with$bytes##o
#		define mem$with$bytes00 mem
#		define mem$with$bytes01 mem08
#		define mem$with$bytes02 mem16
#		define mem$with$bytes04 mem32
#		define mem$with$bytes08 mem64
#		define mem$with$bytes0a mem80
#		define mem$with$bytes10 mem128
#		define mem$with$bytes20 mem256
#		define mem$with$bytes40 mem512
#		define memattr$get$descr(...) memattr$get$descr$1(__VA_ARGS__)
#		define memattr$get$descr$1(...) memattr$get$descr$2(__VA_ARGS__)
#		define memattr$get$descr$2(x) memattr$get$descr$of##x
#		define memattr$get$descr$ofbase(...) base
#		define memattr$get$descr$ofdisp(...) disp
#		define memattr$get$descr$ofimm32(...) imm
#		define memattr$get$descr$ofindex(...) index
#		define memattr$get$descr$oflabel(...) label
#		define memattr$get$descr$ofoperandbytes(...) bits
#		define memattr$get$descr$ofreg64(...) reg
#		define memattr$get$descr$ofscale(...) scale
#		define memattr$get$value(...) memattr$get$value$1(__VA_ARGS__)
#		define memattr$get$value$1(...) memattr$get$value$2(__VA_ARGS__)
#		define memattr$get$value$2(x) memattr$get$value$of##x
#		define memattr$get$value$ofbase(...) __VA_ARGS__
#		define memattr$get$value$ofdisp(...) (__VA_ARGS__)
#		define memattr$get$value$ofimm32(...) (__VA_ARGS__)
#		define memattr$get$value$ofindex(...) __VA_ARGS__
#		define memattr$get$value$oflabel(...) (__VA_ARGS__)
#		define memattr$get$value$ofoperandbytes(...) __VA_ARGS__
#		define memattr$get$value$ofreg64(...) __VA_ARGS__
#		define memattr$get$value$ofscale(s) s
#		define meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) byte$eq(byte$fromhex(count(unpack(midisp))),0,0,0,0,0,1,0,0)
#		define meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) byte$eq(byte$fromhex(count(unpack(midisp))),0,0,0,0,0,0,0,1)
#		define meminfo$get$base(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mibase
#		define meminfo$get$bits(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mibits
#		define meminfo$get$disp(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) midisp
#		define meminfo$get$imm(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) miimm
#		define meminfo$get$index(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) miindex
#		define meminfo$get$label(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) milabel
#		define meminfo$get$reg(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mireg
#		define meminfo$get$scale(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) miscale
#		define meminfo$has$base(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihbase
#		define meminfo$has$bits(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihbits
#		define meminfo$has$disp(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihdisp
#		define meminfo$has$imm(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihimm
#		define meminfo$has$index(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihindex
#		define meminfo$has$label(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihlabel
#		define meminfo$has$reg(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihreg
#		define meminfo$has$scale(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mihscale
#		define meminfo$init 0,/*bits=*/00,0, ,0, ,0, ,0, ,0, ,0, ,0,
#		define meminfo$length00(...) meminfo$normalize(__VA_ARGS__)
#		define meminfo$length01(...) meminfo$length01$1(__VA_ARGS__)
#		define meminfo$length01$1(...) meminfo$length01$2(__VA_ARGS__)
#		define meminfo$length01$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, ma, ...) meminfo$length00(meminfo$update(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, memattr$get$descr(ma), memattr$get$value(ma)), __VA_ARGS__)
#		define meminfo$length02(...) meminfo$length02$1(__VA_ARGS__)
#		define meminfo$length02$1(...) meminfo$length02$2(__VA_ARGS__)
#		define meminfo$length02$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, ma, ...) meminfo$length01(meminfo$update(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, memattr$get$descr(ma), memattr$get$value(ma)), __VA_ARGS__)
#		define meminfo$length03(...) meminfo$length03$1(__VA_ARGS__)
#		define meminfo$length03$1(...) meminfo$length03$2(__VA_ARGS__)
#		define meminfo$length03$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, ma, ...) meminfo$length02(meminfo$update(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, memattr$get$descr(ma), memattr$get$value(ma)), __VA_ARGS__)
#		define meminfo$length04(...) meminfo$length04$1(__VA_ARGS__)
#		define meminfo$length04$1(...) meminfo$length04$2(__VA_ARGS__)
#		define meminfo$length04$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, ma, ...) meminfo$length03(meminfo$update(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, memattr$get$descr(ma), memattr$get$value(ma)), __VA_ARGS__)
#		define meminfo$length05(...) meminfo$length05$1(__VA_ARGS__)
#		define meminfo$length05$1(...) meminfo$length05$2(__VA_ARGS__)
#		define meminfo$length05$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, ma, ...) meminfo$length04(meminfo$update(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, memattr$get$descr(ma), memattr$get$value(ma)), __VA_ARGS__)
#		define meminfo$length06(...) meminfo$length06$1(__VA_ARGS__)
#		define meminfo$length06$1(...) meminfo$length06$2(__VA_ARGS__)
#		define meminfo$length06$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, ma, ...) meminfo$length05(meminfo$update(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, memattr$get$descr(ma), memattr$get$value(ma)), __VA_ARGS__)
#		define meminfo$normalize(...) meminfo$normalize$1(__VA_ARGS__)
#		define meminfo$normalize$1(...) meminfo$normalize$2(__VA_ARGS__)
#		define meminfo$normalize$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,_) meminfo$normalize$3(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) error$if(bit$and(mihdisp,bit$eq(meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm))), "displacement must be 1 byte or 4 bytes")
#		define meminfo$normalize$3(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) meminfo$normalize$4(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) error$if(bit$and(mihdisp,mihimm), "at() with both disp and imm")
#		define meminfo$normalize$4(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) meminfo$normalize$5(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,bit$or(mihdisp,mihimm),ppif(mihimm,miimm,midisp),0,)
#		define meminfo$normalize$5(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) meminfo$normalize$6(mihbits,mibits,bit$and(mihreg,mihbase),ppif(bit$and(mihreg,mihbase),mireg,),bit$or(mihreg,mihbase),ppif(mihbase,mibase,reg64(mireg)),mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,0,)
#		define meminfo$normalize$6(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) meminfo$normalize$7(mihbits,mibits,bit$and(mihreg,mihindex),ppif(bit$and(mihreg,mihindex),mireg,),mihbase,mibase,bit$or(mihreg,mihindex),ppif(mihindex,miindex,reg64(mireg)),mihscale,miscale,mihlabel,milabel,mihdisp,midisp,0,)
#		define meminfo$normalize$7(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) meminfo$normalize$8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) error$if(mihreg, "at() with reg64 and base and index")
#		define meminfo$normalize$8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) meminfo$normalize$e(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) error$if(bit$all3(mihscale,bit$not(mihindex),bit$not(bit$and(mihreg,mihbase))), "at() with scale but without index")
#		define meminfo$normalize$e(...) meminfo$normalize$f(__VA_ARGS__)
#		define meminfo$normalize$f(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) meminfo$with##mihreg##mihbase##mihindex##mihscale##mihlabel##mihdisp##mihimm(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm)
#		define meminfo$set$base(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) mihbits,mibits,mihreg,mireg,1,v,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm error$if(mihbase, "memattr base() specified twice")
#		define meminfo$set$bits(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) 1,v,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm error$if(mihbits, "memattr bits() specified twice")
#		define meminfo$set$disp(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,1,v,mihimm,miimm error$if(mihdisp, "memattr disp() specified twice")
#		define meminfo$set$imm(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,1,v error$if(mihimm, "memattr imm() specified twice")
#		define meminfo$set$index(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) mihbits,mibits,mihreg,mireg,mihbase,mibase,1,v,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm error$if(mihindex, "memattr index() specified twice")
#		define meminfo$set$label(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,1,v,mihdisp,midisp,mihimm,miimm error$if(mihlabel, "memattr label() specified twice")
#		define meminfo$set$reg(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) mihbits,mibits,1,v,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm error$if(mihreg, "memattr reg() specified twice")
#		define meminfo$set$scale(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm,v) mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,1,v,mihlabel,milabel,mihdisp,midisp,mihimm,miimm error$if(mihscale, "memattr scale() specified twice")
#		define meminfo$update(...) meminfo$update$1(__VA_ARGS__)
#		define meminfo$update$1(...) meminfo$update$2(__VA_ARGS__)
#		define meminfo$update$2(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, descr, ...) meminfo$set$##descr(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm, __VA_ARGS__)
#		define meminfo$with0000010(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(0,0,0,meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),,,,midisp)
#		define meminfo$with0000100(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) label milabel // TODO: combinations with label(...)
#		define meminfo$with0010010(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(1,0,0,meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),regencode(miindex) , 0, 1,midisp)
#		define meminfo$with0011010(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(0,1,1,meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm), ,regencode(miindex) ,miscale,midisp)
#		define meminfo$with0100000(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(1,0,0, 0, 0,regencode(mibase) , 0, 1,())
#		define meminfo$with0100010(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(1,0,0,meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),regencode(mibase) , 0, 1,midisp)
#		define meminfo$with0110000(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(1,1,0, 0, 0,regencode(mibase) ,regencode(miindex) , 1,())
#		define meminfo$with0110010(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(1,1,0,meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),regencode(mibase) ,regencode(miindex) , 1,midisp)
#		define meminfo$with0111000(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(1,1,1, 0, 0,regencode(mibase) ,regencode(miindex) ,miscale,())
#		define meminfo$with0111010(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm) mem$with$bits(mibits)mem$fixup(1,1,1,meminfo$disp$is8(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),meminfo$disp$is32(mihbits,mibits,mihreg,mireg,mihbase,mibase,mihindex,miindex,mihscale,miscale,mihlabel,milabel,mihdisp,midisp,mihimm,miimm),regencode(mibase) ,regencode(miindex) ,miscale,midisp)
#		define mm0 mmreg64(MM0)
#		define mm1 mmreg64(MM1)
#		define mm2 mmreg64(MM2)
#		define mm3 mmreg64(MM3)
#		define mm4 mmreg64(MM4)
#		define mm5 mmreg64(MM5)
#		define mm6 mmreg64(MM6)
#		define mm7 mmreg64(MM7)
#		define modrm(...) modrm$1(__VA_ARGS__)
#		define modrm$0m(...) modrm$cm(0,0,0,__VA_ARGS__)
#		define modrm$0r(...) modrm$cr(0,0,0,__VA_ARGS__)
#		define modrm$1(...) modrm$2(__VA_ARGS__)
#		define modrm$1m(...) modrm$cm(0,0,1,__VA_ARGS__)
#		define modrm$1r(...) modrm$cr(0,0,1,__VA_ARGS__)
#		define modrm$2(cb0,cb1, r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0, r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0) byte$tohex(byte$as$ff, cb0, cb1, r1b2, r1b1, r1b0, r0b2, r0b1, r0b0)
#		define modrm$2m(...) modrm$cm(0,1,0,__VA_ARGS__)
#		define modrm$2r(...) modrm$cr(0,1,0,__VA_ARGS__)
#		define modrm$3m(...) modrm$cm(0,1,1,__VA_ARGS__)
#		define modrm$3r(...) modrm$cr(0,1,1,__VA_ARGS__)
#		define modrm$4m(...) modrm$cm(1,0,0,__VA_ARGS__)
#		define modrm$4r(...) modrm$cr(1,0,0,__VA_ARGS__)
#		define modrm$5m(...) modrm$cm(1,0,1,__VA_ARGS__)
#		define modrm$5r(...) modrm$cr(1,0,1,__VA_ARGS__)
#		define modrm$6m(...) modrm$cm(1,1,0,__VA_ARGS__)
#		define modrm$6r(...) modrm$cr(1,1,0,__VA_ARGS__)
#		define modrm$7m(...) modrm$cm(1,1,1,__VA_ARGS__)
#		define modrm$7r(...) modrm$cr(1,1,1,__VA_ARGS__)
#		define modrm$cm(i2,i1,i0, m) modrm$rm$1(mem$get$category(m), 0,0,0,0,0,i2,i1,i0, byte$fromhex(mem$get$base(m)), byte$fromhex(mem$get$index(m)), mem$get$scale(m), mem$get$disp(m))
#		define modrm$cr(...) modrm$cr$1(__VA_ARGS__)
#		define modrm$cr$1(...) modrm$cr$2(__VA_ARGS__)
#		define modrm$cr$2(i2,i1,i0, r0) modrm(1,1, byte$fromhex(regencode(r0)), 0,0,0,0,0,i2,i1,i0)
#		define modrm$is4(r) modrm$is4$1(byte$fromhex(regencode(r)))
#		define modrm$is4$1(...) modrm$is4$2(__VA_ARGS__)
#		define modrm$is4$2(b7,b6,b5,b4,b3,b2,b1,b0) byte$tohex(byte$as$ff, b3,b2,b1,b0,0,0,0,0)
#		define modrm$isinvalidindex(baseh) byte$eq(0,0,0,0,0,1,0,0,byte$fromhex(baseh))
#		define modrm$mr(m, r) modrm$rm(r, m)
#		define modrm$needsdisp(baseh) modrm$needsdisp$1(byte$fromhex(baseh))
#		define modrm$needsdisp$1(...) modrm$needsdisp$2(__VA_ARGS__)
#		define modrm$needsdisp$2(bb7,bb6,bb5,bb4,bb3,bb2,bb1,bb0) modrm$needsdisp$bits##bb2##bb1##bb0
#		define modrm$needsdisp$bits000 0
#		define modrm$needsdisp$bits001 0
#		define modrm$needsdisp$bits010 0
#		define modrm$needsdisp$bits011 0
#		define modrm$needsdisp$bits100 0
#		define modrm$needsdisp$bits101 1
#		define modrm$needsdisp$bits110 0
#		define modrm$needsdisp$bits111 0
#		define modrm$needssib(baseh) modrm$needssib$1(byte$fromhex(baseh))
#		define modrm$needssib$1(...) modrm$needssib$2(__VA_ARGS__)
#		define modrm$needssib$2(bb7,bb6,bb5,bb4,bb3,bb2,bb1,bb0) modrm$needssib$bits##bb2##bb1##bb0
#		define modrm$needssib$bits000 0
#		define modrm$needssib$bits001 0
#		define modrm$needssib$bits010 0
#		define modrm$needssib$bits011 0
#		define modrm$needssib$bits100 1
#		define modrm$needssib$bits101 0
#		define modrm$needssib$bits110 0
#		define modrm$needssib$bits111 0
#		define modrm$rl(...) modrm$rl$1(__VA_ARGS__)
#		define modrm$rl$1(...) modrm$rl$2(__VA_ARGS__)
#		define modrm$rl$2(r0) modrm(0,0,0,0,0,0,0,1,0,1,byte$fromhex(regencode(r0)))
#		define modrm$rm(r, m) modrm$rm$1(mem$get$category(m), byte$fromhex(regencode(r)), byte$fromhex(mem$get$base(m)), byte$fromhex(mem$get$index(m)), mem$get$scale(m), mem$get$disp(m))
#		define modrm$rm$1(...) modrm$rm$2(__VA_ARGS__)
#		define modrm$rm$2(c, ...) modrm$rm$category##c(__VA_ARGS__)
#		define modrm$rm$category0000101(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,0, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), 25, i32$bytes$le(i32$fromhex d)
#		define modrm$rm$category0110111(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,0, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), sib(s, i7,i6,i5,i4,i3,i2,i1,i0, 0,0,0,0,0,1,0,1), i32$bytes$le(i32$fromhex d)
#		define modrm$rm$category1000000(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,0, 0,0,0,0,0,b2,b1,b0, r7,r6,r5,r4,r3,r2,r1,r0)
#		define modrm$rm$category1000101(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(1,0, 0,0,0,0,0,b2,b1,b0, r7,r6,r5,r4,r3,r2,r1,r0), i32$bytes$le(i32$fromhex d)
#		define modrm$rm$category1001001(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,1, 0,0,0,0,0,b2,b1,b0, r7,r6,r5,r4,r3,r2,r1,r0), i08$bytes$le(i08$fromhex d)
#		define modrm$rm$category1100010(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,0, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), sib(s, i7,i6,i5,i4,i3,i2,i1,i0, b7,b6,b5,b4,b3,b2,b1,b0)
#		define modrm$rm$category1100111(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(1,0, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), sib(s, i7,i6,i5,i4,i3,i2,i1,i0, b7,b6,b5,b4,b3,b2,b1,b0), i32$bytes$le(i32$fromhex d)
#		define modrm$rm$category1101011(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,1, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), sib(s, i7,i6,i5,i4,i3,i2,i1,i0, b7,b6,b5,b4,b3,b2,b1,b0), i08$bytes$le(i08$fromhex d)
#		define modrm$rm$category1110010(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,0, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), sib(s, i7,i6,i5,i4,i3,i2,i1,i0, b7,b6,b5,b4,b3,b2,b1,b0)
#		define modrm$rm$category1110111(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(1,0, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), sib(s, i7,i6,i5,i4,i3,i2,i1,i0, b7,b6,b5,b4,b3,b2,b1,b0), i32$bytes$le(i32$fromhex d)
#		define modrm$rm$category1111011(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0, s, d) modrm(0,1, 0,0,0,0,0,1,0,0, r7,r6,r5,r4,r3,r2,r1,r0), sib(s, i7,i6,i5,i4,i3,i2,i1,i0, b7,b6,b5,b4,b3,b2,b1,b0), i08$bytes$le(i08$fromhex d)
#		define modrm$rr(...) modrm$rr$1(__VA_ARGS__)
#		define modrm$rr$1(...) modrm$rr$2(__VA_ARGS__)
#		define modrm$rr$2(r0, r1) modrm(1,1, byte$fromhex(regencode(r1)), byte$fromhex(regencode(r0)))
#		define opcode$addregid7(o,reg) opcode$addregid7$1(byte$fromhex(o), byte$fromhex(regencode(reg)))
#		define opcode$addregid7$1(...) opcode$addregid7$2(__VA_ARGS__)
#		define opcode$addregid7$2(B0b7,B0b6,B0b5,B0b4,B0b3,B0b2,B0b1,B0b0,B1b7,B1b6,B1b5,B1b4,B1b3,B1b2,B1b1,B1b0) byte$tohex(byte$as$ff, i08$add(B0b7,B0b6,B0b5,B0b4,B0b3,B0b2,B0b1,B0b0, 0,0,0,0,0,B1b2,B1b1,B1b0))
#		define operand$getargs(x) operand$getargs$of$##x
#		define operand$getargs$of$creg(...) __VA_ARGS__
#		define operand$getargs$of$dreg(...) __VA_ARGS__
#		define operand$getargs$of$fpreg80(...) __VA_ARGS__
#		define operand$getargs$of$imm08(...) __VA_ARGS__
#		define operand$getargs$of$imm08sx16(...) __VA_ARGS__
#		define operand$getargs$of$imm08sx32(...) __VA_ARGS__
#		define operand$getargs$of$imm08sx64(...) __VA_ARGS__
#		define operand$getargs$of$imm08zx16(...) __VA_ARGS__
#		define operand$getargs$of$imm08zx32(...) __VA_ARGS__
#		define operand$getargs$of$imm08zx64(...) __VA_ARGS__
#		define operand$getargs$of$imm16(...) __VA_ARGS__
#		define operand$getargs$of$imm16sx32(...) __VA_ARGS__
#		define operand$getargs$of$imm16sx64(...) __VA_ARGS__
#		define operand$getargs$of$imm16zx32(...) __VA_ARGS__
#		define operand$getargs$of$imm16zx64(...) __VA_ARGS__
#		define operand$getargs$of$imm32(...) __VA_ARGS__
#		define operand$getargs$of$imm32sx64(...) __VA_ARGS__
#		define operand$getargs$of$imm32zx64(...) __VA_ARGS__
#		define operand$getargs$of$imm64(...) __VA_ARGS__
#		define operand$getargs$of$label(...) __VA_ARGS__
#		define operand$getargs$of$labeldiff08(...) __VA_ARGS__
#		define operand$getargs$of$labeldiff16(...) __VA_ARGS__
#		define operand$getargs$of$labeldiff32(...) __VA_ARGS__
#		define operand$getargs$of$labeldiff64(...) __VA_ARGS__
#		define operand$getargs$of$labeloffset08(...) __VA_ARGS__
#		define operand$getargs$of$labeloffset16(...) __VA_ARGS__
#		define operand$getargs$of$labeloffset32(...) __VA_ARGS__
#		define operand$getargs$of$labeloffset64(...) __VA_ARGS__
#		define operand$getargs$of$mem(...) __VA_ARGS__
#		define operand$getargs$of$mem08(...) __VA_ARGS__
#		define operand$getargs$of$mem128(...) __VA_ARGS__
#		define operand$getargs$of$mem16(...) __VA_ARGS__
#		define operand$getargs$of$mem256(...) __VA_ARGS__
#		define operand$getargs$of$mem32(...) __VA_ARGS__
#		define operand$getargs$of$mem512(...) __VA_ARGS__
#		define operand$getargs$of$mem64(...) __VA_ARGS__
#		define operand$getargs$of$mem80(...) __VA_ARGS__
#		define operand$getargs$of$mmreg128(...) __VA_ARGS__
#		define operand$getargs$of$mmreg256(...) __VA_ARGS__
#		define operand$getargs$of$mmreg64(...) __VA_ARGS__
#		define operand$getargs$of$moffs(...) __VA_ARGS__
#		define operand$getargs$of$reg08(...) __VA_ARGS__
#		define operand$getargs$of$reg16(...) __VA_ARGS__
#		define operand$getargs$of$reg32(...) __VA_ARGS__
#		define operand$getargs$of$reg64(...) __VA_ARGS__
#		define operand$getargs$of$rel32(...) __VA_ARGS__
#		define operand$getargs$of$segm(...) __VA_ARGS__
#		define operand$getdesc(x) operand$getdesc$of$##x
#		define operand$getdesc$of$creg(...) creg
#		define operand$getdesc$of$dreg(...) dreg
#		define operand$getdesc$of$fpreg80(...) fpreg80
#		define operand$getdesc$of$imm08(...) imm08
#		define operand$getdesc$of$imm08sx16(...) imm08sx16
#		define operand$getdesc$of$imm08sx32(...) imm08sx32
#		define operand$getdesc$of$imm08sx64(...) imm08sx64
#		define operand$getdesc$of$imm08zx16(...) imm08sx16
#		define operand$getdesc$of$imm08zx32(...) imm08sx32
#		define operand$getdesc$of$imm08zx64(...) imm08sx64
#		define operand$getdesc$of$imm16(...) imm16
#		define operand$getdesc$of$imm16sx32(...) imm16sx32
#		define operand$getdesc$of$imm16sx64(...) imm16sx64
#		define operand$getdesc$of$imm16zx32(...) imm16sx32
#		define operand$getdesc$of$imm16zx64(...) imm16sx64
#		define operand$getdesc$of$imm32(...) imm32
#		define operand$getdesc$of$imm32sx64(...) imm32sx64
#		define operand$getdesc$of$imm32zx64(...) imm32sx64
#		define operand$getdesc$of$imm64(...) imm64
#		define operand$getdesc$of$label(...) label
#		define operand$getdesc$of$labeldiff08(...) labeldiff08
#		define operand$getdesc$of$labeldiff16(...) labeldiff16
#		define operand$getdesc$of$labeldiff32(...) labeldiff32
#		define operand$getdesc$of$labeldiff64(...) labeldiff64
#		define operand$getdesc$of$labeloffset08(...) labeloffset08
#		define operand$getdesc$of$labeloffset16(...) labeloffset16
#		define operand$getdesc$of$labeloffset32(...) labeloffset32
#		define operand$getdesc$of$labeloffset64(...) labeloffset64
#		define operand$getdesc$of$mem(...) mem
#		define operand$getdesc$of$mem08(...) mem08
#		define operand$getdesc$of$mem128(...) mem128
#		define operand$getdesc$of$mem16(...) mem16
#		define operand$getdesc$of$mem256(...) mem256
#		define operand$getdesc$of$mem32(...) mem32
#		define operand$getdesc$of$mem512(...) mem512
#		define operand$getdesc$of$mem64(...) mem64
#		define operand$getdesc$of$mem80(...) mem80
#		define operand$getdesc$of$mmreg128(...) mmreg128
#		define operand$getdesc$of$mmreg256(...) mmreg256
#		define operand$getdesc$of$mmreg64(...) mmreg64
#		define operand$getdesc$of$moffs(...) moffs
#		define operand$getdesc$of$reg08(...) reg08
#		define operand$getdesc$of$reg16(...) reg16
#		define operand$getdesc$of$reg32(...) reg32
#		define operand$getdesc$of$reg64(...) reg64
#		define operand$getdesc$of$rel32(...) rel32
#		define operand$getdesc$of$segm(...) segm
#		define operand$gettype(x) operand$gettype$of$##x
#		define operand$gettype$of$creg(...) creg
#		define operand$gettype$of$dreg(...) dreg
#		define operand$gettype$of$fpreg80(...) fpreg80
#		define operand$gettype$of$imm08(...) imm08
#		define operand$gettype$of$imm08sx16(...) imm16
#		define operand$gettype$of$imm08sx32(...) imm32
#		define operand$gettype$of$imm08sx64(...) imm64
#		define operand$gettype$of$imm08zx16(...) imm16
#		define operand$gettype$of$imm08zx32(...) imm32
#		define operand$gettype$of$imm08zx64(...) imm64
#		define operand$gettype$of$imm16(...) imm16
#		define operand$gettype$of$imm16sx32(...) imm32
#		define operand$gettype$of$imm16sx64(...) imm64
#		define operand$gettype$of$imm16zx32(...) imm32
#		define operand$gettype$of$imm16zx64(...) imm64
#		define operand$gettype$of$imm32(...) imm32
#		define operand$gettype$of$imm32sx64(...) imm64
#		define operand$gettype$of$imm32zx64(...) imm64
#		define operand$gettype$of$imm64(...) imm64
#		define operand$gettype$of$label(...) rel32
#		define operand$gettype$of$labeldiff08(...) imm08
#		define operand$gettype$of$labeldiff16(...) imm16
#		define operand$gettype$of$labeldiff32(...) imm32
#		define operand$gettype$of$labeldiff64(...) imm64
#		define operand$gettype$of$labeloffset08(...) imm08
#		define operand$gettype$of$labeloffset16(...) imm16
#		define operand$gettype$of$labeloffset32(...) imm32
#		define operand$gettype$of$labeloffset64(...) imm64
#		define operand$gettype$of$mem(...) mem
#		define operand$gettype$of$mem08(...) mem08
#		define operand$gettype$of$mem128(...) mem128
#		define operand$gettype$of$mem16(...) mem16
#		define operand$gettype$of$mem256(...) mem256
#		define operand$gettype$of$mem32(...) mem32
#		define operand$gettype$of$mem512(...) mem512
#		define operand$gettype$of$mem64(...) mem64
#		define operand$gettype$of$mem80(...) mem80
#		define operand$gettype$of$mmreg128(...) mmreg128
#		define operand$gettype$of$mmreg256(...) mmreg256
#		define operand$gettype$of$mmreg64(...) mmreg64
#		define operand$gettype$of$moffs(...) moffs
#		define operand$gettype$of$reg08(...) reg08
#		define operand$gettype$of$reg16(...) reg16
#		define operand$gettype$of$reg32(...) reg32
#		define operand$gettype$of$reg64(...) reg64
#		define operand$gettype$of$rel32(...) rel32
#		define operand$gettype$of$segm(...) segm
#		define operator$is$supported(i) byte$eq(0,0,0,0,0,0,1,0,byte$fromhex(count(comma$if$operator$is$supported$of$##i)))
#		define oword bits(128)
#		define ppasm(...) ppasm$1(count(__VA_ARGS__), ##__VA_ARGS__)
#		define ppasm$1(...) ppasm$2(__VA_ARGS__)
#		define ppasm$2(...) ppasm$code(ppasm$scan(__VA_ARGS__), ##__VA_ARGS__)
#		define ppasm$code(state, n, ...) ppasm$code$withlen##n(state, ##__VA_ARGS__)
#		define ppasm$code$withlen00(state) /* empty */
#		define ppasm$code$withlen01(state, instr) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen01$1(scan(state, instr), instr)
#		define ppasm$code$withlen01$1(...) ppasm$code$withlen01$2(__VA_ARGS__)
#		define ppasm$code$withlen01$2(state, instr) formatbytes(code(state, instr))
#		define ppasm$code$withlen02(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen02$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen02$1(...) ppasm$code$withlen02$2(__VA_ARGS__)
#		define ppasm$code$withlen02$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen01(state, ##__VA_ARGS__)
#		define ppasm$code$withlen03(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen03$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen03$1(...) ppasm$code$withlen03$2(__VA_ARGS__)
#		define ppasm$code$withlen03$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen02(state, ##__VA_ARGS__)
#		define ppasm$code$withlen04(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen04$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen04$1(...) ppasm$code$withlen04$2(__VA_ARGS__)
#		define ppasm$code$withlen04$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen03(state, ##__VA_ARGS__)
#		define ppasm$code$withlen05(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen05$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen05$1(...) ppasm$code$withlen05$2(__VA_ARGS__)
#		define ppasm$code$withlen05$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen04(state, ##__VA_ARGS__)
#		define ppasm$code$withlen06(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen06$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen06$1(...) ppasm$code$withlen06$2(__VA_ARGS__)
#		define ppasm$code$withlen06$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen05(state, ##__VA_ARGS__)
#		define ppasm$code$withlen07(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen07$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen07$1(...) ppasm$code$withlen07$2(__VA_ARGS__)
#		define ppasm$code$withlen07$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen06(state, ##__VA_ARGS__)
#		define ppasm$code$withlen08(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen08$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen08$1(...) ppasm$code$withlen08$2(__VA_ARGS__)
#		define ppasm$code$withlen08$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen07(state, ##__VA_ARGS__)
#		define ppasm$code$withlen09(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen09$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen09$1(...) ppasm$code$withlen09$2(__VA_ARGS__)
#		define ppasm$code$withlen09$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen08(state, ##__VA_ARGS__)
#		define ppasm$code$withlen0a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen0a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen0a$1(...) ppasm$code$withlen0a$2(__VA_ARGS__)
#		define ppasm$code$withlen0a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen09(state, ##__VA_ARGS__)
#		define ppasm$code$withlen0b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen0b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen0b$1(...) ppasm$code$withlen0b$2(__VA_ARGS__)
#		define ppasm$code$withlen0b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen0a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen0c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen0c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen0c$1(...) ppasm$code$withlen0c$2(__VA_ARGS__)
#		define ppasm$code$withlen0c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen0b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen0d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen0d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen0d$1(...) ppasm$code$withlen0d$2(__VA_ARGS__)
#		define ppasm$code$withlen0d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen0c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen0e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen0e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen0e$1(...) ppasm$code$withlen0e$2(__VA_ARGS__)
#		define ppasm$code$withlen0e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen0d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen0f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen0f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen0f$1(...) ppasm$code$withlen0f$2(__VA_ARGS__)
#		define ppasm$code$withlen0f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen0e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen10(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen10$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen10$1(...) ppasm$code$withlen10$2(__VA_ARGS__)
#		define ppasm$code$withlen10$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen0f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen11(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen11$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen11$1(...) ppasm$code$withlen11$2(__VA_ARGS__)
#		define ppasm$code$withlen11$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen10(state, ##__VA_ARGS__)
#		define ppasm$code$withlen12(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen12$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen12$1(...) ppasm$code$withlen12$2(__VA_ARGS__)
#		define ppasm$code$withlen12$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen11(state, ##__VA_ARGS__)
#		define ppasm$code$withlen13(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen13$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen13$1(...) ppasm$code$withlen13$2(__VA_ARGS__)
#		define ppasm$code$withlen13$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen12(state, ##__VA_ARGS__)
#		define ppasm$code$withlen14(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen14$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen14$1(...) ppasm$code$withlen14$2(__VA_ARGS__)
#		define ppasm$code$withlen14$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen13(state, ##__VA_ARGS__)
#		define ppasm$code$withlen15(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen15$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen15$1(...) ppasm$code$withlen15$2(__VA_ARGS__)
#		define ppasm$code$withlen15$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen14(state, ##__VA_ARGS__)
#		define ppasm$code$withlen16(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen16$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen16$1(...) ppasm$code$withlen16$2(__VA_ARGS__)
#		define ppasm$code$withlen16$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen15(state, ##__VA_ARGS__)
#		define ppasm$code$withlen17(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen17$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen17$1(...) ppasm$code$withlen17$2(__VA_ARGS__)
#		define ppasm$code$withlen17$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen16(state, ##__VA_ARGS__)
#		define ppasm$code$withlen18(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen18$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen18$1(...) ppasm$code$withlen18$2(__VA_ARGS__)
#		define ppasm$code$withlen18$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen17(state, ##__VA_ARGS__)
#		define ppasm$code$withlen19(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen19$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen19$1(...) ppasm$code$withlen19$2(__VA_ARGS__)
#		define ppasm$code$withlen19$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen18(state, ##__VA_ARGS__)
#		define ppasm$code$withlen1a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen1a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen1a$1(...) ppasm$code$withlen1a$2(__VA_ARGS__)
#		define ppasm$code$withlen1a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen19(state, ##__VA_ARGS__)
#		define ppasm$code$withlen1b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen1b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen1b$1(...) ppasm$code$withlen1b$2(__VA_ARGS__)
#		define ppasm$code$withlen1b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen1a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen1c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen1c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen1c$1(...) ppasm$code$withlen1c$2(__VA_ARGS__)
#		define ppasm$code$withlen1c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen1b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen1d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen1d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen1d$1(...) ppasm$code$withlen1d$2(__VA_ARGS__)
#		define ppasm$code$withlen1d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen1c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen1e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen1e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen1e$1(...) ppasm$code$withlen1e$2(__VA_ARGS__)
#		define ppasm$code$withlen1e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen1d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen1f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen1f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen1f$1(...) ppasm$code$withlen1f$2(__VA_ARGS__)
#		define ppasm$code$withlen1f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen1e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen20(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen20$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen20$1(...) ppasm$code$withlen20$2(__VA_ARGS__)
#		define ppasm$code$withlen20$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen1f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen21(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen21$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen21$1(...) ppasm$code$withlen21$2(__VA_ARGS__)
#		define ppasm$code$withlen21$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen20(state, ##__VA_ARGS__)
#		define ppasm$code$withlen22(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen22$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen22$1(...) ppasm$code$withlen22$2(__VA_ARGS__)
#		define ppasm$code$withlen22$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen21(state, ##__VA_ARGS__)
#		define ppasm$code$withlen23(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen23$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen23$1(...) ppasm$code$withlen23$2(__VA_ARGS__)
#		define ppasm$code$withlen23$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen22(state, ##__VA_ARGS__)
#		define ppasm$code$withlen24(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen24$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen24$1(...) ppasm$code$withlen24$2(__VA_ARGS__)
#		define ppasm$code$withlen24$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen23(state, ##__VA_ARGS__)
#		define ppasm$code$withlen25(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen25$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen25$1(...) ppasm$code$withlen25$2(__VA_ARGS__)
#		define ppasm$code$withlen25$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen24(state, ##__VA_ARGS__)
#		define ppasm$code$withlen26(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen26$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen26$1(...) ppasm$code$withlen26$2(__VA_ARGS__)
#		define ppasm$code$withlen26$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen25(state, ##__VA_ARGS__)
#		define ppasm$code$withlen27(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen27$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen27$1(...) ppasm$code$withlen27$2(__VA_ARGS__)
#		define ppasm$code$withlen27$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen26(state, ##__VA_ARGS__)
#		define ppasm$code$withlen28(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen28$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen28$1(...) ppasm$code$withlen28$2(__VA_ARGS__)
#		define ppasm$code$withlen28$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen27(state, ##__VA_ARGS__)
#		define ppasm$code$withlen29(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen29$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen29$1(...) ppasm$code$withlen29$2(__VA_ARGS__)
#		define ppasm$code$withlen29$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen28(state, ##__VA_ARGS__)
#		define ppasm$code$withlen2a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen2a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen2a$1(...) ppasm$code$withlen2a$2(__VA_ARGS__)
#		define ppasm$code$withlen2a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen29(state, ##__VA_ARGS__)
#		define ppasm$code$withlen2b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen2b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen2b$1(...) ppasm$code$withlen2b$2(__VA_ARGS__)
#		define ppasm$code$withlen2b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen2a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen2c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen2c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen2c$1(...) ppasm$code$withlen2c$2(__VA_ARGS__)
#		define ppasm$code$withlen2c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen2b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen2d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen2d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen2d$1(...) ppasm$code$withlen2d$2(__VA_ARGS__)
#		define ppasm$code$withlen2d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen2c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen2e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen2e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen2e$1(...) ppasm$code$withlen2e$2(__VA_ARGS__)
#		define ppasm$code$withlen2e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen2d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen2f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen2f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen2f$1(...) ppasm$code$withlen2f$2(__VA_ARGS__)
#		define ppasm$code$withlen2f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen2e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen30(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen30$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen30$1(...) ppasm$code$withlen30$2(__VA_ARGS__)
#		define ppasm$code$withlen30$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen2f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen31(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen31$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen31$1(...) ppasm$code$withlen31$2(__VA_ARGS__)
#		define ppasm$code$withlen31$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen30(state, ##__VA_ARGS__)
#		define ppasm$code$withlen32(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen32$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen32$1(...) ppasm$code$withlen32$2(__VA_ARGS__)
#		define ppasm$code$withlen32$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen31(state, ##__VA_ARGS__)
#		define ppasm$code$withlen33(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen33$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen33$1(...) ppasm$code$withlen33$2(__VA_ARGS__)
#		define ppasm$code$withlen33$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen32(state, ##__VA_ARGS__)
#		define ppasm$code$withlen34(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen34$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen34$1(...) ppasm$code$withlen34$2(__VA_ARGS__)
#		define ppasm$code$withlen34$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen33(state, ##__VA_ARGS__)
#		define ppasm$code$withlen35(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen35$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen35$1(...) ppasm$code$withlen35$2(__VA_ARGS__)
#		define ppasm$code$withlen35$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen34(state, ##__VA_ARGS__)
#		define ppasm$code$withlen36(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen36$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen36$1(...) ppasm$code$withlen36$2(__VA_ARGS__)
#		define ppasm$code$withlen36$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen35(state, ##__VA_ARGS__)
#		define ppasm$code$withlen37(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen37$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen37$1(...) ppasm$code$withlen37$2(__VA_ARGS__)
#		define ppasm$code$withlen37$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen36(state, ##__VA_ARGS__)
#		define ppasm$code$withlen38(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen38$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen38$1(...) ppasm$code$withlen38$2(__VA_ARGS__)
#		define ppasm$code$withlen38$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen37(state, ##__VA_ARGS__)
#		define ppasm$code$withlen39(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen39$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen39$1(...) ppasm$code$withlen39$2(__VA_ARGS__)
#		define ppasm$code$withlen39$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen38(state, ##__VA_ARGS__)
#		define ppasm$code$withlen3a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen3a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen3a$1(...) ppasm$code$withlen3a$2(__VA_ARGS__)
#		define ppasm$code$withlen3a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen39(state, ##__VA_ARGS__)
#		define ppasm$code$withlen3b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen3b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen3b$1(...) ppasm$code$withlen3b$2(__VA_ARGS__)
#		define ppasm$code$withlen3b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen3a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen3c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen3c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen3c$1(...) ppasm$code$withlen3c$2(__VA_ARGS__)
#		define ppasm$code$withlen3c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen3b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen3d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen3d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen3d$1(...) ppasm$code$withlen3d$2(__VA_ARGS__)
#		define ppasm$code$withlen3d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen3c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen3e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen3e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen3e$1(...) ppasm$code$withlen3e$2(__VA_ARGS__)
#		define ppasm$code$withlen3e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen3d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen3f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen3f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen3f$1(...) ppasm$code$withlen3f$2(__VA_ARGS__)
#		define ppasm$code$withlen3f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen3e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen40(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen40$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen40$1(...) ppasm$code$withlen40$2(__VA_ARGS__)
#		define ppasm$code$withlen40$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen3f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen41(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen41$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen41$1(...) ppasm$code$withlen41$2(__VA_ARGS__)
#		define ppasm$code$withlen41$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen40(state, ##__VA_ARGS__)
#		define ppasm$code$withlen42(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen42$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen42$1(...) ppasm$code$withlen42$2(__VA_ARGS__)
#		define ppasm$code$withlen42$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen41(state, ##__VA_ARGS__)
#		define ppasm$code$withlen43(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen43$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen43$1(...) ppasm$code$withlen43$2(__VA_ARGS__)
#		define ppasm$code$withlen43$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen42(state, ##__VA_ARGS__)
#		define ppasm$code$withlen44(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen44$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen44$1(...) ppasm$code$withlen44$2(__VA_ARGS__)
#		define ppasm$code$withlen44$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen43(state, ##__VA_ARGS__)
#		define ppasm$code$withlen45(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen45$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen45$1(...) ppasm$code$withlen45$2(__VA_ARGS__)
#		define ppasm$code$withlen45$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen44(state, ##__VA_ARGS__)
#		define ppasm$code$withlen46(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen46$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen46$1(...) ppasm$code$withlen46$2(__VA_ARGS__)
#		define ppasm$code$withlen46$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen45(state, ##__VA_ARGS__)
#		define ppasm$code$withlen47(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen47$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen47$1(...) ppasm$code$withlen47$2(__VA_ARGS__)
#		define ppasm$code$withlen47$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen46(state, ##__VA_ARGS__)
#		define ppasm$code$withlen48(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen48$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen48$1(...) ppasm$code$withlen48$2(__VA_ARGS__)
#		define ppasm$code$withlen48$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen47(state, ##__VA_ARGS__)
#		define ppasm$code$withlen49(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen49$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen49$1(...) ppasm$code$withlen49$2(__VA_ARGS__)
#		define ppasm$code$withlen49$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen48(state, ##__VA_ARGS__)
#		define ppasm$code$withlen4a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen4a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen4a$1(...) ppasm$code$withlen4a$2(__VA_ARGS__)
#		define ppasm$code$withlen4a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen49(state, ##__VA_ARGS__)
#		define ppasm$code$withlen4b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen4b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen4b$1(...) ppasm$code$withlen4b$2(__VA_ARGS__)
#		define ppasm$code$withlen4b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen4a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen4c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen4c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen4c$1(...) ppasm$code$withlen4c$2(__VA_ARGS__)
#		define ppasm$code$withlen4c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen4b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen4d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen4d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen4d$1(...) ppasm$code$withlen4d$2(__VA_ARGS__)
#		define ppasm$code$withlen4d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen4c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen4e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen4e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen4e$1(...) ppasm$code$withlen4e$2(__VA_ARGS__)
#		define ppasm$code$withlen4e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen4d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen4f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen4f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen4f$1(...) ppasm$code$withlen4f$2(__VA_ARGS__)
#		define ppasm$code$withlen4f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen4e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen50(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen50$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen50$1(...) ppasm$code$withlen50$2(__VA_ARGS__)
#		define ppasm$code$withlen50$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen4f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen51(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen51$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen51$1(...) ppasm$code$withlen51$2(__VA_ARGS__)
#		define ppasm$code$withlen51$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen50(state, ##__VA_ARGS__)
#		define ppasm$code$withlen52(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen52$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen52$1(...) ppasm$code$withlen52$2(__VA_ARGS__)
#		define ppasm$code$withlen52$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen51(state, ##__VA_ARGS__)
#		define ppasm$code$withlen53(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen53$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen53$1(...) ppasm$code$withlen53$2(__VA_ARGS__)
#		define ppasm$code$withlen53$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen52(state, ##__VA_ARGS__)
#		define ppasm$code$withlen54(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen54$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen54$1(...) ppasm$code$withlen54$2(__VA_ARGS__)
#		define ppasm$code$withlen54$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen53(state, ##__VA_ARGS__)
#		define ppasm$code$withlen55(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen55$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen55$1(...) ppasm$code$withlen55$2(__VA_ARGS__)
#		define ppasm$code$withlen55$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen54(state, ##__VA_ARGS__)
#		define ppasm$code$withlen56(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen56$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen56$1(...) ppasm$code$withlen56$2(__VA_ARGS__)
#		define ppasm$code$withlen56$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen55(state, ##__VA_ARGS__)
#		define ppasm$code$withlen57(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen57$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen57$1(...) ppasm$code$withlen57$2(__VA_ARGS__)
#		define ppasm$code$withlen57$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen56(state, ##__VA_ARGS__)
#		define ppasm$code$withlen58(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen58$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen58$1(...) ppasm$code$withlen58$2(__VA_ARGS__)
#		define ppasm$code$withlen58$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen57(state, ##__VA_ARGS__)
#		define ppasm$code$withlen59(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen59$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen59$1(...) ppasm$code$withlen59$2(__VA_ARGS__)
#		define ppasm$code$withlen59$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen58(state, ##__VA_ARGS__)
#		define ppasm$code$withlen5a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen5a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen5a$1(...) ppasm$code$withlen5a$2(__VA_ARGS__)
#		define ppasm$code$withlen5a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen59(state, ##__VA_ARGS__)
#		define ppasm$code$withlen5b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen5b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen5b$1(...) ppasm$code$withlen5b$2(__VA_ARGS__)
#		define ppasm$code$withlen5b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen5a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen5c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen5c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen5c$1(...) ppasm$code$withlen5c$2(__VA_ARGS__)
#		define ppasm$code$withlen5c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen5b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen5d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen5d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen5d$1(...) ppasm$code$withlen5d$2(__VA_ARGS__)
#		define ppasm$code$withlen5d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen5c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen5e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen5e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen5e$1(...) ppasm$code$withlen5e$2(__VA_ARGS__)
#		define ppasm$code$withlen5e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen5d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen5f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen5f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen5f$1(...) ppasm$code$withlen5f$2(__VA_ARGS__)
#		define ppasm$code$withlen5f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen5e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen60(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen60$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen60$1(...) ppasm$code$withlen60$2(__VA_ARGS__)
#		define ppasm$code$withlen60$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen5f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen61(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen61$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen61$1(...) ppasm$code$withlen61$2(__VA_ARGS__)
#		define ppasm$code$withlen61$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen60(state, ##__VA_ARGS__)
#		define ppasm$code$withlen62(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen62$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen62$1(...) ppasm$code$withlen62$2(__VA_ARGS__)
#		define ppasm$code$withlen62$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen61(state, ##__VA_ARGS__)
#		define ppasm$code$withlen63(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen63$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen63$1(...) ppasm$code$withlen63$2(__VA_ARGS__)
#		define ppasm$code$withlen63$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen62(state, ##__VA_ARGS__)
#		define ppasm$code$withlen64(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen64$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen64$1(...) ppasm$code$withlen64$2(__VA_ARGS__)
#		define ppasm$code$withlen64$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen63(state, ##__VA_ARGS__)
#		define ppasm$code$withlen65(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen65$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen65$1(...) ppasm$code$withlen65$2(__VA_ARGS__)
#		define ppasm$code$withlen65$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen64(state, ##__VA_ARGS__)
#		define ppasm$code$withlen66(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen66$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen66$1(...) ppasm$code$withlen66$2(__VA_ARGS__)
#		define ppasm$code$withlen66$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen65(state, ##__VA_ARGS__)
#		define ppasm$code$withlen67(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen67$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen67$1(...) ppasm$code$withlen67$2(__VA_ARGS__)
#		define ppasm$code$withlen67$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen66(state, ##__VA_ARGS__)
#		define ppasm$code$withlen68(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen68$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen68$1(...) ppasm$code$withlen68$2(__VA_ARGS__)
#		define ppasm$code$withlen68$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen67(state, ##__VA_ARGS__)
#		define ppasm$code$withlen69(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen69$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen69$1(...) ppasm$code$withlen69$2(__VA_ARGS__)
#		define ppasm$code$withlen69$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen68(state, ##__VA_ARGS__)
#		define ppasm$code$withlen6a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen6a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen6a$1(...) ppasm$code$withlen6a$2(__VA_ARGS__)
#		define ppasm$code$withlen6a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen69(state, ##__VA_ARGS__)
#		define ppasm$code$withlen6b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen6b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen6b$1(...) ppasm$code$withlen6b$2(__VA_ARGS__)
#		define ppasm$code$withlen6b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen6a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen6c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen6c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen6c$1(...) ppasm$code$withlen6c$2(__VA_ARGS__)
#		define ppasm$code$withlen6c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen6b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen6d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen6d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen6d$1(...) ppasm$code$withlen6d$2(__VA_ARGS__)
#		define ppasm$code$withlen6d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen6c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen6e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen6e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen6e$1(...) ppasm$code$withlen6e$2(__VA_ARGS__)
#		define ppasm$code$withlen6e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen6d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen6f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen6f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen6f$1(...) ppasm$code$withlen6f$2(__VA_ARGS__)
#		define ppasm$code$withlen6f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen6e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen70(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen70$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen70$1(...) ppasm$code$withlen70$2(__VA_ARGS__)
#		define ppasm$code$withlen70$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen6f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen71(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen71$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen71$1(...) ppasm$code$withlen71$2(__VA_ARGS__)
#		define ppasm$code$withlen71$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen70(state, ##__VA_ARGS__)
#		define ppasm$code$withlen72(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen72$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen72$1(...) ppasm$code$withlen72$2(__VA_ARGS__)
#		define ppasm$code$withlen72$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen71(state, ##__VA_ARGS__)
#		define ppasm$code$withlen73(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen73$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen73$1(...) ppasm$code$withlen73$2(__VA_ARGS__)
#		define ppasm$code$withlen73$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen72(state, ##__VA_ARGS__)
#		define ppasm$code$withlen74(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen74$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen74$1(...) ppasm$code$withlen74$2(__VA_ARGS__)
#		define ppasm$code$withlen74$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen73(state, ##__VA_ARGS__)
#		define ppasm$code$withlen75(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen75$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen75$1(...) ppasm$code$withlen75$2(__VA_ARGS__)
#		define ppasm$code$withlen75$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen74(state, ##__VA_ARGS__)
#		define ppasm$code$withlen76(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen76$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen76$1(...) ppasm$code$withlen76$2(__VA_ARGS__)
#		define ppasm$code$withlen76$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen75(state, ##__VA_ARGS__)
#		define ppasm$code$withlen77(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen77$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen77$1(...) ppasm$code$withlen77$2(__VA_ARGS__)
#		define ppasm$code$withlen77$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen76(state, ##__VA_ARGS__)
#		define ppasm$code$withlen78(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen78$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen78$1(...) ppasm$code$withlen78$2(__VA_ARGS__)
#		define ppasm$code$withlen78$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen77(state, ##__VA_ARGS__)
#		define ppasm$code$withlen79(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen79$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen79$1(...) ppasm$code$withlen79$2(__VA_ARGS__)
#		define ppasm$code$withlen79$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen78(state, ##__VA_ARGS__)
#		define ppasm$code$withlen7a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen7a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen7a$1(...) ppasm$code$withlen7a$2(__VA_ARGS__)
#		define ppasm$code$withlen7a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen79(state, ##__VA_ARGS__)
#		define ppasm$code$withlen7b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen7b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen7b$1(...) ppasm$code$withlen7b$2(__VA_ARGS__)
#		define ppasm$code$withlen7b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen7a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen7c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen7c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen7c$1(...) ppasm$code$withlen7c$2(__VA_ARGS__)
#		define ppasm$code$withlen7c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen7b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen7d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen7d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen7d$1(...) ppasm$code$withlen7d$2(__VA_ARGS__)
#		define ppasm$code$withlen7d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen7c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen7e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen7e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen7e$1(...) ppasm$code$withlen7e$2(__VA_ARGS__)
#		define ppasm$code$withlen7e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen7d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen7f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen7f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen7f$1(...) ppasm$code$withlen7f$2(__VA_ARGS__)
#		define ppasm$code$withlen7f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen7e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen80(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen80$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen80$1(...) ppasm$code$withlen80$2(__VA_ARGS__)
#		define ppasm$code$withlen80$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen7f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen81(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen81$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen81$1(...) ppasm$code$withlen81$2(__VA_ARGS__)
#		define ppasm$code$withlen81$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen80(state, ##__VA_ARGS__)
#		define ppasm$code$withlen82(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen82$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen82$1(...) ppasm$code$withlen82$2(__VA_ARGS__)
#		define ppasm$code$withlen82$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen81(state, ##__VA_ARGS__)
#		define ppasm$code$withlen83(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen83$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen83$1(...) ppasm$code$withlen83$2(__VA_ARGS__)
#		define ppasm$code$withlen83$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen82(state, ##__VA_ARGS__)
#		define ppasm$code$withlen84(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen84$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen84$1(...) ppasm$code$withlen84$2(__VA_ARGS__)
#		define ppasm$code$withlen84$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen83(state, ##__VA_ARGS__)
#		define ppasm$code$withlen85(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen85$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen85$1(...) ppasm$code$withlen85$2(__VA_ARGS__)
#		define ppasm$code$withlen85$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen84(state, ##__VA_ARGS__)
#		define ppasm$code$withlen86(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen86$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen86$1(...) ppasm$code$withlen86$2(__VA_ARGS__)
#		define ppasm$code$withlen86$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen85(state, ##__VA_ARGS__)
#		define ppasm$code$withlen87(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen87$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen87$1(...) ppasm$code$withlen87$2(__VA_ARGS__)
#		define ppasm$code$withlen87$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen86(state, ##__VA_ARGS__)
#		define ppasm$code$withlen88(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen88$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen88$1(...) ppasm$code$withlen88$2(__VA_ARGS__)
#		define ppasm$code$withlen88$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen87(state, ##__VA_ARGS__)
#		define ppasm$code$withlen89(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen89$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen89$1(...) ppasm$code$withlen89$2(__VA_ARGS__)
#		define ppasm$code$withlen89$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen88(state, ##__VA_ARGS__)
#		define ppasm$code$withlen8a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen8a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen8a$1(...) ppasm$code$withlen8a$2(__VA_ARGS__)
#		define ppasm$code$withlen8a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen89(state, ##__VA_ARGS__)
#		define ppasm$code$withlen8b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen8b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen8b$1(...) ppasm$code$withlen8b$2(__VA_ARGS__)
#		define ppasm$code$withlen8b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen8a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen8c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen8c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen8c$1(...) ppasm$code$withlen8c$2(__VA_ARGS__)
#		define ppasm$code$withlen8c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen8b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen8d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen8d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen8d$1(...) ppasm$code$withlen8d$2(__VA_ARGS__)
#		define ppasm$code$withlen8d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen8c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen8e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen8e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen8e$1(...) ppasm$code$withlen8e$2(__VA_ARGS__)
#		define ppasm$code$withlen8e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen8d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen8f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen8f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen8f$1(...) ppasm$code$withlen8f$2(__VA_ARGS__)
#		define ppasm$code$withlen8f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen8e(state, ##__VA_ARGS__)
#		define ppasm$code$withlen90(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen90$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen90$1(...) ppasm$code$withlen90$2(__VA_ARGS__)
#		define ppasm$code$withlen90$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen8f(state, ##__VA_ARGS__)
#		define ppasm$code$withlen91(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen91$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen91$1(...) ppasm$code$withlen91$2(__VA_ARGS__)
#		define ppasm$code$withlen91$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen90(state, ##__VA_ARGS__)
#		define ppasm$code$withlen92(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen92$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen92$1(...) ppasm$code$withlen92$2(__VA_ARGS__)
#		define ppasm$code$withlen92$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen91(state, ##__VA_ARGS__)
#		define ppasm$code$withlen93(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen93$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen93$1(...) ppasm$code$withlen93$2(__VA_ARGS__)
#		define ppasm$code$withlen93$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen92(state, ##__VA_ARGS__)
#		define ppasm$code$withlen94(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen94$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen94$1(...) ppasm$code$withlen94$2(__VA_ARGS__)
#		define ppasm$code$withlen94$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen93(state, ##__VA_ARGS__)
#		define ppasm$code$withlen95(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen95$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen95$1(...) ppasm$code$withlen95$2(__VA_ARGS__)
#		define ppasm$code$withlen95$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen94(state, ##__VA_ARGS__)
#		define ppasm$code$withlen96(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen96$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen96$1(...) ppasm$code$withlen96$2(__VA_ARGS__)
#		define ppasm$code$withlen96$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen95(state, ##__VA_ARGS__)
#		define ppasm$code$withlen97(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen97$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen97$1(...) ppasm$code$withlen97$2(__VA_ARGS__)
#		define ppasm$code$withlen97$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen96(state, ##__VA_ARGS__)
#		define ppasm$code$withlen98(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen98$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen98$1(...) ppasm$code$withlen98$2(__VA_ARGS__)
#		define ppasm$code$withlen98$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen97(state, ##__VA_ARGS__)
#		define ppasm$code$withlen99(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen99$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen99$1(...) ppasm$code$withlen99$2(__VA_ARGS__)
#		define ppasm$code$withlen99$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen98(state, ##__VA_ARGS__)
#		define ppasm$code$withlen9a(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen9a$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen9a$1(...) ppasm$code$withlen9a$2(__VA_ARGS__)
#		define ppasm$code$withlen9a$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen99(state, ##__VA_ARGS__)
#		define ppasm$code$withlen9b(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen9b$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen9b$1(...) ppasm$code$withlen9b$2(__VA_ARGS__)
#		define ppasm$code$withlen9b$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen9a(state, ##__VA_ARGS__)
#		define ppasm$code$withlen9c(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen9c$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen9c$1(...) ppasm$code$withlen9c$2(__VA_ARGS__)
#		define ppasm$code$withlen9c$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen9b(state, ##__VA_ARGS__)
#		define ppasm$code$withlen9d(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen9d$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen9d$1(...) ppasm$code$withlen9d$2(__VA_ARGS__)
#		define ppasm$code$withlen9d$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen9c(state, ##__VA_ARGS__)
#		define ppasm$code$withlen9e(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen9e$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen9e$1(...) ppasm$code$withlen9e$2(__VA_ARGS__)
#		define ppasm$code$withlen9e$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen9d(state, ##__VA_ARGS__)
#		define ppasm$code$withlen9f(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlen9f$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlen9f$1(...) ppasm$code$withlen9f$2(__VA_ARGS__)
#		define ppasm$code$withlen9f$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen9e(state, ##__VA_ARGS__)
#		define ppasm$code$withlena0(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena0$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena0$1(...) ppasm$code$withlena0$2(__VA_ARGS__)
#		define ppasm$code$withlena0$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlen9f(state, ##__VA_ARGS__)
#		define ppasm$code$withlena1(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena1$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena1$1(...) ppasm$code$withlena1$2(__VA_ARGS__)
#		define ppasm$code$withlena1$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena0(state, ##__VA_ARGS__)
#		define ppasm$code$withlena2(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena2$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena2$1(...) ppasm$code$withlena2$2(__VA_ARGS__)
#		define ppasm$code$withlena2$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena1(state, ##__VA_ARGS__)
#		define ppasm$code$withlena3(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena3$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena3$1(...) ppasm$code$withlena3$2(__VA_ARGS__)
#		define ppasm$code$withlena3$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena2(state, ##__VA_ARGS__)
#		define ppasm$code$withlena4(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena4$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena4$1(...) ppasm$code$withlena4$2(__VA_ARGS__)
#		define ppasm$code$withlena4$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena3(state, ##__VA_ARGS__)
#		define ppasm$code$withlena5(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena5$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena5$1(...) ppasm$code$withlena5$2(__VA_ARGS__)
#		define ppasm$code$withlena5$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena4(state, ##__VA_ARGS__)
#		define ppasm$code$withlena6(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena6$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena6$1(...) ppasm$code$withlena6$2(__VA_ARGS__)
#		define ppasm$code$withlena6$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena5(state, ##__VA_ARGS__)
#		define ppasm$code$withlena7(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena7$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena7$1(...) ppasm$code$withlena7$2(__VA_ARGS__)
#		define ppasm$code$withlena7$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena6(state, ##__VA_ARGS__)
#		define ppasm$code$withlena8(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena8$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena8$1(...) ppasm$code$withlena8$2(__VA_ARGS__)
#		define ppasm$code$withlena8$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena7(state, ##__VA_ARGS__)
#		define ppasm$code$withlena9(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlena9$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlena9$1(...) ppasm$code$withlena9$2(__VA_ARGS__)
#		define ppasm$code$withlena9$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena8(state, ##__VA_ARGS__)
#		define ppasm$code$withlenaa(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenaa$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenaa$1(...) ppasm$code$withlenaa$2(__VA_ARGS__)
#		define ppasm$code$withlenaa$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlena9(state, ##__VA_ARGS__)
#		define ppasm$code$withlenab(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenab$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenab$1(...) ppasm$code$withlenab$2(__VA_ARGS__)
#		define ppasm$code$withlenab$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenaa(state, ##__VA_ARGS__)
#		define ppasm$code$withlenac(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenac$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenac$1(...) ppasm$code$withlenac$2(__VA_ARGS__)
#		define ppasm$code$withlenac$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenab(state, ##__VA_ARGS__)
#		define ppasm$code$withlenad(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenad$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenad$1(...) ppasm$code$withlenad$2(__VA_ARGS__)
#		define ppasm$code$withlenad$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenac(state, ##__VA_ARGS__)
#		define ppasm$code$withlenae(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenae$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenae$1(...) ppasm$code$withlenae$2(__VA_ARGS__)
#		define ppasm$code$withlenae$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenad(state, ##__VA_ARGS__)
#		define ppasm$code$withlenaf(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenaf$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenaf$1(...) ppasm$code$withlenaf$2(__VA_ARGS__)
#		define ppasm$code$withlenaf$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenae(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb0(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb0$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb0$1(...) ppasm$code$withlenb0$2(__VA_ARGS__)
#		define ppasm$code$withlenb0$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenaf(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb1(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb1$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb1$1(...) ppasm$code$withlenb1$2(__VA_ARGS__)
#		define ppasm$code$withlenb1$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb0(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb2(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb2$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb2$1(...) ppasm$code$withlenb2$2(__VA_ARGS__)
#		define ppasm$code$withlenb2$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb1(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb3(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb3$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb3$1(...) ppasm$code$withlenb3$2(__VA_ARGS__)
#		define ppasm$code$withlenb3$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb2(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb4(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb4$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb4$1(...) ppasm$code$withlenb4$2(__VA_ARGS__)
#		define ppasm$code$withlenb4$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb3(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb5(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb5$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb5$1(...) ppasm$code$withlenb5$2(__VA_ARGS__)
#		define ppasm$code$withlenb5$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb4(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb6(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb6$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb6$1(...) ppasm$code$withlenb6$2(__VA_ARGS__)
#		define ppasm$code$withlenb6$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb5(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb7(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb7$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb7$1(...) ppasm$code$withlenb7$2(__VA_ARGS__)
#		define ppasm$code$withlenb7$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb6(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb8(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb8$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb8$1(...) ppasm$code$withlenb8$2(__VA_ARGS__)
#		define ppasm$code$withlenb8$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb7(state, ##__VA_ARGS__)
#		define ppasm$code$withlenb9(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenb9$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenb9$1(...) ppasm$code$withlenb9$2(__VA_ARGS__)
#		define ppasm$code$withlenb9$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb8(state, ##__VA_ARGS__)
#		define ppasm$code$withlenba(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenba$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenba$1(...) ppasm$code$withlenba$2(__VA_ARGS__)
#		define ppasm$code$withlenba$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenb9(state, ##__VA_ARGS__)
#		define ppasm$code$withlenbb(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenbb$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenbb$1(...) ppasm$code$withlenbb$2(__VA_ARGS__)
#		define ppasm$code$withlenbb$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenba(state, ##__VA_ARGS__)
#		define ppasm$code$withlenbc(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenbc$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenbc$1(...) ppasm$code$withlenbc$2(__VA_ARGS__)
#		define ppasm$code$withlenbc$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenbb(state, ##__VA_ARGS__)
#		define ppasm$code$withlenbd(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenbd$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenbd$1(...) ppasm$code$withlenbd$2(__VA_ARGS__)
#		define ppasm$code$withlenbd$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenbc(state, ##__VA_ARGS__)
#		define ppasm$code$withlenbe(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenbe$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenbe$1(...) ppasm$code$withlenbe$2(__VA_ARGS__)
#		define ppasm$code$withlenbe$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenbd(state, ##__VA_ARGS__)
#		define ppasm$code$withlenbf(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenbf$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenbf$1(...) ppasm$code$withlenbf$2(__VA_ARGS__)
#		define ppasm$code$withlenbf$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenbe(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc0(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc0$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc0$1(...) ppasm$code$withlenc0$2(__VA_ARGS__)
#		define ppasm$code$withlenc0$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenbf(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc1(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc1$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc1$1(...) ppasm$code$withlenc1$2(__VA_ARGS__)
#		define ppasm$code$withlenc1$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc0(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc2(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc2$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc2$1(...) ppasm$code$withlenc2$2(__VA_ARGS__)
#		define ppasm$code$withlenc2$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc1(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc3(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc3$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc3$1(...) ppasm$code$withlenc3$2(__VA_ARGS__)
#		define ppasm$code$withlenc3$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc2(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc4(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc4$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc4$1(...) ppasm$code$withlenc4$2(__VA_ARGS__)
#		define ppasm$code$withlenc4$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc3(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc5(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc5$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc5$1(...) ppasm$code$withlenc5$2(__VA_ARGS__)
#		define ppasm$code$withlenc5$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc4(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc6(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc6$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc6$1(...) ppasm$code$withlenc6$2(__VA_ARGS__)
#		define ppasm$code$withlenc6$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc5(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc7(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc7$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc7$1(...) ppasm$code$withlenc7$2(__VA_ARGS__)
#		define ppasm$code$withlenc7$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc6(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc8(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc8$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc8$1(...) ppasm$code$withlenc8$2(__VA_ARGS__)
#		define ppasm$code$withlenc8$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc7(state, ##__VA_ARGS__)
#		define ppasm$code$withlenc9(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenc9$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenc9$1(...) ppasm$code$withlenc9$2(__VA_ARGS__)
#		define ppasm$code$withlenc9$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc8(state, ##__VA_ARGS__)
#		define ppasm$code$withlenca(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenca$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenca$1(...) ppasm$code$withlenca$2(__VA_ARGS__)
#		define ppasm$code$withlenca$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenc9(state, ##__VA_ARGS__)
#		define ppasm$code$withlencb(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlencb$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlencb$1(...) ppasm$code$withlencb$2(__VA_ARGS__)
#		define ppasm$code$withlencb$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenca(state, ##__VA_ARGS__)
#		define ppasm$code$withlencc(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlencc$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlencc$1(...) ppasm$code$withlencc$2(__VA_ARGS__)
#		define ppasm$code$withlencc$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlencb(state, ##__VA_ARGS__)
#		define ppasm$code$withlencd(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlencd$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlencd$1(...) ppasm$code$withlencd$2(__VA_ARGS__)
#		define ppasm$code$withlencd$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlencc(state, ##__VA_ARGS__)
#		define ppasm$code$withlence(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlence$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlence$1(...) ppasm$code$withlence$2(__VA_ARGS__)
#		define ppasm$code$withlence$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlencd(state, ##__VA_ARGS__)
#		define ppasm$code$withlencf(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlencf$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlencf$1(...) ppasm$code$withlencf$2(__VA_ARGS__)
#		define ppasm$code$withlencf$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlence(state, ##__VA_ARGS__)
#		define ppasm$code$withlend0(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend0$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend0$1(...) ppasm$code$withlend0$2(__VA_ARGS__)
#		define ppasm$code$withlend0$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlencf(state, ##__VA_ARGS__)
#		define ppasm$code$withlend1(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend1$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend1$1(...) ppasm$code$withlend1$2(__VA_ARGS__)
#		define ppasm$code$withlend1$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend0(state, ##__VA_ARGS__)
#		define ppasm$code$withlend2(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend2$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend2$1(...) ppasm$code$withlend2$2(__VA_ARGS__)
#		define ppasm$code$withlend2$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend1(state, ##__VA_ARGS__)
#		define ppasm$code$withlend3(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend3$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend3$1(...) ppasm$code$withlend3$2(__VA_ARGS__)
#		define ppasm$code$withlend3$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend2(state, ##__VA_ARGS__)
#		define ppasm$code$withlend4(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend4$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend4$1(...) ppasm$code$withlend4$2(__VA_ARGS__)
#		define ppasm$code$withlend4$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend3(state, ##__VA_ARGS__)
#		define ppasm$code$withlend5(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend5$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend5$1(...) ppasm$code$withlend5$2(__VA_ARGS__)
#		define ppasm$code$withlend5$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend4(state, ##__VA_ARGS__)
#		define ppasm$code$withlend6(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend6$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend6$1(...) ppasm$code$withlend6$2(__VA_ARGS__)
#		define ppasm$code$withlend6$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend5(state, ##__VA_ARGS__)
#		define ppasm$code$withlend7(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend7$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend7$1(...) ppasm$code$withlend7$2(__VA_ARGS__)
#		define ppasm$code$withlend7$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend6(state, ##__VA_ARGS__)
#		define ppasm$code$withlend8(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend8$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend8$1(...) ppasm$code$withlend8$2(__VA_ARGS__)
#		define ppasm$code$withlend8$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend7(state, ##__VA_ARGS__)
#		define ppasm$code$withlend9(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlend9$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlend9$1(...) ppasm$code$withlend9$2(__VA_ARGS__)
#		define ppasm$code$withlend9$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend8(state, ##__VA_ARGS__)
#		define ppasm$code$withlenda(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenda$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenda$1(...) ppasm$code$withlenda$2(__VA_ARGS__)
#		define ppasm$code$withlenda$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlend9(state, ##__VA_ARGS__)
#		define ppasm$code$withlendb(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlendb$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlendb$1(...) ppasm$code$withlendb$2(__VA_ARGS__)
#		define ppasm$code$withlendb$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenda(state, ##__VA_ARGS__)
#		define ppasm$code$withlendc(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlendc$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlendc$1(...) ppasm$code$withlendc$2(__VA_ARGS__)
#		define ppasm$code$withlendc$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlendb(state, ##__VA_ARGS__)
#		define ppasm$code$withlendd(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlendd$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlendd$1(...) ppasm$code$withlendd$2(__VA_ARGS__)
#		define ppasm$code$withlendd$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlendc(state, ##__VA_ARGS__)
#		define ppasm$code$withlende(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlende$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlende$1(...) ppasm$code$withlende$2(__VA_ARGS__)
#		define ppasm$code$withlende$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlendd(state, ##__VA_ARGS__)
#		define ppasm$code$withlendf(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlendf$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlendf$1(...) ppasm$code$withlendf$2(__VA_ARGS__)
#		define ppasm$code$withlendf$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlende(state, ##__VA_ARGS__)
#		define ppasm$code$withlene0(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene0$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene0$1(...) ppasm$code$withlene0$2(__VA_ARGS__)
#		define ppasm$code$withlene0$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlendf(state, ##__VA_ARGS__)
#		define ppasm$code$withlene1(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene1$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene1$1(...) ppasm$code$withlene1$2(__VA_ARGS__)
#		define ppasm$code$withlene1$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene0(state, ##__VA_ARGS__)
#		define ppasm$code$withlene2(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene2$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene2$1(...) ppasm$code$withlene2$2(__VA_ARGS__)
#		define ppasm$code$withlene2$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene1(state, ##__VA_ARGS__)
#		define ppasm$code$withlene3(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene3$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene3$1(...) ppasm$code$withlene3$2(__VA_ARGS__)
#		define ppasm$code$withlene3$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene2(state, ##__VA_ARGS__)
#		define ppasm$code$withlene4(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene4$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene4$1(...) ppasm$code$withlene4$2(__VA_ARGS__)
#		define ppasm$code$withlene4$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene3(state, ##__VA_ARGS__)
#		define ppasm$code$withlene5(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene5$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene5$1(...) ppasm$code$withlene5$2(__VA_ARGS__)
#		define ppasm$code$withlene5$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene4(state, ##__VA_ARGS__)
#		define ppasm$code$withlene6(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene6$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene6$1(...) ppasm$code$withlene6$2(__VA_ARGS__)
#		define ppasm$code$withlene6$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene5(state, ##__VA_ARGS__)
#		define ppasm$code$withlene7(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene7$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene7$1(...) ppasm$code$withlene7$2(__VA_ARGS__)
#		define ppasm$code$withlene7$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene6(state, ##__VA_ARGS__)
#		define ppasm$code$withlene8(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene8$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene8$1(...) ppasm$code$withlene8$2(__VA_ARGS__)
#		define ppasm$code$withlene8$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene7(state, ##__VA_ARGS__)
#		define ppasm$code$withlene9(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlene9$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlene9$1(...) ppasm$code$withlene9$2(__VA_ARGS__)
#		define ppasm$code$withlene9$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene8(state, ##__VA_ARGS__)
#		define ppasm$code$withlenea(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenea$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenea$1(...) ppasm$code$withlenea$2(__VA_ARGS__)
#		define ppasm$code$withlenea$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlene9(state, ##__VA_ARGS__)
#		define ppasm$code$withleneb(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withleneb$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withleneb$1(...) ppasm$code$withleneb$2(__VA_ARGS__)
#		define ppasm$code$withleneb$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenea(state, ##__VA_ARGS__)
#		define ppasm$code$withlenec(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenec$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenec$1(...) ppasm$code$withlenec$2(__VA_ARGS__)
#		define ppasm$code$withlenec$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withleneb(state, ##__VA_ARGS__)
#		define ppasm$code$withlened(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlened$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlened$1(...) ppasm$code$withlened$2(__VA_ARGS__)
#		define ppasm$code$withlened$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenec(state, ##__VA_ARGS__)
#		define ppasm$code$withlenee(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenee$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenee$1(...) ppasm$code$withlenee$2(__VA_ARGS__)
#		define ppasm$code$withlenee$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlened(state, ##__VA_ARGS__)
#		define ppasm$code$withlenef(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenef$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenef$1(...) ppasm$code$withlenef$2(__VA_ARGS__)
#		define ppasm$code$withlenef$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenee(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf0(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf0$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf0$1(...) ppasm$code$withlenf0$2(__VA_ARGS__)
#		define ppasm$code$withlenf0$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenef(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf1(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf1$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf1$1(...) ppasm$code$withlenf1$2(__VA_ARGS__)
#		define ppasm$code$withlenf1$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf0(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf2(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf2$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf2$1(...) ppasm$code$withlenf2$2(__VA_ARGS__)
#		define ppasm$code$withlenf2$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf1(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf3(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf3$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf3$1(...) ppasm$code$withlenf3$2(__VA_ARGS__)
#		define ppasm$code$withlenf3$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf2(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf4(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf4$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf4$1(...) ppasm$code$withlenf4$2(__VA_ARGS__)
#		define ppasm$code$withlenf4$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf3(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf5(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf5$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf5$1(...) ppasm$code$withlenf5$2(__VA_ARGS__)
#		define ppasm$code$withlenf5$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf4(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf6(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf6$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf6$1(...) ppasm$code$withlenf6$2(__VA_ARGS__)
#		define ppasm$code$withlenf6$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf5(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf7(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf7$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf7$1(...) ppasm$code$withlenf7$2(__VA_ARGS__)
#		define ppasm$code$withlenf7$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf6(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf8(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf8$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf8$1(...) ppasm$code$withlenf8$2(__VA_ARGS__)
#		define ppasm$code$withlenf8$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf7(state, ##__VA_ARGS__)
#		define ppasm$code$withlenf9(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenf9$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenf9$1(...) ppasm$code$withlenf9$2(__VA_ARGS__)
#		define ppasm$code$withlenf9$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf8(state, ##__VA_ARGS__)
#		define ppasm$code$withlenfa(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenfa$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenfa$1(...) ppasm$code$withlenfa$2(__VA_ARGS__)
#		define ppasm$code$withlenfa$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenf9(state, ##__VA_ARGS__)
#		define ppasm$code$withlenfb(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenfb$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenfb$1(...) ppasm$code$withlenfb$2(__VA_ARGS__)
#		define ppasm$code$withlenfb$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenfa(state, ##__VA_ARGS__)
#		define ppasm$code$withlenfc(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenfc$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenfc$1(...) ppasm$code$withlenfc$2(__VA_ARGS__)
#		define ppasm$code$withlenfc$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenfb(state, ##__VA_ARGS__)
#		define ppasm$code$withlenfd(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenfd$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenfd$1(...) ppasm$code$withlenfd$2(__VA_ARGS__)
#		define ppasm$code$withlenfd$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenfc(state, ##__VA_ARGS__)
#		define ppasm$code$withlenfe(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenfe$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenfe$1(...) ppasm$code$withlenfe$2(__VA_ARGS__)
#		define ppasm$code$withlenfe$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenfd(state, ##__VA_ARGS__)
#		define ppasm$code$withlenff(state, instr, ...) comma$if(bit$and(i32$isnonzero(state$get$offset(state)),i08$isnonzero(i08$fromhex(countbytes(code(state, instr)))))) ppasm$code$withlenff$1(scan(state, instr), instr, __VA_ARGS__)
#		define ppasm$code$withlenff$1(...) ppasm$code$withlenff$2(__VA_ARGS__)
#		define ppasm$code$withlenff$2(state, instr, ...) formatbytes(code(state, instr)) ppasm$code$withlenfe(state, ##__VA_ARGS__)
#		define ppasm$included 1
#		define ppasm$scan(n, ...) state$set$offset(ppasm$scan$withlen##n(state$init, ##__VA_ARGS__),i32$zero)
#		define ppasm$scan$withlen00(state) state
#		define ppasm$scan$withlen01(state, instr) scan(state, instr)
#		define ppasm$scan$withlen02(state, instr, ...) call$delayed$02(ppasm$scan$withlen01, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen03(state, instr, ...) call$delayed$03(ppasm$scan$withlen02, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen04(state, instr, ...) call$delayed$04(ppasm$scan$withlen03, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen05(state, instr, ...) call$delayed$05(ppasm$scan$withlen04, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen06(state, instr, ...) call$delayed$06(ppasm$scan$withlen05, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen07(state, instr, ...) call$delayed$07(ppasm$scan$withlen06, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen08(state, instr, ...) call$delayed$08(ppasm$scan$withlen07, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen09(state, instr, ...) call$delayed$09(ppasm$scan$withlen08, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen0a(state, instr, ...) call$delayed$0a(ppasm$scan$withlen09, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen0b(state, instr, ...) call$delayed$0b(ppasm$scan$withlen0a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen0c(state, instr, ...) call$delayed$0c(ppasm$scan$withlen0b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen0d(state, instr, ...) call$delayed$0d(ppasm$scan$withlen0c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen0e(state, instr, ...) call$delayed$0e(ppasm$scan$withlen0d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen0f(state, instr, ...) call$delayed$0f(ppasm$scan$withlen0e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen10(state, instr, ...) call$delayed$10(ppasm$scan$withlen0f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen11(state, instr, ...) call$delayed$11(ppasm$scan$withlen10, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen12(state, instr, ...) call$delayed$12(ppasm$scan$withlen11, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen13(state, instr, ...) call$delayed$13(ppasm$scan$withlen12, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen14(state, instr, ...) call$delayed$14(ppasm$scan$withlen13, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen15(state, instr, ...) call$delayed$15(ppasm$scan$withlen14, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen16(state, instr, ...) call$delayed$16(ppasm$scan$withlen15, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen17(state, instr, ...) call$delayed$17(ppasm$scan$withlen16, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen18(state, instr, ...) call$delayed$18(ppasm$scan$withlen17, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen19(state, instr, ...) call$delayed$19(ppasm$scan$withlen18, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen1a(state, instr, ...) call$delayed$1a(ppasm$scan$withlen19, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen1b(state, instr, ...) call$delayed$1b(ppasm$scan$withlen1a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen1c(state, instr, ...) call$delayed$1c(ppasm$scan$withlen1b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen1d(state, instr, ...) call$delayed$1d(ppasm$scan$withlen1c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen1e(state, instr, ...) call$delayed$1e(ppasm$scan$withlen1d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen1f(state, instr, ...) call$delayed$1f(ppasm$scan$withlen1e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen20(state, instr, ...) call$delayed$20(ppasm$scan$withlen1f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen21(state, instr, ...) call$delayed$21(ppasm$scan$withlen20, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen22(state, instr, ...) call$delayed$22(ppasm$scan$withlen21, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen23(state, instr, ...) call$delayed$23(ppasm$scan$withlen22, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen24(state, instr, ...) call$delayed$24(ppasm$scan$withlen23, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen25(state, instr, ...) call$delayed$25(ppasm$scan$withlen24, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen26(state, instr, ...) call$delayed$26(ppasm$scan$withlen25, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen27(state, instr, ...) call$delayed$27(ppasm$scan$withlen26, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen28(state, instr, ...) call$delayed$28(ppasm$scan$withlen27, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen29(state, instr, ...) call$delayed$29(ppasm$scan$withlen28, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen2a(state, instr, ...) call$delayed$2a(ppasm$scan$withlen29, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen2b(state, instr, ...) call$delayed$2b(ppasm$scan$withlen2a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen2c(state, instr, ...) call$delayed$2c(ppasm$scan$withlen2b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen2d(state, instr, ...) call$delayed$2d(ppasm$scan$withlen2c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen2e(state, instr, ...) call$delayed$2e(ppasm$scan$withlen2d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen2f(state, instr, ...) call$delayed$2f(ppasm$scan$withlen2e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen30(state, instr, ...) call$delayed$30(ppasm$scan$withlen2f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen31(state, instr, ...) call$delayed$31(ppasm$scan$withlen30, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen32(state, instr, ...) call$delayed$32(ppasm$scan$withlen31, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen33(state, instr, ...) call$delayed$33(ppasm$scan$withlen32, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen34(state, instr, ...) call$delayed$34(ppasm$scan$withlen33, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen35(state, instr, ...) call$delayed$35(ppasm$scan$withlen34, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen36(state, instr, ...) call$delayed$36(ppasm$scan$withlen35, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen37(state, instr, ...) call$delayed$37(ppasm$scan$withlen36, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen38(state, instr, ...) call$delayed$38(ppasm$scan$withlen37, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen39(state, instr, ...) call$delayed$39(ppasm$scan$withlen38, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen3a(state, instr, ...) call$delayed$3a(ppasm$scan$withlen39, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen3b(state, instr, ...) call$delayed$3b(ppasm$scan$withlen3a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen3c(state, instr, ...) call$delayed$3c(ppasm$scan$withlen3b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen3d(state, instr, ...) call$delayed$3d(ppasm$scan$withlen3c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen3e(state, instr, ...) call$delayed$3e(ppasm$scan$withlen3d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen3f(state, instr, ...) call$delayed$3f(ppasm$scan$withlen3e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen40(state, instr, ...) call$delayed$40(ppasm$scan$withlen3f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen41(state, instr, ...) call$delayed$41(ppasm$scan$withlen40, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen42(state, instr, ...) call$delayed$42(ppasm$scan$withlen41, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen43(state, instr, ...) call$delayed$43(ppasm$scan$withlen42, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen44(state, instr, ...) call$delayed$44(ppasm$scan$withlen43, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen45(state, instr, ...) call$delayed$45(ppasm$scan$withlen44, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen46(state, instr, ...) call$delayed$46(ppasm$scan$withlen45, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen47(state, instr, ...) call$delayed$47(ppasm$scan$withlen46, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen48(state, instr, ...) call$delayed$48(ppasm$scan$withlen47, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen49(state, instr, ...) call$delayed$49(ppasm$scan$withlen48, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen4a(state, instr, ...) call$delayed$4a(ppasm$scan$withlen49, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen4b(state, instr, ...) call$delayed$4b(ppasm$scan$withlen4a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen4c(state, instr, ...) call$delayed$4c(ppasm$scan$withlen4b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen4d(state, instr, ...) call$delayed$4d(ppasm$scan$withlen4c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen4e(state, instr, ...) call$delayed$4e(ppasm$scan$withlen4d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen4f(state, instr, ...) call$delayed$4f(ppasm$scan$withlen4e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen50(state, instr, ...) call$delayed$50(ppasm$scan$withlen4f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen51(state, instr, ...) call$delayed$51(ppasm$scan$withlen50, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen52(state, instr, ...) call$delayed$52(ppasm$scan$withlen51, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen53(state, instr, ...) call$delayed$53(ppasm$scan$withlen52, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen54(state, instr, ...) call$delayed$54(ppasm$scan$withlen53, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen55(state, instr, ...) call$delayed$55(ppasm$scan$withlen54, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen56(state, instr, ...) call$delayed$56(ppasm$scan$withlen55, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen57(state, instr, ...) call$delayed$57(ppasm$scan$withlen56, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen58(state, instr, ...) call$delayed$58(ppasm$scan$withlen57, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen59(state, instr, ...) call$delayed$59(ppasm$scan$withlen58, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen5a(state, instr, ...) call$delayed$5a(ppasm$scan$withlen59, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen5b(state, instr, ...) call$delayed$5b(ppasm$scan$withlen5a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen5c(state, instr, ...) call$delayed$5c(ppasm$scan$withlen5b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen5d(state, instr, ...) call$delayed$5d(ppasm$scan$withlen5c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen5e(state, instr, ...) call$delayed$5e(ppasm$scan$withlen5d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen5f(state, instr, ...) call$delayed$5f(ppasm$scan$withlen5e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen60(state, instr, ...) call$delayed$60(ppasm$scan$withlen5f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen61(state, instr, ...) call$delayed$61(ppasm$scan$withlen60, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen62(state, instr, ...) call$delayed$62(ppasm$scan$withlen61, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen63(state, instr, ...) call$delayed$63(ppasm$scan$withlen62, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen64(state, instr, ...) call$delayed$64(ppasm$scan$withlen63, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen65(state, instr, ...) call$delayed$65(ppasm$scan$withlen64, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen66(state, instr, ...) call$delayed$66(ppasm$scan$withlen65, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen67(state, instr, ...) call$delayed$67(ppasm$scan$withlen66, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen68(state, instr, ...) call$delayed$68(ppasm$scan$withlen67, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen69(state, instr, ...) call$delayed$69(ppasm$scan$withlen68, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen6a(state, instr, ...) call$delayed$6a(ppasm$scan$withlen69, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen6b(state, instr, ...) call$delayed$6b(ppasm$scan$withlen6a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen6c(state, instr, ...) call$delayed$6c(ppasm$scan$withlen6b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen6d(state, instr, ...) call$delayed$6d(ppasm$scan$withlen6c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen6e(state, instr, ...) call$delayed$6e(ppasm$scan$withlen6d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen6f(state, instr, ...) call$delayed$6f(ppasm$scan$withlen6e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen70(state, instr, ...) call$delayed$70(ppasm$scan$withlen6f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen71(state, instr, ...) call$delayed$71(ppasm$scan$withlen70, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen72(state, instr, ...) call$delayed$72(ppasm$scan$withlen71, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen73(state, instr, ...) call$delayed$73(ppasm$scan$withlen72, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen74(state, instr, ...) call$delayed$74(ppasm$scan$withlen73, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen75(state, instr, ...) call$delayed$75(ppasm$scan$withlen74, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen76(state, instr, ...) call$delayed$76(ppasm$scan$withlen75, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen77(state, instr, ...) call$delayed$77(ppasm$scan$withlen76, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen78(state, instr, ...) call$delayed$78(ppasm$scan$withlen77, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen79(state, instr, ...) call$delayed$79(ppasm$scan$withlen78, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen7a(state, instr, ...) call$delayed$7a(ppasm$scan$withlen79, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen7b(state, instr, ...) call$delayed$7b(ppasm$scan$withlen7a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen7c(state, instr, ...) call$delayed$7c(ppasm$scan$withlen7b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen7d(state, instr, ...) call$delayed$7d(ppasm$scan$withlen7c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen7e(state, instr, ...) call$delayed$7e(ppasm$scan$withlen7d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen7f(state, instr, ...) call$delayed$7f(ppasm$scan$withlen7e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen80(state, instr, ...) call$delayed$80(ppasm$scan$withlen7f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen81(state, instr, ...) call$delayed$81(ppasm$scan$withlen80, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen82(state, instr, ...) call$delayed$82(ppasm$scan$withlen81, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen83(state, instr, ...) call$delayed$83(ppasm$scan$withlen82, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen84(state, instr, ...) call$delayed$84(ppasm$scan$withlen83, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen85(state, instr, ...) call$delayed$85(ppasm$scan$withlen84, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen86(state, instr, ...) call$delayed$86(ppasm$scan$withlen85, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen87(state, instr, ...) call$delayed$87(ppasm$scan$withlen86, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen88(state, instr, ...) call$delayed$88(ppasm$scan$withlen87, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen89(state, instr, ...) call$delayed$89(ppasm$scan$withlen88, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen8a(state, instr, ...) call$delayed$8a(ppasm$scan$withlen89, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen8b(state, instr, ...) call$delayed$8b(ppasm$scan$withlen8a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen8c(state, instr, ...) call$delayed$8c(ppasm$scan$withlen8b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen8d(state, instr, ...) call$delayed$8d(ppasm$scan$withlen8c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen8e(state, instr, ...) call$delayed$8e(ppasm$scan$withlen8d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen8f(state, instr, ...) call$delayed$8f(ppasm$scan$withlen8e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen90(state, instr, ...) call$delayed$90(ppasm$scan$withlen8f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen91(state, instr, ...) call$delayed$91(ppasm$scan$withlen90, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen92(state, instr, ...) call$delayed$92(ppasm$scan$withlen91, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen93(state, instr, ...) call$delayed$93(ppasm$scan$withlen92, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen94(state, instr, ...) call$delayed$94(ppasm$scan$withlen93, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen95(state, instr, ...) call$delayed$95(ppasm$scan$withlen94, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen96(state, instr, ...) call$delayed$96(ppasm$scan$withlen95, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen97(state, instr, ...) call$delayed$97(ppasm$scan$withlen96, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen98(state, instr, ...) call$delayed$98(ppasm$scan$withlen97, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen99(state, instr, ...) call$delayed$99(ppasm$scan$withlen98, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen9a(state, instr, ...) call$delayed$9a(ppasm$scan$withlen99, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen9b(state, instr, ...) call$delayed$9b(ppasm$scan$withlen9a, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen9c(state, instr, ...) call$delayed$9c(ppasm$scan$withlen9b, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen9d(state, instr, ...) call$delayed$9d(ppasm$scan$withlen9c, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen9e(state, instr, ...) call$delayed$9e(ppasm$scan$withlen9d, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlen9f(state, instr, ...) call$delayed$9f(ppasm$scan$withlen9e, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena0(state, instr, ...) call$delayed$a0(ppasm$scan$withlen9f, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena1(state, instr, ...) call$delayed$a1(ppasm$scan$withlena0, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena2(state, instr, ...) call$delayed$a2(ppasm$scan$withlena1, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena3(state, instr, ...) call$delayed$a3(ppasm$scan$withlena2, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena4(state, instr, ...) call$delayed$a4(ppasm$scan$withlena3, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena5(state, instr, ...) call$delayed$a5(ppasm$scan$withlena4, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena6(state, instr, ...) call$delayed$a6(ppasm$scan$withlena5, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena7(state, instr, ...) call$delayed$a7(ppasm$scan$withlena6, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena8(state, instr, ...) call$delayed$a8(ppasm$scan$withlena7, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlena9(state, instr, ...) call$delayed$a9(ppasm$scan$withlena8, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenaa(state, instr, ...) call$delayed$aa(ppasm$scan$withlena9, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenab(state, instr, ...) call$delayed$ab(ppasm$scan$withlenaa, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenac(state, instr, ...) call$delayed$ac(ppasm$scan$withlenab, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenad(state, instr, ...) call$delayed$ad(ppasm$scan$withlenac, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenae(state, instr, ...) call$delayed$ae(ppasm$scan$withlenad, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenaf(state, instr, ...) call$delayed$af(ppasm$scan$withlenae, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb0(state, instr, ...) call$delayed$b0(ppasm$scan$withlenaf, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb1(state, instr, ...) call$delayed$b1(ppasm$scan$withlenb0, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb2(state, instr, ...) call$delayed$b2(ppasm$scan$withlenb1, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb3(state, instr, ...) call$delayed$b3(ppasm$scan$withlenb2, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb4(state, instr, ...) call$delayed$b4(ppasm$scan$withlenb3, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb5(state, instr, ...) call$delayed$b5(ppasm$scan$withlenb4, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb6(state, instr, ...) call$delayed$b6(ppasm$scan$withlenb5, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb7(state, instr, ...) call$delayed$b7(ppasm$scan$withlenb6, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb8(state, instr, ...) call$delayed$b8(ppasm$scan$withlenb7, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenb9(state, instr, ...) call$delayed$b9(ppasm$scan$withlenb8, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenba(state, instr, ...) call$delayed$ba(ppasm$scan$withlenb9, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenbb(state, instr, ...) call$delayed$bb(ppasm$scan$withlenba, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenbc(state, instr, ...) call$delayed$bc(ppasm$scan$withlenbb, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenbd(state, instr, ...) call$delayed$bd(ppasm$scan$withlenbc, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenbe(state, instr, ...) call$delayed$be(ppasm$scan$withlenbd, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenbf(state, instr, ...) call$delayed$bf(ppasm$scan$withlenbe, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc0(state, instr, ...) call$delayed$c0(ppasm$scan$withlenbf, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc1(state, instr, ...) call$delayed$c1(ppasm$scan$withlenc0, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc2(state, instr, ...) call$delayed$c2(ppasm$scan$withlenc1, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc3(state, instr, ...) call$delayed$c3(ppasm$scan$withlenc2, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc4(state, instr, ...) call$delayed$c4(ppasm$scan$withlenc3, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc5(state, instr, ...) call$delayed$c5(ppasm$scan$withlenc4, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc6(state, instr, ...) call$delayed$c6(ppasm$scan$withlenc5, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc7(state, instr, ...) call$delayed$c7(ppasm$scan$withlenc6, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc8(state, instr, ...) call$delayed$c8(ppasm$scan$withlenc7, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenc9(state, instr, ...) call$delayed$c9(ppasm$scan$withlenc8, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenca(state, instr, ...) call$delayed$ca(ppasm$scan$withlenc9, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlencb(state, instr, ...) call$delayed$cb(ppasm$scan$withlenca, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlencc(state, instr, ...) call$delayed$cc(ppasm$scan$withlencb, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlencd(state, instr, ...) call$delayed$cd(ppasm$scan$withlencc, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlence(state, instr, ...) call$delayed$ce(ppasm$scan$withlencd, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlencf(state, instr, ...) call$delayed$cf(ppasm$scan$withlence, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend0(state, instr, ...) call$delayed$d0(ppasm$scan$withlencf, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend1(state, instr, ...) call$delayed$d1(ppasm$scan$withlend0, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend2(state, instr, ...) call$delayed$d2(ppasm$scan$withlend1, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend3(state, instr, ...) call$delayed$d3(ppasm$scan$withlend2, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend4(state, instr, ...) call$delayed$d4(ppasm$scan$withlend3, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend5(state, instr, ...) call$delayed$d5(ppasm$scan$withlend4, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend6(state, instr, ...) call$delayed$d6(ppasm$scan$withlend5, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend7(state, instr, ...) call$delayed$d7(ppasm$scan$withlend6, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend8(state, instr, ...) call$delayed$d8(ppasm$scan$withlend7, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlend9(state, instr, ...) call$delayed$d9(ppasm$scan$withlend8, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenda(state, instr, ...) call$delayed$da(ppasm$scan$withlend9, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlendb(state, instr, ...) call$delayed$db(ppasm$scan$withlenda, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlendc(state, instr, ...) call$delayed$dc(ppasm$scan$withlendb, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlendd(state, instr, ...) call$delayed$dd(ppasm$scan$withlendc, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlende(state, instr, ...) call$delayed$de(ppasm$scan$withlendd, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlendf(state, instr, ...) call$delayed$df(ppasm$scan$withlende, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene0(state, instr, ...) call$delayed$e0(ppasm$scan$withlendf, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene1(state, instr, ...) call$delayed$e1(ppasm$scan$withlene0, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene2(state, instr, ...) call$delayed$e2(ppasm$scan$withlene1, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene3(state, instr, ...) call$delayed$e3(ppasm$scan$withlene2, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene4(state, instr, ...) call$delayed$e4(ppasm$scan$withlene3, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene5(state, instr, ...) call$delayed$e5(ppasm$scan$withlene4, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene6(state, instr, ...) call$delayed$e6(ppasm$scan$withlene5, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene7(state, instr, ...) call$delayed$e7(ppasm$scan$withlene6, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene8(state, instr, ...) call$delayed$e8(ppasm$scan$withlene7, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlene9(state, instr, ...) call$delayed$e9(ppasm$scan$withlene8, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenea(state, instr, ...) call$delayed$ea(ppasm$scan$withlene9, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withleneb(state, instr, ...) call$delayed$eb(ppasm$scan$withlenea, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenec(state, instr, ...) call$delayed$ec(ppasm$scan$withleneb, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlened(state, instr, ...) call$delayed$ed(ppasm$scan$withlenec, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenee(state, instr, ...) call$delayed$ee(ppasm$scan$withlened, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenef(state, instr, ...) call$delayed$ef(ppasm$scan$withlenee, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf0(state, instr, ...) call$delayed$f0(ppasm$scan$withlenef, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf1(state, instr, ...) call$delayed$f1(ppasm$scan$withlenf0, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf2(state, instr, ...) call$delayed$f2(ppasm$scan$withlenf1, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf3(state, instr, ...) call$delayed$f3(ppasm$scan$withlenf2, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf4(state, instr, ...) call$delayed$f4(ppasm$scan$withlenf3, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf5(state, instr, ...) call$delayed$f5(ppasm$scan$withlenf4, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf6(state, instr, ...) call$delayed$f6(ppasm$scan$withlenf5, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf7(state, instr, ...) call$delayed$f7(ppasm$scan$withlenf6, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf8(state, instr, ...) call$delayed$f8(ppasm$scan$withlenf7, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenf9(state, instr, ...) call$delayed$f9(ppasm$scan$withlenf8, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenfa(state, instr, ...) call$delayed$fa(ppasm$scan$withlenf9, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenfb(state, instr, ...) call$delayed$fb(ppasm$scan$withlenfa, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenfc(state, instr, ...) call$delayed$fc(ppasm$scan$withlenfb, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenfd(state, instr, ...) call$delayed$fd(ppasm$scan$withlenfc, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenfe(state, instr, ...) call$delayed$fe(ppasm$scan$withlenfd, scan(state, instr), ##__VA_ARGS__ )
#		define ppasm$scan$withlenff(state, instr, ...) call$delayed$ff(ppasm$scan$withlenfe, scan(state, instr), ##__VA_ARGS__ )
#		define ppif(...) ppif$1(__VA_ARGS__)
#		define ppif$1(...) ppif$2(__VA_ARGS__)
#		define ppif$2(c,t,e) ppif$cond##c(t,e)
#		define ppif$cond0(t,e) e
#		define ppif$cond1(t,e) t
#		define pragma(m) _Pragma(#m)
#		define pragma$if(...) pragma$if$1(__VA_ARGS__)
#		define pragma$if$1(...) pragma$if$2(__VA_ARGS__)
#		define pragma$if$2(c, p) pragma$if$cond##c(p)
#		define pragma$if$cond0 ignore
#		define pragma$if$cond1 pragma
#		define pragma$ifnot$cond0 pragma
#		define pragma$ifnot$cond1 ignore
#		define qword bits(64)
#		define r10 reg64(R10)
#		define r10d reg32(R10D)
#		define r10l reg08(R10L)
#		define r10w reg16(R10W)
#		define r11 reg64(R11)
#		define r11d reg32(R11D)
#		define r11l reg08(R11L)
#		define r11w reg16(R11W)
#		define r12 reg64(R12)
#		define r12d reg32(R12D)
#		define r12l reg08(R12L)
#		define r12w reg16(R12W)
#		define r13 reg64(R13)
#		define r13d reg32(R13D)
#		define r13l reg08(R13L)
#		define r13w reg16(R13W)
#		define r14 reg64(R14)
#		define r14d reg32(R14D)
#		define r14l reg08(R14L)
#		define r14w reg16(R14W)
#		define r15 reg64(R15)
#		define r15d reg32(R15D)
#		define r15l reg08(R15L)
#		define r15w reg16(R15W)
#		define r8 reg64(R8)
#		define r8d reg32(R8D)
#		define r8l reg08(R8L)
#		define r8w reg16(R8W)
#		define r9 reg64(R9)
#		define r9d reg32(R9D)
#		define r9l reg08(R9L)
#		define r9w reg16(R9W)
#		define rax reg64(RAX)
#		define rbp reg64(RBP)
#		define rbx reg64(RBX)
#		define rcx reg64(RCX)
#		define rdi reg64(RDI)
#		define rdx reg64(RDX)
#		define reg08$is$al(reg) byte$eq(0,0,0,0,0,0,0,0,byte$fromhex(regencode(reg)))
#		define reg16$is$ax(reg) byte$eq(0,0,0,0,0,0,0,0,byte$fromhex(regencode(reg)))
#		define reg32$is$eax(reg) byte$eq(0,0,0,0,0,0,0,0,byte$fromhex(regencode(reg)))
#		define reg64$is$rax(reg) byte$eq(0,0,0,0,0,0,0,0,byte$fromhex(regencode(reg)))
#		define regencode(x) regencode$1(x)
#		define regencode$1(x) regencode$2(x)
#		define regencode$2(x) regencode$##x
#		define regencode$creg(x) regencode$creg$1(x)
#		define regencode$creg$1(x) regencode$creg$2(x)
#		define regencode$creg$2(x) regencode$creg$##x
#		define regencode$creg$CR0 00
#		define regencode$creg$CR1 01
#		define regencode$creg$CR2 02
#		define regencode$creg$CR3 03
#		define regencode$creg$CR4 04
#		define regencode$creg$CR5 05
#		define regencode$creg$CR6 06
#		define regencode$creg$CR7 07
#		define regencode$dreg(x) regencode$dreg$1(x)
#		define regencode$dreg$1(x) regencode$dreg$2(x)
#		define regencode$dreg$2(x) regencode$dreg$##x
#		define regencode$dreg$DR0 00
#		define regencode$dreg$DR1 01
#		define regencode$dreg$DR2 02
#		define regencode$dreg$DR3 03
#		define regencode$dreg$DR4 04
#		define regencode$dreg$DR5 05
#		define regencode$dreg$DR6 06
#		define regencode$dreg$DR7 07
#		define regencode$fpreg80(x) regencode$fpreg80$1(x)
#		define regencode$fpreg80$1(x) regencode$fpreg80$2(x)
#		define regencode$fpreg80$2(x) regencode$fpreg80$##x
#		define regencode$fpreg80$ST0 00
#		define regencode$fpreg80$ST1 01
#		define regencode$fpreg80$ST2 02
#		define regencode$fpreg80$ST3 03
#		define regencode$fpreg80$ST4 04
#		define regencode$fpreg80$ST5 05
#		define regencode$fpreg80$ST6 06
#		define regencode$fpreg80$ST7 07
#		define regencode$mmreg128(x) regencode$mmreg128$1(x)
#		define regencode$mmreg128$1(x) regencode$mmreg128$2(x)
#		define regencode$mmreg128$2(x) regencode$mmreg128$##x
#		define regencode$mmreg128$XMM0 00
#		define regencode$mmreg128$XMM1 01
#		define regencode$mmreg128$XMM10 0a
#		define regencode$mmreg128$XMM11 0b
#		define regencode$mmreg128$XMM12 0c
#		define regencode$mmreg128$XMM13 0d
#		define regencode$mmreg128$XMM14 0e
#		define regencode$mmreg128$XMM15 0f
#		define regencode$mmreg128$XMM2 02
#		define regencode$mmreg128$XMM3 03
#		define regencode$mmreg128$XMM4 04
#		define regencode$mmreg128$XMM5 05
#		define regencode$mmreg128$XMM6 06
#		define regencode$mmreg128$XMM7 07
#		define regencode$mmreg128$XMM8 08
#		define regencode$mmreg128$XMM9 09
#		define regencode$mmreg256(x) regencode$mmreg256$1(x)
#		define regencode$mmreg256$1(x) regencode$mmreg256$2(x)
#		define regencode$mmreg256$2(x) regencode$mmreg256$##x
#		define regencode$mmreg256$YMM0 00
#		define regencode$mmreg256$YMM1 01
#		define regencode$mmreg256$YMM10 0a
#		define regencode$mmreg256$YMM11 0b
#		define regencode$mmreg256$YMM12 0c
#		define regencode$mmreg256$YMM13 0d
#		define regencode$mmreg256$YMM14 0e
#		define regencode$mmreg256$YMM15 0f
#		define regencode$mmreg256$YMM2 02
#		define regencode$mmreg256$YMM3 03
#		define regencode$mmreg256$YMM4 04
#		define regencode$mmreg256$YMM5 05
#		define regencode$mmreg256$YMM6 06
#		define regencode$mmreg256$YMM7 07
#		define regencode$mmreg256$YMM8 08
#		define regencode$mmreg256$YMM9 09
#		define regencode$mmreg64(x) regencode$mmreg64$1(x)
#		define regencode$mmreg64$1(x) regencode$mmreg64$2(x)
#		define regencode$mmreg64$2(x) regencode$mmreg64$##x
#		define regencode$mmreg64$MM0 00
#		define regencode$mmreg64$MM1 01
#		define regencode$mmreg64$MM2 02
#		define regencode$mmreg64$MM3 03
#		define regencode$mmreg64$MM4 04
#		define regencode$mmreg64$MM5 05
#		define regencode$mmreg64$MM6 06
#		define regencode$mmreg64$MM7 07
#		define regencode$reg08(x) regencode$reg08$1(x)
#		define regencode$reg08$1(x) regencode$reg08$2(x)
#		define regencode$reg08$2(x) regencode$reg08$##x
#		define regencode$reg08$AH 24
#		define regencode$reg08$AL 00
#		define regencode$reg08$BH 27
#		define regencode$reg08$BL 03
#		define regencode$reg08$BPL 15
#		define regencode$reg08$CH 25
#		define regencode$reg08$CL 01
#		define regencode$reg08$DH 26
#		define regencode$reg08$DIL 17
#		define regencode$reg08$DL 02
#		define regencode$reg08$R10L 0a
#		define regencode$reg08$R11L 0b
#		define regencode$reg08$R12L 0c
#		define regencode$reg08$R13L 0d
#		define regencode$reg08$R14L 0e
#		define regencode$reg08$R15L 0f
#		define regencode$reg08$R8L 08
#		define regencode$reg08$R9L 09
#		define regencode$reg08$SIL 16
#		define regencode$reg08$SPL 14
#		define regencode$reg16(x) regencode$reg16$1(x)
#		define regencode$reg16$1(x) regencode$reg16$2(x)
#		define regencode$reg16$2(x) regencode$reg16$##x
#		define regencode$reg16$AX 00
#		define regencode$reg16$BP 05
#		define regencode$reg16$BX 03
#		define regencode$reg16$CX 01
#		define regencode$reg16$DI 07
#		define regencode$reg16$DX 02
#		define regencode$reg16$R10W 0a
#		define regencode$reg16$R11W 0b
#		define regencode$reg16$R12W 0c
#		define regencode$reg16$R13W 0d
#		define regencode$reg16$R14W 0e
#		define regencode$reg16$R15W 0f
#		define regencode$reg16$R8W 08
#		define regencode$reg16$R9W 09
#		define regencode$reg16$SI 06
#		define regencode$reg16$SP 04
#		define regencode$reg32(x) regencode$reg32$1(x)
#		define regencode$reg32$1(x) regencode$reg32$2(x)
#		define regencode$reg32$2(x) regencode$reg32$##x
#		define regencode$reg32$EAX 00
#		define regencode$reg32$EBP 05
#		define regencode$reg32$EBX 03
#		define regencode$reg32$ECX 01
#		define regencode$reg32$EDI 07
#		define regencode$reg32$EDX 02
#		define regencode$reg32$ESI 06
#		define regencode$reg32$ESP 04
#		define regencode$reg32$R10D 0a
#		define regencode$reg32$R11D 0b
#		define regencode$reg32$R12D 0c
#		define regencode$reg32$R13D 0d
#		define regencode$reg32$R14D 0e
#		define regencode$reg32$R15D 0f
#		define regencode$reg32$R8D 08
#		define regencode$reg32$R9D 09
#		define regencode$reg64(x) regencode$reg64$1(x)
#		define regencode$reg64$1(x) regencode$reg64$2(x)
#		define regencode$reg64$2(x) regencode$reg64$##x
#		define regencode$reg64$R10 0a
#		define regencode$reg64$R11 0b
#		define regencode$reg64$R12 0c
#		define regencode$reg64$R13 0d
#		define regencode$reg64$R14 0e
#		define regencode$reg64$R15 0f
#		define regencode$reg64$R8 08
#		define regencode$reg64$R9 09
#		define regencode$reg64$RAX 00
#		define regencode$reg64$RBP 05
#		define regencode$reg64$RBX 03
#		define regencode$reg64$RCX 01
#		define regencode$reg64$RDI 07
#		define regencode$reg64$RDX 02
#		define regencode$reg64$RSI 06
#		define regencode$reg64$RSP 04
#		define regencode$segm(x) regencode$segm$1(x)
#		define regencode$segm$1(x) regencode$segm$2(x)
#		define regencode$segm$2(x) regencode$segm$##x
#		define rep prefix$rep(),
#		define repe prefix$repe(),
#		define repeat16(...) repeat8(__VA_ARGS__),repeat8(__VA_ARGS__)
#		define repeat2(...) __VA_ARGS__,__VA_ARGS__
#		define repeat32(...) repeat16(__VA_ARGS__),repeat16(__VA_ARGS__)
#		define repeat4(...) repeat2(__VA_ARGS__),repeat2(__VA_ARGS__)
#		define repeat64(...) repeat32(__VA_ARGS__),repeat32(__VA_ARGS__)
#		define repeat8(...) repeat4(__VA_ARGS__),repeat4(__VA_ARGS__)
#		define repne prefix$repne(),
#		define repnz prefix$repnz(),
#		define repz prefix$repz(),
#		define rex$optional(...) rex$optional$1(__VA_ARGS__)
#		define rex$optional$1(...) rex$optional$2(__VA_ARGS__)
#		define rex$optional$2(w,r,b,x) unpack(ppif(bit$any4(w,r,b,x),(byte$tohex(byte$as$ff,0,1,0,0,w,r,b,x),),()))
#		define rex$required(...) rex$required$1(__VA_ARGS__)
#		define rex$required$1(...) rex$required$2(__VA_ARGS__)
#		define rex$required$2(w,r,b,x) byte$tohex(byte$as$ff,0,1,0,0,w,r,b,x),
#		define rex$withhigh(...) rex$withhigh$1(__VA_ARGS__)
#		define rex$withhigh$1(...) rex$withhigh$2(__VA_ARGS__)
#		define rex$withhigh$2(h,f,w,r,b,x) unpack(ppif(f,(rex$required(w,r,b,x)),(rex$optional(w,r,b,x)))) error$if(bit$and(h,bit$any5(f,w,r,b,x)), "unsupported register combination")
#		define rex08m(m0) rex08m$1(byte$fromhex(mem$get$base(m0)), byte$fromhex(mem$get$index(m0)))
#		define rex08m$1(...) rex08m$2(__VA_ARGS__)
#		define rex08m$2(b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) rex$optional(0,0,i3,b3)
#		define rex08r(r0) rex08r$1(byte$fromhex(regencode(r0)))
#		define rex08r$1(...) rex08r$2(__VA_ARGS__)
#		define rex08r$2(b7,b6,b5,b4,b3,b2,b1,b0) rex$withhigh(b5,b4,0,0,0,b3)
#		define rex08rm(r, m) rex08rm$1(byte$fromhex(regencode(r)), byte$fromhex(mem$get$base(m)), byte$fromhex(mem$get$index(m)))
#		define rex08rm$1(...) rex08rm$2(__VA_ARGS__)
#		define rex08rm$2(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) rex$withhigh(r5,r4,0,r3,i3,b3)
#		define rex08rr(r0,r1) rex08rr$1(byte$fromhex(regencode(r0)), byte$fromhex(regencode(r1)))
#		define rex08rr$1(...) rex08rr$2(__VA_ARGS__)
#		define rex08rr$2(r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0, r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0) rex$withhigh(bit$or(r0b5,r1b5),bit$or(r0b4,r1b4),0,r1b3,0,r0b3)
#		define rex128rr(r0,r1) rex128rr$1(byte$fromhex(regencode(r0)), byte$fromhex(regencode(r1)))
#		define rex128rr$1(...) rex128rr$2(__VA_ARGS__)
#		define rex128rr$2(r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0, r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0) rex$optional(0,r1b3,0,r0b3)
#		define rex16m(m0) rex16m$1(byte$fromhex(mem$get$base(m0)), byte$fromhex(mem$get$index(m0)))
#		define rex16m$1(...) rex16m$2(__VA_ARGS__)
#		define rex16m$2(b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) 66, rex$optional(0,0,i3,b3)
#		define rex16r(r0) rex16r$1(byte$fromhex(regencode(r0)))
#		define rex16r$1(...) rex16r$2(__VA_ARGS__)
#		define rex16r$2(b7,b6,b5,b4,b3,b2,b1,b0) 66, rex$optional(0,0,0,b3)
#		define rex16rm(r, m) rex16rm$1(byte$fromhex(regencode(r)), byte$fromhex(mem$get$base(m)), byte$fromhex(mem$get$index(m)))
#		define rex16rm$1(...) rex16rm$2(__VA_ARGS__)
#		define rex16rm$2(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) 66, rex$optional(0,r3,i3,b3)
#		define rex16rr(r0,r1) rex16rr$1(byte$fromhex(regencode(r0)), byte$fromhex(regencode(r1)))
#		define rex16rr$1(...) rex16rr$2(__VA_ARGS__)
#		define rex16rr$2(r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0, r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0) 66, rex$optional(0,r1b3,0,r0b3)
#		define rex32m(m0) rex32m$1(byte$fromhex(mem$get$base(m0)), byte$fromhex(mem$get$index(m0)))
#		define rex32m$1(...) rex32m$2(__VA_ARGS__)
#		define rex32m$2(b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) rex$optional(0,0,i3,b3)
#		define rex32r(r0) rex32r$1(byte$fromhex(regencode(r0)))
#		define rex32r$1(...) rex32r$2(__VA_ARGS__)
#		define rex32r$2(b7,b6,b5,b4,b3,b2,b1,b0) rex$optional(0,0,0,b3)
#		define rex32rm(r, m) rex32rm$1(byte$fromhex(regencode(r)), byte$fromhex(mem$get$base(m)), byte$fromhex(mem$get$index(m)))
#		define rex32rm$1(...) rex32rm$2(__VA_ARGS__)
#		define rex32rm$2(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) rex$optional(0,r3,i3,b3)
#		define rex32rr(r0,r1) rex32rr$1(byte$fromhex(regencode(r0)), byte$fromhex(regencode(r1)))
#		define rex32rr$1(...) rex32rr$2(__VA_ARGS__)
#		define rex32rr$2(r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0, r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0) rex$optional(0,r1b3,0,r0b3)
#		define rex64m(m0) rex64m$1(byte$fromhex(mem$get$base(m0)), byte$fromhex(mem$get$index(m0)))
#		define rex64m$1(...) rex64m$2(__VA_ARGS__)
#		define rex64m$2(b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) rex$optional(1,0,i3,b3)
#		define rex64r(r0) rex64r$1(byte$fromhex(regencode(r0)))
#		define rex64r$1(...) rex64r$2(__VA_ARGS__)
#		define rex64r$2(b7,b6,b5,b4,b3,b2,b1,b0) rex$optional(1,0,0,b3)
#		define rex64rm(r, m) rex64rm$1(byte$fromhex(regencode(r)), byte$fromhex(mem$get$base(m)), byte$fromhex(mem$get$index(m)))
#		define rex64rm$1(...) rex64rm$2(__VA_ARGS__)
#		define rex64rm$2(r7,r6,r5,r4,r3,r2,r1,r0, b7,b6,b5,b4,b3,b2,b1,b0, i7,i6,i5,i4,i3,i2,i1,i0) rex$optional(1,r3,i3,b3)
#		define rex64rr(r0,r1) rex64rr$1(byte$fromhex(regencode(r0)), byte$fromhex(regencode(r1)))
#		define rex64rr$1(...) rex64rr$2(__VA_ARGS__)
#		define rex64rr$2(r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0, r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0) rex$optional(1,r1b3,0,r0b3)
#		define rsi reg64(RSI)
#		define rsp reg64(RSP)
#		define scan(...) scan$1(__VA_ARGS__)
#		define scan$1(...) scan$2(__VA_ARGS__)
#		define scan$2(state, instr) scan$3(state, operator$is$supported(instr), instr$get$operator(instr), instr$get$operands(instr))
#		define scan$3(...) scan$4(__VA_ARGS__)
#		define scan$4(state, supported, ...) scan$5$##supported(state, __VA_ARGS__)
#		define scan$5$0(state, ...) state error$if(1, "invalid operator")
#		define scan$5$1(state, operator, ...) scan$##operator(state, count(__VA_ARGS__), ##__VA_ARGS__)
#		define scan$adc(state, n, ...) doscan$using$code(state, code$adc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$adcx(state, n, ...) doscan$using$code(state, code$adcx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$add(state, n, ...) doscan$using$code(state, code$add(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$addpd(state, n, ...) doscan$using$code(state, code$addpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$addps(state, n, ...) doscan$using$code(state, code$addps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$addsd(state, n, ...) doscan$using$code(state, code$addsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$addss(state, n, ...) doscan$using$code(state, code$addss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$addsubpd(state, n, ...) doscan$using$code(state, code$addsubpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$addsubps(state, n, ...) doscan$using$code(state, code$addsubps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$adox(state, n, ...) doscan$using$code(state, code$adox(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$aesdec(state, n, ...) doscan$using$code(state, code$aesdec(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$aesdeclast(state, n, ...) doscan$using$code(state, code$aesdeclast(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$aesenc(state, n, ...) doscan$using$code(state, code$aesenc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$aesenclast(state, n, ...) doscan$using$code(state, code$aesenclast(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$aesimc(state, n, ...) doscan$using$code(state, code$aesimc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$aeskeygenassist(state, n, ...) doscan$using$code(state, code$aeskeygenassist(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$and(state, n, ...) doscan$using$code(state, code$and(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$andn(state, n, ...) doscan$using$code(state, code$andn(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$andnpd(state, n, ...) doscan$using$code(state, code$andnpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$andnps(state, n, ...) doscan$using$code(state, code$andnps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$andpd(state, n, ...) doscan$using$code(state, code$andpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$andps(state, n, ...) doscan$using$code(state, code$andps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$bextr(state, n, ...) doscan$using$code(state, code$bextr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$blendpd(state, n, ...) doscan$using$code(state, code$blendpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$blendps(state, n, ...) doscan$using$code(state, code$blendps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$blendvpd(state, n, ...) doscan$using$code(state, code$blendvpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$blendvps(state, n, ...) doscan$using$code(state, code$blendvps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$blsi(state, n, ...) doscan$using$code(state, code$blsi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$blsmsk(state, n, ...) doscan$using$code(state, code$blsmsk(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$blsr(state, n, ...) doscan$using$code(state, code$blsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$bsf(state, n, ...) doscan$using$code(state, code$bsf(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$bsr(state, n, ...) doscan$using$code(state, code$bsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$bswap(state, n, ...) doscan$using$code(state, code$bswap(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$bt(state, n, ...) doscan$using$code(state, code$bt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$btc(state, n, ...) doscan$using$code(state, code$btc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$btr(state, n, ...) doscan$using$code(state, code$btr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$bts(state, n, ...) doscan$using$code(state, code$bts(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$bzhi(state, n, ...) doscan$using$code(state, code$bzhi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$call(state, n, ...) doscan$using$code(state, code$call(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cdq(state, n, ...) doscan$using$code(state, code$cdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$clac(state, n, ...) doscan$using$code(state, code$clac(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$clc(state, n, ...) doscan$using$code(state, code$clc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cld(state, n, ...) doscan$using$code(state, code$cld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cldemote(state, n, ...) doscan$using$code(state, code$cldemote(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$clflush(state, n, ...) doscan$using$code(state, code$clflush(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$clflushopt(state, n, ...) doscan$using$code(state, code$clflushopt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cli(state, n, ...) doscan$using$code(state, code$cli(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$clrssbsy(state, n, ...) doscan$using$code(state, code$clrssbsy(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$clts(state, n, ...) doscan$using$code(state, code$clts(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$clwb(state, n, ...) doscan$using$code(state, code$clwb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmc(state, n, ...) doscan$using$code(state, code$cmc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmova(state, n, ...) doscan$using$code(state, code$cmova(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovae(state, n, ...) doscan$using$code(state, code$cmovae(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovb(state, n, ...) doscan$using$code(state, code$cmovb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovbe(state, n, ...) doscan$using$code(state, code$cmovbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovc(state, n, ...) doscan$using$code(state, code$cmovc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmove(state, n, ...) doscan$using$code(state, code$cmove(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovg(state, n, ...) doscan$using$code(state, code$cmovg(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovge(state, n, ...) doscan$using$code(state, code$cmovge(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovl(state, n, ...) doscan$using$code(state, code$cmovl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovle(state, n, ...) doscan$using$code(state, code$cmovle(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovna(state, n, ...) doscan$using$code(state, code$cmovna(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnae(state, n, ...) doscan$using$code(state, code$cmovnae(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnb(state, n, ...) doscan$using$code(state, code$cmovnb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnbe(state, n, ...) doscan$using$code(state, code$cmovnbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnc(state, n, ...) doscan$using$code(state, code$cmovnc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovne(state, n, ...) doscan$using$code(state, code$cmovne(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovng(state, n, ...) doscan$using$code(state, code$cmovng(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnge(state, n, ...) doscan$using$code(state, code$cmovnge(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnl(state, n, ...) doscan$using$code(state, code$cmovnl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnle(state, n, ...) doscan$using$code(state, code$cmovnle(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovno(state, n, ...) doscan$using$code(state, code$cmovno(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnp(state, n, ...) doscan$using$code(state, code$cmovnp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovns(state, n, ...) doscan$using$code(state, code$cmovns(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovnz(state, n, ...) doscan$using$code(state, code$cmovnz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovo(state, n, ...) doscan$using$code(state, code$cmovo(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovp(state, n, ...) doscan$using$code(state, code$cmovp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovpe(state, n, ...) doscan$using$code(state, code$cmovpe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovpo(state, n, ...) doscan$using$code(state, code$cmovpo(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovs(state, n, ...) doscan$using$code(state, code$cmovs(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmovz(state, n, ...) doscan$using$code(state, code$cmovz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmp(state, n, ...) doscan$using$code(state, code$cmp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpeqpd(state, n, ...) doscan$using$code(state, code$cmpeqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpeqps(state, n, ...) doscan$using$code(state, code$cmpeqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpeqsd(state, n, ...) doscan$using$code(state, code$cmpeqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpeqss(state, n, ...) doscan$using$code(state, code$cmpeqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmplepd(state, n, ...) doscan$using$code(state, code$cmplepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpleps(state, n, ...) doscan$using$code(state, code$cmpleps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmplesd(state, n, ...) doscan$using$code(state, code$cmplesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpless(state, n, ...) doscan$using$code(state, code$cmpless(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpltpd(state, n, ...) doscan$using$code(state, code$cmpltpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpltps(state, n, ...) doscan$using$code(state, code$cmpltps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpltsd(state, n, ...) doscan$using$code(state, code$cmpltsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpltss(state, n, ...) doscan$using$code(state, code$cmpltss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpneqpd(state, n, ...) doscan$using$code(state, code$cmpneqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpneqps(state, n, ...) doscan$using$code(state, code$cmpneqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpneqsd(state, n, ...) doscan$using$code(state, code$cmpneqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpneqss(state, n, ...) doscan$using$code(state, code$cmpneqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnlepd(state, n, ...) doscan$using$code(state, code$cmpnlepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnleps(state, n, ...) doscan$using$code(state, code$cmpnleps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnlesd(state, n, ...) doscan$using$code(state, code$cmpnlesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnless(state, n, ...) doscan$using$code(state, code$cmpnless(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnltpd(state, n, ...) doscan$using$code(state, code$cmpnltpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnltps(state, n, ...) doscan$using$code(state, code$cmpnltps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnltsd(state, n, ...) doscan$using$code(state, code$cmpnltsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpnltss(state, n, ...) doscan$using$code(state, code$cmpnltss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpordpd(state, n, ...) doscan$using$code(state, code$cmpordpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpordps(state, n, ...) doscan$using$code(state, code$cmpordps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpordsd(state, n, ...) doscan$using$code(state, code$cmpordsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpordss(state, n, ...) doscan$using$code(state, code$cmpordss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmppd(state, n, ...) doscan$using$code(state, code$cmppd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpps(state, n, ...) doscan$using$code(state, code$cmpps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpsb(state, n, ...) doscan$using$code(state, code$cmpsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpsd(state, n, ...) doscan$using$code(state, code$cmpsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpsq(state, n, ...) doscan$using$code(state, code$cmpsq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpss(state, n, ...) doscan$using$code(state, code$cmpss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpsw(state, n, ...) doscan$using$code(state, code$cmpsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpunordpd(state, n, ...) doscan$using$code(state, code$cmpunordpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpunordps(state, n, ...) doscan$using$code(state, code$cmpunordps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpunordsd(state, n, ...) doscan$using$code(state, code$cmpunordsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpunordss(state, n, ...) doscan$using$code(state, code$cmpunordss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpxchg(state, n, ...) doscan$using$code(state, code$cmpxchg(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cmpxchg8b(state, n, ...) doscan$using$code(state, code$cmpxchg8b(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$comisd(state, n, ...) doscan$using$code(state, code$comisd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$comiss(state, n, ...) doscan$using$code(state, code$comiss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cpuid(state, n, ...) doscan$using$code(state, code$cpuid(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cqo(state, n, ...) doscan$using$code(state, code$cqo(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$crc32(state, n, ...) doscan$using$code(state, code$crc32(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtdq2pd(state, n, ...) doscan$using$code(state, code$cvtdq2pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtdq2ps(state, n, ...) doscan$using$code(state, code$cvtdq2ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtpd2dq(state, n, ...) doscan$using$code(state, code$cvtpd2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtpd2pi(state, n, ...) doscan$using$code(state, code$cvtpd2pi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtpd2ps(state, n, ...) doscan$using$code(state, code$cvtpd2ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtpi2pd(state, n, ...) doscan$using$code(state, code$cvtpi2pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtpi2ps(state, n, ...) doscan$using$code(state, code$cvtpi2ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtps2dq(state, n, ...) doscan$using$code(state, code$cvtps2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtps2pd(state, n, ...) doscan$using$code(state, code$cvtps2pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtps2pi(state, n, ...) doscan$using$code(state, code$cvtps2pi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtsd2si(state, n, ...) doscan$using$code(state, code$cvtsd2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtsd2ss(state, n, ...) doscan$using$code(state, code$cvtsd2ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtsi2sd(state, n, ...) doscan$using$code(state, code$cvtsi2sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtsi2ss(state, n, ...) doscan$using$code(state, code$cvtsi2ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtss2sd(state, n, ...) doscan$using$code(state, code$cvtss2sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvtss2si(state, n, ...) doscan$using$code(state, code$cvtss2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvttpd2dq(state, n, ...) doscan$using$code(state, code$cvttpd2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvttpd2pi(state, n, ...) doscan$using$code(state, code$cvttpd2pi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvttps2dq(state, n, ...) doscan$using$code(state, code$cvttps2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvttps2pi(state, n, ...) doscan$using$code(state, code$cvttps2pi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvttsd2si(state, n, ...) doscan$using$code(state, code$cvttsd2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cvttss2si(state, n, ...) doscan$using$code(state, code$cvttss2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$cwd(state, n, ...) doscan$using$code(state, code$cwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$dec(state, n, ...) doscan$using$code(state, code$dec(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$div(state, n, ...) doscan$using$code(state, code$div(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$divpd(state, n, ...) doscan$using$code(state, code$divpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$divps(state, n, ...) doscan$using$code(state, code$divps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$divsd(state, n, ...) doscan$using$code(state, code$divsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$divss(state, n, ...) doscan$using$code(state, code$divss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$dppd(state, n, ...) doscan$using$code(state, code$dppd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$dpps(state, n, ...) doscan$using$code(state, code$dpps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$emms(state, n, ...) doscan$using$code(state, code$emms(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$encls(state, n, ...) doscan$using$code(state, code$encls(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$enclu(state, n, ...) doscan$using$code(state, code$enclu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$enclv(state, n, ...) doscan$using$code(state, code$enclv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$endbr32(state, n, ...) doscan$using$code(state, code$endbr32(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$endbr64(state, n, ...) doscan$using$code(state, code$endbr64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$enter(state, n, ...) doscan$using$code(state, code$enter(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$extractps(state, n, ...) doscan$using$code(state, code$extractps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$f2xm1(state, n, ...) doscan$using$code(state, code$f2xm1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fabs(state, n, ...) doscan$using$code(state, code$fabs(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fadd(state, n, ...) doscan$using$code(state, code$fadd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$faddp(state, n, ...) doscan$using$code(state, code$faddp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fbld(state, n, ...) doscan$using$code(state, code$fbld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fbstp(state, n, ...) doscan$using$code(state, code$fbstp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fchs(state, n, ...) doscan$using$code(state, code$fchs(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fclex(state, n, ...) doscan$using$code(state, code$fclex(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmovb(state, n, ...) doscan$using$code(state, code$fcmovb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmovbe(state, n, ...) doscan$using$code(state, code$fcmovbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmove(state, n, ...) doscan$using$code(state, code$fcmove(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmovnb(state, n, ...) doscan$using$code(state, code$fcmovnb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmovnbe(state, n, ...) doscan$using$code(state, code$fcmovnbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmovne(state, n, ...) doscan$using$code(state, code$fcmovne(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmovnu(state, n, ...) doscan$using$code(state, code$fcmovnu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcmovu(state, n, ...) doscan$using$code(state, code$fcmovu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcom(state, n, ...) doscan$using$code(state, code$fcom(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcomi(state, n, ...) doscan$using$code(state, code$fcomi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcomip(state, n, ...) doscan$using$code(state, code$fcomip(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcomp(state, n, ...) doscan$using$code(state, code$fcomp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcompp(state, n, ...) doscan$using$code(state, code$fcompp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fcos(state, n, ...) doscan$using$code(state, code$fcos(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fdecstp(state, n, ...) doscan$using$code(state, code$fdecstp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fdiv(state, n, ...) doscan$using$code(state, code$fdiv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fdivp(state, n, ...) doscan$using$code(state, code$fdivp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fdivr(state, n, ...) doscan$using$code(state, code$fdivr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fdivrp(state, n, ...) doscan$using$code(state, code$fdivrp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ffree(state, n, ...) doscan$using$code(state, code$ffree(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fiadd(state, n, ...) doscan$using$code(state, code$fiadd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ficom(state, n, ...) doscan$using$code(state, code$ficom(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ficomp(state, n, ...) doscan$using$code(state, code$ficomp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fidiv(state, n, ...) doscan$using$code(state, code$fidiv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fidivr(state, n, ...) doscan$using$code(state, code$fidivr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fild(state, n, ...) doscan$using$code(state, code$fild(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fimul(state, n, ...) doscan$using$code(state, code$fimul(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fincstp(state, n, ...) doscan$using$code(state, code$fincstp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$finit(state, n, ...) doscan$using$code(state, code$finit(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fist(state, n, ...) doscan$using$code(state, code$fist(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fistp(state, n, ...) doscan$using$code(state, code$fistp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fisttp(state, n, ...) doscan$using$code(state, code$fisttp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fisub(state, n, ...) doscan$using$code(state, code$fisub(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fisubr(state, n, ...) doscan$using$code(state, code$fisubr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fld(state, n, ...) doscan$using$code(state, code$fld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fld1(state, n, ...) doscan$using$code(state, code$fld1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldcw(state, n, ...) doscan$using$code(state, code$fldcw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldenv(state, n, ...) doscan$using$code(state, code$fldenv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldl2e(state, n, ...) doscan$using$code(state, code$fldl2e(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldl2t(state, n, ...) doscan$using$code(state, code$fldl2t(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldlg2(state, n, ...) doscan$using$code(state, code$fldlg2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldln2(state, n, ...) doscan$using$code(state, code$fldln2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldpi(state, n, ...) doscan$using$code(state, code$fldpi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fldz(state, n, ...) doscan$using$code(state, code$fldz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fmul(state, n, ...) doscan$using$code(state, code$fmul(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fmulp(state, n, ...) doscan$using$code(state, code$fmulp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fnclex(state, n, ...) doscan$using$code(state, code$fnclex(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fninit(state, n, ...) doscan$using$code(state, code$fninit(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fnop(state, n, ...) doscan$using$code(state, code$fnop(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fnsave(state, n, ...) doscan$using$code(state, code$fnsave(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fnstcw(state, n, ...) doscan$using$code(state, code$fnstcw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fnstenv(state, n, ...) doscan$using$code(state, code$fnstenv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fnstsw(state, n, ...) doscan$using$code(state, code$fnstsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fpatan(state, n, ...) doscan$using$code(state, code$fpatan(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fprem(state, n, ...) doscan$using$code(state, code$fprem(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fprem1(state, n, ...) doscan$using$code(state, code$fprem1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fptan(state, n, ...) doscan$using$code(state, code$fptan(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$frndint(state, n, ...) doscan$using$code(state, code$frndint(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$frstor(state, n, ...) doscan$using$code(state, code$frstor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsave(state, n, ...) doscan$using$code(state, code$fsave(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fscale(state, n, ...) doscan$using$code(state, code$fscale(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsin(state, n, ...) doscan$using$code(state, code$fsin(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsincos(state, n, ...) doscan$using$code(state, code$fsincos(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsqrt(state, n, ...) doscan$using$code(state, code$fsqrt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fst(state, n, ...) doscan$using$code(state, code$fst(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fstcw(state, n, ...) doscan$using$code(state, code$fstcw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fstenv(state, n, ...) doscan$using$code(state, code$fstenv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fstp(state, n, ...) doscan$using$code(state, code$fstp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fstsw(state, n, ...) doscan$using$code(state, code$fstsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsub(state, n, ...) doscan$using$code(state, code$fsub(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsubp(state, n, ...) doscan$using$code(state, code$fsubp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsubr(state, n, ...) doscan$using$code(state, code$fsubr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fsubrp(state, n, ...) doscan$using$code(state, code$fsubrp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ftst(state, n, ...) doscan$using$code(state, code$ftst(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fucom(state, n, ...) doscan$using$code(state, code$fucom(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fucomi(state, n, ...) doscan$using$code(state, code$fucomi(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fucomip(state, n, ...) doscan$using$code(state, code$fucomip(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fucomp(state, n, ...) doscan$using$code(state, code$fucomp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fucompp(state, n, ...) doscan$using$code(state, code$fucompp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fwait(state, n, ...) doscan$using$code(state, code$fwait(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fxam(state, n, ...) doscan$using$code(state, code$fxam(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fxch(state, n, ...) doscan$using$code(state, code$fxch(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fxrstor(state, n, ...) doscan$using$code(state, code$fxrstor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fxrstor64(state, n, ...) doscan$using$code(state, code$fxrstor64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fxsave(state, n, ...) doscan$using$code(state, code$fxsave(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fxsave64(state, n, ...) doscan$using$code(state, code$fxsave64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fxtract(state, n, ...) doscan$using$code(state, code$fxtract(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fyl2x(state, n, ...) doscan$using$code(state, code$fyl2x(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$fyl2xp1(state, n, ...) doscan$using$code(state, code$fyl2xp1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$gf2p8affineinvqb(state, n, ...) doscan$using$code(state, code$gf2p8affineinvqb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$gf2p8affineqb(state, n, ...) doscan$using$code(state, code$gf2p8affineqb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$gf2p8mulb(state, n, ...) doscan$using$code(state, code$gf2p8mulb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$haddpd(state, n, ...) doscan$using$code(state, code$haddpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$haddps(state, n, ...) doscan$using$code(state, code$haddps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$hlt(state, n, ...) doscan$using$code(state, code$hlt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$hreset(state, n, ...) doscan$using$code(state, code$hreset(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$hsubpd(state, n, ...) doscan$using$code(state, code$hsubpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$hsubps(state, n, ...) doscan$using$code(state, code$hsubps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$idiv(state, n, ...) doscan$using$code(state, code$idiv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$imul(state, n, ...) doscan$using$code(state, code$imul(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$in(state, n, ...) doscan$using$code(state, code$in(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$inc(state, n, ...) doscan$using$code(state, code$inc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$incsspd(state, n, ...) doscan$using$code(state, code$incsspd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$incsspq(state, n, ...) doscan$using$code(state, code$incsspq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$insb(state, n, ...) doscan$using$code(state, code$insb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$insd(state, n, ...) doscan$using$code(state, code$insd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$insertps(state, n, ...) doscan$using$code(state, code$insertps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$insw(state, n, ...) doscan$using$code(state, code$insw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$int0(state, n, ...) doscan$using$code(state, code$int0(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$int1(state, n, ...) doscan$using$code(state, code$int1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$int3(state, n, ...) doscan$using$code(state, code$int3(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$invd(state, n, ...) doscan$using$code(state, code$invd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$invept(state, n, ...) doscan$using$code(state, code$invept(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$invlpg(state, n, ...) doscan$using$code(state, code$invlpg(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$invpcid(state, n, ...) doscan$using$code(state, code$invpcid(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$invvpid(state, n, ...) doscan$using$code(state, code$invvpid(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$iret(state, n, ...) doscan$using$code(state, code$iret(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$iretd(state, n, ...) doscan$using$code(state, code$iretd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$iretq(state, n, ...) doscan$using$code(state, code$iretq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ja(state, n, ...) doscan$using$code(state, code$ja(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jae(state, n, ...) doscan$using$code(state, code$jae(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jb(state, n, ...) doscan$using$code(state, code$jb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jbe(state, n, ...) doscan$using$code(state, code$jbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jc(state, n, ...) doscan$using$code(state, code$jc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$je(state, n, ...) doscan$using$code(state, code$je(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jg(state, n, ...) doscan$using$code(state, code$jg(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jge(state, n, ...) doscan$using$code(state, code$jge(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jl(state, n, ...) doscan$using$code(state, code$jl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jle(state, n, ...) doscan$using$code(state, code$jle(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jmp(state, n, ...) doscan$using$code(state, code$jmp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jna(state, n, ...) doscan$using$code(state, code$jna(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnae(state, n, ...) doscan$using$code(state, code$jnae(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnb(state, n, ...) doscan$using$code(state, code$jnb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnbe(state, n, ...) doscan$using$code(state, code$jnbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnc(state, n, ...) doscan$using$code(state, code$jnc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jne(state, n, ...) doscan$using$code(state, code$jne(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jng(state, n, ...) doscan$using$code(state, code$jng(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnge(state, n, ...) doscan$using$code(state, code$jnge(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnl(state, n, ...) doscan$using$code(state, code$jnl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnle(state, n, ...) doscan$using$code(state, code$jnle(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jno(state, n, ...) doscan$using$code(state, code$jno(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnp(state, n, ...) doscan$using$code(state, code$jnp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jns(state, n, ...) doscan$using$code(state, code$jns(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jnz(state, n, ...) doscan$using$code(state, code$jnz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jo(state, n, ...) doscan$using$code(state, code$jo(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jp(state, n, ...) doscan$using$code(state, code$jp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jpe(state, n, ...) doscan$using$code(state, code$jpe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jpo(state, n, ...) doscan$using$code(state, code$jpo(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$js(state, n, ...) doscan$using$code(state, code$js(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$jz(state, n, ...) doscan$using$code(state, code$jz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$label(...) scan$label$1(__VA_ARGS__)
#		define scan$label$1(...) scan$label$2(__VA_ARGS__)
#		define scan$label$2(state, n, lid) error$if(i08$isneq(i08$fromhex(n), i08$one), "label() with != 1 argument") scan$label$3(state, byte$fromhex(lid))
#		define scan$label$3(state, ...) /*error$if(state$has$label(state,i08$zx08(__VA_ARGS__)), "label redefined")*/ scan$label$4(state, __VA_ARGS__)
#		define scan$label$4(state, ...) state$add$label(state,i08$zx08(__VA_ARGS__),state$get$offset(state))
#		define scan$lar(state, n, ...) doscan$using$code(state, code$lar(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lddqu(state, n, ...) doscan$using$code(state, code$lddqu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ldmxcsr(state, n, ...) doscan$using$code(state, code$ldmxcsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lea(state, n, ...) doscan$using$code(state, code$lea(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$leave(state, n, ...) doscan$using$code(state, code$leave(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lfence(state, n, ...) doscan$using$code(state, code$lfence(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lldt(state, n, ...) doscan$using$code(state, code$lldt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lmsw(state, n, ...) doscan$using$code(state, code$lmsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lods(state, n, ...) doscan$using$code(state, code$lods(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lodsb(state, n, ...) doscan$using$code(state, code$lodsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lodsd(state, n, ...) doscan$using$code(state, code$lodsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lodsq(state, n, ...) doscan$using$code(state, code$lodsq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lodsw(state, n, ...) doscan$using$code(state, code$lodsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$loop(state, n, ...) doscan$using$code(state, code$loop(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$loope(state, n, ...) doscan$using$code(state, code$loope(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$loopne(state, n, ...) doscan$using$code(state, code$loopne(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lsl(state, n, ...) doscan$using$code(state, code$lsl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ltr(state, n, ...) doscan$using$code(state, code$ltr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$lzcnt(state, n, ...) doscan$using$code(state, code$lzcnt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$maskmovdqu(state, n, ...) doscan$using$code(state, code$maskmovdqu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$maskmovq(state, n, ...) doscan$using$code(state, code$maskmovq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$maxpd(state, n, ...) doscan$using$code(state, code$maxpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$maxps(state, n, ...) doscan$using$code(state, code$maxps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$maxsd(state, n, ...) doscan$using$code(state, code$maxsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$maxss(state, n, ...) doscan$using$code(state, code$maxss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mfence(state, n, ...) doscan$using$code(state, code$mfence(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$minpd(state, n, ...) doscan$using$code(state, code$minpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$minps(state, n, ...) doscan$using$code(state, code$minps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$minsd(state, n, ...) doscan$using$code(state, code$minsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$minss(state, n, ...) doscan$using$code(state, code$minss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$monitor(state, n, ...) doscan$using$code(state, code$monitor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mov(state, n, ...) doscan$using$code(state, code$mov(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movapd(state, n, ...) doscan$using$code(state, code$movapd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movaps(state, n, ...) doscan$using$code(state, code$movaps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movbe(state, n, ...) doscan$using$code(state, code$movbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movd(state, n, ...) doscan$using$code(state, code$movd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movddup(state, n, ...) doscan$using$code(state, code$movddup(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movdir64b(state, n, ...) doscan$using$code(state, code$movdir64b(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movdiri(state, n, ...) doscan$using$code(state, code$movdiri(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movdq2q(state, n, ...) doscan$using$code(state, code$movdq2q(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movdqa(state, n, ...) doscan$using$code(state, code$movdqa(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movdqu(state, n, ...) doscan$using$code(state, code$movdqu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movhlps(state, n, ...) doscan$using$code(state, code$movhlps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movhpd(state, n, ...) doscan$using$code(state, code$movhpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movhps(state, n, ...) doscan$using$code(state, code$movhps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movlhps(state, n, ...) doscan$using$code(state, code$movlhps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movlpd(state, n, ...) doscan$using$code(state, code$movlpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movlps(state, n, ...) doscan$using$code(state, code$movlps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movmskpd(state, n, ...) doscan$using$code(state, code$movmskpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movmskps(state, n, ...) doscan$using$code(state, code$movmskps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movntdq(state, n, ...) doscan$using$code(state, code$movntdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movntdqa(state, n, ...) doscan$using$code(state, code$movntdqa(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movnti(state, n, ...) doscan$using$code(state, code$movnti(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movntpd(state, n, ...) doscan$using$code(state, code$movntpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movntps(state, n, ...) doscan$using$code(state, code$movntps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movntq(state, n, ...) doscan$using$code(state, code$movntq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movq(state, n, ...) doscan$using$code(state, code$movq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movq2dq(state, n, ...) doscan$using$code(state, code$movq2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movsb(state, n, ...) doscan$using$code(state, code$movsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movsd(state, n, ...) doscan$using$code(state, code$movsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movshdup(state, n, ...) doscan$using$code(state, code$movshdup(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movshlup(state, n, ...) doscan$using$code(state, code$movshlup(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movsq(state, n, ...) doscan$using$code(state, code$movsq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movss(state, n, ...) doscan$using$code(state, code$movss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movsw(state, n, ...) doscan$using$code(state, code$movsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movsx(state, n, ...) doscan$using$code(state, code$movsx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movsxd(state, n, ...) doscan$using$code(state, code$movsxd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movupd(state, n, ...) doscan$using$code(state, code$movupd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movups(state, n, ...) doscan$using$code(state, code$movups(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$movzx(state, n, ...) doscan$using$code(state, code$movzx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mpsadbw(state, n, ...) doscan$using$code(state, code$mpsadbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mul(state, n, ...) doscan$using$code(state, code$mul(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mulpd(state, n, ...) doscan$using$code(state, code$mulpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mulps(state, n, ...) doscan$using$code(state, code$mulps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mulsd(state, n, ...) doscan$using$code(state, code$mulsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mulss(state, n, ...) doscan$using$code(state, code$mulss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mulx(state, n, ...) doscan$using$code(state, code$mulx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$mwait(state, n, ...) doscan$using$code(state, code$mwait(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$neg(state, n, ...) doscan$using$code(state, code$neg(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop(state, n, ...) doscan$using$code(state, code$nop(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop2(state, n, ...) doscan$using$code(state, code$nop2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop3(state, n, ...) doscan$using$code(state, code$nop3(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop4(state, n, ...) doscan$using$code(state, code$nop4(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop5(state, n, ...) doscan$using$code(state, code$nop5(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop6(state, n, ...) doscan$using$code(state, code$nop6(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop7(state, n, ...) doscan$using$code(state, code$nop7(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop8(state, n, ...) doscan$using$code(state, code$nop8(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$nop9(state, n, ...) doscan$using$code(state, code$nop9(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$not(state, n, ...) doscan$using$code(state, code$not(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$or(state, n, ...) doscan$using$code(state, code$or(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$orpd(state, n, ...) doscan$using$code(state, code$orpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$orps(state, n, ...) doscan$using$code(state, code$orps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$out(state, n, ...) doscan$using$code(state, code$out(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$outsb(state, n, ...) doscan$using$code(state, code$outsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$outsd(state, n, ...) doscan$using$code(state, code$outsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$outsw(state, n, ...) doscan$using$code(state, code$outsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pabsb(state, n, ...) doscan$using$code(state, code$pabsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pabsd(state, n, ...) doscan$using$code(state, code$pabsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pabsw(state, n, ...) doscan$using$code(state, code$pabsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$packssdw(state, n, ...) doscan$using$code(state, code$packssdw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$packsswb(state, n, ...) doscan$using$code(state, code$packsswb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$packusdw(state, n, ...) doscan$using$code(state, code$packusdw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$packuswb(state, n, ...) doscan$using$code(state, code$packuswb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddb(state, n, ...) doscan$using$code(state, code$paddb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddd(state, n, ...) doscan$using$code(state, code$paddd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddq(state, n, ...) doscan$using$code(state, code$paddq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddsb(state, n, ...) doscan$using$code(state, code$paddsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddsw(state, n, ...) doscan$using$code(state, code$paddsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddusb(state, n, ...) doscan$using$code(state, code$paddusb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddusw(state, n, ...) doscan$using$code(state, code$paddusw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$paddw(state, n, ...) doscan$using$code(state, code$paddw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$palignr(state, n, ...) doscan$using$code(state, code$palignr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pand(state, n, ...) doscan$using$code(state, code$pand(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pandn(state, n, ...) doscan$using$code(state, code$pandn(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pause(state, n, ...) doscan$using$code(state, code$pause(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pavgb(state, n, ...) doscan$using$code(state, code$pavgb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pavgw(state, n, ...) doscan$using$code(state, code$pavgw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pblendvb(state, n, ...) doscan$using$code(state, code$pblendvb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pblendw(state, n, ...) doscan$using$code(state, code$pblendw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pclmulqdq(state, n, ...) doscan$using$code(state, code$pclmulqdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpeqb(state, n, ...) doscan$using$code(state, code$pcmpeqb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpeqd(state, n, ...) doscan$using$code(state, code$pcmpeqd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpeqq(state, n, ...) doscan$using$code(state, code$pcmpeqq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpeqw(state, n, ...) doscan$using$code(state, code$pcmpeqw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpestri(state, n, ...) doscan$using$code(state, code$pcmpestri(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpestrm(state, n, ...) doscan$using$code(state, code$pcmpestrm(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpgtb(state, n, ...) doscan$using$code(state, code$pcmpgtb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpgtd(state, n, ...) doscan$using$code(state, code$pcmpgtd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpgtq(state, n, ...) doscan$using$code(state, code$pcmpgtq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpgtw(state, n, ...) doscan$using$code(state, code$pcmpgtw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpistri(state, n, ...) doscan$using$code(state, code$pcmpistri(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pcmpistrm(state, n, ...) doscan$using$code(state, code$pcmpistrm(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pconfig(state, n, ...) doscan$using$code(state, code$pconfig(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pdep(state, n, ...) doscan$using$code(state, code$pdep(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pext(state, n, ...) doscan$using$code(state, code$pext(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pextrb(state, n, ...) doscan$using$code(state, code$pextrb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pextrd(state, n, ...) doscan$using$code(state, code$pextrd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pextrq(state, n, ...) doscan$using$code(state, code$pextrq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pextrw(state, n, ...) doscan$using$code(state, code$pextrw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$phaddd(state, n, ...) doscan$using$code(state, code$phaddd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$phaddsw(state, n, ...) doscan$using$code(state, code$phaddsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$phaddw(state, n, ...) doscan$using$code(state, code$phaddw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$phminposuw(state, n, ...) doscan$using$code(state, code$phminposuw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$phsubd(state, n, ...) doscan$using$code(state, code$phsubd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$phsubsw(state, n, ...) doscan$using$code(state, code$phsubsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$phsubw(state, n, ...) doscan$using$code(state, code$phsubw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pinsrb(state, n, ...) doscan$using$code(state, code$pinsrb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pinsrd(state, n, ...) doscan$using$code(state, code$pinsrd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pinsrq(state, n, ...) doscan$using$code(state, code$pinsrq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pinsrw(state, n, ...) doscan$using$code(state, code$pinsrw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaddubsw(state, n, ...) doscan$using$code(state, code$pmaddubsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaddwd(state, n, ...) doscan$using$code(state, code$pmaddwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaxsb(state, n, ...) doscan$using$code(state, code$pmaxsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaxsd(state, n, ...) doscan$using$code(state, code$pmaxsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaxsw(state, n, ...) doscan$using$code(state, code$pmaxsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaxub(state, n, ...) doscan$using$code(state, code$pmaxub(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaxud(state, n, ...) doscan$using$code(state, code$pmaxud(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmaxuw(state, n, ...) doscan$using$code(state, code$pmaxuw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pminsb(state, n, ...) doscan$using$code(state, code$pminsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pminsd(state, n, ...) doscan$using$code(state, code$pminsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pminsw(state, n, ...) doscan$using$code(state, code$pminsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pminub(state, n, ...) doscan$using$code(state, code$pminub(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pminud(state, n, ...) doscan$using$code(state, code$pminud(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pminuw(state, n, ...) doscan$using$code(state, code$pminuw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovmskb(state, n, ...) doscan$using$code(state, code$pmovmskb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovsxbd(state, n, ...) doscan$using$code(state, code$pmovsxbd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovsxbq(state, n, ...) doscan$using$code(state, code$pmovsxbq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovsxbw(state, n, ...) doscan$using$code(state, code$pmovsxbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovsxdq(state, n, ...) doscan$using$code(state, code$pmovsxdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovsxwd(state, n, ...) doscan$using$code(state, code$pmovsxwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovsxwq(state, n, ...) doscan$using$code(state, code$pmovsxwq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovzxbd(state, n, ...) doscan$using$code(state, code$pmovzxbd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovzxbq(state, n, ...) doscan$using$code(state, code$pmovzxbq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovzxbw(state, n, ...) doscan$using$code(state, code$pmovzxbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovzxdq(state, n, ...) doscan$using$code(state, code$pmovzxdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovzxwd(state, n, ...) doscan$using$code(state, code$pmovzxwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmovzxwq(state, n, ...) doscan$using$code(state, code$pmovzxwq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmuldq(state, n, ...) doscan$using$code(state, code$pmuldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmulhrsw(state, n, ...) doscan$using$code(state, code$pmulhrsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmulhw(state, n, ...) doscan$using$code(state, code$pmulhw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmulld(state, n, ...) doscan$using$code(state, code$pmulld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmullw(state, n, ...) doscan$using$code(state, code$pmullw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmuludq(state, n, ...) doscan$using$code(state, code$pmuludq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pmuluw(state, n, ...) doscan$using$code(state, code$pmuluw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pop(state, n, ...) doscan$using$code(state, code$pop(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$popcnt(state, n, ...) doscan$using$code(state, code$popcnt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$popf(state, n, ...) doscan$using$code(state, code$popf(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$popfq(state, n, ...) doscan$using$code(state, code$popfq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$por(state, n, ...) doscan$using$code(state, code$por(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefetchnta(state, n, ...) doscan$using$code(state, code$prefetchnta(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefetcht0(state, n, ...) doscan$using$code(state, code$prefetcht0(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefetcht1(state, n, ...) doscan$using$code(state, code$prefetcht1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefetcht2(state, n, ...) doscan$using$code(state, code$prefetcht2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefetchw(state, n, ...) doscan$using$code(state, code$prefetchw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$bhnottaken(state, n, ...) doscan$using$code(state, code$prefix$bhnottaken(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$bhtaken(state, n, ...) doscan$using$code(state, code$prefix$bhtaken(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$lock(state, n, ...) doscan$using$code(state, code$prefix$lock(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$rep(state, n, ...) doscan$using$code(state, code$prefix$rep(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$repe(state, n, ...) doscan$using$code(state, code$prefix$repe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$repne(state, n, ...) doscan$using$code(state, code$prefix$repne(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$repnz(state, n, ...) doscan$using$code(state, code$prefix$repnz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$prefix$repz(state, n, ...) doscan$using$code(state, code$prefix$repz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psadbw(state, n, ...) doscan$using$code(state, code$psadbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pshufb(state, n, ...) doscan$using$code(state, code$pshufb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pshufd(state, n, ...) doscan$using$code(state, code$pshufd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pshuflw(state, n, ...) doscan$using$code(state, code$pshuflw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pshufw(state, n, ...) doscan$using$code(state, code$pshufw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psignb(state, n, ...) doscan$using$code(state, code$psignb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psignd(state, n, ...) doscan$using$code(state, code$psignd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psignw(state, n, ...) doscan$using$code(state, code$psignw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pslld(state, n, ...) doscan$using$code(state, code$pslld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pslldq(state, n, ...) doscan$using$code(state, code$pslldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psllq(state, n, ...) doscan$using$code(state, code$psllq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psllw(state, n, ...) doscan$using$code(state, code$psllw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psrad(state, n, ...) doscan$using$code(state, code$psrad(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psraw(state, n, ...) doscan$using$code(state, code$psraw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psrld(state, n, ...) doscan$using$code(state, code$psrld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psrldq(state, n, ...) doscan$using$code(state, code$psrldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psrlq(state, n, ...) doscan$using$code(state, code$psrlq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psrlw(state, n, ...) doscan$using$code(state, code$psrlw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubb(state, n, ...) doscan$using$code(state, code$psubb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubd(state, n, ...) doscan$using$code(state, code$psubd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubq(state, n, ...) doscan$using$code(state, code$psubq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubsb(state, n, ...) doscan$using$code(state, code$psubsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubsw(state, n, ...) doscan$using$code(state, code$psubsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubusb(state, n, ...) doscan$using$code(state, code$psubusb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubusw(state, n, ...) doscan$using$code(state, code$psubusw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$psubw(state, n, ...) doscan$using$code(state, code$psubw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ptest(state, n, ...) doscan$using$code(state, code$ptest(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ptwrite(state, n, ...) doscan$using$code(state, code$ptwrite(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpckhbw(state, n, ...) doscan$using$code(state, code$punpckhbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpckhdq(state, n, ...) doscan$using$code(state, code$punpckhdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpckhqdq(state, n, ...) doscan$using$code(state, code$punpckhqdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpckhwd(state, n, ...) doscan$using$code(state, code$punpckhwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpcklbw(state, n, ...) doscan$using$code(state, code$punpcklbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpckldq(state, n, ...) doscan$using$code(state, code$punpckldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpcklqdq(state, n, ...) doscan$using$code(state, code$punpcklqdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$punpcklwd(state, n, ...) doscan$using$code(state, code$punpcklwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$push(state, n, ...) doscan$using$code(state, code$push(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pushf(state, n, ...) doscan$using$code(state, code$pushf(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pushfq(state, n, ...) doscan$using$code(state, code$pushfq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$pxor(state, n, ...) doscan$using$code(state, code$pxor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rawbyte(state, n, ...) doscan$using$code(state, code$rawbyte(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rawint(state, n, ...) doscan$using$code(state, code$rawint(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rcl(state, n, ...) doscan$using$code(state, code$rcl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rcpps(state, n, ...) doscan$using$code(state, code$rcpps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rcpss(state, n, ...) doscan$using$code(state, code$rcpss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rcr(state, n, ...) doscan$using$code(state, code$rcr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdfsbase(state, n, ...) doscan$using$code(state, code$rdfsbase(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdgsbase(state, n, ...) doscan$using$code(state, code$rdgsbase(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdmsr(state, n, ...) doscan$using$code(state, code$rdmsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdpid(state, n, ...) doscan$using$code(state, code$rdpid(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdpkru(state, n, ...) doscan$using$code(state, code$rdpkru(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdpmc(state, n, ...) doscan$using$code(state, code$rdpmc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdrand(state, n, ...) doscan$using$code(state, code$rdrand(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdseed(state, n, ...) doscan$using$code(state, code$rdseed(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdsspd(state, n, ...) doscan$using$code(state, code$rdsspd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdsspq(state, n, ...) doscan$using$code(state, code$rdsspq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdtsc(state, n, ...) doscan$using$code(state, code$rdtsc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rdtscp(state, n, ...) doscan$using$code(state, code$rdtscp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ret(state, n, ...) doscan$using$code(state, code$ret(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rol(state, n, ...) doscan$using$code(state, code$rol(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ror(state, n, ...) doscan$using$code(state, code$ror(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rorx(state, n, ...) doscan$using$code(state, code$rorx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$roundpd(state, n, ...) doscan$using$code(state, code$roundpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$roundps(state, n, ...) doscan$using$code(state, code$roundps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$roundsd(state, n, ...) doscan$using$code(state, code$roundsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$roundss(state, n, ...) doscan$using$code(state, code$roundss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rsm(state, n, ...) doscan$using$code(state, code$rsm(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rsqrtps(state, n, ...) doscan$using$code(state, code$rsqrtps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rsqrtss(state, n, ...) doscan$using$code(state, code$rsqrtss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$rstorssp(state, n, ...) doscan$using$code(state, code$rstorssp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sal(state, n, ...) doscan$using$code(state, code$sal(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sar(state, n, ...) doscan$using$code(state, code$sar(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sarx(state, n, ...) doscan$using$code(state, code$sarx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$saveprevssp(state, n, ...) doscan$using$code(state, code$saveprevssp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sbb(state, n, ...) doscan$using$code(state, code$sbb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$scasb(state, n, ...) doscan$using$code(state, code$scasb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$scasd(state, n, ...) doscan$using$code(state, code$scasd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$scasq(state, n, ...) doscan$using$code(state, code$scasq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$scasw(state, n, ...) doscan$using$code(state, code$scasw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$serialize(state, n, ...) doscan$using$code(state, code$serialize(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$seta(state, n, ...) doscan$using$code(state, code$seta(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setae(state, n, ...) doscan$using$code(state, code$setae(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setb(state, n, ...) doscan$using$code(state, code$setb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setbe(state, n, ...) doscan$using$code(state, code$setbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setc(state, n, ...) doscan$using$code(state, code$setc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sete(state, n, ...) doscan$using$code(state, code$sete(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setg(state, n, ...) doscan$using$code(state, code$setg(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setge(state, n, ...) doscan$using$code(state, code$setge(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setl(state, n, ...) doscan$using$code(state, code$setl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setle(state, n, ...) doscan$using$code(state, code$setle(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setna(state, n, ...) doscan$using$code(state, code$setna(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnae(state, n, ...) doscan$using$code(state, code$setnae(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnb(state, n, ...) doscan$using$code(state, code$setnb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnbe(state, n, ...) doscan$using$code(state, code$setnbe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnc(state, n, ...) doscan$using$code(state, code$setnc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setne(state, n, ...) doscan$using$code(state, code$setne(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setng(state, n, ...) doscan$using$code(state, code$setng(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnge(state, n, ...) doscan$using$code(state, code$setnge(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnl(state, n, ...) doscan$using$code(state, code$setnl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnle(state, n, ...) doscan$using$code(state, code$setnle(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setno(state, n, ...) doscan$using$code(state, code$setno(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnp(state, n, ...) doscan$using$code(state, code$setnp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setns(state, n, ...) doscan$using$code(state, code$setns(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setnz(state, n, ...) doscan$using$code(state, code$setnz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$seto(state, n, ...) doscan$using$code(state, code$seto(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setp(state, n, ...) doscan$using$code(state, code$setp(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setpe(state, n, ...) doscan$using$code(state, code$setpe(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setpo(state, n, ...) doscan$using$code(state, code$setpo(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sets(state, n, ...) doscan$using$code(state, code$sets(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setssbsy(state, n, ...) doscan$using$code(state, code$setssbsy(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$setz(state, n, ...) doscan$using$code(state, code$setz(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sfence(state, n, ...) doscan$using$code(state, code$sfence(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sgdt(state, n, ...) doscan$using$code(state, code$sgdt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sha1msg1(state, n, ...) doscan$using$code(state, code$sha1msg1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sha1msg2(state, n, ...) doscan$using$code(state, code$sha1msg2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sha1nexte(state, n, ...) doscan$using$code(state, code$sha1nexte(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sha1rnds4(state, n, ...) doscan$using$code(state, code$sha1rnds4(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sha256msg1(state, n, ...) doscan$using$code(state, code$sha256msg1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sha256msg2(state, n, ...) doscan$using$code(state, code$sha256msg2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sha256rnds2(state, n, ...) doscan$using$code(state, code$sha256rnds2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shl(state, n, ...) doscan$using$code(state, code$shl(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shld(state, n, ...) doscan$using$code(state, code$shld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shlx(state, n, ...) doscan$using$code(state, code$shlx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shr(state, n, ...) doscan$using$code(state, code$shr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shrd(state, n, ...) doscan$using$code(state, code$shrd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shrx(state, n, ...) doscan$using$code(state, code$shrx(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shufpd(state, n, ...) doscan$using$code(state, code$shufpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$shufps(state, n, ...) doscan$using$code(state, code$shufps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sidt(state, n, ...) doscan$using$code(state, code$sidt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sldt(state, n, ...) doscan$using$code(state, code$sldt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$smsw(state, n, ...) doscan$using$code(state, code$smsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sqrtpd(state, n, ...) doscan$using$code(state, code$sqrtpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sqrtps(state, n, ...) doscan$using$code(state, code$sqrtps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sqrtsd(state, n, ...) doscan$using$code(state, code$sqrtsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sqrtss(state, n, ...) doscan$using$code(state, code$sqrtss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$stac(state, n, ...) doscan$using$code(state, code$stac(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$stc(state, n, ...) doscan$using$code(state, code$stc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$std(state, n, ...) doscan$using$code(state, code$std(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sti(state, n, ...) doscan$using$code(state, code$sti(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$stmxcsr(state, n, ...) doscan$using$code(state, code$stmxcsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$stosb(state, n, ...) doscan$using$code(state, code$stosb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$stosd(state, n, ...) doscan$using$code(state, code$stosd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$stosq(state, n, ...) doscan$using$code(state, code$stosq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$stosw(state, n, ...) doscan$using$code(state, code$stosw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$str(state, n, ...) doscan$using$code(state, code$str(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sub(state, n, ...) doscan$using$code(state, code$sub(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$subpd(state, n, ...) doscan$using$code(state, code$subpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$subps(state, n, ...) doscan$using$code(state, code$subps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$subsd(state, n, ...) doscan$using$code(state, code$subsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$subss(state, n, ...) doscan$using$code(state, code$subss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$swapgs(state, n, ...) doscan$using$code(state, code$swapgs(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$syscall(state, n, ...) doscan$using$code(state, code$syscall(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sysenter(state, n, ...) doscan$using$code(state, code$sysenter(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sysexit(state, n, ...) doscan$using$code(state, code$sysexit(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sysexit64(state, n, ...) doscan$using$code(state, code$sysexit64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sysret(state, n, ...) doscan$using$code(state, code$sysret(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$sysret64(state, n, ...) doscan$using$code(state, code$sysret64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$test(state, n, ...) doscan$using$code(state, code$test(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$tpause(state, n, ...) doscan$using$code(state, code$tpause(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$tzcnt(state, n, ...) doscan$using$code(state, code$tzcnt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ucomisd(state, n, ...) doscan$using$code(state, code$ucomisd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ucomiss(state, n, ...) doscan$using$code(state, code$ucomiss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ud1(state, n, ...) doscan$using$code(state, code$ud1(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$ud2(state, n, ...) doscan$using$code(state, code$ud2(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$umonitor(state, n, ...) doscan$using$code(state, code$umonitor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$umwait(state, n, ...) doscan$using$code(state, code$umwait(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$unpckhpd(state, n, ...) doscan$using$code(state, code$unpckhpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$unpckhps(state, n, ...) doscan$using$code(state, code$unpckhps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$unpcklpd(state, n, ...) doscan$using$code(state, code$unpcklpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$unpcklps(state, n, ...) doscan$using$code(state, code$unpcklps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaddpd(state, n, ...) doscan$using$code(state, code$vaddpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaddps(state, n, ...) doscan$using$code(state, code$vaddps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaddss(state, n, ...) doscan$using$code(state, code$vaddss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaddsubpd(state, n, ...) doscan$using$code(state, code$vaddsubpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaddsubps(state, n, ...) doscan$using$code(state, code$vaddsubps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaesdec(state, n, ...) doscan$using$code(state, code$vaesdec(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaesdeclast(state, n, ...) doscan$using$code(state, code$vaesdeclast(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaesenc(state, n, ...) doscan$using$code(state, code$vaesenc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaesenclast(state, n, ...) doscan$using$code(state, code$vaesenclast(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaesimc(state, n, ...) doscan$using$code(state, code$vaesimc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vaeskeygenassist(state, n, ...) doscan$using$code(state, code$vaeskeygenassist(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vandnpd(state, n, ...) doscan$using$code(state, code$vandnpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vandnps(state, n, ...) doscan$using$code(state, code$vandnps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vandpd(state, n, ...) doscan$using$code(state, code$vandpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vandps(state, n, ...) doscan$using$code(state, code$vandps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vblendpd(state, n, ...) doscan$using$code(state, code$vblendpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vblendps(state, n, ...) doscan$using$code(state, code$vblendps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vblendvpd(state, n, ...) doscan$using$code(state, code$vblendvpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vblendvps(state, n, ...) doscan$using$code(state, code$vblendvps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vbroadcastf128(state, n, ...) doscan$using$code(state, code$vbroadcastf128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vbroadcasti128(state, n, ...) doscan$using$code(state, code$vbroadcasti128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vbroadcastsd(state, n, ...) doscan$using$code(state, code$vbroadcastsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vbroadcastss(state, n, ...) doscan$using$code(state, code$vbroadcastss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_ospd(state, n, ...) doscan$using$code(state, code$vcmpeq_ospd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_osps(state, n, ...) doscan$using$code(state, code$vcmpeq_osps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_ossd(state, n, ...) doscan$using$code(state, code$vcmpeq_ossd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_osss(state, n, ...) doscan$using$code(state, code$vcmpeq_osss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_uqpd(state, n, ...) doscan$using$code(state, code$vcmpeq_uqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_uqps(state, n, ...) doscan$using$code(state, code$vcmpeq_uqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_uqsd(state, n, ...) doscan$using$code(state, code$vcmpeq_uqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_uqss(state, n, ...) doscan$using$code(state, code$vcmpeq_uqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_uspd(state, n, ...) doscan$using$code(state, code$vcmpeq_uspd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_usps(state, n, ...) doscan$using$code(state, code$vcmpeq_usps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_ussd(state, n, ...) doscan$using$code(state, code$vcmpeq_ussd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeq_usss(state, n, ...) doscan$using$code(state, code$vcmpeq_usss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeqpd(state, n, ...) doscan$using$code(state, code$vcmpeqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeqps(state, n, ...) doscan$using$code(state, code$vcmpeqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeqsd(state, n, ...) doscan$using$code(state, code$vcmpeqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpeqss(state, n, ...) doscan$using$code(state, code$vcmpeqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalse_ospd(state, n, ...) doscan$using$code(state, code$vcmpfalse_ospd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalse_osps(state, n, ...) doscan$using$code(state, code$vcmpfalse_osps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalse_ossd(state, n, ...) doscan$using$code(state, code$vcmpfalse_ossd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalse_osss(state, n, ...) doscan$using$code(state, code$vcmpfalse_osss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalsepd(state, n, ...) doscan$using$code(state, code$vcmpfalsepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalseps(state, n, ...) doscan$using$code(state, code$vcmpfalseps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalsesd(state, n, ...) doscan$using$code(state, code$vcmpfalsesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpfalsess(state, n, ...) doscan$using$code(state, code$vcmpfalsess(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpge_oqpd(state, n, ...) doscan$using$code(state, code$vcmpge_oqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpge_oqps(state, n, ...) doscan$using$code(state, code$vcmpge_oqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpge_oqsd(state, n, ...) doscan$using$code(state, code$vcmpge_oqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpge_oqss(state, n, ...) doscan$using$code(state, code$vcmpge_oqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgepd(state, n, ...) doscan$using$code(state, code$vcmpgepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgeps(state, n, ...) doscan$using$code(state, code$vcmpgeps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgesd(state, n, ...) doscan$using$code(state, code$vcmpgesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgess(state, n, ...) doscan$using$code(state, code$vcmpgess(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgt_oqpd(state, n, ...) doscan$using$code(state, code$vcmpgt_oqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgt_oqps(state, n, ...) doscan$using$code(state, code$vcmpgt_oqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgt_oqsd(state, n, ...) doscan$using$code(state, code$vcmpgt_oqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgt_oqss(state, n, ...) doscan$using$code(state, code$vcmpgt_oqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgtpd(state, n, ...) doscan$using$code(state, code$vcmpgtpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgtps(state, n, ...) doscan$using$code(state, code$vcmpgtps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgtsd(state, n, ...) doscan$using$code(state, code$vcmpgtsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpgtss(state, n, ...) doscan$using$code(state, code$vcmpgtss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmple_oqpd(state, n, ...) doscan$using$code(state, code$vcmple_oqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmple_oqps(state, n, ...) doscan$using$code(state, code$vcmple_oqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmple_oqsd(state, n, ...) doscan$using$code(state, code$vcmple_oqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmple_oqss(state, n, ...) doscan$using$code(state, code$vcmple_oqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmplepd(state, n, ...) doscan$using$code(state, code$vcmplepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpleps(state, n, ...) doscan$using$code(state, code$vcmpleps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmplesd(state, n, ...) doscan$using$code(state, code$vcmplesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpless(state, n, ...) doscan$using$code(state, code$vcmpless(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmplt_oqpd(state, n, ...) doscan$using$code(state, code$vcmplt_oqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmplt_oqps(state, n, ...) doscan$using$code(state, code$vcmplt_oqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmplt_oqsd(state, n, ...) doscan$using$code(state, code$vcmplt_oqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmplt_oqss(state, n, ...) doscan$using$code(state, code$vcmplt_oqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpltpd(state, n, ...) doscan$using$code(state, code$vcmpltpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpltps(state, n, ...) doscan$using$code(state, code$vcmpltps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpltsd(state, n, ...) doscan$using$code(state, code$vcmpltsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpltss(state, n, ...) doscan$using$code(state, code$vcmpltss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_oqpd(state, n, ...) doscan$using$code(state, code$vcmpneq_oqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_oqps(state, n, ...) doscan$using$code(state, code$vcmpneq_oqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_oqsd(state, n, ...) doscan$using$code(state, code$vcmpneq_oqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_oqss(state, n, ...) doscan$using$code(state, code$vcmpneq_oqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_ospd(state, n, ...) doscan$using$code(state, code$vcmpneq_ospd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_osps(state, n, ...) doscan$using$code(state, code$vcmpneq_osps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_ossd(state, n, ...) doscan$using$code(state, code$vcmpneq_ossd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_osss(state, n, ...) doscan$using$code(state, code$vcmpneq_osss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_uspd(state, n, ...) doscan$using$code(state, code$vcmpneq_uspd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_usps(state, n, ...) doscan$using$code(state, code$vcmpneq_usps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_ussd(state, n, ...) doscan$using$code(state, code$vcmpneq_ussd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneq_usss(state, n, ...) doscan$using$code(state, code$vcmpneq_usss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneqpd(state, n, ...) doscan$using$code(state, code$vcmpneqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneqps(state, n, ...) doscan$using$code(state, code$vcmpneqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneqsd(state, n, ...) doscan$using$code(state, code$vcmpneqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpneqss(state, n, ...) doscan$using$code(state, code$vcmpneqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnge_uqpd(state, n, ...) doscan$using$code(state, code$vcmpnge_uqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnge_uqps(state, n, ...) doscan$using$code(state, code$vcmpnge_uqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnge_uqsd(state, n, ...) doscan$using$code(state, code$vcmpnge_uqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnge_uqss(state, n, ...) doscan$using$code(state, code$vcmpnge_uqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngepd(state, n, ...) doscan$using$code(state, code$vcmpngepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngeps(state, n, ...) doscan$using$code(state, code$vcmpngeps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngesd(state, n, ...) doscan$using$code(state, code$vcmpngesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngess(state, n, ...) doscan$using$code(state, code$vcmpngess(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngt_uqpd(state, n, ...) doscan$using$code(state, code$vcmpngt_uqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngt_uqps(state, n, ...) doscan$using$code(state, code$vcmpngt_uqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngt_uqsd(state, n, ...) doscan$using$code(state, code$vcmpngt_uqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngt_uqss(state, n, ...) doscan$using$code(state, code$vcmpngt_uqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngtpd(state, n, ...) doscan$using$code(state, code$vcmpngtpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngtps(state, n, ...) doscan$using$code(state, code$vcmpngtps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngtsd(state, n, ...) doscan$using$code(state, code$vcmpngtsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpngtss(state, n, ...) doscan$using$code(state, code$vcmpngtss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnle_uqpd(state, n, ...) doscan$using$code(state, code$vcmpnle_uqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnle_uqps(state, n, ...) doscan$using$code(state, code$vcmpnle_uqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnle_uqsd(state, n, ...) doscan$using$code(state, code$vcmpnle_uqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnle_uqss(state, n, ...) doscan$using$code(state, code$vcmpnle_uqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnlepd(state, n, ...) doscan$using$code(state, code$vcmpnlepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnleps(state, n, ...) doscan$using$code(state, code$vcmpnleps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnlesd(state, n, ...) doscan$using$code(state, code$vcmpnlesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnless(state, n, ...) doscan$using$code(state, code$vcmpnless(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnlt_uqpd(state, n, ...) doscan$using$code(state, code$vcmpnlt_uqpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnlt_uqps(state, n, ...) doscan$using$code(state, code$vcmpnlt_uqps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnlt_uqsd(state, n, ...) doscan$using$code(state, code$vcmpnlt_uqsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnlt_uqss(state, n, ...) doscan$using$code(state, code$vcmpnlt_uqss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnltpd(state, n, ...) doscan$using$code(state, code$vcmpnltpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnltps(state, n, ...) doscan$using$code(state, code$vcmpnltps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnltsd(state, n, ...) doscan$using$code(state, code$vcmpnltsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpnltss(state, n, ...) doscan$using$code(state, code$vcmpnltss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpord_spd(state, n, ...) doscan$using$code(state, code$vcmpord_spd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpord_sps(state, n, ...) doscan$using$code(state, code$vcmpord_sps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpord_ssd(state, n, ...) doscan$using$code(state, code$vcmpord_ssd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpord_sss(state, n, ...) doscan$using$code(state, code$vcmpord_sss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpordpd(state, n, ...) doscan$using$code(state, code$vcmpordpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpordps(state, n, ...) doscan$using$code(state, code$vcmpordps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpordsd(state, n, ...) doscan$using$code(state, code$vcmpordsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpordss(state, n, ...) doscan$using$code(state, code$vcmpordss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmppd(state, n, ...) doscan$using$code(state, code$vcmppd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpps(state, n, ...) doscan$using$code(state, code$vcmpps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpsd(state, n, ...) doscan$using$code(state, code$vcmpsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpss(state, n, ...) doscan$using$code(state, code$vcmpss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptrue_uspd(state, n, ...) doscan$using$code(state, code$vcmptrue_uspd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptrue_usps(state, n, ...) doscan$using$code(state, code$vcmptrue_usps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptrue_ussd(state, n, ...) doscan$using$code(state, code$vcmptrue_ussd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptrue_usss(state, n, ...) doscan$using$code(state, code$vcmptrue_usss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptruepd(state, n, ...) doscan$using$code(state, code$vcmptruepd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptrueps(state, n, ...) doscan$using$code(state, code$vcmptrueps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptruesd(state, n, ...) doscan$using$code(state, code$vcmptruesd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmptruess(state, n, ...) doscan$using$code(state, code$vcmptruess(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunord_spd(state, n, ...) doscan$using$code(state, code$vcmpunord_spd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunord_sps(state, n, ...) doscan$using$code(state, code$vcmpunord_sps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunord_ssd(state, n, ...) doscan$using$code(state, code$vcmpunord_ssd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunord_sss(state, n, ...) doscan$using$code(state, code$vcmpunord_sss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunordpd(state, n, ...) doscan$using$code(state, code$vcmpunordpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunordps(state, n, ...) doscan$using$code(state, code$vcmpunordps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunordsd(state, n, ...) doscan$using$code(state, code$vcmpunordsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcmpunordss(state, n, ...) doscan$using$code(state, code$vcmpunordss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcomisd(state, n, ...) doscan$using$code(state, code$vcomisd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcomiss(state, n, ...) doscan$using$code(state, code$vcomiss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtdq2pd(state, n, ...) doscan$using$code(state, code$vcvtdq2pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtdq2ps(state, n, ...) doscan$using$code(state, code$vcvtdq2ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtpd2dq(state, n, ...) doscan$using$code(state, code$vcvtpd2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtpd2ps(state, n, ...) doscan$using$code(state, code$vcvtpd2ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtph2ps(state, n, ...) doscan$using$code(state, code$vcvtph2ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtps2dq(state, n, ...) doscan$using$code(state, code$vcvtps2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtps2pd(state, n, ...) doscan$using$code(state, code$vcvtps2pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtps2ph(state, n, ...) doscan$using$code(state, code$vcvtps2ph(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtsd2si(state, n, ...) doscan$using$code(state, code$vcvtsd2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtsd2ss(state, n, ...) doscan$using$code(state, code$vcvtsd2ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtsi2sd(state, n, ...) doscan$using$code(state, code$vcvtsi2sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtsi2ss(state, n, ...) doscan$using$code(state, code$vcvtsi2ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtss2sd(state, n, ...) doscan$using$code(state, code$vcvtss2sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvtss2si(state, n, ...) doscan$using$code(state, code$vcvtss2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvttpd2dq(state, n, ...) doscan$using$code(state, code$vcvttpd2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvttps2dq(state, n, ...) doscan$using$code(state, code$vcvttps2dq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvttsd2si(state, n, ...) doscan$using$code(state, code$vcvttsd2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vcvttss2si(state, n, ...) doscan$using$code(state, code$vcvttss2si(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vdivpd(state, n, ...) doscan$using$code(state, code$vdivpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vdivps(state, n, ...) doscan$using$code(state, code$vdivps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vdivsd(state, n, ...) doscan$using$code(state, code$vdivsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vdivss(state, n, ...) doscan$using$code(state, code$vdivss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vdppd(state, n, ...) doscan$using$code(state, code$vdppd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vdpps(state, n, ...) doscan$using$code(state, code$vdpps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vextractf128(state, n, ...) doscan$using$code(state, code$vextractf128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vextracti128(state, n, ...) doscan$using$code(state, code$vextracti128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vextractps(state, n, ...) doscan$using$code(state, code$vextractps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd132pd(state, n, ...) doscan$using$code(state, code$vfmadd132pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd132ps(state, n, ...) doscan$using$code(state, code$vfmadd132ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd132sd(state, n, ...) doscan$using$code(state, code$vfmadd132sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd132ss(state, n, ...) doscan$using$code(state, code$vfmadd132ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd213pd(state, n, ...) doscan$using$code(state, code$vfmadd213pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd213ps(state, n, ...) doscan$using$code(state, code$vfmadd213ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd213sd(state, n, ...) doscan$using$code(state, code$vfmadd213sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd213ss(state, n, ...) doscan$using$code(state, code$vfmadd213ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd231pd(state, n, ...) doscan$using$code(state, code$vfmadd231pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd231ps(state, n, ...) doscan$using$code(state, code$vfmadd231ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd231sd(state, n, ...) doscan$using$code(state, code$vfmadd231sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmadd231ss(state, n, ...) doscan$using$code(state, code$vfmadd231ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmaddsub132pd(state, n, ...) doscan$using$code(state, code$vfmaddsub132pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmaddsub132ps(state, n, ...) doscan$using$code(state, code$vfmaddsub132ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmaddsub213pd(state, n, ...) doscan$using$code(state, code$vfmaddsub213pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmaddsub213ps(state, n, ...) doscan$using$code(state, code$vfmaddsub213ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmaddsub231pd(state, n, ...) doscan$using$code(state, code$vfmaddsub231pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmaddsub231ps(state, n, ...) doscan$using$code(state, code$vfmaddsub231ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub132pd(state, n, ...) doscan$using$code(state, code$vfmsub132pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub132ps(state, n, ...) doscan$using$code(state, code$vfmsub132ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub132sd(state, n, ...) doscan$using$code(state, code$vfmsub132sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub132ss(state, n, ...) doscan$using$code(state, code$vfmsub132ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub213pd(state, n, ...) doscan$using$code(state, code$vfmsub213pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub213ps(state, n, ...) doscan$using$code(state, code$vfmsub213ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub213sd(state, n, ...) doscan$using$code(state, code$vfmsub213sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub213ss(state, n, ...) doscan$using$code(state, code$vfmsub213ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub231pd(state, n, ...) doscan$using$code(state, code$vfmsub231pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub231ps(state, n, ...) doscan$using$code(state, code$vfmsub231ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub231sd(state, n, ...) doscan$using$code(state, code$vfmsub231sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsub231ss(state, n, ...) doscan$using$code(state, code$vfmsub231ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsubadd132pd(state, n, ...) doscan$using$code(state, code$vfmsubadd132pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsubadd132ps(state, n, ...) doscan$using$code(state, code$vfmsubadd132ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsubadd213pd(state, n, ...) doscan$using$code(state, code$vfmsubadd213pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsubadd213ps(state, n, ...) doscan$using$code(state, code$vfmsubadd213ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsubadd231pd(state, n, ...) doscan$using$code(state, code$vfmsubadd231pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfmsubadd231ps(state, n, ...) doscan$using$code(state, code$vfmsubadd231ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd132pd(state, n, ...) doscan$using$code(state, code$vfnmadd132pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd132ps(state, n, ...) doscan$using$code(state, code$vfnmadd132ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd132sd(state, n, ...) doscan$using$code(state, code$vfnmadd132sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd132ss(state, n, ...) doscan$using$code(state, code$vfnmadd132ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd213pd(state, n, ...) doscan$using$code(state, code$vfnmadd213pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd213ps(state, n, ...) doscan$using$code(state, code$vfnmadd213ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd213sd(state, n, ...) doscan$using$code(state, code$vfnmadd213sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd213ss(state, n, ...) doscan$using$code(state, code$vfnmadd213ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd231pd(state, n, ...) doscan$using$code(state, code$vfnmadd231pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd231ps(state, n, ...) doscan$using$code(state, code$vfnmadd231ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd231sd(state, n, ...) doscan$using$code(state, code$vfnmadd231sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmadd231ss(state, n, ...) doscan$using$code(state, code$vfnmadd231ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub132pd(state, n, ...) doscan$using$code(state, code$vfnmsub132pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub132ps(state, n, ...) doscan$using$code(state, code$vfnmsub132ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub132sd(state, n, ...) doscan$using$code(state, code$vfnmsub132sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub132ss(state, n, ...) doscan$using$code(state, code$vfnmsub132ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub213pd(state, n, ...) doscan$using$code(state, code$vfnmsub213pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub213ps(state, n, ...) doscan$using$code(state, code$vfnmsub213ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub213sd(state, n, ...) doscan$using$code(state, code$vfnmsub213sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub213ss(state, n, ...) doscan$using$code(state, code$vfnmsub213ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub231pd(state, n, ...) doscan$using$code(state, code$vfnmsub231pd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub231ps(state, n, ...) doscan$using$code(state, code$vfnmsub231ps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub231sd(state, n, ...) doscan$using$code(state, code$vfnmsub231sd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vfnmsub231ss(state, n, ...) doscan$using$code(state, code$vfnmsub231ss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vgf2p8affineinvqb(state, n, ...) doscan$using$code(state, code$vgf2p8affineinvqb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vgf2p8affineqb(state, n, ...) doscan$using$code(state, code$vgf2p8affineqb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vgf2p8mulb(state, n, ...) doscan$using$code(state, code$vgf2p8mulb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vhaddpd(state, n, ...) doscan$using$code(state, code$vhaddpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vhaddps(state, n, ...) doscan$using$code(state, code$vhaddps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vhsubpd(state, n, ...) doscan$using$code(state, code$vhsubpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vhsubps(state, n, ...) doscan$using$code(state, code$vhsubps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vinsertf128(state, n, ...) doscan$using$code(state, code$vinsertf128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vinserti128(state, n, ...) doscan$using$code(state, code$vinserti128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vinsertps(state, n, ...) doscan$using$code(state, code$vinsertps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vlddqu(state, n, ...) doscan$using$code(state, code$vlddqu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vldmxcsr(state, n, ...) doscan$using$code(state, code$vldmxcsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmaskmovdqu(state, n, ...) doscan$using$code(state, code$vmaskmovdqu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmaskmovpd(state, n, ...) doscan$using$code(state, code$vmaskmovpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmaskmovps(state, n, ...) doscan$using$code(state, code$vmaskmovps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmaxpd(state, n, ...) doscan$using$code(state, code$vmaxpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmaxps(state, n, ...) doscan$using$code(state, code$vmaxps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmaxsd(state, n, ...) doscan$using$code(state, code$vmaxsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmaxss(state, n, ...) doscan$using$code(state, code$vmaxss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmcall(state, n, ...) doscan$using$code(state, code$vmcall(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmclear(state, n, ...) doscan$using$code(state, code$vmclear(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmfunc(state, n, ...) doscan$using$code(state, code$vmfunc(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vminpd(state, n, ...) doscan$using$code(state, code$vminpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vminps(state, n, ...) doscan$using$code(state, code$vminps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vminsd(state, n, ...) doscan$using$code(state, code$vminsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vminss(state, n, ...) doscan$using$code(state, code$vminss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmlaunch(state, n, ...) doscan$using$code(state, code$vmlaunch(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovapd(state, n, ...) doscan$using$code(state, code$vmovapd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovaps(state, n, ...) doscan$using$code(state, code$vmovaps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovd(state, n, ...) doscan$using$code(state, code$vmovd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovddup(state, n, ...) doscan$using$code(state, code$vmovddup(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovdqa(state, n, ...) doscan$using$code(state, code$vmovdqa(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovdqu(state, n, ...) doscan$using$code(state, code$vmovdqu(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovhlps(state, n, ...) doscan$using$code(state, code$vmovhlps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovhpd(state, n, ...) doscan$using$code(state, code$vmovhpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovhps(state, n, ...) doscan$using$code(state, code$vmovhps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovlhps(state, n, ...) doscan$using$code(state, code$vmovlhps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovlpd(state, n, ...) doscan$using$code(state, code$vmovlpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovlps(state, n, ...) doscan$using$code(state, code$vmovlps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovmskpd(state, n, ...) doscan$using$code(state, code$vmovmskpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovmskps(state, n, ...) doscan$using$code(state, code$vmovmskps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovntdq(state, n, ...) doscan$using$code(state, code$vmovntdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovntdqa(state, n, ...) doscan$using$code(state, code$vmovntdqa(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovntpd(state, n, ...) doscan$using$code(state, code$vmovntpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovntps(state, n, ...) doscan$using$code(state, code$vmovntps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovq(state, n, ...) doscan$using$code(state, code$vmovq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovsd(state, n, ...) doscan$using$code(state, code$vmovsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovshdup(state, n, ...) doscan$using$code(state, code$vmovshdup(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovsldup(state, n, ...) doscan$using$code(state, code$vmovsldup(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovss(state, n, ...) doscan$using$code(state, code$vmovss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovupd(state, n, ...) doscan$using$code(state, code$vmovupd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmovups(state, n, ...) doscan$using$code(state, code$vmovups(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmpsadbw(state, n, ...) doscan$using$code(state, code$vmpsadbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmptrld(state, n, ...) doscan$using$code(state, code$vmptrld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmptrst(state, n, ...) doscan$using$code(state, code$vmptrst(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmread(state, n, ...) doscan$using$code(state, code$vmread(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmresume(state, n, ...) doscan$using$code(state, code$vmresume(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmulpd(state, n, ...) doscan$using$code(state, code$vmulpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmulps(state, n, ...) doscan$using$code(state, code$vmulps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmulsd(state, n, ...) doscan$using$code(state, code$vmulsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmulss(state, n, ...) doscan$using$code(state, code$vmulss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmwrite(state, n, ...) doscan$using$code(state, code$vmwrite(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmxoff(state, n, ...) doscan$using$code(state, code$vmxoff(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vmxon(state, n, ...) doscan$using$code(state, code$vmxon(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vorpd(state, n, ...) doscan$using$code(state, code$vorpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vorps(state, n, ...) doscan$using$code(state, code$vorps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpabsb(state, n, ...) doscan$using$code(state, code$vpabsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpabsd(state, n, ...) doscan$using$code(state, code$vpabsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpabsw(state, n, ...) doscan$using$code(state, code$vpabsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpackssdw(state, n, ...) doscan$using$code(state, code$vpackssdw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpacksswb(state, n, ...) doscan$using$code(state, code$vpacksswb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpackusdw(state, n, ...) doscan$using$code(state, code$vpackusdw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpackuswb(state, n, ...) doscan$using$code(state, code$vpackuswb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddb(state, n, ...) doscan$using$code(state, code$vpaddb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddd(state, n, ...) doscan$using$code(state, code$vpaddd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddq(state, n, ...) doscan$using$code(state, code$vpaddq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddsb(state, n, ...) doscan$using$code(state, code$vpaddsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddsw(state, n, ...) doscan$using$code(state, code$vpaddsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddusb(state, n, ...) doscan$using$code(state, code$vpaddusb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddusw(state, n, ...) doscan$using$code(state, code$vpaddusw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpaddw(state, n, ...) doscan$using$code(state, code$vpaddw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpalignr(state, n, ...) doscan$using$code(state, code$vpalignr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpand(state, n, ...) doscan$using$code(state, code$vpand(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpandn(state, n, ...) doscan$using$code(state, code$vpandn(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpavgb(state, n, ...) doscan$using$code(state, code$vpavgb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpavgw(state, n, ...) doscan$using$code(state, code$vpavgw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpblendd(state, n, ...) doscan$using$code(state, code$vpblendd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpblendvb(state, n, ...) doscan$using$code(state, code$vpblendvb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpblendw(state, n, ...) doscan$using$code(state, code$vpblendw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpbroadcastb(state, n, ...) doscan$using$code(state, code$vpbroadcastb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpbroadcastd(state, n, ...) doscan$using$code(state, code$vpbroadcastd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpbroadcastq(state, n, ...) doscan$using$code(state, code$vpbroadcastq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpbroadcastw(state, n, ...) doscan$using$code(state, code$vpbroadcastw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpclmulqdq(state, n, ...) doscan$using$code(state, code$vpclmulqdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpeqb(state, n, ...) doscan$using$code(state, code$vpcmpeqb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpeqd(state, n, ...) doscan$using$code(state, code$vpcmpeqd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpeqq(state, n, ...) doscan$using$code(state, code$vpcmpeqq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpeqw(state, n, ...) doscan$using$code(state, code$vpcmpeqw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpestri(state, n, ...) doscan$using$code(state, code$vpcmpestri(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpestrm(state, n, ...) doscan$using$code(state, code$vpcmpestrm(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpgtb(state, n, ...) doscan$using$code(state, code$vpcmpgtb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpgtd(state, n, ...) doscan$using$code(state, code$vpcmpgtd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpgtq(state, n, ...) doscan$using$code(state, code$vpcmpgtq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpgtw(state, n, ...) doscan$using$code(state, code$vpcmpgtw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpistri(state, n, ...) doscan$using$code(state, code$vpcmpistri(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpcmpistrm(state, n, ...) doscan$using$code(state, code$vpcmpistrm(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpdpbusd(state, n, ...) doscan$using$code(state, code$vpdpbusd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpdpbusds(state, n, ...) doscan$using$code(state, code$vpdpbusds(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpdpwssd(state, n, ...) doscan$using$code(state, code$vpdpwssd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpdpwssds(state, n, ...) doscan$using$code(state, code$vpdpwssds(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vperm2f128(state, n, ...) doscan$using$code(state, code$vperm2f128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vperm2i128(state, n, ...) doscan$using$code(state, code$vperm2i128(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpermd(state, n, ...) doscan$using$code(state, code$vpermd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpermilpd(state, n, ...) doscan$using$code(state, code$vpermilpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpermilps(state, n, ...) doscan$using$code(state, code$vpermilps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpermpd(state, n, ...) doscan$using$code(state, code$vpermpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpermps(state, n, ...) doscan$using$code(state, code$vpermps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpermq(state, n, ...) doscan$using$code(state, code$vpermq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpextrb(state, n, ...) doscan$using$code(state, code$vpextrb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpextrd(state, n, ...) doscan$using$code(state, code$vpextrd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpextrq(state, n, ...) doscan$using$code(state, code$vpextrq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpextrw(state, n, ...) doscan$using$code(state, code$vpextrw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vphaddd(state, n, ...) doscan$using$code(state, code$vphaddd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vphaddsw(state, n, ...) doscan$using$code(state, code$vphaddsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vphaddw(state, n, ...) doscan$using$code(state, code$vphaddw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vphminposuw(state, n, ...) doscan$using$code(state, code$vphminposuw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vphsubd(state, n, ...) doscan$using$code(state, code$vphsubd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vphsubsw(state, n, ...) doscan$using$code(state, code$vphsubsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vphsubw(state, n, ...) doscan$using$code(state, code$vphsubw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpinsrb(state, n, ...) doscan$using$code(state, code$vpinsrb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpinsrd(state, n, ...) doscan$using$code(state, code$vpinsrd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpinsrq(state, n, ...) doscan$using$code(state, code$vpinsrq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpinsrw(state, n, ...) doscan$using$code(state, code$vpinsrw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaddubsw(state, n, ...) doscan$using$code(state, code$vpmaddubsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaddwd(state, n, ...) doscan$using$code(state, code$vpmaddwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaskmovd(state, n, ...) doscan$using$code(state, code$vpmaskmovd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaskmovq(state, n, ...) doscan$using$code(state, code$vpmaskmovq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaxsb(state, n, ...) doscan$using$code(state, code$vpmaxsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaxsd(state, n, ...) doscan$using$code(state, code$vpmaxsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaxsw(state, n, ...) doscan$using$code(state, code$vpmaxsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaxub(state, n, ...) doscan$using$code(state, code$vpmaxub(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaxud(state, n, ...) doscan$using$code(state, code$vpmaxud(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmaxuw(state, n, ...) doscan$using$code(state, code$vpmaxuw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpminsb(state, n, ...) doscan$using$code(state, code$vpminsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpminsd(state, n, ...) doscan$using$code(state, code$vpminsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpminsw(state, n, ...) doscan$using$code(state, code$vpminsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpminub(state, n, ...) doscan$using$code(state, code$vpminub(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpminud(state, n, ...) doscan$using$code(state, code$vpminud(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpminuw(state, n, ...) doscan$using$code(state, code$vpminuw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovmskb(state, n, ...) doscan$using$code(state, code$vpmovmskb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovsxbd(state, n, ...) doscan$using$code(state, code$vpmovsxbd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovsxbq(state, n, ...) doscan$using$code(state, code$vpmovsxbq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovsxbw(state, n, ...) doscan$using$code(state, code$vpmovsxbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovsxdq(state, n, ...) doscan$using$code(state, code$vpmovsxdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovsxwd(state, n, ...) doscan$using$code(state, code$vpmovsxwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovsxwq(state, n, ...) doscan$using$code(state, code$vpmovsxwq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovzxbd(state, n, ...) doscan$using$code(state, code$vpmovzxbd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovzxbq(state, n, ...) doscan$using$code(state, code$vpmovzxbq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovzxbw(state, n, ...) doscan$using$code(state, code$vpmovzxbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovzxdq(state, n, ...) doscan$using$code(state, code$vpmovzxdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovzxwd(state, n, ...) doscan$using$code(state, code$vpmovzxwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmovzxwq(state, n, ...) doscan$using$code(state, code$vpmovzxwq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmuldq(state, n, ...) doscan$using$code(state, code$vpmuldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmulhrsw(state, n, ...) doscan$using$code(state, code$vpmulhrsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmulhuw(state, n, ...) doscan$using$code(state, code$vpmulhuw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmulhw(state, n, ...) doscan$using$code(state, code$vpmulhw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmulld(state, n, ...) doscan$using$code(state, code$vpmulld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmullw(state, n, ...) doscan$using$code(state, code$vpmullw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpmuludq(state, n, ...) doscan$using$code(state, code$vpmuludq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpor(state, n, ...) doscan$using$code(state, code$vpor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsadbw(state, n, ...) doscan$using$code(state, code$vpsadbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpshufb(state, n, ...) doscan$using$code(state, code$vpshufb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpshufd(state, n, ...) doscan$using$code(state, code$vpshufd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpshufhw(state, n, ...) doscan$using$code(state, code$vpshufhw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpshuflw(state, n, ...) doscan$using$code(state, code$vpshuflw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsignb(state, n, ...) doscan$using$code(state, code$vpsignb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsignd(state, n, ...) doscan$using$code(state, code$vpsignd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsignw(state, n, ...) doscan$using$code(state, code$vpsignw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpslld(state, n, ...) doscan$using$code(state, code$vpslld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpslldq(state, n, ...) doscan$using$code(state, code$vpslldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsllq(state, n, ...) doscan$using$code(state, code$vpsllq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsllvd(state, n, ...) doscan$using$code(state, code$vpsllvd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsllvq(state, n, ...) doscan$using$code(state, code$vpsllvq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsllw(state, n, ...) doscan$using$code(state, code$vpsllw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsrad(state, n, ...) doscan$using$code(state, code$vpsrad(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsravd(state, n, ...) doscan$using$code(state, code$vpsravd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsraw(state, n, ...) doscan$using$code(state, code$vpsraw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsrld(state, n, ...) doscan$using$code(state, code$vpsrld(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsrldq(state, n, ...) doscan$using$code(state, code$vpsrldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsrlq(state, n, ...) doscan$using$code(state, code$vpsrlq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsrlvd(state, n, ...) doscan$using$code(state, code$vpsrlvd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsrlvq(state, n, ...) doscan$using$code(state, code$vpsrlvq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsrlw(state, n, ...) doscan$using$code(state, code$vpsrlw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubb(state, n, ...) doscan$using$code(state, code$vpsubb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubd(state, n, ...) doscan$using$code(state, code$vpsubd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubq(state, n, ...) doscan$using$code(state, code$vpsubq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubsb(state, n, ...) doscan$using$code(state, code$vpsubsb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubsw(state, n, ...) doscan$using$code(state, code$vpsubsw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubusb(state, n, ...) doscan$using$code(state, code$vpsubusb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubusw(state, n, ...) doscan$using$code(state, code$vpsubusw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpsubw(state, n, ...) doscan$using$code(state, code$vpsubw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vptest(state, n, ...) doscan$using$code(state, code$vptest(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpckhbw(state, n, ...) doscan$using$code(state, code$vpunpckhbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpckhdq(state, n, ...) doscan$using$code(state, code$vpunpckhdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpckhqdq(state, n, ...) doscan$using$code(state, code$vpunpckhqdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpckhwd(state, n, ...) doscan$using$code(state, code$vpunpckhwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpcklbw(state, n, ...) doscan$using$code(state, code$vpunpcklbw(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpckldq(state, n, ...) doscan$using$code(state, code$vpunpckldq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpcklqdq(state, n, ...) doscan$using$code(state, code$vpunpcklqdq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpunpcklwd(state, n, ...) doscan$using$code(state, code$vpunpcklwd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vpxor(state, n, ...) doscan$using$code(state, code$vpxor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vrcpps(state, n, ...) doscan$using$code(state, code$vrcpps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vrcpss(state, n, ...) doscan$using$code(state, code$vrcpss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vroundpd(state, n, ...) doscan$using$code(state, code$vroundpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vroundps(state, n, ...) doscan$using$code(state, code$vroundps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vroundsd(state, n, ...) doscan$using$code(state, code$vroundsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vroundss(state, n, ...) doscan$using$code(state, code$vroundss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vrsqrtps(state, n, ...) doscan$using$code(state, code$vrsqrtps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vrsqrtss(state, n, ...) doscan$using$code(state, code$vrsqrtss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vshufpd(state, n, ...) doscan$using$code(state, code$vshufpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vshufps(state, n, ...) doscan$using$code(state, code$vshufps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsqrtpd(state, n, ...) doscan$using$code(state, code$vsqrtpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsqrtps(state, n, ...) doscan$using$code(state, code$vsqrtps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsqrtsd(state, n, ...) doscan$using$code(state, code$vsqrtsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsqrtss(state, n, ...) doscan$using$code(state, code$vsqrtss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vstmxcsr(state, n, ...) doscan$using$code(state, code$vstmxcsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsubpd(state, n, ...) doscan$using$code(state, code$vsubpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsubps(state, n, ...) doscan$using$code(state, code$vsubps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsubsd(state, n, ...) doscan$using$code(state, code$vsubsd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vsubss(state, n, ...) doscan$using$code(state, code$vsubss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vtestpd(state, n, ...) doscan$using$code(state, code$vtestpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vtestps(state, n, ...) doscan$using$code(state, code$vtestps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vucomisd(state, n, ...) doscan$using$code(state, code$vucomisd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vucomiss(state, n, ...) doscan$using$code(state, code$vucomiss(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vunpckhpd(state, n, ...) doscan$using$code(state, code$vunpckhpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vunpckhps(state, n, ...) doscan$using$code(state, code$vunpckhps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vunpcklpd(state, n, ...) doscan$using$code(state, code$vunpcklpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vunpcklps(state, n, ...) doscan$using$code(state, code$vunpcklps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vxorpd(state, n, ...) doscan$using$code(state, code$vxorpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vxorps(state, n, ...) doscan$using$code(state, code$vxorps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vzeroall(state, n, ...) doscan$using$code(state, code$vzeroall(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$vzeroupper(state, n, ...) doscan$using$code(state, code$vzeroupper(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wait(state, n, ...) doscan$using$code(state, code$wait(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wbinvd(state, n, ...) doscan$using$code(state, code$wbinvd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wbnoinvd(state, n, ...) doscan$using$code(state, code$wbnoinvd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrfsbase(state, n, ...) doscan$using$code(state, code$wrfsbase(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrgsbase(state, n, ...) doscan$using$code(state, code$wrgsbase(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrmsr(state, n, ...) doscan$using$code(state, code$wrmsr(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrpkru(state, n, ...) doscan$using$code(state, code$wrpkru(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrssd(state, n, ...) doscan$using$code(state, code$wrssd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrssq(state, n, ...) doscan$using$code(state, code$wrssq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrussd(state, n, ...) doscan$using$code(state, code$wrussd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$wrussq(state, n, ...) doscan$using$code(state, code$wrussq(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xabort(state, n, ...) doscan$using$code(state, code$xabort(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xacquire(state, n, ...) doscan$using$code(state, code$xacquire(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xadd(state, n, ...) doscan$using$code(state, code$xadd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xbegin(state, n, ...) doscan$using$code(state, code$xbegin(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xchg(state, n, ...) doscan$using$code(state, code$xchg(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xend(state, n, ...) doscan$using$code(state, code$xend(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xgetbv(state, n, ...) doscan$using$code(state, code$xgetbv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xlatb(state, n, ...) doscan$using$code(state, code$xlatb(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xor(state, n, ...) doscan$using$code(state, code$xor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xorpd(state, n, ...) doscan$using$code(state, code$xorpd(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xorps(state, n, ...) doscan$using$code(state, code$xorps(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xrelease(state, n, ...) doscan$using$code(state, code$xrelease(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xrstor(state, n, ...) doscan$using$code(state, code$xrstor(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xrstor64(state, n, ...) doscan$using$code(state, code$xrstor64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xrstors(state, n, ...) doscan$using$code(state, code$xrstors(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xrstors64(state, n, ...) doscan$using$code(state, code$xrstors64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsave(state, n, ...) doscan$using$code(state, code$xsave(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsave64(state, n, ...) doscan$using$code(state, code$xsave64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsavec(state, n, ...) doscan$using$code(state, code$xsavec(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsavec64(state, n, ...) doscan$using$code(state, code$xsavec64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsaveopt(state, n, ...) doscan$using$code(state, code$xsaveopt(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsaveopt64(state, n, ...) doscan$using$code(state, code$xsaveopt64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsaves(state, n, ...) doscan$using$code(state, code$xsaves(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsaves64(state, n, ...) doscan$using$code(state, code$xsaves64(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xsetbv(state, n, ...) doscan$using$code(state, code$xsetbv(state$init$dummy, n, ##__VA_ARGS__))
#		define scan$xtest(state, n, ...) doscan$using$code(state, code$xtest(state$init$dummy, n, ##__VA_ARGS__))
#		define scast$i08$to$i08(...) scast$i08$to$i08$1(__VA_ARGS__)
#		define scast$i08$to$i08$1(...) scast$i08$to$i08$2(__VA_ARGS__)
#		define scast$i08$to$i08$2(...) __VA_ARGS__
#		define scast$i08$to$i16(...) scast$i08$to$i16$1(__VA_ARGS__)
#		define scast$i08$to$i16$1(...) scast$i08$to$i16$2(__VA_ARGS__)
#		define scast$i08$to$i16$2(...) i08$sx16(__VA_ARGS__)
#		define scast$i08$to$i32(...) scast$i08$to$i32$1(__VA_ARGS__)
#		define scast$i08$to$i32$1(...) scast$i08$to$i32$2(__VA_ARGS__)
#		define scast$i08$to$i32$2(...) i08$sx32(__VA_ARGS__)
#		define scast$i08$to$i64(...) scast$i08$to$i64$1(__VA_ARGS__)
#		define scast$i08$to$i64$1(...) scast$i08$to$i64$2(__VA_ARGS__)
#		define scast$i08$to$i64$2(...) i08$sx64(__VA_ARGS__)
#		define scast$i16$to$i08(...) scast$i16$to$i08$1(__VA_ARGS__)
#		define scast$i16$to$i08$1(...) scast$i16$to$i08$2(__VA_ARGS__)
#		define scast$i16$to$i08$2(...) i16$to08(__VA_ARGS__)
#		define scast$i16$to$i16(...) scast$i16$to$i16$1(__VA_ARGS__)
#		define scast$i16$to$i16$1(...) scast$i16$to$i16$2(__VA_ARGS__)
#		define scast$i16$to$i16$2(...) __VA_ARGS__
#		define scast$i16$to$i32(...) scast$i16$to$i32$1(__VA_ARGS__)
#		define scast$i16$to$i32$1(...) scast$i16$to$i32$2(__VA_ARGS__)
#		define scast$i16$to$i32$2(...) i16$sx32(__VA_ARGS__)
#		define scast$i16$to$i64(...) scast$i16$to$i64$1(__VA_ARGS__)
#		define scast$i16$to$i64$1(...) scast$i16$to$i64$2(__VA_ARGS__)
#		define scast$i16$to$i64$2(...) i16$sx64(__VA_ARGS__)
#		define scast$i32$to$i08(...) scast$i32$to$i08$1(__VA_ARGS__)
#		define scast$i32$to$i08$1(...) scast$i32$to$i08$2(__VA_ARGS__)
#		define scast$i32$to$i08$2(...) i32$to08(__VA_ARGS__)
#		define scast$i32$to$i16(...) scast$i32$to$i16$1(__VA_ARGS__)
#		define scast$i32$to$i16$1(...) scast$i32$to$i16$2(__VA_ARGS__)
#		define scast$i32$to$i16$2(...) i32$to16(__VA_ARGS__)
#		define scast$i32$to$i32(...) scast$i32$to$i32$1(__VA_ARGS__)
#		define scast$i32$to$i32$1(...) scast$i32$to$i32$2(__VA_ARGS__)
#		define scast$i32$to$i32$2(...) __VA_ARGS__
#		define scast$i32$to$i64(...) scast$i32$to$i64$1(__VA_ARGS__)
#		define scast$i32$to$i64$1(...) scast$i32$to$i64$2(__VA_ARGS__)
#		define scast$i32$to$i64$2(...) i32$sx64(__VA_ARGS__)
#		define scast$i64$to$i08(...) scast$i64$to$i08$1(__VA_ARGS__)
#		define scast$i64$to$i08$1(...) scast$i64$to$i08$2(__VA_ARGS__)
#		define scast$i64$to$i08$2(...) i64$to08(__VA_ARGS__)
#		define scast$i64$to$i16(...) scast$i64$to$i16$1(__VA_ARGS__)
#		define scast$i64$to$i16$1(...) scast$i64$to$i16$2(__VA_ARGS__)
#		define scast$i64$to$i16$2(...) i64$to16(__VA_ARGS__)
#		define scast$i64$to$i32(...) scast$i64$to$i32$1(__VA_ARGS__)
#		define scast$i64$to$i32$1(...) scast$i64$to$i32$2(__VA_ARGS__)
#		define scast$i64$to$i32$2(...) i64$to32(__VA_ARGS__)
#		define scast$i64$to$i64(...) scast$i64$to$i64$1(__VA_ARGS__)
#		define scast$i64$to$i64$1(...) scast$i64$to$i64$2(__VA_ARGS__)
#		define scast$i64$to$i64$2(...) __VA_ARGS__
#		define si reg16(SI)
#		define sib(s,...) sib$1(byte$fromhex(s), __VA_ARGS__)
#		define sib$1(...) sib$2(__VA_ARGS__)
#		define sib$2(sb7,sb6,sb5,sb4,sb3,sb2,sb1,sb0,...) sib$3(sb7,sb6,sb5,sb4,sb3,sb2,sb1,sb0, __VA_ARGS__) sib$check$scale(sb7,sb6,sb5,sb4,sb3,sb2,sb1,sb0)
#		define sib$3(sb7,sb6,sb5,sb4,sb3,sb2,sb1,sb0, ib7,ib6,ib5,ib4,ib3,ib2,ib1,ib0, bb7,bb6,bb5,bb4,bb3,bb2,bb1,bb0) byte$tohex(byte$as$ff,bit$or(sb3,sb2),bit$or(sb3,sb1), ib2,ib1,ib0, bb2,bb1,bb0)
#		define sib$check$scale(...) error$if(bit$all4(byte$neq(__VA_ARGS__,0,0,0,0,0,0,0,1),byte$neq(__VA_ARGS__,0,0,0,0,0,0,1,0),byte$neq(__VA_ARGS__,0,0,0,0,0,1,0,0),byte$neq(__VA_ARGS__,0,0,0,0,1,0,0,0)), "scale must be 1, 2, 4, or 8")
#		define sil reg08(SIL)
#		define sp reg16(SP)
#		define spl reg08(SPL)
#		define ss segm(SS)
#		define st0 fpreg80(ST0)
#		define st1 fpreg80(ST1)
#		define st2 fpreg80(ST2)
#		define st3 fpreg80(ST3)
#		define st4 fpreg80(ST4)
#		define st5 fpreg80(ST5)
#		define st6 fpreg80(ST6)
#		define st7 fpreg80(ST7)
#		define state$add$label(...) state$add$label$1(__VA_ARGS__)
#		define state$add$label$1(...) state$add$label$2(__VA_ARGS__)
#		define state$add$label$2(state,lid1b7,lid1b6,lid1b5,lid1b4,lid1b3,lid1b2,lid1b1,lid1b0,off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0) ppif(state$has$label(state,lid1b7,lid1b6,lid1b5,lid1b4,lid1b3,lid1b2,lid1b1,lid1b0),state$nop,state$set$label)(state,lid1b7,lid1b6,lid1b5,lid1b4,lid1b3,lid1b2,lid1b1,lid1b0,off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0)
#		define state$add$offset(...) state$add$offset$1(__VA_ARGS__)
#		define state$add$offset$1(...) state$add$offset$2(__VA_ARGS__)
#		define state$add$offset$2(state,off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0) (state$get$reality(state),(i32$add(off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0,state$get$offset(state))),state$get$lom(state))
#		define state$get$label(state,...) state$get$label$1(state$get$reality(state),state,__VA_ARGS__)
#		define state$get$label$1(...) state$get$label$2(__VA_ARGS__)
#		define state$get$label$2(reality,...) state$get$label$##reality(__VA_ARGS__)
#		define state$get$label$fake(...) i32$zero
#		define state$get$label$real(state,...) keyval$8$32$get(state$get$lom$real(state),nil,__VA_ARGS__)
#		define state$get$lom(state) state$get$lom$1(state$get$reality(state),state)
#		define state$get$lom$1(...) state$get$lom$2(__VA_ARGS__)
#		define state$get$lom$2(reality,state) state$get$lom$##reality(state)
#		define state$get$lom$fake(...) 0
#		define state$get$lom$real(state) state$get$lom$real$1 state
#		define state$get$lom$real$1(...) state$get$lom$real$2(__VA_ARGS__)
#		define state$get$lom$real$2(reality,off,lom) lom
#		define state$get$offset(state) state$get$offset$1(state$get$reality(state),state)
#		define state$get$offset$1(...) state$get$offset$2(__VA_ARGS__)
#		define state$get$offset$2(reality,state) state$get$offset$##reality(state)
#		define state$get$offset$fake(...) i32$zero
#		define state$get$offset$real(state) state$get$offset$real$1 state
#		define state$get$offset$real$1(...) state$get$offset$real$2(__VA_ARGS__)
#		define state$get$offset$real$2(reality,off,lom) state$get$offset$real$3 off
#		define state$get$offset$real$3(...) state$get$offset$real$4(__VA_ARGS__)
#		define state$get$offset$real$4(...) __VA_ARGS__
#		define state$get$reality(state) state$get$reality$1 state
#		define state$get$reality$1(r,...) r
#		define state$has$label(state,...) state$has$label$1(state$get$reality(state),state,__VA_ARGS__)
#		define state$has$label$1(...) state$has$label$2(__VA_ARGS__)
#		define state$has$label$2(reality,...) state$has$label$##reality(__VA_ARGS__)
#		define state$has$label$fake(...) 1
#		define state$has$label$real(state,...) keyval$8$32$has(state$get$lom$real(state),__VA_ARGS__)
#		define state$init (real,(i32$zero),keyval$8$32$new())
#		define state$init$dummy (fake,)
#		define state$is$real(state) state$is$real$1(state$get$reality(state))
#		define state$is$real$1(...) state$is$real$2(__VA_ARGS__)
#		define state$is$real$2(reality) state$is$real$of$##reality
#		define state$is$real$of$fake 0
#		define state$is$real$of$real 1
#		define state$nop(state, ...) state
#		define state$set$label(...) state$set$label$1(__VA_ARGS__)
#		define state$set$label$1(...) state$set$label$2(__VA_ARGS__)
#		define state$set$label$2(state,lid1b7,lid1b6,lid1b5,lid1b4,lid1b3,lid1b2,lid1b1,lid1b0,off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0) (state$get$reality(state),(state$get$offset(state)),keyval$8$32$add(state$get$lom(state),lid1b7,lid1b6,lid1b5,lid1b4,lid1b3,lid1b2,lid1b1,lid1b0,off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0))
#		define state$set$offset(...) state$set$offset$1(__VA_ARGS__)
#		define state$set$offset$1(...) state$set$offset$2(__VA_ARGS__)
#		define state$set$offset$2(state,off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0) (state$get$reality(state),(off1b31,off1b30,off1b29,off1b28,off1b27,off1b26,off1b25,off1b24,off1b23,off1b22,off1b21,off1b20,off1b19,off1b18,off1b17,off1b16,off1b15,off1b14,off1b13,off1b12,off1b11,off1b10,off1b9,off1b8,off1b7,off1b6,off1b5,off1b4,off1b3,off1b2,off1b1,off1b0),state$get$lom(state))
#		define ucast$i08$to$i08(...) ucast$i08$to$i08$1(__VA_ARGS__)
#		define ucast$i08$to$i08$1(...) ucast$i08$to$i08$2(__VA_ARGS__)
#		define ucast$i08$to$i08$2(...) __VA_ARGS__
#		define ucast$i08$to$i16(...) ucast$i08$to$i16$1(__VA_ARGS__)
#		define ucast$i08$to$i16$1(...) ucast$i08$to$i16$2(__VA_ARGS__)
#		define ucast$i08$to$i16$2(...) i08$zx16(__VA_ARGS__)
#		define ucast$i08$to$i32(...) ucast$i08$to$i32$1(__VA_ARGS__)
#		define ucast$i08$to$i32$1(...) ucast$i08$to$i32$2(__VA_ARGS__)
#		define ucast$i08$to$i32$2(...) i08$zx32(__VA_ARGS__)
#		define ucast$i08$to$i64(...) ucast$i08$to$i64$1(__VA_ARGS__)
#		define ucast$i08$to$i64$1(...) ucast$i08$to$i64$2(__VA_ARGS__)
#		define ucast$i08$to$i64$2(...) i08$zx64(__VA_ARGS__)
#		define ucast$i16$to$i08(...) ucast$i16$to$i08$1(__VA_ARGS__)
#		define ucast$i16$to$i08$1(...) ucast$i16$to$i08$2(__VA_ARGS__)
#		define ucast$i16$to$i08$2(...) i16$to08(__VA_ARGS__)
#		define ucast$i16$to$i16(...) ucast$i16$to$i16$1(__VA_ARGS__)
#		define ucast$i16$to$i16$1(...) ucast$i16$to$i16$2(__VA_ARGS__)
#		define ucast$i16$to$i16$2(...) __VA_ARGS__
#		define ucast$i16$to$i32(...) ucast$i16$to$i32$1(__VA_ARGS__)
#		define ucast$i16$to$i32$1(...) ucast$i16$to$i32$2(__VA_ARGS__)
#		define ucast$i16$to$i32$2(...) i16$zx32(__VA_ARGS__)
#		define ucast$i16$to$i64(...) ucast$i16$to$i64$1(__VA_ARGS__)
#		define ucast$i16$to$i64$1(...) ucast$i16$to$i64$2(__VA_ARGS__)
#		define ucast$i16$to$i64$2(...) i16$zx64(__VA_ARGS__)
#		define ucast$i32$to$i08(...) ucast$i32$to$i08$1(__VA_ARGS__)
#		define ucast$i32$to$i08$1(...) ucast$i32$to$i08$2(__VA_ARGS__)
#		define ucast$i32$to$i08$2(...) i32$to08(__VA_ARGS__)
#		define ucast$i32$to$i16(...) ucast$i32$to$i16$1(__VA_ARGS__)
#		define ucast$i32$to$i16$1(...) ucast$i32$to$i16$2(__VA_ARGS__)
#		define ucast$i32$to$i16$2(...) i32$to16(__VA_ARGS__)
#		define ucast$i32$to$i32(...) ucast$i32$to$i32$1(__VA_ARGS__)
#		define ucast$i32$to$i32$1(...) ucast$i32$to$i32$2(__VA_ARGS__)
#		define ucast$i32$to$i32$2(...) __VA_ARGS__
#		define ucast$i32$to$i64(...) ucast$i32$to$i64$1(__VA_ARGS__)
#		define ucast$i32$to$i64$1(...) ucast$i32$to$i64$2(__VA_ARGS__)
#		define ucast$i32$to$i64$2(...) i32$zx64(__VA_ARGS__)
#		define ucast$i64$to$i08(...) ucast$i64$to$i08$1(__VA_ARGS__)
#		define ucast$i64$to$i08$1(...) ucast$i64$to$i08$2(__VA_ARGS__)
#		define ucast$i64$to$i08$2(...) i64$to08(__VA_ARGS__)
#		define ucast$i64$to$i16(...) ucast$i64$to$i16$1(__VA_ARGS__)
#		define ucast$i64$to$i16$1(...) ucast$i64$to$i16$2(__VA_ARGS__)
#		define ucast$i64$to$i16$2(...) i64$to16(__VA_ARGS__)
#		define ucast$i64$to$i32(...) ucast$i64$to$i32$1(__VA_ARGS__)
#		define ucast$i64$to$i32$1(...) ucast$i64$to$i32$2(__VA_ARGS__)
#		define ucast$i64$to$i32$2(...) i64$to32(__VA_ARGS__)
#		define ucast$i64$to$i64(...) ucast$i64$to$i64$1(__VA_ARGS__)
#		define ucast$i64$to$i64$1(...) ucast$i64$to$i64$2(__VA_ARGS__)
#		define ucast$i64$to$i64$2(...) __VA_ARGS__
#		define unlikely prefix$bhnottaken(),
#		define unpack(...) unpack$1(__VA_ARGS__)
#		define unpack$1(...) unpack$2(__VA_ARGS__)
#		define unpack$2(...) unpack$3 __VA_ARGS__
#		define unpack$3(...) __VA_ARGS__
#		define vex(...) vex$1(__VA_ARGS__)
#		define vex$1(...) vex$2(__VA_ARGS__)
#		define vex$2(R,X,B,m4,m3,m2,m1,m0,W,v3,v2,v1,v0,L,pp1,pp0) unpack(ppif(vex$needs3bytes(R,X,B,m4,m3,m2,m1,m0,W,v3,v2,v1,v0,L,pp1,pp0),(vex$3bytes(R,X,B,m4,m3,m2,m1,m0,W,v3,v2,v1,v0,L,pp1,pp0)),(vex$2bytes(R,v3,v2,v1,v0,L,pp1,pp0))))
#		define vex$2bytes(R,v3,v2,v1,v0,L,pp1,pp0) c5, byte$tohex(byte$as$ff, R,v3,v2,v1,v0,L,pp1,pp0)
#		define vex$3bytes(R,X,B,m4,m3,m2,m1,m0,W,v3,v2,v1,v0,L,pp1,pp0) c4, byte$tohex(byte$as$ff, R,X,B,m4,m3,m2,m1,m0), byte$tohex(byte$as$ff, W,v3,v2,v1,v0,L,pp1,pp0)
#		define vex$L$128 0
#		define vex$L$256 1
#		define vex$L$lig 0
#		define vex$L$lz 0
#		define vex$mmmmm$0f 0,0,0,0,1
#		define vex$mmmmm$0f38 0,0,0,1,0
#		define vex$mmmmm$0f3a 0,0,0,1,1
#		define vex$mmmmm$isnot0f(m4,m3,m2,m1,m0) byte$neq(0,0,0,0,0,0,0,1, 0,0,0,m4,m3,m2,m1,m0)
#		define vex$needs3bytes(R,X,B,m4,m3,m2,m1,m0,W,v3,v2,v1,v0,L,pp1,pp0) bit$any4(bit$not(X),bit$not(B),vex$mmmmm$isnot0f(m4,m3,m2,m1,m0),W)
#		define vex$pp$66 0,1
#		define vex$pp$f2 1,1
#		define vex$pp$f3 1,0
#		define vex$pp$none 0,0
#		define vex$rm(L,p,mm,w,r,m) vex$rm$1(L,p,mm,w,byte$fromhex(regencode(r)),byte$fromhex(mem$get$base(m)),byte$fromhex(mem$get$index(m)))
#		define vex$rm$1(...) vex$rm$2(__VA_ARGS__)
#		define vex$rm$2(L,p1,p0,m4,m3,m2,m1,m0,w,r7,r6,r5,r4,r3,r2,r1,r0,b7,b6,b5,b4,b3,b2,b1,b0,i7,i6,i5,i4,i3,i2,i1,i0) vex(bit$not(r3),bit$not(i3),bit$not(b3),m4,m3,m2,m1,m0,w,1,1,1,1,L,p1,p0)
#		define vex$rr(L,p,mm,w,r0,r1) vex$rr$1(L,p,mm,w,byte$fromhex(regencode(r0)),byte$fromhex(regencode(r1)))
#		define vex$rr$1(...) vex$rr$2(__VA_ARGS__)
#		define vex$rr$2(L,p1,p0,m4,m3,m2,m1,m0,w,r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0,r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0) vex(bit$not(r0b3),1,bit$not(r1b3),m4,m3,m2,m1,m0,w,1,1,1,1,L,p1,p0)
#		define vex$rrm(L,p,mm,w,r0,r1,m) vex$rrm$1(L,p,mm,w,byte$fromhex(regencode(r0)),byte$fromhex(regencode(r1)),byte$fromhex(mem$get$base(m)),byte$fromhex(mem$get$index(m)))
#		define vex$rrm$1(...) vex$rrm$2(__VA_ARGS__)
#		define vex$rrm$2(L,p1,p0,m4,m3,m2,m1,m0,w,r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0,r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0,b7,b6,b5,b4,b3,b2,b1,b0,i7,i6,i5,i4,i3,i2,i1,i0) vex(bit$not(r0b3),bit$not(i3),bit$not(b3),m4,m3,m2,m1,m0,w,bit$not(r1b3),bit$not(r1b2),bit$not(r1b1),bit$not(r1b0),L,p1,p0)
#		define vex$rrr(L,p,mm,w,r0,r1,r2) vex$rrr$1(L,p,mm,w,byte$fromhex(regencode(r0)),byte$fromhex(regencode(r1)),byte$fromhex(regencode(r2)))
#		define vex$rrr$1(...) vex$rrr$2(__VA_ARGS__)
#		define vex$rrr$2(L,p1,p0,m4,m3,m2,m1,m0,w,r0b7,r0b6,r0b5,r0b4,r0b3,r0b2,r0b1,r0b0,r1b7,r1b6,r1b5,r1b4,r1b3,r1b2,r1b1,r1b0,r2b7,r2b6,r2b5,r2b4,r2b3,r2b2,r2b1,r2b0) vex(bit$not(r0b3),1,bit$not(r2b3),m4,m3,m2,m1,m0,w,bit$not(r1b3),bit$not(r1b2),bit$not(r1b1),bit$not(r1b0),L,p1,p0)
#		define vex$w0 0
#		define vex$w1 1
#		define vex$wig 0
#		define warn$if(...) warn$if$1(__VA_ARGS__)
#		define warn$if$1(...) warn$if$2(__VA_ARGS__)
#		define warn$if$2(c, m) warn$if$3(pragma$if$cond##c, m)
#		define warn$if$3(...) warn$if$4(__VA_ARGS__)
#		define warn$if$4(p, m) p(GCC warning m)
#		define which$creg(...) which$creg$1(__VA_ARGS__)
#		define which$creg$1(...) which$creg$2(__VA_ARGS__)
#		define which$creg$2(state, opd) which$creg$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$creg$3(...) which$creg$4(__VA_ARGS__)
#		define which$creg$4(state, desc, ...) which$creg$of$##desc(state, __VA_ARGS__)
#		define which$dreg(...) which$dreg$1(__VA_ARGS__)
#		define which$dreg$1(...) which$dreg$2(__VA_ARGS__)
#		define which$dreg$2(state, opd) which$dreg$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$dreg$3(...) which$dreg$4(__VA_ARGS__)
#		define which$dreg$4(state, desc, ...) which$dreg$of$##desc(state, __VA_ARGS__)
#		define which$fpreg80(...) which$fpreg80$1(__VA_ARGS__)
#		define which$fpreg80$1(...) which$fpreg80$2(__VA_ARGS__)
#		define which$fpreg80$2(state, opd) which$fpreg80$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$fpreg80$3(...) which$fpreg80$4(__VA_ARGS__)
#		define which$fpreg80$4(state, desc, ...) which$fpreg80$of$##desc(state, __VA_ARGS__)
#		define which$imm08(...) which$imm08$1(__VA_ARGS__)
#		define which$imm08$1(...) which$imm08$2(__VA_ARGS__)
#		define which$imm08$2(state, opd) which$imm08$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$imm08$3(...) which$imm08$4(__VA_ARGS__)
#		define which$imm08$4(state, desc, ...) which$imm08$of$##desc(state, __VA_ARGS__)
#		define which$imm08$of$imm08(state, ...) i08$fromhex(__VA_ARGS__)
#		define which$imm08$of$labeldiff08(state, l0, l1) scast$i32$to$i08(i32$sub(state$get$label(state,i08$fromhex(l0)),state$get$label(state,i08$fromhex(l1))))
#		define which$imm08$of$labeloffset08(state, l0) scast$i32$to$i08(state$get$label(state,i08$fromhex(l0)))
#		define which$imm16(...) which$imm16$1(__VA_ARGS__)
#		define which$imm16$1(...) which$imm16$2(__VA_ARGS__)
#		define which$imm16$2(state, opd) which$imm16$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$imm16$3(...) which$imm16$4(__VA_ARGS__)
#		define which$imm16$4(state, desc, ...) which$imm16$of$##desc(state, __VA_ARGS__)
#		define which$imm16$of$imm08sx16(state, ...) scast$i08$to$i16(i08$fromhex(__VA_ARGS__))
#		define which$imm16$of$imm08zx16(state, ...) ucast$i08$to$i16(i08$fromhex(__VA_ARGS__))
#		define which$imm16$of$imm16(state, ...) i16$fromhex(__VA_ARGS__)
#		define which$imm16$of$labeldiff16(state, l0, l1) scast$i32$to$i16(i32$sub(state$get$label(state,i08$fromhex(l0)),state$get$label(state,i08$fromhex(l1))))
#		define which$imm16$of$labeloffset16(state, l0) scast$i32$to$i16(state$get$label(state,i08$fromhex(l0)))
#		define which$imm32(...) which$imm32$1(__VA_ARGS__)
#		define which$imm32$1(...) which$imm32$2(__VA_ARGS__)
#		define which$imm32$2(state, opd) which$imm32$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$imm32$3(...) which$imm32$4(__VA_ARGS__)
#		define which$imm32$4(state, desc, ...) which$imm32$of$##desc(state, __VA_ARGS__)
#		define which$imm32$of$imm08sx32(state, ...) scast$i08$to$i32(i08$fromhex(__VA_ARGS__))
#		define which$imm32$of$imm08zx32(state, ...) ucast$i08$to$i32(i08$fromhex(__VA_ARGS__))
#		define which$imm32$of$imm16sx32(state, ...) scast$i16$to$i32(i16$fromhex(__VA_ARGS__))
#		define which$imm32$of$imm16zx32(state, ...) ucast$i16$to$i32(i16$fromhex(__VA_ARGS__))
#		define which$imm32$of$imm32(state, ...) i32$fromhex(__VA_ARGS__)
#		define which$imm32$of$labeldiff32(state, l0, l1) scast$i32$to$i32(i32$sub(state$get$label(state,i08$fromhex(l0)),state$get$label(state,i08$fromhex(l1))))
#		define which$imm32$of$labeloffset32(state, l0) scast$i32$to$i32(state$get$label(state,i08$fromhex(l0)))
#		define which$imm64(...) which$imm64$1(__VA_ARGS__)
#		define which$imm64$1(...) which$imm64$2(__VA_ARGS__)
#		define which$imm64$2(state, opd) which$imm64$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$imm64$3(...) which$imm64$4(__VA_ARGS__)
#		define which$imm64$4(state, desc, ...) which$imm64$of$##desc(state, __VA_ARGS__)
#		define which$imm64$of$imm08sx64(state, ...) scast$i08$to$i64(i08$fromhex(__VA_ARGS__))
#		define which$imm64$of$imm08zx64(state, ...) ucast$i08$to$i64(i08$fromhex(__VA_ARGS__))
#		define which$imm64$of$imm16sx64(state, ...) scast$i16$to$i64(i16$fromhex(__VA_ARGS__))
#		define which$imm64$of$imm16zx64(state, ...) ucast$i16$to$i64(i16$fromhex(__VA_ARGS__))
#		define which$imm64$of$imm32sx64(state, ...) scast$i32$to$i64(i32$fromhex(__VA_ARGS__))
#		define which$imm64$of$imm32zx64(state, ...) ucast$i32$to$i64(i32$fromhex(__VA_ARGS__))
#		define which$imm64$of$imm64(state, ...) i64$fromhex(__VA_ARGS__)
#		define which$imm64$of$labeldiff64(state, l0, l1) scast$i32$to$i64(i32$sub(state$get$label(state,i08$fromhex(l0)),state$get$label(state,i08$fromhex(l1))))
#		define which$imm64$of$labeloffset64(state, l0) scast$i32$to$i64(state$get$label(state,i08$fromhex(l0)))
#		define which$mem(...) which$mem$1(__VA_ARGS__)
#		define which$mem$1(...) which$mem$2(__VA_ARGS__)
#		define which$mem$2(state, opd) which$mem$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem$3(...) which$mem$4(__VA_ARGS__)
#		define which$mem$4(state, desc, ...) which$mem$of$##desc(state, __VA_ARGS__)
#		define which$mem08(...) which$mem08$1(__VA_ARGS__)
#		define which$mem08$1(...) which$mem08$2(__VA_ARGS__)
#		define which$mem08$2(state, opd) which$mem08$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem08$3(...) which$mem08$4(__VA_ARGS__)
#		define which$mem08$4(state, desc, ...) which$mem08$of$##desc(state, __VA_ARGS__)
#		define which$mem128(...) which$mem128$1(__VA_ARGS__)
#		define which$mem128$1(...) which$mem128$2(__VA_ARGS__)
#		define which$mem128$2(state, opd) which$mem128$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem128$3(...) which$mem128$4(__VA_ARGS__)
#		define which$mem128$4(state, desc, ...) which$mem128$of$##desc(state, __VA_ARGS__)
#		define which$mem16(...) which$mem16$1(__VA_ARGS__)
#		define which$mem16$1(...) which$mem16$2(__VA_ARGS__)
#		define which$mem16$2(state, opd) which$mem16$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem16$3(...) which$mem16$4(__VA_ARGS__)
#		define which$mem16$4(state, desc, ...) which$mem16$of$##desc(state, __VA_ARGS__)
#		define which$mem256(...) which$mem256$1(__VA_ARGS__)
#		define which$mem256$1(...) which$mem256$2(__VA_ARGS__)
#		define which$mem256$2(state, opd) which$mem256$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem256$3(...) which$mem256$4(__VA_ARGS__)
#		define which$mem256$4(state, desc, ...) which$mem256$of$##desc(state, __VA_ARGS__)
#		define which$mem32(...) which$mem32$1(__VA_ARGS__)
#		define which$mem32$1(...) which$mem32$2(__VA_ARGS__)
#		define which$mem32$2(state, opd) which$mem32$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem32$3(...) which$mem32$4(__VA_ARGS__)
#		define which$mem32$4(state, desc, ...) which$mem32$of$##desc(state, __VA_ARGS__)
#		define which$mem512(...) which$mem512$1(__VA_ARGS__)
#		define which$mem512$1(...) which$mem512$2(__VA_ARGS__)
#		define which$mem512$2(state, opd) which$mem512$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem512$3(...) which$mem512$4(__VA_ARGS__)
#		define which$mem512$4(state, desc, ...) which$mem512$of$##desc(state, __VA_ARGS__)
#		define which$mem64(...) which$mem64$1(__VA_ARGS__)
#		define which$mem64$1(...) which$mem64$2(__VA_ARGS__)
#		define which$mem64$2(state, opd) which$mem64$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem64$3(...) which$mem64$4(__VA_ARGS__)
#		define which$mem64$4(state, desc, ...) which$mem64$of$##desc(state, __VA_ARGS__)
#		define which$mem80(...) which$mem80$1(__VA_ARGS__)
#		define which$mem80$1(...) which$mem80$2(__VA_ARGS__)
#		define which$mem80$2(state, opd) which$mem80$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mem80$3(...) which$mem80$4(__VA_ARGS__)
#		define which$mem80$4(state, desc, ...) which$mem80$of$##desc(state, __VA_ARGS__)
#		define which$mmreg128(...) which$mmreg128$1(__VA_ARGS__)
#		define which$mmreg128$1(...) which$mmreg128$2(__VA_ARGS__)
#		define which$mmreg128$2(state, opd) which$mmreg128$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mmreg128$3(...) which$mmreg128$4(__VA_ARGS__)
#		define which$mmreg128$4(state, desc, ...) which$mmreg128$of$##desc(state, __VA_ARGS__)
#		define which$mmreg256(...) which$mmreg256$1(__VA_ARGS__)
#		define which$mmreg256$1(...) which$mmreg256$2(__VA_ARGS__)
#		define which$mmreg256$2(state, opd) which$mmreg256$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mmreg256$3(...) which$mmreg256$4(__VA_ARGS__)
#		define which$mmreg256$4(state, desc, ...) which$mmreg256$of$##desc(state, __VA_ARGS__)
#		define which$mmreg64(...) which$mmreg64$1(__VA_ARGS__)
#		define which$mmreg64$1(...) which$mmreg64$2(__VA_ARGS__)
#		define which$mmreg64$2(state, opd) which$mmreg64$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$mmreg64$3(...) which$mmreg64$4(__VA_ARGS__)
#		define which$mmreg64$4(state, desc, ...) which$mmreg64$of$##desc(state, __VA_ARGS__)
#		define which$moffs(...) which$moffs$1(__VA_ARGS__)
#		define which$moffs$1(...) which$moffs$2(__VA_ARGS__)
#		define which$moffs$2(state, opd) which$moffs$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$moffs$3(...) which$moffs$4(__VA_ARGS__)
#		define which$moffs$4(state, desc, ...) which$moffs$of$##desc(state, __VA_ARGS__)
#		define which$moffs$of$moffs(state, ...) i64$fromhex(zx8(__VA_ARGS__))
#		define which$reg08(...) which$reg08$1(__VA_ARGS__)
#		define which$reg08$1(...) which$reg08$2(__VA_ARGS__)
#		define which$reg08$2(state, opd) which$reg08$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$reg08$3(...) which$reg08$4(__VA_ARGS__)
#		define which$reg08$4(state, desc, ...) which$reg08$of$##desc(state, __VA_ARGS__)
#		define which$reg16(...) which$reg16$1(__VA_ARGS__)
#		define which$reg16$1(...) which$reg16$2(__VA_ARGS__)
#		define which$reg16$2(state, opd) which$reg16$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$reg16$3(...) which$reg16$4(__VA_ARGS__)
#		define which$reg16$4(state, desc, ...) which$reg16$of$##desc(state, __VA_ARGS__)
#		define which$reg32(...) which$reg32$1(__VA_ARGS__)
#		define which$reg32$1(...) which$reg32$2(__VA_ARGS__)
#		define which$reg32$2(state, opd) which$reg32$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$reg32$3(...) which$reg32$4(__VA_ARGS__)
#		define which$reg32$4(state, desc, ...) which$reg32$of$##desc(state, __VA_ARGS__)
#		define which$reg64(...) which$reg64$1(__VA_ARGS__)
#		define which$reg64$1(...) which$reg64$2(__VA_ARGS__)
#		define which$reg64$2(state, opd) which$reg64$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$reg64$3(...) which$reg64$4(__VA_ARGS__)
#		define which$reg64$4(state, desc, ...) which$reg64$of$##desc(state, __VA_ARGS__)
#		define which$rel32(...) which$rel32$1(__VA_ARGS__)
#		define which$rel32$1(...) which$rel32$2(__VA_ARGS__)
#		define which$rel32$2(state, opd) which$rel32$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$rel32$3(...) which$rel32$4(__VA_ARGS__)
#		define which$rel32$4(state, desc, ...) which$rel32$of$##desc(state, __VA_ARGS__)
#		define which$rel32$of$label(...) which$rel32$of$label$1(__VA_ARGS__)
#		define which$rel32$of$label$1(...) which$rel32$of$label$2(__VA_ARGS__)
#		define which$rel32$of$label$2(state, ...) i32$sub(state$get$label(state, i08$fromhex(__VA_ARGS__)), state$get$offset(state))
#		define which$rel32$of$rel32(...) i32$fromhex(__VA_ARGS__)
#		define which$segm(...) which$segm$1(__VA_ARGS__)
#		define which$segm$1(...) which$segm$2(__VA_ARGS__)
#		define which$segm$2(state, opd) which$segm$3(state, operand$getdesc(opd), operand$getargs(opd))
#		define which$segm$3(...) which$segm$4(__VA_ARGS__)
#		define which$segm$4(state, desc, ...) which$segm$of$##desc(state, __VA_ARGS__)
#		define word bits(16)
#		define xmm0 mmreg128(XMM0)
#		define xmm1 mmreg128(XMM1)
#		define xmm10 mmreg128(XMM10)
#		define xmm11 mmreg128(XMM11)
#		define xmm12 mmreg128(XMM12)
#		define xmm13 mmreg128(XMM13)
#		define xmm14 mmreg128(XMM14)
#		define xmm15 mmreg128(XMM15)
#		define xmm2 mmreg128(XMM2)
#		define xmm3 mmreg128(XMM3)
#		define xmm4 mmreg128(XMM4)
#		define xmm5 mmreg128(XMM5)
#		define xmm6 mmreg128(XMM6)
#		define xmm7 mmreg128(XMM7)
#		define xmm8 mmreg128(XMM8)
#		define xmm9 mmreg128(XMM9)
#		define ymm0 mmreg256(YMM0)
#		define ymm1 mmreg256(YMM1)
#		define ymm10 mmreg256(YMM10)
#		define ymm11 mmreg256(YMM11)
#		define ymm12 mmreg256(YMM12)
#		define ymm13 mmreg256(YMM13)
#		define ymm14 mmreg256(YMM14)
#		define ymm15 mmreg256(YMM15)
#		define ymm2 mmreg256(YMM2)
#		define ymm3 mmreg256(YMM3)
#		define ymm4 mmreg256(YMM4)
#		define ymm5 mmreg256(YMM5)
#		define ymm6 mmreg256(YMM6)
#		define ymm7 mmreg256(YMM7)
#		define ymm8 mmreg256(YMM8)
#		define ymm9 mmreg256(YMM9)
#		define zx4(...) zx4$1(count(__VA_ARGS__), __VA_ARGS__)
#		define zx4$1(...) zx4$2(__VA_ARGS__)
#		define zx4$2(n,...) zx4$from##n(__VA_ARGS__)
#		define zx4$from01(...) 00,00,00,__VA_ARGS__
#		define zx4$from02(...) 00,00,__VA_ARGS__
#		define zx4$from03(...) 00,__VA_ARGS__
#		define zx4$from04(...) __VA_ARGS__
#		define zx8(...) zx8$1(count(__VA_ARGS__), __VA_ARGS__)
#		define zx8$1(...) zx8$2(__VA_ARGS__)
#		define zx8$2(n,...) zx8$from##n(__VA_ARGS__)
#		define zx8$from01(...) 00,00,00,00,00,00,00,__VA_ARGS__
#		define zx8$from02(...) 00,00,00,00,00,00,__VA_ARGS__
#		define zx8$from03(...) 00,00,00,00,00,__VA_ARGS__
#		define zx8$from04(...) 00,00,00,00,__VA_ARGS__
#		define zx8$from05(...) 00,00,00,__VA_ARGS__
#		define zx8$from06(...) 00,00,__VA_ARGS__
#		define zx8$from07(...) 00,__VA_ARGS__
#		define zx8$from08(...) __VA_ARGS__
#	endif // ppasm$included
#else
#	error "scared."
#endif
